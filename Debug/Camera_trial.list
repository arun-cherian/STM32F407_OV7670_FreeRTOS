
Camera_trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ba0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08014d30  08014d30  00015d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801598c  0801598c  000172d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801598c  0801598c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015994  08015994  000172d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015994  08015994  00016994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015998  08015998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0801599c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000172d0  2**0
                  CONTENTS
 10 .bss          0001e770  200002e0  200002e0  000172e0  2**5
                  ALLOC
 11 ._user_heap_stack 00000600  2001ea50  2001ea50  000172e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000172d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028276  00000000  00000000  00017300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b96  00000000  00000000  0003f576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002048  00000000  00000000  00046110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001889  00000000  00000000  00048158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b48e  00000000  00000000  000499e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031a5b  00000000  00000000  00074e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de7b8  00000000  00000000  000a68ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00185082  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009444  00000000  00000000  001850c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0018e50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014d18 	.word	0x08014d18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	08014d18 	.word	0x08014d18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee4:	2b80      	cmp	r3, #128	@ 0x80
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf0c      	ite	eq
 8000f0e:	2301      	moveq	r3, #1
 8000f10:	2300      	movne	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	bf0c      	ite	eq
 8000f34:	2301      	moveq	r3, #1
 8000f36:	2300      	movne	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	611a      	str	r2, [r3, #16]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <OV7670_init>:
    }

    return false;  // false = success
}

bool OV7670_init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0


   uint8_t data, i = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
   bool err = false;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73bb      	strb	r3, [r7, #14]
   for(i = 0; i <sizeof(OV7670_reg) / sizeof(OV7670_reg[0]); i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e08c      	b.n	8001102 <OV7670_init+0x12e>
      data = OV7670_reg[i][1];
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	4a4a      	ldr	r2, [pc, #296]	@ (8001114 <OV7670_init+0x140>)
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	71fb      	strb	r3, [r7, #7]
      // Note the direct passing of 'data', not its address
      uint32_t timeout;

      printf("loaded data %d %d\r\n", OV7670_reg[i][0], data);
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	4a47      	ldr	r2, [pc, #284]	@ (8001114 <OV7670_init+0x140>)
 8000ff8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	461a      	mov	r2, r3
 8001002:	4845      	ldr	r0, [pc, #276]	@ (8001118 <OV7670_init+0x144>)
 8001004:	f011 feac 	bl	8012d60 <iprintf>

      LL_I2C_GenerateStartCondition(I2C1);
 8001008:	4844      	ldr	r0, [pc, #272]	@ (800111c <OV7670_init+0x148>)
 800100a:	f7ff ffaf 	bl	8000f6c <LL_I2C_GenerateStartCondition>

      timeout = 0xFFFF;
 800100e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001012:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_SB(I2C1)) {
 8001014:	e007      	b.n	8001026 <OV7670_init+0x52>
          if (--timeout == 0) return true;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3b01      	subs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <OV7670_init+0x52>
 8001022:	2301      	movs	r3, #1
 8001024:	e072      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_SB(I2C1)) {
 8001026:	483d      	ldr	r0, [pc, #244]	@ (800111c <OV7670_init+0x148>)
 8001028:	f7ff ff7a 	bl	8000f20 <LL_I2C_IsActiveFlag_SB>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f1      	beq.n	8001016 <OV7670_init+0x42>
      }

      LL_I2C_TransmitData8(I2C1, OV7670_I2C_ADDR << 1);  // write mode
 8001032:	2142      	movs	r1, #66	@ 0x42
 8001034:	4839      	ldr	r0, [pc, #228]	@ (800111c <OV7670_init+0x148>)
 8001036:	f7ff ffb9 	bl	8000fac <LL_I2C_TransmitData8>

      timeout = 0xFFFF;
 800103a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800103e:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 8001040:	e007      	b.n	8001052 <OV7670_init+0x7e>
          if (--timeout == 0) return true;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3b01      	subs	r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <OV7670_init+0x7e>
 800104e:	2301      	movs	r3, #1
 8001050:	e05c      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 8001052:	4832      	ldr	r0, [pc, #200]	@ (800111c <OV7670_init+0x148>)
 8001054:	f7ff ff77 	bl	8000f46 <LL_I2C_IsActiveFlag_ADDR>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f1      	beq.n	8001042 <OV7670_init+0x6e>
      }
      (void)I2C1->SR2;  // clear ADDR flag
 800105e:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <OV7670_init+0x148>)
 8001060:	699b      	ldr	r3, [r3, #24]

      LL_I2C_TransmitData8(I2C1, OV7670_reg[i][0]);
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <OV7670_init+0x140>)
 8001066:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800106a:	4619      	mov	r1, r3
 800106c:	482b      	ldr	r0, [pc, #172]	@ (800111c <OV7670_init+0x148>)
 800106e:	f7ff ff9d 	bl	8000fac <LL_I2C_TransmitData8>
      timeout = 0xFFFF;
 8001072:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001076:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 8001078:	e007      	b.n	800108a <OV7670_init+0xb6>
          if (--timeout == 0) return true;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3b01      	subs	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <OV7670_init+0xb6>
 8001086:	2301      	movs	r3, #1
 8001088:	e040      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 800108a:	4824      	ldr	r0, [pc, #144]	@ (800111c <OV7670_init+0x148>)
 800108c:	f7ff ff22 	bl	8000ed4 <LL_I2C_IsActiveFlag_TXE>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f1      	beq.n	800107a <OV7670_init+0xa6>
      }

      LL_I2C_TransmitData8(I2C1, data);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4619      	mov	r1, r3
 800109a:	4820      	ldr	r0, [pc, #128]	@ (800111c <OV7670_init+0x148>)
 800109c:	f7ff ff86 	bl	8000fac <LL_I2C_TransmitData8>
      timeout = 0xFFFF;
 80010a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a4:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 80010a6:	e007      	b.n	80010b8 <OV7670_init+0xe4>
          if (--timeout == 0) return true;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <OV7670_init+0xe4>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e029      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 80010b8:	4818      	ldr	r0, [pc, #96]	@ (800111c <OV7670_init+0x148>)
 80010ba:	f7ff ff0b 	bl	8000ed4 <LL_I2C_IsActiveFlag_TXE>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f1      	beq.n	80010a8 <OV7670_init+0xd4>
      }

      timeout = 0xFFFF;
 80010c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c8:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 80010ca:	e007      	b.n	80010dc <OV7670_init+0x108>
          if (--timeout == 0) return true;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <OV7670_init+0x108>
 80010d8:	2301      	movs	r3, #1
 80010da:	e017      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 80010dc:	480f      	ldr	r0, [pc, #60]	@ (800111c <OV7670_init+0x148>)
 80010de:	f7ff ff0c 	bl	8000efa <LL_I2C_IsActiveFlag_BTF>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f1      	beq.n	80010cc <OV7670_init+0xf8>
      }

      LL_I2C_GenerateStopCondition(I2C1);
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <OV7670_init+0x148>)
 80010ea:	f7ff ff4f 	bl	8000f8c <LL_I2C_GenerateStopCondition>
      err=false;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73bb      	strb	r3, [r7, #14]
      printf("i: %d\r\n",i);
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	4619      	mov	r1, r3
 80010f6:	480a      	ldr	r0, [pc, #40]	@ (8001120 <OV7670_init+0x14c>)
 80010f8:	f011 fe32 	bl	8012d60 <iprintf>
   for(i = 0; i <sizeof(OV7670_reg) / sizeof(OV7670_reg[0]); i++) {
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	3301      	adds	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	2b58      	cmp	r3, #88	@ 0x58
 8001106:	f67f af6f 	bls.w	8000fe8 <OV7670_init+0x14>
   }
	/*uint8_t id;
	if (!SCCB_read_reg(0x0A, &id)) {
	    printf("MIDH: 0x%02X\r\n", id);  // Should be 0x7F for OV7670
	}*/
   return err;
 800110a:	7bbb      	ldrb	r3, [r7, #14]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	0801552c 	.word	0x0801552c
 8001118:	08014d30 	.word	0x08014d30
 800111c:	40005400 	.word	0x40005400
 8001120:	08014d44 	.word	0x08014d44

08001124 <BSP_SD_WriteCpltCallback>:
TaskHandle_t xSDTaskHandle;
uint16_t tx_buffer [LINES_PER_CHUNK * IMG_COLUMNS];
uint16_t rx_buffer[30 * 512];

void BSP_SD_WriteCpltCallback(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]

    // Notify the SD task that a write operation has completed.
    // Using bit 0 (value 0x01) to indicate a write completion.
    xTaskNotifyFromISR(xSDTaskHandle, 0x01, eSetBits, &xHigherPriorityTaskWoken);
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <BSP_SD_WriteCpltCallback+0x3c>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2201      	movs	r2, #1
 800113a:	2101      	movs	r1, #1
 800113c:	f00d fe9c 	bl	800ee78 <xTaskGenericNotifyFromISR>

    // If a higher priority task was woken, yield at the end of the ISR.
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <BSP_SD_WriteCpltCallback+0x32>
 8001146:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <BSP_SD_WriteCpltCallback+0x40>)
 8001148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	f3bf 8f4f 	dsb	sy
 8001152:	f3bf 8f6f 	isb	sy
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200002fc 	.word	0x200002fc
 8001164:	e000ed04 	.word	0xe000ed04

08001168 <BSP_SD_ReadCpltCallback>:
/**
  * @brief Read Transfer complete callback.
  * @retval None
  */
void BSP_SD_ReadCpltCallback(SD_HandleTypeDef *hsd)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]

    // Use the simple "give" function. This just increments the target task's
    // notification counting semaphore.
    if (hUsbStreamTask != NULL)
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <BSP_SD_ReadCpltCallback+0x44>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <BSP_SD_ReadCpltCallback+0x24>
    {
        vTaskNotifyGiveFromISR(hUsbStreamTask, &xHigherPriorityTaskWoken);
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <BSP_SD_ReadCpltCallback+0x44>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f107 020c 	add.w	r2, r7, #12
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f00d ff54 	bl	800f034 <vTaskNotifyGiveFromISR>
    }

    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <BSP_SD_ReadCpltCallback+0x3a>
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <BSP_SD_ReadCpltCallback+0x48>)
 8001194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	f3bf 8f4f 	dsb	sy
 800119e:	f3bf 8f6f 	isb	sy
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20018bb0 	.word	0x20018bb0
 80011b0:	e000ed04 	.word	0xe000ed04

080011b4 <flushFrameChunkQueue>:
void flushFrameChunkQueue() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
    DCMI_Message_t dummy;
    while (xQueueReceive(xFrameChunkQueue, &dummy, 0) == pdTRUE);
 80011ba:	bf00      	nop
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <flushFrameChunkQueue+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	1d39      	adds	r1, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00c f84d 	bl	800d264 <xQueueReceive>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d0f5      	beq.n	80011bc <flushFrameChunkQueue+0x8>
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20018bb8 	.word	0x20018bb8

080011e0 <MeM_to_SD>:

uint8_t* p_frame_buffer = (uint8_t*)frame_buffer;
uint8_t* p_tx_buffer = (uint8_t*)tx_buffer;

void MeM_to_SD(void *argument) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b090      	sub	sp, #64	@ 0x40
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	6078      	str	r0, [r7, #4]
    const TickType_t xTicksToWait = portMAX_DELAY;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    DCMI_Message_t received_message;
    uint32_t sd_write_address = 0; // The block address on the SD card
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	@ 0x34

    for (;;) {
    	xEventGroupWaitBits(appEventGroup, EVENT_BIT_BUTTON_PRESSED, pdTRUE, pdFALSE, xTicksToWait);
 80011f2:	4bb4      	ldr	r3, [pc, #720]	@ (80014c4 <MeM_to_SD+0x2e4>)
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	2201      	movs	r2, #1
 80011fe:	2101      	movs	r1, #1
 8001200:	f00a fe40 	bl	800be84 <xEventGroupWaitBits>
        // 1. Wait for the button press trigger.
        if (xSemaphoreTake(sdCardMutex, portMAX_DELAY) == pdTRUE)
 8001204:	4bb0      	ldr	r3, [pc, #704]	@ (80014c8 <MeM_to_SD+0x2e8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	4618      	mov	r0, r3
 800120e:	f00c f90b 	bl	800d428 <xQueueSemaphoreTake>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	f040 814c 	bne.w	80014b2 <MeM_to_SD+0x2d2>
        {
            xEventGroupSetBits(appEventGroup, EVENT_BIT_VSYNC);
 800121a:	4baa      	ldr	r3, [pc, #680]	@ (80014c4 <MeM_to_SD+0x2e4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2102      	movs	r1, #2
 8001220:	4618      	mov	r0, r3
 8001222:	f00a ff5e 	bl	800c0e2 <xEventGroupSetBits>
			//printf("Button pressed. Starting capture...\r\n");
			sd_write_address = 0; // Reset SD address for the new image.
 8001226:	2300      	movs	r3, #0
 8001228:	637b      	str	r3, [r7, #52]	@ 0x34
			flushFrameChunkQueue();
 800122a:	f7ff ffc3 	bl	80011b4 <flushFrameChunkQueue>

			// 2. Start DCMI and Synchronize with VSYNC.
			DCMI_Start_Capture(frame_buffer, sizeof(frame_buffer));
 800122e:	f44f 31af 	mov.w	r1, #89600	@ 0x15e00
 8001232:	48a6      	ldr	r0, [pc, #664]	@ (80014cc <MeM_to_SD+0x2ec>)
 8001234:	f000 fa8c 	bl	8001750 <DCMI_Start_Capture>
			uint16_t offset;
			//printf("Synchronizing... Waiting for VSYNC.\r\n");
			bool vsync_received = false;
 8001238:	2300      	movs	r3, #0
 800123a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
			while (!vsync_received) {
 800123e:	e016      	b.n	800126e <MeM_to_SD+0x8e>
				if (xQueueReceive(xFrameChunkQueue, &received_message, portMAX_DELAY) == pdPASS) {
 8001240:	4ba3      	ldr	r3, [pc, #652]	@ (80014d0 <MeM_to_SD+0x2f0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f107 0108 	add.w	r1, r7, #8
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	4618      	mov	r0, r3
 800124e:	f00c f809 	bl	800d264 <xQueueReceive>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d10a      	bne.n	800126e <MeM_to_SD+0x8e>
					offset=received_message.value;
 8001258:	7a7b      	ldrb	r3, [r7, #9]
 800125a:	867b      	strh	r3, [r7, #50]	@ 0x32
					if (received_message.type == DCMI_EVENT_VSYNC) {
 800125c:	7a3b      	ldrb	r3, [r7, #8]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d105      	bne.n	800126e <MeM_to_SD+0x8e>
						vsync_received = true;
 8001262:	2301      	movs	r3, #1
 8001264:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
						offset++;
 8001268:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800126a:	3301      	adds	r3, #1
 800126c:	867b      	strh	r3, [r7, #50]	@ 0x32
			while (!vsync_received) {
 800126e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001272:	f083 0301 	eor.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e1      	bne.n	8001240 <MeM_to_SD+0x60>
				}
			}
			//printf("SYNC OK. Capturing full frame.\r\n");

			// 3. Capture & Transfer Loop
			uint16_t lines_since_last_write = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			uint16_t total_lines_processed = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			bool frame_complete = false;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

			while (!frame_complete) {
 800128a:	e0fa      	b.n	8001482 <MeM_to_SD+0x2a2>
				// Wait for a line or VSYNC event from the ISR.
				if (xQueueReceive(xFrameChunkQueue, &received_message, portMAX_DELAY) == pdPASS) {
 800128c:	4b90      	ldr	r3, [pc, #576]	@ (80014d0 <MeM_to_SD+0x2f0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f107 0108 	add.w	r1, r7, #8
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	4618      	mov	r0, r3
 800129a:	f00b ffe3 	bl	800d264 <xQueueReceive>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f040 80ee 	bne.w	8001482 <MeM_to_SD+0x2a2>
					if (received_message.type == DCMI_EVENT_LINE) {
 80012a6:	7a3b      	ldrb	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d16f      	bne.n	800138c <MeM_to_SD+0x1ac>
						lines_since_last_write++;
 80012ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80012ae:	3301      	adds	r3, #1
 80012b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
						total_lines_processed++;
 80012b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012b4:	3301      	adds	r3, #1
 80012b6:	85bb      	strh	r3, [r7, #44]	@ 0x2c

						// --- Check if a chunk is ready to be written ---
						if (lines_since_last_write == LINES_PER_CHUNK) {
 80012b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	f040 80e1 	bne.w	8001482 <MeM_to_SD+0x2a2>
							// A full chunk of lines is now in the DMA buffer. Time to write.

							// This is the starting line index of the chunk we need to read from the circular buffer.
							uint32_t chunk_start_line_idx = (offset+total_lines_processed - LINES_PER_CHUNK) % IMG_ROWS;
 80012c0:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80012c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012c4:	4413      	add	r3, r2
 80012c6:	3b04      	subs	r3, #4
 80012c8:	4a82      	ldr	r2, [pc, #520]	@ (80014d4 <MeM_to_SD+0x2f4>)
 80012ca:	fb82 1203 	smull	r1, r2, r2, r3
 80012ce:	441a      	add	r2, r3
 80012d0:	1191      	asrs	r1, r2, #6
 80012d2:	17da      	asrs	r2, r3, #31
 80012d4:	1a8a      	subs	r2, r1, r2
 80012d6:	2146      	movs	r1, #70	@ 0x46
 80012d8:	fb01 f202 	mul.w	r2, r1, r2
 80012dc:	1a9a      	subs	r2, r3, r2
 80012de:	617a      	str	r2, [r7, #20]

							//printf("Chunk ready. Lines %u-%u. Start index in buffer: %lu\r\n",
								   //total_lines_processed - LINES_PER_CHUNK + 1, total_lines_processed, chunk_start_line_idx);

							// --- Simplified Wrap-Around Logic ---
							uint32_t lines_at_end = IMG_ROWS - chunk_start_line_idx;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 80012e6:	613b      	str	r3, [r7, #16]

							if (lines_at_end >= LINES_PER_CHUNK) {
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d90d      	bls.n	800130a <MeM_to_SD+0x12a>
								// CASE 1: CONTIGUOUS. The whole chunk fits without wrapping.
								//printf("   -> Chunk is contiguous.\r\n");
								HAL_SD_WriteBlocks_DMA(&hsd, &p_frame_buffer[chunk_start_line_idx * IMG_WIDTH_BYTES], sd_write_address, BLOCKS_SD);
 80012ee:	4b7a      	ldr	r3, [pc, #488]	@ (80014d8 <MeM_to_SD+0x2f8>)
 80012f0:	6819      	ldr	r1, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4419      	add	r1, r3
 80012fe:	2305      	movs	r3, #5
 8001300:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001302:	4876      	ldr	r0, [pc, #472]	@ (80014dc <MeM_to_SD+0x2fc>)
 8001304:	f006 faca 	bl	800789c <HAL_SD_WriteBlocks_DMA>
 8001308:	e02e      	b.n	8001368 <MeM_to_SD+0x188>
							} else {
								// CASE 2: WRAP-AROUND. The chunk is split.
								//printf("   -> Chunk has wrapped. Using staging buffer.\r\n");
								uint32_t lines_at_start = LINES_PER_CHUNK - lines_at_end;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f1c3 0304 	rsb	r3, r3, #4
 8001310:	60fb      	str	r3, [r7, #12]

								// 2a. Copy the first part (from the tail of the buffer)
								memcpy(p_tx_buffer, &p_frame_buffer[chunk_start_line_idx * IMG_WIDTH_BYTES], lines_at_end * IMG_WIDTH_BYTES);
 8001312:	4b73      	ldr	r3, [pc, #460]	@ (80014e0 <MeM_to_SD+0x300>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	4b70      	ldr	r3, [pc, #448]	@ (80014d8 <MeM_to_SD+0x2f8>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	4419      	add	r1, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	461a      	mov	r2, r3
 8001332:	f011 fedc 	bl	80130ee <memcpy>

								// 2b. Copy the second part (from the head of the buffer)
								memcpy(&p_tx_buffer[lines_at_end * IMG_WIDTH_BYTES], p_frame_buffer, lines_at_start * IMG_WIDTH_BYTES);
 8001336:	4b6a      	ldr	r3, [pc, #424]	@ (80014e0 <MeM_to_SD+0x300>)
 8001338:	6819      	ldr	r1, [r3, #0]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	18c8      	adds	r0, r1, r3
 8001346:	4b64      	ldr	r3, [pc, #400]	@ (80014d8 <MeM_to_SD+0x2f8>)
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	461a      	mov	r2, r3
 8001356:	f011 feca 	bl	80130ee <memcpy>

								// 2c. Write the now-contiguous staging buffer
								HAL_SD_WriteBlocks_DMA(&hsd, p_tx_buffer, sd_write_address, BLOCKS_SD);
 800135a:	4b61      	ldr	r3, [pc, #388]	@ (80014e0 <MeM_to_SD+0x300>)
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	2305      	movs	r3, #5
 8001360:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001362:	485e      	ldr	r0, [pc, #376]	@ (80014dc <MeM_to_SD+0x2fc>)
 8001364:	f006 fa9a 	bl	800789c <HAL_SD_WriteBlocks_DMA>
							}

							// Wait for the SD card DMA to finish.
							ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	2001      	movs	r0, #1
 800136e:	f00d fc29 	bl	800ebc4 <ulTaskNotifyTake>
							while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 8001372:	bf00      	nop
 8001374:	4859      	ldr	r0, [pc, #356]	@ (80014dc <MeM_to_SD+0x2fc>)
 8001376:	f006 ff71 	bl	800825c <HAL_SD_GetCardState>
 800137a:	4603      	mov	r3, r0
 800137c:	2b04      	cmp	r3, #4
 800137e:	d1f9      	bne.n	8001374 <MeM_to_SD+0x194>
							//printf("   -> SD Write Complete.\r\n");

							// Update state for the next chunk
							sd_write_address +=BLOCKS_SD;
 8001380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001382:	3305      	adds	r3, #5
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
							lines_since_last_write = 0; // Reset for next chunk
 8001386:	2300      	movs	r3, #0
 8001388:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800138a:	e07a      	b.n	8001482 <MeM_to_SD+0x2a2>
						}

						// Check if we've processed all the lines for the image


					} else if (received_message.type == DCMI_EVENT_VSYNC) {
 800138c:	7a3b      	ldrb	r3, [r7, #8]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d177      	bne.n	8001482 <MeM_to_SD+0x2a2>
						if(lines_since_last_write>0){
 8001392:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001394:	2b00      	cmp	r3, #0
 8001396:	d066      	beq.n	8001466 <MeM_to_SD+0x286>
							// This is the starting line index of the chunk we need to read from the circular buffer.
							uint32_t chunk_start_line_idx = (offset+total_lines_processed - lines_since_last_write) % IMG_ROWS;
 8001398:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800139a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800139c:	441a      	add	r2, r3
 800139e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a4c      	ldr	r2, [pc, #304]	@ (80014d4 <MeM_to_SD+0x2f4>)
 80013a4:	fb82 1203 	smull	r1, r2, r2, r3
 80013a8:	441a      	add	r2, r3
 80013aa:	1191      	asrs	r1, r2, #6
 80013ac:	17da      	asrs	r2, r3, #31
 80013ae:	1a8a      	subs	r2, r1, r2
 80013b0:	2146      	movs	r1, #70	@ 0x46
 80013b2:	fb01 f202 	mul.w	r2, r1, r2
 80013b6:	1a9a      	subs	r2, r3, r2
 80013b8:	623a      	str	r2, [r7, #32]

							//printf("Chunk ready. Lines %u-%u. Start index in buffer: %lu\r\n",
							//	   total_lines_processed - lines_since_last_write + 1, total_lines_processed, chunk_start_line_idx);

							// --- Simplified Wrap-Around Logic ---
							uint32_t lines_at_end = IMG_ROWS - chunk_start_line_idx-1;
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	f1c3 0345 	rsb	r3, r3, #69	@ 0x45
 80013c0:	61fb      	str	r3, [r7, #28]

							if (lines_at_end >= lines_since_last_write) {
 80013c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d30d      	bcc.n	80013e6 <MeM_to_SD+0x206>
								// CASE 1: CONTIGUOUS. The whole chunk fits without wrapping.
								//printf("   -> Chunk is contiguous.\r\n");
								HAL_SD_WriteBlocks_DMA(&hsd, &p_frame_buffer[chunk_start_line_idx * IMG_WIDTH_BYTES], sd_write_address, BLOCKS_SD);
 80013ca:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <MeM_to_SD+0x2f8>)
 80013cc:	6819      	ldr	r1, [r3, #0]
 80013ce:	6a3a      	ldr	r2, [r7, #32]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	4419      	add	r1, r3
 80013da:	2305      	movs	r3, #5
 80013dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013de:	483f      	ldr	r0, [pc, #252]	@ (80014dc <MeM_to_SD+0x2fc>)
 80013e0:	f006 fa5c 	bl	800789c <HAL_SD_WriteBlocks_DMA>
 80013e4:	e02d      	b.n	8001442 <MeM_to_SD+0x262>
							} else {
								// CASE 2: WRAP-AROUND. The chunk is split.
								//printf("   -> Chunk has wrapped. Using staging buffer.\r\n");
								uint32_t lines_at_start = lines_since_last_write - lines_at_end;
 80013e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	61bb      	str	r3, [r7, #24]

								// 2a. Copy the first part (from the tail of the buffer)
								memcpy(p_tx_buffer, &p_frame_buffer[chunk_start_line_idx * IMG_WIDTH_BYTES], lines_at_end * IMG_WIDTH_BYTES);
 80013ee:	4b3c      	ldr	r3, [pc, #240]	@ (80014e0 <MeM_to_SD+0x300>)
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <MeM_to_SD+0x2f8>)
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	6a3a      	ldr	r2, [r7, #32]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	4419      	add	r1, r3
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	461a      	mov	r2, r3
 800140e:	f011 fe6e 	bl	80130ee <memcpy>

								// 2b. Copy the second part (from the head of the buffer)
								memcpy(&p_tx_buffer[lines_at_end * IMG_WIDTH_BYTES], frame_buffer, lines_at_start * IMG_WIDTH_BYTES);
 8001412:	4b33      	ldr	r3, [pc, #204]	@ (80014e0 <MeM_to_SD+0x300>)
 8001414:	6819      	ldr	r1, [r3, #0]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	18c8      	adds	r0, r1, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	461a      	mov	r2, r3
 800142e:	4927      	ldr	r1, [pc, #156]	@ (80014cc <MeM_to_SD+0x2ec>)
 8001430:	f011 fe5d 	bl	80130ee <memcpy>

								// 2c. Write the now-contiguous staging buffer
								HAL_SD_WriteBlocks_DMA(&hsd, p_tx_buffer, sd_write_address, BLOCKS_SD);
 8001434:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <MeM_to_SD+0x300>)
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	2305      	movs	r3, #5
 800143a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800143c:	4827      	ldr	r0, [pc, #156]	@ (80014dc <MeM_to_SD+0x2fc>)
 800143e:	f006 fa2d 	bl	800789c <HAL_SD_WriteBlocks_DMA>
							}

							// Wait for the SD card DMA to finish.
							ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001442:	f04f 31ff 	mov.w	r1, #4294967295
 8001446:	2001      	movs	r0, #1
 8001448:	f00d fbbc 	bl	800ebc4 <ulTaskNotifyTake>
							while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 800144c:	bf00      	nop
 800144e:	4823      	ldr	r0, [pc, #140]	@ (80014dc <MeM_to_SD+0x2fc>)
 8001450:	f006 ff04 	bl	800825c <HAL_SD_GetCardState>
 8001454:	4603      	mov	r3, r0
 8001456:	2b04      	cmp	r3, #4
 8001458:	d1f9      	bne.n	800144e <MeM_to_SD+0x26e>
							//printf("   -> SD Write Complete.\r\n");

							// Update state for the next chunk
							sd_write_address +=lines_since_last_write;
 800145a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800145c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800145e:	4413      	add	r3, r2
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34
							lines_since_last_write = 0; // Reset for next chunk
 8001462:	2300      	movs	r3, #0
 8001464:	85fb      	strh	r3, [r7, #46]	@ 0x2e
							// This VSYNC marks the end of our complete frame.

						}
						frame_complete = true;
 8001466:	2301      	movs	r3, #1
 8001468:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
						printf("VSYNC marked end of frame. Total lines processed: %u\r\n", total_lines_processed);
 800146c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800146e:	4619      	mov	r1, r3
 8001470:	481c      	ldr	r0, [pc, #112]	@ (80014e4 <MeM_to_SD+0x304>)
 8001472:	f011 fc75 	bl	8012d60 <iprintf>
						xEventGroupClearBits(appEventGroup, EVENT_BIT_VSYNC);
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <MeM_to_SD+0x2e4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2102      	movs	r1, #2
 800147c:	4618      	mov	r0, r3
 800147e:	f00a fdd3 	bl	800c028 <xEventGroupClearBits>
			while (!frame_complete) {
 8001482:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	f47f aefd 	bne.w	800128c <MeM_to_SD+0xac>
					}
				}
			}
			// 4. Stop the capture and clean up
			HAL_DCMI_Stop(&hdcmi);
 8001492:	4815      	ldr	r0, [pc, #84]	@ (80014e8 <MeM_to_SD+0x308>)
 8001494:	f001 fc64 	bl	8002d60 <HAL_DCMI_Stop>
			HAL_DMA_Abort(&hdma_dcmi);
 8001498:	4814      	ldr	r0, [pc, #80]	@ (80014ec <MeM_to_SD+0x30c>)
 800149a:	f001 ffb1 	bl	8003400 <HAL_DMA_Abort>

			xTaskNotify(hUsbStreamTask, 0x01, eSetBits);
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MeM_to_SD+0x310>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2201      	movs	r2, #1
 80014a6:	2101      	movs	r1, #1
 80014a8:	f00d fc2e 	bl	800ed08 <xTaskGenericNotify>
			printf("Capture complete. Waiting for next button press.\r\n");
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <MeM_to_SD+0x314>)
 80014ae:	f011 fcbf 	bl	8012e30 <puts>
    }
		xSemaphoreGive(sdCardMutex);
 80014b2:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <MeM_to_SD+0x2e8>)
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	f00b fd32 	bl	800cf24 <xQueueGenericSend>
    	xEventGroupWaitBits(appEventGroup, EVENT_BIT_BUTTON_PRESSED, pdTRUE, pdFALSE, xTicksToWait);
 80014c0:	e697      	b.n	80011f2 <MeM_to_SD+0x12>
 80014c2:	bf00      	nop
 80014c4:	20018bb4 	.word	0x20018bb4
 80014c8:	20018bc0 	.word	0x20018bc0
 80014cc:	20002700 	.word	0x20002700
 80014d0:	20018bb8 	.word	0x20018bb8
 80014d4:	ea0ea0eb 	.word	0xea0ea0eb
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20018cb8 	.word	0x20018cb8
 80014e0:	20000004 	.word	0x20000004
 80014e4:	08014d4c 	.word	0x08014d4c
 80014e8:	20018bc4 	.word	0x20018bc4
 80014ec:	20018c04 	.word	0x20018c04
 80014f0:	20018bb0 	.word	0x20018bb0
 80014f4:	08014d84 	.word	0x08014d84

080014f8 <USBStreamFromSDTask>:
 * @brief  Waits for a notification, then reads an image from the SD card in chunks
 *         and streams it over USB CDC.
 * @param  argument: Not used in this implementation.
 */
void USBStreamFromSDTask(void *argument)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b092      	sub	sp, #72	@ 0x48
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	6078      	str	r0, [r7, #4]
    // Store our own task handle so the ISR can notify us.
    hUsbStreamTask = xTaskGetCurrentTaskHandle();
 8001500:	f00d f978 	bl	800e7f4 <xTaskGetCurrentTaskHandle>
 8001504:	4603      	mov	r3, r0
 8001506:	4a7d      	ldr	r2, [pc, #500]	@ (80016fc <USBStreamFromSDTask+0x204>)
 8001508:	6013      	str	r3, [r2, #0]
        // =========================================================================
        // STEP 1: WAIT FOR THE "GO" SIGNAL FROM ANOTHER TASK
        // The task sleeps here consuming no CPU until another task calls
        // xTaskNotifyGive(hUsbStreamTask).
        // =========================================================================
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800150a:	f04f 31ff 	mov.w	r1, #4294967295
 800150e:	2001      	movs	r0, #1
 8001510:	f00d fb58 	bl	800ebc4 <ulTaskNotifyTake>

        printf("\n>>> [USBStream] Notification received. Attempting to lock SD card...\r\n");
 8001514:	487a      	ldr	r0, [pc, #488]	@ (8001700 <USBStreamFromSDTask+0x208>)
 8001516:	f011 fc8b 	bl	8012e30 <puts>

        // =========================================================================
        // STEP 2: ACQUIRE THE MUTEX TO GAIN EXCLUSIVE ACCESS TO THE SD CARD
        // =========================================================================
        if (xSemaphoreTake(sdCardMutex, portMAX_DELAY) == pdTRUE)
 800151a:	4b7a      	ldr	r3, [pc, #488]	@ (8001704 <USBStreamFromSDTask+0x20c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f04f 31ff 	mov.w	r1, #4294967295
 8001522:	4618      	mov	r0, r3
 8001524:	f00b ff80 	bl	800d428 <xQueueSemaphoreTake>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d1ed      	bne.n	800150a <USBStreamFromSDTask+0x12>
        {
            printf("[USBStream] Mutex Acquired. Starting stream.\r\n");
 800152e:	4876      	ldr	r0, [pc, #472]	@ (8001708 <USBStreamFromSDTask+0x210>)
 8001530:	f011 fc7e 	bl	8012e30 <puts>
            printf("[USBStream] Target image size: %lu bytes.\r\n", (uint32_t)IMAGE_SIZE_BYTES);
 8001534:	f44f 317a 	mov.w	r1, #256000	@ 0x3e800
 8001538:	4874      	ldr	r0, [pc, #464]	@ (800170c <USBStreamFromSDTask+0x214>)
 800153a:	f011 fc11 	bl	8012d60 <iprintf>

            // --- Initialize state for this transfer ---
            uint32_t total_bytes_sent = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uint32_t sd_read_address_blocks = 0; // Start reading from block 0
 8001542:	2300      	movs	r3, #0
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t loop_iteration = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	637b      	str	r3, [r7, #52]	@ 0x34

            // Start timing the transfer
            uint32_t start_time = DWT->CYCCNT;
 800154a:	4b71      	ldr	r3, [pc, #452]	@ (8001710 <USBStreamFromSDTask+0x218>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28

            // Send a Start-of-Frame marker to the PC application
            const char* sof_marker = "START";
 8001550:	4b70      	ldr	r3, [pc, #448]	@ (8001714 <USBStreamFromSDTask+0x21c>)
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
            while (CDC_Transmit_FS((uint8_t*)sof_marker, strlen(sof_marker)) != USBD_OK)
 8001554:	e007      	b.n	8001566 <USBStreamFromSDTask+0x6e>
            {
                taskYIELD(); // Let other tasks run if USB is busy
 8001556:	4b70      	ldr	r3, [pc, #448]	@ (8001718 <USBStreamFromSDTask+0x220>)
 8001558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	f3bf 8f6f 	isb	sy
            while (CDC_Transmit_FS((uint8_t*)sof_marker, strlen(sof_marker)) != USBD_OK)
 8001566:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001568:	f7fe fe82 	bl	8000270 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	b29b      	uxth	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001574:	f010 fa80 	bl	8011a78 <CDC_Transmit_FS>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1eb      	bne.n	8001556 <USBStreamFromSDTask+0x5e>

            // =========================================================================
            // STEP 3: MAIN TRANSFER LOOP
            // Read one chunk from SD, wait for DMA, send over USB. Repeat.
            // =========================================================================
            while (total_bytes_sent < IMAGE_SIZE_BYTES)
 800157e:	e070      	b.n	8001662 <USBStreamFromSDTask+0x16a>
            {
                printf("\r\n--- [USBStream] Iteration %lu ---\r\n", loop_iteration);
 8001580:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001582:	4866      	ldr	r0, [pc, #408]	@ (800171c <USBStreamFromSDTask+0x224>)
 8001584:	f011 fbec 	bl	8012d60 <iprintf>

                // A: Calculate the size of the next chunk to read from the SD card
                uint32_t bytes_to_read = IMAGE_SIZE_BYTES - total_bytes_sent;
 8001588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800158a:	f5c3 337a 	rsb	r3, r3, #256000	@ 0x3e800
 800158e:	633b      	str	r3, [r7, #48]	@ 0x30
                if (bytes_to_read > SD_READ_BUFFER_SIZE_BYTES) {
 8001590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001596:	d902      	bls.n	800159e <USBStreamFromSDTask+0xa6>
                    bytes_to_read = SD_READ_BUFFER_SIZE_BYTES;
 8001598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159c:	633b      	str	r3, [r7, #48]	@ 0x30
                }
                uint32_t blocks_to_read = bytes_to_read / 512;
 800159e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a0:	0a5b      	lsrs	r3, r3, #9
 80015a2:	623b      	str	r3, [r7, #32]
                printf("[USBStream] Preparing to read %lu bytes (%lu blocks) from SD address %lu.\r\n",
 80015a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a6:	6a3a      	ldr	r2, [r7, #32]
 80015a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015aa:	485d      	ldr	r0, [pc, #372]	@ (8001720 <USBStreamFromSDTask+0x228>)
 80015ac:	f011 fbd8 	bl	8012d60 <iprintf>
                       bytes_to_read, blocks_to_read, sd_read_address_blocks);

                // B: Start the non-blocking SD Card DMA Read
                HAL_StatusTypeDef result = HAL_SD_ReadBlocks_DMA(&hsd, sd_read_buffer, sd_read_address_blocks, blocks_to_read);
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015b4:	495b      	ldr	r1, [pc, #364]	@ (8001724 <USBStreamFromSDTask+0x22c>)
 80015b6:	485c      	ldr	r0, [pc, #368]	@ (8001728 <USBStreamFromSDTask+0x230>)
 80015b8:	f006 f88e 	bl	80076d8 <HAL_SD_ReadBlocks_DMA>
 80015bc:	4603      	mov	r3, r0
 80015be:	77fb      	strb	r3, [r7, #31]
                if (result != HAL_OK) {
 80015c0:	7ffb      	ldrb	r3, [r7, #31]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <USBStreamFromSDTask+0xd6>
                    printf("FATAL [USBStream]: HAL_SD_ReadBlocks_DMA() failed to START! Aborting.\r\n");
 80015c6:	4859      	ldr	r0, [pc, #356]	@ (800172c <USBStreamFromSDTask+0x234>)
 80015c8:	f011 fc32 	bl	8012e30 <puts>
                    break; // Exit the while loop
 80015cc:	e04d      	b.n	800166a <USBStreamFromSDTask+0x172>
                }

                // C: Wait efficiently for the DMA to complete. The task sleeps until the
                //    HAL_SD_RxCpltCallback ISR sends a notification.
                if (ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(5000)) == 0) {
 80015ce:	f241 3188 	movw	r1, #5000	@ 0x1388
 80015d2:	2001      	movs	r0, #1
 80015d4:	f00d faf6 	bl	800ebc4 <ulTaskNotifyTake>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <USBStreamFromSDTask+0xf4>
                    printf("FATAL [USBStream]: Timed out waiting for SD Read DMA completion!\r\n");
 80015de:	4854      	ldr	r0, [pc, #336]	@ (8001730 <USBStreamFromSDTask+0x238>)
 80015e0:	f011 fc26 	bl	8012e30 <puts>
                    HAL_SD_Abort(&hsd); // Clean up the failed DMA
 80015e4:	4850      	ldr	r0, [pc, #320]	@ (8001728 <USBStreamFromSDTask+0x230>)
 80015e6:	f006 fe59 	bl	800829c <HAL_SD_Abort>
                    break; // Exit the while loop
 80015ea:	e03e      	b.n	800166a <USBStreamFromSDTask+0x172>
                }

                // D: If we get here, the DMA is done. Stream the buffer over USB.
                printf("[USBStream] DMA Read complete. Streaming %lu bytes to USB...\r\n", bytes_to_read);
 80015ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015ee:	4851      	ldr	r0, [pc, #324]	@ (8001734 <USBStreamFromSDTask+0x23c>)
 80015f0:	f011 fbb6 	bl	8012d60 <iprintf>
                uint32_t ptr = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                while (ptr < bytes_to_read)
 80015f8:	e021      	b.n	800163e <USBStreamFromSDTask+0x146>
                {
                    const uint16_t usb_packet_size = 64; // USB FS Max Packet Size
 80015fa:	2340      	movs	r3, #64	@ 0x40
 80015fc:	83bb      	strh	r3, [r7, #28]
                    uint16_t size_to_send = (bytes_to_read - ptr > usb_packet_size) ? usb_packet_size : (bytes_to_read - ptr);
 80015fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001602:	1ad2      	subs	r2, r2, r3
 8001604:	8bbb      	ldrh	r3, [r7, #28]
 8001606:	4293      	cmp	r3, r2
 8001608:	bf28      	it	cs
 800160a:	4613      	movcs	r3, r2
 800160c:	837b      	strh	r3, [r7, #26]
                    while (CDC_Transmit_FS(&sd_read_buffer[ptr], size_to_send) != USBD_OK) {
 800160e:	e007      	b.n	8001620 <USBStreamFromSDTask+0x128>
                        taskYIELD(); // USB is busy, yield CPU
 8001610:	4b41      	ldr	r3, [pc, #260]	@ (8001718 <USBStreamFromSDTask+0x220>)
 8001612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	f3bf 8f4f 	dsb	sy
 800161c:	f3bf 8f6f 	isb	sy
                    while (CDC_Transmit_FS(&sd_read_buffer[ptr], size_to_send) != USBD_OK) {
 8001620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001622:	4a40      	ldr	r2, [pc, #256]	@ (8001724 <USBStreamFromSDTask+0x22c>)
 8001624:	4413      	add	r3, r2
 8001626:	8b7a      	ldrh	r2, [r7, #26]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f010 fa24 	bl	8011a78 <CDC_Transmit_FS>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ec      	bne.n	8001610 <USBStreamFromSDTask+0x118>
                    }
                    ptr += size_to_send;
 8001636:	8b7b      	ldrh	r3, [r7, #26]
 8001638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800163a:	4413      	add	r3, r2
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                while (ptr < bytes_to_read)
 800163e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001642:	429a      	cmp	r2, r3
 8001644:	d3d9      	bcc.n	80015fa <USBStreamFromSDTask+0x102>
                }
                printf("[USBStream] ...USB chunk sent.\r\n");
 8001646:	483c      	ldr	r0, [pc, #240]	@ (8001738 <USBStreamFromSDTask+0x240>)
 8001648:	f011 fbf2 	bl	8012e30 <puts>

                // E: Update progress counters for the next loop
                total_bytes_sent += bytes_to_read;
 800164c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800164e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001650:	4413      	add	r3, r2
 8001652:	63fb      	str	r3, [r7, #60]	@ 0x3c
                sd_read_address_blocks += blocks_to_read;
 8001654:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	4413      	add	r3, r2
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
                loop_iteration++;
 800165c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800165e:	3301      	adds	r3, #1
 8001660:	637b      	str	r3, [r7, #52]	@ 0x34
            while (total_bytes_sent < IMAGE_SIZE_BYTES)
 8001662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001664:	f5b3 3f7a 	cmp.w	r3, #256000	@ 0x3e800
 8001668:	d38a      	bcc.n	8001580 <USBStreamFromSDTask+0x88>
            } // End of while(total_bytes_sent < IMAGE_SIZE_BYTES)

            // F: Finalize and print statistics
            uint32_t end_time = DWT->CYCCNT;
 800166a:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <USBStreamFromSDTask+0x218>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	617b      	str	r3, [r7, #20]
            float time_ms = (end_time - start_time) / (SystemCoreClock / 1000.0f);
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800167e:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <USBStreamFromSDTask+0x244>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168a:	ed9f 6a2d 	vldr	s12, [pc, #180]	@ 8001740 <USBStreamFromSDTask+0x248>
 800168e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001696:	edc7 7a04 	vstr	s15, [r7, #16]
            float speed_kbps = (total_bytes_sent / 1024.0f) / (time_ms / 1000.0f);
 800169a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001744 <USBStreamFromSDTask+0x24c>
 80016a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b0:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8001740 <USBStreamFromSDTask+0x248>
 80016b4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80016b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016bc:	edc7 7a03 	vstr	s15, [r7, #12]
            printf("\n>>> [USBStream] Stream Complete. Total Sent: %lu bytes, Time: %.2f ms, Speed: %.2f KB/s <<<\r\n",
 80016c0:	6938      	ldr	r0, [r7, #16]
 80016c2:	f7fe ff41 	bl	8000548 <__aeabi_f2d>
 80016c6:	4604      	mov	r4, r0
 80016c8:	460d      	mov	r5, r1
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f7fe ff3c 	bl	8000548 <__aeabi_f2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	e9cd 2300 	strd	r2, r3, [sp]
 80016d8:	4622      	mov	r2, r4
 80016da:	462b      	mov	r3, r5
 80016dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80016de:	481a      	ldr	r0, [pc, #104]	@ (8001748 <USBStreamFromSDTask+0x250>)
 80016e0:	f011 fb3e 	bl	8012d60 <iprintf>
                   total_bytes_sent, time_ms, speed_kbps);

            // =========================================================================
            // STEP 4: RELEASE THE MUTEX SO OTHER TASKS CAN USE THE SD CARD
            // =========================================================================
            xSemaphoreGive(sdCardMutex);
 80016e4:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <USBStreamFromSDTask+0x20c>)
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	f00b fc19 	bl	800cf24 <xQueueGenericSend>
            printf("[USBStream] Mutex Released.\r\n");
 80016f2:	4816      	ldr	r0, [pc, #88]	@ (800174c <USBStreamFromSDTask+0x254>)
 80016f4:	f011 fb9c 	bl	8012e30 <puts>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80016f8:	e707      	b.n	800150a <USBStreamFromSDTask+0x12>
 80016fa:	bf00      	nop
 80016fc:	20018bb0 	.word	0x20018bb0
 8001700:	08014fbc 	.word	0x08014fbc
 8001704:	20018bc0 	.word	0x20018bc0
 8001708:	08015004 	.word	0x08015004
 800170c:	08015034 	.word	0x08015034
 8001710:	e0001000 	.word	0xe0001000
 8001714:	08015060 	.word	0x08015060
 8001718:	e000ed04 	.word	0xe000ed04
 800171c:	08015068 	.word	0x08015068
 8001720:	08015090 	.word	0x08015090
 8001724:	20001700 	.word	0x20001700
 8001728:	20018cb8 	.word	0x20018cb8
 800172c:	080150dc 	.word	0x080150dc
 8001730:	08015124 	.word	0x08015124
 8001734:	08015168 	.word	0x08015168
 8001738:	080151a8 	.word	0x080151a8
 800173c:	20000008 	.word	0x20000008
 8001740:	447a0000 	.word	0x447a0000
 8001744:	44800000 	.word	0x44800000
 8001748:	080151c8 	.word	0x080151c8
 800174c:	08015228 	.word	0x08015228

08001750 <DCMI_Start_Capture>:
    __HAL_DCMI_ENABLE(hdcmi);

    return HAL_OK;
}
void DCMI_Start_Capture(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;

    printf("Starting DCMI capture in continuous mode...\r\n");
 8001756:	480f      	ldr	r0, [pc, #60]	@ (8001794 <DCMI_Start_Capture+0x44>)
 8001758:	f011 fb6a 	bl	8012e30 <puts>

    // The length for HAL_DCMI_Start_DMA is the number of 32-bit words.
    // For 16-bit pixels (uint16_t), this is TotalPixels / 2.
    uint32_t transfer_length_in_words = (IMG_ROWS * IMG_COLUMNS) / 2;
 800175c:	f44f 43af 	mov.w	r3, #22400	@ 0x5780
 8001760:	607b      	str	r3, [r7, #4]

    ret = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)frame_buffer, transfer_length_in_words);
 8001762:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <DCMI_Start_Capture+0x48>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2100      	movs	r1, #0
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <DCMI_Start_Capture+0x4c>)
 800176a:	f001 fa55 	bl	8002c18 <HAL_DCMI_Start_DMA>
 800176e:	4603      	mov	r3, r0
 8001770:	70fb      	strb	r3, [r7, #3]

    if (ret != HAL_OK)
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <DCMI_Start_Capture+0x34>
    {
        printf("DCMI DMA Start FAILED with code %d\r\n", ret);
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	4619      	mov	r1, r3
 800177c:	4808      	ldr	r0, [pc, #32]	@ (80017a0 <DCMI_Start_Capture+0x50>)
 800177e:	f011 faef 	bl	8012d60 <iprintf>
    }
    else
    {
        printf("DCMI DMA Start SUCCESSFUL\r\n");
    }
}
 8001782:	e002      	b.n	800178a <DCMI_Start_Capture+0x3a>
        printf("DCMI DMA Start SUCCESSFUL\r\n");
 8001784:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <DCMI_Start_Capture+0x54>)
 8001786:	f011 fb53 	bl	8012e30 <puts>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	08015248 	.word	0x08015248
 8001798:	20002700 	.word	0x20002700
 800179c:	20018bc4 	.word	0x20018bc4
 80017a0:	08015278 	.word	0x08015278
 80017a4:	080152a0 	.word	0x080152a0

080017a8 <My_DMA_HalfTransfer_Callback>:
  */
#include "main.h" // Or your relevant header

// This is called on DMA Half-Transfer Complete
void My_DMA_HalfTransfer_Callback(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
	//printf("The DMA delta: %u\r\n",dmaTimestamp-DWT->CYCCNT);
	//HAL_DCMI_Stop(hdma);
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]

    // Notify bit 0 => half-frame
    vTaskNotifyGiveFromISR(xFrameTaskHandle, &xHigherPriorityTaskWoken);
 80017b4:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <My_DMA_HalfTransfer_Callback+0x50>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f107 020c 	add.w	r2, r7, #12
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f00d fc38 	bl	800f034 <vTaskNotifyGiveFromISR>
    xTaskNotifyFromISR(xFrameTaskHandle,
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <My_DMA_HalfTransfer_Callback+0x50>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	2201      	movs	r2, #1
 80017d2:	2101      	movs	r1, #1
 80017d4:	f00d fb50 	bl	800ee78 <xTaskGenericNotifyFromISR>
                       0x01,
                       eSetBits,
                       &xHigherPriorityTaskWoken);

    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <My_DMA_HalfTransfer_Callback+0x46>
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <My_DMA_HalfTransfer_Callback+0x54>)
 80017e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f3bf 8f4f 	dsb	sy
 80017ea:	f3bf 8f6f 	isb	sy
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20018bac 	.word	0x20018bac
 80017fc:	e000ed04 	.word	0xe000ed04

08001800 <HAL_DCMI_VsyncEventCallback>:

    // If sending the message unblocked a higher-priority task, yield.
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    EventBits_t bits = xEventGroupGetBitsFromISR(appEventGroup);
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <HAL_DCMI_VsyncEventCallback+0x58>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f00a fc44 	bl	800c09a <xEventGroupGetBitsFromISR>
 8001812:	6178      	str	r0, [r7, #20]
    if(bits&EVENT_BIT_VSYNC){
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d017      	beq.n	800184e <HAL_DCMI_VsyncEventCallback+0x4e>
    // Prepare the VSYNC event message
	DCMI_Message_t vsync_event;
    vsync_event.type = DCMI_EVENT_VSYNC;
 800181e:	2301      	movs	r3, #1
 8001820:	743b      	strb	r3, [r7, #16]
    // This variable is required for the FromISR function
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
    // Send the message to the queue.
    xQueueSendToBackFromISR(xFrameChunkQueue, &vsync_event, &xHigherPriorityTaskWoken);
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_DCMI_VsyncEventCallback+0x5c>)
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	f107 020c 	add.w	r2, r7, #12
 800182e:	f107 0110 	add.w	r1, r7, #16
 8001832:	2300      	movs	r3, #0
 8001834:	f00b fc78 	bl	800d128 <xQueueGenericSendFromISR>

    // If sending the message unblocked a higher-priority task, yield.
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <HAL_DCMI_VsyncEventCallback+0x4e>
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_DCMI_VsyncEventCallback+0x60>)
 8001840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f3bf 8f4f 	dsb	sy
 800184a:	f3bf 8f6f 	isb	sy
    }
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20018bb4 	.word	0x20018bb4
 800185c:	20018bb8 	.word	0x20018bb8
 8001860:	e000ed04 	.word	0xe000ed04

08001864 <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	static uint8_t count=0;
    EventBits_t bits = xEventGroupGetBitsFromISR(appEventGroup);
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_DCMI_LineEventCallback+0x78>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f00a fc12 	bl	800c09a <xEventGroupGetBitsFromISR>
 8001876:	6178      	str	r0, [r7, #20]
    if(bits&EVENT_BIT_VSYNC){
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d028      	beq.n	80018d4 <HAL_DCMI_LineEventCallback+0x70>
	 //printf("%lu\r\n", (unsigned long)hdma_dcmi.Instance->NDTR);
	DCMI_Message_t line_event;
    line_event.type = DCMI_EVENT_LINE;
 8001882:	2300      	movs	r3, #0
 8001884:	743b      	strb	r3, [r7, #16]
    count==30?count=0:count++;
 8001886:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <HAL_DCMI_LineEventCallback+0x7c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b1e      	cmp	r3, #30
 800188c:	d103      	bne.n	8001896 <HAL_DCMI_LineEventCallback+0x32>
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <HAL_DCMI_LineEventCallback+0x7c>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e005      	b.n	80018a2 <HAL_DCMI_LineEventCallback+0x3e>
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_DCMI_LineEventCallback+0x7c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <HAL_DCMI_LineEventCallback+0x7c>)
 80018a0:	701a      	strb	r2, [r3, #0]
    line_event.value=count;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_DCMI_LineEventCallback+0x7c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	747b      	strb	r3, [r7, #17]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
    // Send the message to the queue
    xQueueSendToBackFromISR(xFrameChunkQueue, &line_event, &xHigherPriorityTaskWoken);
 80018ac:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <HAL_DCMI_LineEventCallback+0x80>)
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	f107 020c 	add.w	r2, r7, #12
 80018b4:	f107 0110 	add.w	r1, r7, #16
 80018b8:	2300      	movs	r3, #0
 80018ba:	f00b fc35 	bl	800d128 <xQueueGenericSendFromISR>

    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_DCMI_LineEventCallback+0x70>
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <HAL_DCMI_LineEventCallback+0x84>)
 80018c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	f3bf 8f4f 	dsb	sy
 80018d0:	f3bf 8f6f 	isb	sy
    }
}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20018bb4 	.word	0x20018bb4
 80018e0:	20018500 	.word	0x20018500
 80018e4:	20018bb8 	.word	0x20018bb8
 80018e8:	e000ed04 	.word	0xe000ed04

080018ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <vApplicationGetIdleTaskMemory+0x2c>)
 80018fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	4a06      	ldr	r2, [pc, #24]	@ (800191c <vApplicationGetIdleTaskMemory+0x30>)
 8001902:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20018504 	.word	0x20018504
 800191c:	20018558 	.word	0x20018558

08001920 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4a07      	ldr	r2, [pc, #28]	@ (800194c <vApplicationGetTimerTaskMemory+0x2c>)
 8001930:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <vApplicationGetTimerTaskMemory+0x30>)
 8001936:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800193e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20018758 	.word	0x20018758
 8001950:	200187ac 	.word	0x200187ac

08001954 <FrameProcessTask>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void FrameProcessTask(void *parameters)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    uint32_t ulNotificationValue;
    const uint16_t chunk_size = 64; // USB FS MPS
 800195c:	2340      	movs	r3, #64	@ 0x40
 800195e:	82fb      	strh	r3, [r7, #22]
    uint32_t ptr = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
    for (;;)
    {
        // Wait for notification (blocks indefinitely)
        xTaskNotifyWait(0x00,    // Don't clear any bits on entry
 8001964:	f107 020c 	add.w	r2, r7, #12
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	2000      	movs	r0, #0
 8001972:	f00d f96f 	bl	800ec54 <xTaskNotifyWait>
                        0xFFFFFFFF, // Clear all bits on exit
                        &ulNotificationValue,
                        portMAX_DELAY);

        if (ulNotificationValue & 0x01)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
        xTaskNotifyWait(0x00,    // Don't clear any bits on entry
 800197e:	e7f1      	b.n	8001964 <FrameProcessTask+0x10>

08001980 <DWT_Init>:
            // Process &frame_buffer[IMG_SIZE/2]
        }
    }
}
void DWT_Init(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
    // Enable the trace system (needed for DWT)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <DWT_Init+0x2c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <DWT_Init+0x2c>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800198e:	60d3      	str	r3, [r2, #12]

    // Reset the cycle counter
    DWT->CYCCNT = 0;
 8001990:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <DWT_Init+0x30>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]

    // Enable the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <DWT_Init+0x30>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <DWT_Init+0x30>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000edf0 	.word	0xe000edf0
 80019b0:	e0001000 	.word	0xe0001000

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b08a      	sub	sp, #40	@ 0x28
 80019b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ba:	f000 ff85 	bl	80028c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 80019be:	f7ff ffdf 	bl	8001980 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c2:	f000 f8e5 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c6:	f000 fa4b 	bl	8001e60 <MX_GPIO_Init>
  MX_DMA_Init();
 80019ca:	f000 fa19 	bl	8001e00 <MX_DMA_Init>
  MX_DCMI_Init();
 80019ce:	f000 f953 	bl	8001c78 <MX_DCMI_Init>
  MX_I2C1_Init();
 80019d2:	f000 f989 	bl	8001ce8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80019d6:	f000 f9e9 	bl	8001dac <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 80019da:	f000 f9b3 	bl	8001d44 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80019de:	f009 fe51 	bl	800b684 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80019e2:	f00f ff8b 	bl	80118fc <MX_USB_DEVICE_Init>

  printf("\r\n--- UART Test Only ---\r\n");
  printf("Clock, GPIO, and UART Initialized.\r\n");

*/
  appEventGroup = xEventGroupCreate();
 80019e6:	f00a fa33 	bl	800be50 <xEventGroupCreate>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001b20 <main+0x16c>)
 80019ee:	6013      	str	r3, [r2, #0]
  xFrameChunkQueue = xQueueCreate( (490), sizeof(DCMI_Message_t) );
 80019f0:	2200      	movs	r2, #0
 80019f2:	2102      	movs	r1, #2
 80019f4:	f44f 70f5 	mov.w	r0, #490	@ 0x1ea
 80019f8:	f00b fa07 	bl	800ce0a <xQueueGenericCreate>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a49      	ldr	r2, [pc, #292]	@ (8001b24 <main+0x170>)
 8001a00:	6013      	str	r3, [r2, #0]
  sdCardMutex = xSemaphoreCreateMutex();
 8001a02:	2001      	movs	r0, #1
 8001a04:	f00b fa75 	bl	800cef2 <xQueueCreateMutex>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a47      	ldr	r2, [pc, #284]	@ (8001b28 <main+0x174>)
 8001a0c:	6013      	str	r3, [r2, #0]
  //xUSBCommandQueue = xQueueCreate(10, sizeof(USBCommand)); // Defined in usb_cdc_handler
  xI2CSemaphore = xSemaphoreCreateMutex();
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f00b fa6f 	bl	800cef2 <xQueueCreateMutex>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a45      	ldr	r2, [pc, #276]	@ (8001b2c <main+0x178>)
 8001a18:	6013      	str	r3, [r2, #0]

  if(appEventGroup && xFrameChunkQueue && xI2CSemaphore && sdCardMutex) {
 8001a1a:	4b41      	ldr	r3, [pc, #260]	@ (8001b20 <main+0x16c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00f      	beq.n	8001a42 <main+0x8e>
 8001a22:	4b40      	ldr	r3, [pc, #256]	@ (8001b24 <main+0x170>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <main+0x8e>
 8001a2a:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <main+0x178>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <main+0x8e>
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <main+0x174>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <main+0x8e>
      printf("RTOS objects created successfully.\r\n");
 8001a3a:	483d      	ldr	r0, [pc, #244]	@ (8001b30 <main+0x17c>)
 8001a3c:	f011 f9f8 	bl	8012e30 <puts>
 8001a40:	e004      	b.n	8001a4c <main+0x98>
  } else {
      printf("Error: Failed to create RTOS objects!\r\n");
 8001a42:	483c      	ldr	r0, [pc, #240]	@ (8001b34 <main+0x180>)
 8001a44:	f011 f9f4 	bl	8012e30 <puts>
      Error_Handler();
 8001a48:	f000 faea 	bl	8002020 <Error_Handler>
  }
	  if (HAL_I2C_IsDeviceReady(&hi2c1, OV7670_I2C_ADDR <<1, 3, 100) == HAL_OK) {
 8001a4c:	2364      	movs	r3, #100	@ 0x64
 8001a4e:	2203      	movs	r2, #3
 8001a50:	2142      	movs	r1, #66	@ 0x42
 8001a52:	4839      	ldr	r0, [pc, #228]	@ (8001b38 <main+0x184>)
 8001a54:	f003 fc76 	bl	8005344 <HAL_I2C_IsDeviceReady>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <main+0xb2>
		  printf("OV7670 detected\r\n");
 8001a5e:	4837      	ldr	r0, [pc, #220]	@ (8001b3c <main+0x188>)
 8001a60:	f011 f9e6 	bl	8012e30 <puts>
 8001a64:	e002      	b.n	8001a6c <main+0xb8>
	  } else {
		  printf("OV7670 not found\r\n");
 8001a66:	4836      	ldr	r0, [pc, #216]	@ (8001b40 <main+0x18c>)
 8001a68:	f011 f9e2 	bl	8012e30 <puts>


    // --- Initialize camera ---
	//Test_OV7670_I2C_Communication();

    printf("Initializing OV7670 cameraaaa...\r\n");
 8001a6c:	4835      	ldr	r0, [pc, #212]	@ (8001b44 <main+0x190>)
 8001a6e:	f011 f9df 	bl	8012e30 <puts>
    bool error = OV7670_init();
 8001a72:	f7ff faaf 	bl	8000fd4 <OV7670_init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	77fb      	strb	r3, [r7, #31]

    if(!error) {
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
 8001a7c:	f083 0301 	eor.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00a      	beq.n	8001a9c <main+0xe8>
      printf("OV7670 Camera Initialized Successfully.\r\n");
 8001a86:	4830      	ldr	r0, [pc, #192]	@ (8001b48 <main+0x194>)
 8001a88:	f011 f9d2 	bl	8012e30 <puts>
  	  //xEventGroupSetBits(xSystemEvents, CAMERA_READY);
        // NEW: Start DCMI DMA in circular mode. This happens only once.
        // The length is the total number of pixels, as DMA is configured for Half Word memory transfers.
  	//HAL_DCMI_RegisterCallback(&hdcmi,HAL_DCMI_FRAME_EVENT_CB_ID,My_DMA_HalfTransfer_Callback);
  	hdcmi.DMA_Handle->XferHalfCpltCallback = My_DMA_HalfTransfer_Callback;
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <main+0x198>)
 8001a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a90:	4a2f      	ldr	r2, [pc, #188]	@ (8001b50 <main+0x19c>)
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40
  	//hdcmi.DMA_Handle->XferCpltCallback = My_DMA_FullTransfer_Callback;
  	//DCMI_Start_Capture();
        printf("DCMI DMA started in continuous mode.\r\n");
 8001a94:	482f      	ldr	r0, [pc, #188]	@ (8001b54 <main+0x1a0>)
 8001a96:	f011 f9cb 	bl	8012e30 <puts>
 8001a9a:	e004      	b.n	8001aa6 <main+0xf2>
    } else {
        printf("Error: OV7670 Camera Failed to Initialize!\r\n");
 8001a9c:	482e      	ldr	r0, [pc, #184]	@ (8001b58 <main+0x1a4>)
 8001a9e:	f011 f9c7 	bl	8012e30 <puts>
        Error_Handler(); // Camera failed
 8001aa2:	f000 fabd 	bl	8002020 <Error_Handler>
    }
    //sd_raw_test();
    // --- Create tasks ---
    printf("Creating RTOS tasks...\r\n");
 8001aa6:	482d      	ldr	r0, [pc, #180]	@ (8001b5c <main+0x1a8>)
 8001aa8:	f011 f9c2 	bl	8012e30 <puts>

    // REMOVED: CameraTask is no longer needed with DMA circular mode.
    //xTaskCreate(USBFrameSendTask, "USB Frame TX", 512, NULL, 2, NULL);
    xTaskCreate(FrameProcessTask, "FrameProcess", 1024, NULL, 1, &xFrameTaskHandle);
 8001aac:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <main+0x1ac>)
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aba:	492a      	ldr	r1, [pc, #168]	@ (8001b64 <main+0x1b0>)
 8001abc:	482a      	ldr	r0, [pc, #168]	@ (8001b68 <main+0x1b4>)
 8001abe:	f00c f82b 	bl	800db18 <xTaskCreate>
    xTaskCreate(MeM_to_SD,"MeM_to_SD",1024,NULL,2,&xSDTaskHandle);
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <main+0x1b8>)
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2300      	movs	r3, #0
 8001acc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ad0:	4927      	ldr	r1, [pc, #156]	@ (8001b70 <main+0x1bc>)
 8001ad2:	4828      	ldr	r0, [pc, #160]	@ (8001b74 <main+0x1c0>)
 8001ad4:	f00c f820 	bl	800db18 <xTaskCreate>
    xTaskCreate(USBStreamFromSDTask, "USBStreamTask", 1024, NULL, 1, &hUsbStreamTask);
 8001ad8:	4b27      	ldr	r3, [pc, #156]	@ (8001b78 <main+0x1c4>)
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2301      	movs	r3, #1
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ae6:	4925      	ldr	r1, [pc, #148]	@ (8001b7c <main+0x1c8>)
 8001ae8:	4825      	ldr	r0, [pc, #148]	@ (8001b80 <main+0x1cc>)
 8001aea:	f00c f815 	bl	800db18 <xTaskCreate>
    //xTaskCreate(sd_raw_test, "SDTest", 2048, NULL, tskIDLE_PRIORITY + 2, &xSDTaskHandle);
    // Default task for USB is created by CubeMX, we don't need to add it again.
    printf("Tasks created.\r\n");
 8001aee:	4825      	ldr	r0, [pc, #148]	@ (8001b84 <main+0x1d0>)
 8001af0:	f011 f99e 	bl	8012e30 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001af4:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <main+0x1d4>)
 8001af6:	463c      	mov	r4, r7
 8001af8:	461d      	mov	r5, r3
 8001afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b06:	463b      	mov	r3, r7
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00a f8a4 	bl	800bc58 <osThreadCreate>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <main+0x1d8>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b16:	f00a f87c 	bl	800bc12 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001b1a:	bf00      	nop
 8001b1c:	e7fd      	b.n	8001b1a <main+0x166>
 8001b1e:	bf00      	nop
 8001b20:	20018bb4 	.word	0x20018bb4
 8001b24:	20018bb8 	.word	0x20018bb8
 8001b28:	20018bc0 	.word	0x20018bc0
 8001b2c:	20018bbc 	.word	0x20018bbc
 8001b30:	080152f4 	.word	0x080152f4
 8001b34:	08015318 	.word	0x08015318
 8001b38:	20018c64 	.word	0x20018c64
 8001b3c:	08015340 	.word	0x08015340
 8001b40:	08015354 	.word	0x08015354
 8001b44:	08015368 	.word	0x08015368
 8001b48:	0801538c 	.word	0x0801538c
 8001b4c:	20018bc4 	.word	0x20018bc4
 8001b50:	080017a9 	.word	0x080017a9
 8001b54:	080153b8 	.word	0x080153b8
 8001b58:	080153e0 	.word	0x080153e0
 8001b5c:	0801540c 	.word	0x0801540c
 8001b60:	20018bac 	.word	0x20018bac
 8001b64:	08015424 	.word	0x08015424
 8001b68:	08001955 	.word	0x08001955
 8001b6c:	200002fc 	.word	0x200002fc
 8001b70:	08015434 	.word	0x08015434
 8001b74:	080011e1 	.word	0x080011e1
 8001b78:	20018bb0 	.word	0x20018bb0
 8001b7c:	08015440 	.word	0x08015440
 8001b80:	080014f9 	.word	0x080014f9
 8001b84:	08015450 	.word	0x08015450
 8001b88:	0801546c 	.word	0x0801546c
 8001b8c:	20018e44 	.word	0x20018e44

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b094      	sub	sp, #80	@ 0x50
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 0320 	add.w	r3, r7, #32
 8001b9a:	2230      	movs	r2, #48	@ 0x30
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f011 fa26 	bl	8012ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <SystemClock_Config+0xe0>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8001c70 <SystemClock_Config+0xe0>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <SystemClock_Config+0xe0>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <SystemClock_Config+0xe4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a26      	ldr	r2, [pc, #152]	@ (8001c74 <SystemClock_Config+0xe4>)
 8001bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <SystemClock_Config+0xe4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001bec:	2303      	movs	r3, #3
 8001bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c0c:	23a8      	movs	r3, #168	@ 0xa8
 8001c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c14:	2307      	movs	r3, #7
 8001c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f004 ff8b 	bl	8006b38 <HAL_RCC_OscConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c28:	f000 f9fa 	bl	8002020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c30:	2302      	movs	r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2105      	movs	r1, #5
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 f9ec 	bl	8007028 <HAL_RCC_ClockConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c56:	f000 f9e3 	bl	8002020 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f005 fac8 	bl	80071f4 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001c64:	f005 fb2e 	bl	80072c4 <HAL_RCC_EnableCSS>
}
 8001c68:	bf00      	nop
 8001c6a:	3750      	adds	r7, #80	@ 0x50
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000

08001c78 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af02      	add	r7, sp, #8
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001c7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001c80:	4a18      	ldr	r2, [pc, #96]	@ (8001ce4 <MX_DCMI_Init+0x6c>)
 8001c82:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001c84:	4b16      	ldr	r3, [pc, #88]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001c90:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001c92:	2280      	movs	r2, #128	@ 0x80
 8001c94:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001c96:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001c9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001cae:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001cb0:	f001 fa33 	bl	800311a <HAL_DCMI_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_DCMI_Init+0x46>
  {
    Error_Handler();
 8001cba:	f000 f9b1 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */
  if (HAL_DCMI_ConfigCROP(&hdcmi, 0, 0, IMG_COLUMNS*2, IMG_ROWS) != HAL_OK)
 8001cbe:	2346      	movs	r3, #70	@ 0x46
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <MX_DCMI_Init+0x68>)
 8001ccc:	f001 f946 	bl	8002f5c <HAL_DCMI_ConfigCrop>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_DCMI_Init+0x62>
  {
      Error_Handler();
 8001cd6:	f000 f9a3 	bl	8002020 <Error_Handler>
  }
  //HAL_DCMI_EnableCROP(&hdcmi);
  /* USER CODE END DCMI_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20018bc4 	.word	0x20018bc4
 8001ce4:	50050000 	.word	0x50050000

08001ce8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <MX_I2C1_Init+0x54>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001cf4:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <MX_I2C1_Init+0x58>)
 8001cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001d06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	@ (8001d38 <MX_I2C1_Init+0x50>)
 8001d26:	f003 f9c9 	bl	80050bc <HAL_I2C_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d30:	f000 f976 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20018c64 	.word	0x20018c64
 8001d3c:	40005400 	.word	0x40005400
 8001d40:	000186a0 	.word	0x000186a0

08001d44 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d4a:	4a17      	ldr	r2, [pc, #92]	@ (8001da8 <MX_SDIO_SD_Init+0x64>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8001d60:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d66:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  if (HAL_SD_Init(&hsd) != HAL_OK) {
 8001d7a:	480a      	ldr	r0, [pc, #40]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d7c:	f005 fc03 	bl	8007586 <HAL_SD_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_SDIO_SD_Init+0x46>
      Error_Handler();
 8001d86:	f000 f94b 	bl	8002020 <Error_Handler>
  }

  // Now we can switch to 4 bit mode
 if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 8001d8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_SDIO_SD_Init+0x60>)
 8001d90:	f006 f9ca 	bl	8008128 <HAL_SD_ConfigWideBusOperation>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_SDIO_SD_Init+0x5a>
      Error_Handler();
 8001d9a:	f000 f941 	bl	8002020 <Error_Handler>
 }

  /* USER CODE END SDIO_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20018cb8 	.word	0x20018cb8
 8001da8:	40012c00 	.word	0x40012c00

08001dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <MX_USART2_UART_Init+0x50>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001de4:	f006 ff80 	bl	8008ce8 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dee:	f000 f917 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20018dfc 	.word	0x20018dfc
 8001dfc:	40004400 	.word	0x40004400

08001e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <MX_DMA_Init+0x5c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a13      	ldr	r2, [pc, #76]	@ (8001e5c <MX_DMA_Init+0x5c>)
 8001e10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <MX_DMA_Init+0x5c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2105      	movs	r1, #5
 8001e26:	2039      	movs	r0, #57	@ 0x39
 8001e28:	f000 febf 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001e2c:	2039      	movs	r0, #57	@ 0x39
 8001e2e:	f000 fed8 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2105      	movs	r1, #5
 8001e36:	203b      	movs	r0, #59	@ 0x3b
 8001e38:	f000 feb7 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001e3c:	203b      	movs	r0, #59	@ 0x3b
 8001e3e:	f000 fed0 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2105      	movs	r1, #5
 8001e46:	2045      	movs	r0, #69	@ 0x45
 8001e48:	f000 feaf 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001e4c:	2045      	movs	r0, #69	@ 0x45
 8001e4e:	f000 fec8 	bl	8002be2 <HAL_NVIC_EnableIRQ>

}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	@ 0x30
 8001e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a46      	ldr	r2, [pc, #280]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001e80:	f043 0310 	orr.w	r3, r3, #16
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b44      	ldr	r3, [pc, #272]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	4b40      	ldr	r3, [pc, #256]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b39      	ldr	r3, [pc, #228]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a38      	ldr	r2, [pc, #224]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b36      	ldr	r3, [pc, #216]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a31      	ldr	r2, [pc, #196]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b2f      	ldr	r3, [pc, #188]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a2a      	ldr	r2, [pc, #168]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b28      	ldr	r3, [pc, #160]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <MX_GPIO_Init+0x138>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2102      	movs	r1, #2
 8001f22:	481e      	ldr	r0, [pc, #120]	@ (8001f9c <MX_GPIO_Init+0x13c>)
 8001f24:	f003 f898 	bl	8005058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4817      	ldr	r0, [pc, #92]	@ (8001f9c <MX_GPIO_Init+0x13c>)
 8001f3e:	f002 feef 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4810      	ldr	r0, [pc, #64]	@ (8001f9c <MX_GPIO_Init+0x13c>)
 8001f5a:	f002 fee1 	bl	8004d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4808      	ldr	r0, [pc, #32]	@ (8001f9c <MX_GPIO_Init+0x13c>)
 8001f7c:	f002 fed0 	bl	8004d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2105      	movs	r1, #5
 8001f84:	2006      	movs	r0, #6
 8001f86:	f000 fe10 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f8a:	2006      	movs	r0, #6
 8001f8c:	f000 fe29 	bl	8002be2 <HAL_NVIC_EnableIRQ>

  // NOTE: UART GPIO init is handled by HAL_UART_MspInit in stm32f4xx_hal_msp.c
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f90:	bf00      	nop
 8001f92:	3730      	adds	r7, #48	@ 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <EXTI0_IRQHandler>:
/* USER CODE BEGIN 4 */



void EXTI0_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  // This HAL function will clear the interrupt flag and call the user callback below
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f003 f871 	bl	800508c <HAL_GPIO_EXTI_IRQHandler>
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_EXTI_Callback>:
    }

}*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
    // Make sure it's the correct pin that triggered the interrupt
    if (GPIO_Pin == GPIO_PIN_0) // Or your camera's VSYNC pin
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d114      	bne.n	8001fea <HAL_GPIO_EXTI_Callback+0x3a>
    {
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
    	xEventGroupSetBitsFromISR(appEventGroup,EVENT_BIT_BUTTON_PRESSED, &xHigherPriorityTaskWoken);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <HAL_GPIO_EXTI_Callback+0x44>)
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2201      	movs	r2, #1
 8001fce:	480a      	ldr	r0, [pc, #40]	@ (8001ff8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001fd0:	f00d fc84 	bl	800f8dc <xTimerPendFunctionCallFromISR>
    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_GPIO_EXTI_Callback+0x3a>
 8001fda:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	f3bf 8f6f 	isb	sy
    }

}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20018bb4 	.word	0x20018bb4
 8001ff8:	0800c1fb 	.word	0x0800c1fb
 8001ffc:	e000ed04 	.word	0xe000ed04

08002000 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002008:	f00f fc78 	bl	80118fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;){
	 //printf("DCMI DMA NDTR: %lu\r\n", (uint32_t)(hdma_dcmi.Instance->NDTR));
	vTaskDelay(pdMS_TO_TICKS(1000));
 800200c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002010:	f00b feba 	bl	800dd88 <vTaskDelay>
    osDelay(1);
 8002014:	2001      	movs	r0, #1
 8002016:	f009 fe6b 	bl	800bcf0 <osDelay>
	vTaskDelay(pdMS_TO_TICKS(1000));
 800201a:	bf00      	nop
 800201c:	e7f6      	b.n	800200c <StartDefaultTask+0xc>
	...

08002020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("\r\n!!! SYSTEM ERROR !!!\r\nEntering Error_Handler...\r\n");
 8002024:	4803      	ldr	r0, [pc, #12]	@ (8002034 <Error_Handler+0x14>)
 8002026:	f010 ff03 	bl	8012e30 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800202a:	b672      	cpsid	i
}
 800202c:	bf00      	nop
  __disable_irq();
  while (1)
 800202e:	bf00      	nop
 8002030:	e7fd      	b.n	800202e <Error_Handler+0xe>
 8002032:	bf00      	nop
 8002034:	08015488 	.word	0x08015488

08002038 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002040:	1d39      	adds	r1, r7, #4
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	2201      	movs	r2, #1
 8002048:	4803      	ldr	r0, [pc, #12]	@ (8002058 <__io_putchar+0x20>)
 800204a:	f006 fe9d 	bl	8008d88 <HAL_UART_Transmit>
    return ch;
 800204e:	687b      	ldr	r3, [r7, #4]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20018dfc 	.word	0x20018dfc

0800205c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_MspInit+0x54>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	4a11      	ldr	r2, [pc, #68]	@ (80020b0 <HAL_MspInit+0x54>)
 800206c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002070:	6453      	str	r3, [r2, #68]	@ 0x44
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <HAL_MspInit+0x54>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <HAL_MspInit+0x54>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <HAL_MspInit+0x54>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_MspInit+0x54>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	210f      	movs	r1, #15
 800209e:	f06f 0001 	mvn.w	r0, #1
 80020a2:	f000 fd82 	bl	8002baa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08c      	sub	sp, #48	@ 0x30
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a78      	ldr	r2, [pc, #480]	@ (80022b4 <HAL_DCMI_MspInit+0x200>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	f040 80e9 	bne.w	80022aa <HAL_DCMI_MspInit+0x1f6>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	4b76      	ldr	r3, [pc, #472]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 80020de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e0:	4a75      	ldr	r2, [pc, #468]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80020e8:	4b73      	ldr	r3, [pc, #460]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 80020ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	4b6f      	ldr	r3, [pc, #444]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	4a6e      	ldr	r2, [pc, #440]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 80020fe:	f043 0310 	orr.w	r3, r3, #16
 8002102:	6313      	str	r3, [r2, #48]	@ 0x30
 8002104:	4b6c      	ldr	r3, [pc, #432]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	4b68      	ldr	r3, [pc, #416]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	4a67      	ldr	r2, [pc, #412]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002120:	4b65      	ldr	r3, [pc, #404]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4b61      	ldr	r3, [pc, #388]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	4a60      	ldr	r2, [pc, #384]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6313      	str	r3, [r2, #48]	@ 0x30
 800213c:	4b5e      	ldr	r3, [pc, #376]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	4b5a      	ldr	r3, [pc, #360]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	4a59      	ldr	r2, [pc, #356]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	6313      	str	r3, [r2, #48]	@ 0x30
 8002158:	4b57      	ldr	r3, [pc, #348]	@ (80022b8 <HAL_DCMI_MspInit+0x204>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8002164:	2373      	movs	r3, #115	@ 0x73
 8002166:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800216c:	2302      	movs	r3, #2
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002174:	230d      	movs	r3, #13
 8002176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	484f      	ldr	r0, [pc, #316]	@ (80022bc <HAL_DCMI_MspInit+0x208>)
 8002180:	f002 fdce 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002184:	2310      	movs	r3, #16
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800218c:	2301      	movs	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002194:	230d      	movs	r3, #13
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	4848      	ldr	r0, [pc, #288]	@ (80022c0 <HAL_DCMI_MspInit+0x20c>)
 80021a0:	f002 fdbe 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a4:	2340      	movs	r3, #64	@ 0x40
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ac:	2302      	movs	r3, #2
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021b4:	230d      	movs	r3, #13
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	4840      	ldr	r0, [pc, #256]	@ (80022c0 <HAL_DCMI_MspInit+0x20c>)
 80021c0:	f002 fdae 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c4:	23c0      	movs	r3, #192	@ 0xc0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021cc:	2302      	movs	r3, #2
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d0:	2303      	movs	r3, #3
 80021d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021d4:	230d      	movs	r3, #13
 80021d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	4839      	ldr	r0, [pc, #228]	@ (80022c4 <HAL_DCMI_MspInit+0x210>)
 80021e0:	f002 fd9e 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021e4:	2340      	movs	r3, #64	@ 0x40
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021f4:	230d      	movs	r3, #13
 80021f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	4619      	mov	r1, r3
 80021fe:	4832      	ldr	r0, [pc, #200]	@ (80022c8 <HAL_DCMI_MspInit+0x214>)
 8002200:	f002 fd8e 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002204:	2380      	movs	r3, #128	@ 0x80
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800220c:	2302      	movs	r3, #2
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002214:	230d      	movs	r3, #13
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	4619      	mov	r1, r3
 800221e:	482a      	ldr	r0, [pc, #168]	@ (80022c8 <HAL_DCMI_MspInit+0x214>)
 8002220:	f002 fd7e 	bl	8004d20 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002224:	4b29      	ldr	r3, [pc, #164]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002226:	4a2a      	ldr	r2, [pc, #168]	@ (80022d0 <HAL_DCMI_MspInit+0x21c>)
 8002228:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800222a:	4b28      	ldr	r3, [pc, #160]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 800222c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002230:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002232:	4b26      	ldr	r3, [pc, #152]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002238:	4b24      	ldr	r3, [pc, #144]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800223e:	4b23      	ldr	r3, [pc, #140]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002244:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002246:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002248:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800224c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800224e:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002250:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002254:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002256:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002258:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800225c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800225e:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002260:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002264:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002266:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002268:	2204      	movs	r2, #4
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800226c:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 800226e:	2203      	movs	r2, #3
 8002270:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8002272:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002274:	2200      	movs	r2, #0
 8002276:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002278:	4b14      	ldr	r3, [pc, #80]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800227e:	4813      	ldr	r0, [pc, #76]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002280:	f000 ffb8 	bl	80031f4 <HAL_DMA_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 800228a:	f7ff fec9 	bl	8002020 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a0e      	ldr	r2, [pc, #56]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002292:	639a      	str	r2, [r3, #56]	@ 0x38
 8002294:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <HAL_DCMI_MspInit+0x218>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2105      	movs	r1, #5
 800229e:	204e      	movs	r0, #78	@ 0x4e
 80022a0:	f000 fc83 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80022a4:	204e      	movs	r0, #78	@ 0x4e
 80022a6:	f000 fc9c 	bl	8002be2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80022aa:	bf00      	nop
 80022ac:	3730      	adds	r7, #48	@ 0x30
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	50050000 	.word	0x50050000
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40020400 	.word	0x40020400
 80022cc:	20018c04 	.word	0x20018c04
 80022d0:	40026428 	.word	0x40026428

080022d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	@ 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a19      	ldr	r2, [pc, #100]	@ (8002358 <HAL_I2C_MspInit+0x84>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d12c      	bne.n	8002350 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	4b18      	ldr	r3, [pc, #96]	@ (800235c <HAL_I2C_MspInit+0x88>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4a17      	ldr	r2, [pc, #92]	@ (800235c <HAL_I2C_MspInit+0x88>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	@ 0x30
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <HAL_I2C_MspInit+0x88>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002312:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002318:	2312      	movs	r3, #18
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231c:	2301      	movs	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002324:	2304      	movs	r3, #4
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	480c      	ldr	r0, [pc, #48]	@ (8002360 <HAL_I2C_MspInit+0x8c>)
 8002330:	f002 fcf6 	bl	8004d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <HAL_I2C_MspInit+0x88>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	4a07      	ldr	r2, [pc, #28]	@ (800235c <HAL_I2C_MspInit+0x88>)
 800233e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002342:	6413      	str	r3, [r2, #64]	@ 0x40
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_I2C_MspInit+0x88>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002350:	bf00      	nop
 8002352:	3728      	adds	r7, #40	@ 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40005400 	.word	0x40005400
 800235c:	40023800 	.word	0x40023800
 8002360:	40020400 	.word	0x40020400

08002364 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	@ 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a71      	ldr	r2, [pc, #452]	@ (8002548 <HAL_SD_MspInit+0x1e4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	f040 80dc 	bne.w	8002540 <HAL_SD_MspInit+0x1dc>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	4b6f      	ldr	r3, [pc, #444]	@ (800254c <HAL_SD_MspInit+0x1e8>)
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	4a6e      	ldr	r2, [pc, #440]	@ (800254c <HAL_SD_MspInit+0x1e8>)
 8002392:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002396:	6453      	str	r3, [r2, #68]	@ 0x44
 8002398:	4b6c      	ldr	r3, [pc, #432]	@ (800254c <HAL_SD_MspInit+0x1e8>)
 800239a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	4b68      	ldr	r3, [pc, #416]	@ (800254c <HAL_SD_MspInit+0x1e8>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	4a67      	ldr	r2, [pc, #412]	@ (800254c <HAL_SD_MspInit+0x1e8>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b4:	4b65      	ldr	r3, [pc, #404]	@ (800254c <HAL_SD_MspInit+0x1e8>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	4b61      	ldr	r3, [pc, #388]	@ (800254c <HAL_SD_MspInit+0x1e8>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	4a60      	ldr	r2, [pc, #384]	@ (800254c <HAL_SD_MspInit+0x1e8>)
 80023ca:	f043 0308 	orr.w	r3, r3, #8
 80023ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d0:	4b5e      	ldr	r3, [pc, #376]	@ (800254c <HAL_SD_MspInit+0x1e8>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80023dc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80023ee:	230c      	movs	r3, #12
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	4855      	ldr	r0, [pc, #340]	@ (8002550 <HAL_SD_MspInit+0x1ec>)
 80023fa:	f002 fc91 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002410:	230c      	movs	r3, #12
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	484d      	ldr	r0, [pc, #308]	@ (8002550 <HAL_SD_MspInit+0x1ec>)
 800241c:	f002 fc80 	bl	8004d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002420:	2304      	movs	r3, #4
 8002422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002428:	2301      	movs	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002430:	230c      	movs	r3, #12
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	4619      	mov	r1, r3
 800243a:	4846      	ldr	r0, [pc, #280]	@ (8002554 <HAL_SD_MspInit+0x1f0>)
 800243c:	f002 fc70 	bl	8004d20 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002440:	4b45      	ldr	r3, [pc, #276]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 8002442:	4a46      	ldr	r2, [pc, #280]	@ (800255c <HAL_SD_MspInit+0x1f8>)
 8002444:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002446:	4b44      	ldr	r3, [pc, #272]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 8002448:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800244c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800244e:	4b42      	ldr	r3, [pc, #264]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002454:	4b40      	ldr	r3, [pc, #256]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800245a:	4b3f      	ldr	r3, [pc, #252]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 800245c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002460:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002462:	4b3d      	ldr	r3, [pc, #244]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 8002464:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002468:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800246a:	4b3b      	ldr	r3, [pc, #236]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 800246c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002470:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002472:	4b39      	ldr	r3, [pc, #228]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 8002474:	2220      	movs	r2, #32
 8002476:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002478:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 800247a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800247e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002480:	4b35      	ldr	r3, [pc, #212]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 8002482:	2204      	movs	r2, #4
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002486:	4b34      	ldr	r3, [pc, #208]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 8002488:	2203      	movs	r2, #3
 800248a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800248c:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 800248e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002492:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002494:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 8002496:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800249a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800249c:	482e      	ldr	r0, [pc, #184]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 800249e:	f000 fea9 	bl	80031f4 <HAL_DMA_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_SD_MspInit+0x148>
    {
      Error_Handler();
 80024a8:	f7ff fdba 	bl	8002020 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80024b2:	4a29      	ldr	r2, [pc, #164]	@ (8002558 <HAL_SD_MspInit+0x1f4>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80024b8:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002564 <HAL_SD_MspInit+0x200>)
 80024bc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80024be:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024c4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c6:	4b26      	ldr	r3, [pc, #152]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024c8:	2240      	movs	r2, #64	@ 0x40
 80024ca:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024cc:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024d2:	4b23      	ldr	r3, [pc, #140]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024d8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024da:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024e0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024e8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80024ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024ec:	2220      	movs	r2, #32
 80024ee:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80024f6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 80024fa:	2204      	movs	r2, #4
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024fe:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 8002500:	2203      	movs	r2, #3
 8002502:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002504:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 8002506:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800250a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800250c:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 800250e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002512:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002514:	4812      	ldr	r0, [pc, #72]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 8002516:	f000 fe6d 	bl	80031f4 <HAL_DMA_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_SD_MspInit+0x1c0>
    {
      Error_Handler();
 8002520:	f7ff fd7e 	bl	8002020 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a0e      	ldr	r2, [pc, #56]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 8002528:	63da      	str	r2, [r3, #60]	@ 0x3c
 800252a:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <HAL_SD_MspInit+0x1fc>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002530:	2200      	movs	r2, #0
 8002532:	2105      	movs	r1, #5
 8002534:	2031      	movs	r0, #49	@ 0x31
 8002536:	f000 fb38 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800253a:	2031      	movs	r0, #49	@ 0x31
 800253c:	f000 fb51 	bl	8002be2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002540:	bf00      	nop
 8002542:	3728      	adds	r7, #40	@ 0x28
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40023800 	.word	0x40023800
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	20018d3c 	.word	0x20018d3c
 800255c:	40026458 	.word	0x40026458
 8002560:	20018d9c 	.word	0x20018d9c
 8002564:	400264a0 	.word	0x400264a0

08002568 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a19      	ldr	r2, [pc, #100]	@ (80025ec <HAL_UART_MspInit+0x84>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d12b      	bne.n	80025e2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	4b18      	ldr	r3, [pc, #96]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	4a17      	ldr	r2, [pc, #92]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 8002594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002598:	6413      	str	r3, [r2, #64]	@ 0x40
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a10      	ldr	r2, [pc, #64]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <HAL_UART_MspInit+0x88>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025c2:	230c      	movs	r3, #12
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025d2:	2307      	movs	r3, #7
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	@ (80025f4 <HAL_UART_MspInit+0x8c>)
 80025de:	f002 fb9f 	bl	8004d20 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	@ 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40004400 	.word	0x40004400
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80025fc:	f004 ffa8 	bl	8007550 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <NMI_Handler+0x8>

08002604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <MemManage_Handler+0x4>

08002614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <BusFault_Handler+0x4>

0800261c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <UsageFault_Handler+0x4>

08002624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002636:	f000 f999 	bl	800296c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800263a:	f00c f8eb 	bl	800e814 <xTaskGetSchedulerState>
 800263e:	4603      	mov	r3, r0
 8002640:	2b01      	cmp	r3, #1
 8002642:	d001      	beq.n	8002648 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002644:	f00a fa68 	bl	800cb18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <SDIO_IRQHandler+0x10>)
 8002652:	f005 fa09 	bl	8007a68 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20018cb8 	.word	0x20018cb8

08002660 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002664:	4802      	ldr	r0, [pc, #8]	@ (8002670 <DMA2_Stream1_IRQHandler+0x10>)
 8002666:	f000 ff5d 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20018c04 	.word	0x20018c04

08002674 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002678:	4802      	ldr	r0, [pc, #8]	@ (8002684 <DMA2_Stream3_IRQHandler+0x10>)
 800267a:	f000 ff53 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20018d3c 	.word	0x20018d3c

08002688 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800268c:	4802      	ldr	r0, [pc, #8]	@ (8002698 <OTG_FS_IRQHandler+0x10>)
 800268e:	f003 f945 	bl	800591c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2001e200 	.word	0x2001e200

0800269c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80026a0:	4802      	ldr	r0, [pc, #8]	@ (80026ac <DMA2_Stream6_IRQHandler+0x10>)
 80026a2:	f000 ff3f 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20018d9c 	.word	0x20018d9c

080026b0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80026b4:	4802      	ldr	r0, [pc, #8]	@ (80026c0 <DCMI_IRQHandler+0x10>)
 80026b6:	f000 fbaf 	bl	8002e18 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20018bc4 	.word	0x20018bc4

080026c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_kill>:

int _kill(int pid, int sig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026de:	f010 fcd9 	bl	8013094 <__errno>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2216      	movs	r2, #22
 80026e6:	601a      	str	r2, [r3, #0]
  return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_exit>:

void _exit (int status)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffe7 	bl	80026d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002706:	bf00      	nop
 8002708:	e7fd      	b.n	8002706 <_exit+0x12>

0800270a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e00a      	b.n	8002732 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800271c:	f3af 8000 	nop.w
 8002720:	4601      	mov	r1, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	60ba      	str	r2, [r7, #8]
 8002728:	b2ca      	uxtb	r2, r1
 800272a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3301      	adds	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	429a      	cmp	r2, r3
 8002738:	dbf0      	blt.n	800271c <_read+0x12>
  }

  return len;
 800273a:	687b      	ldr	r3, [r7, #4]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e009      	b.n	800276a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	60ba      	str	r2, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fc6a 	bl	8002038 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3301      	adds	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	dbf1      	blt.n	8002756 <_write+0x12>
  }
  return len;
 8002772:	687b      	ldr	r3, [r7, #4]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_close>:

int _close(int file)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027a4:	605a      	str	r2, [r3, #4]
  return 0;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_isatty>:

int _isatty(int file)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027bc:	2301      	movs	r3, #1
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ec:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <_sbrk+0x5c>)
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <_sbrk+0x60>)
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002800:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <_sbrk+0x64>)
 8002802:	4a12      	ldr	r2, [pc, #72]	@ (800284c <_sbrk+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002814:	f010 fc3e 	bl	8013094 <__errno>
 8002818:	4603      	mov	r3, r0
 800281a:	220c      	movs	r2, #12
 800281c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e009      	b.n	8002838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002824:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <_sbrk+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	4a05      	ldr	r2, [pc, #20]	@ (8002848 <_sbrk+0x64>)
 8002834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20020000 	.word	0x20020000
 8002844:	00000400 	.word	0x00000400
 8002848:	20018e48 	.word	0x20018e48
 800284c:	2001ea50 	.word	0x2001ea50

08002850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <SystemInit+0x20>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <SystemInit+0x20>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002878:	f7ff ffea 	bl	8002850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800287c:	480c      	ldr	r0, [pc, #48]	@ (80028b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800287e:	490d      	ldr	r1, [pc, #52]	@ (80028b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002880:	4a0d      	ldr	r2, [pc, #52]	@ (80028b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002884:	e002      	b.n	800288c <LoopCopyDataInit>

08002886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288a:	3304      	adds	r3, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002890:	d3f9      	bcc.n	8002886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002894:	4c0a      	ldr	r4, [pc, #40]	@ (80028c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002898:	e001      	b.n	800289e <LoopFillZerobss>

0800289a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800289c:	3204      	adds	r2, #4

0800289e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a0:	d3fb      	bcc.n	800289a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028a2:	f010 fbfd 	bl	80130a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028a6:	f7ff f885 	bl	80019b4 <main>
  bx  lr    
 80028aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b4:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80028b8:	0801599c 	.word	0x0801599c
  ldr r2, =_sbss
 80028bc:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 80028c0:	2001ea50 	.word	0x2001ea50

080028c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028c4:	e7fe      	b.n	80028c4 <ADC_IRQHandler>
	...

080028c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002908 <HAL_Init+0x40>)
 80028d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <HAL_Init+0x40>)
 80028de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a07      	ldr	r2, [pc, #28]	@ (8002908 <HAL_Init+0x40>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f0:	2003      	movs	r0, #3
 80028f2:	f000 f94f 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028f6:	200f      	movs	r0, #15
 80028f8:	f000 f808 	bl	800290c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028fc:	f7ff fbae 	bl	800205c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023c00 	.word	0x40023c00

0800290c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002914:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <HAL_InitTick+0x54>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <HAL_InitTick+0x58>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	4619      	mov	r1, r3
 800291e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002922:	fbb3 f3f1 	udiv	r3, r3, r1
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f967 	bl	8002bfe <HAL_SYSTICK_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e00e      	b.n	8002958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b0f      	cmp	r3, #15
 800293e:	d80a      	bhi.n	8002956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002940:	2200      	movs	r2, #0
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f000 f92f 	bl	8002baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800294c:	4a06      	ldr	r2, [pc, #24]	@ (8002968 <HAL_InitTick+0x5c>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000008 	.word	0x20000008
 8002964:	20000010 	.word	0x20000010
 8002968:	2000000c 	.word	0x2000000c

0800296c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_IncTick+0x20>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_IncTick+0x24>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4413      	add	r3, r2
 800297c:	4a04      	ldr	r2, [pc, #16]	@ (8002990 <HAL_IncTick+0x24>)
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000010 	.word	0x20000010
 8002990:	20018e4c 	.word	0x20018e4c

08002994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return uwTick;
 8002998:	4b03      	ldr	r3, [pc, #12]	@ (80029a8 <HAL_GetTick+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20018e4c 	.word	0x20018e4c

080029ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff ffee 	bl	8002994 <HAL_GetTick>
 80029b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d005      	beq.n	80029d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <HAL_Delay+0x44>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029d2:	bf00      	nop
 80029d4:	f7ff ffde 	bl	8002994 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d8f7      	bhi.n	80029d4 <HAL_Delay+0x28>
  {
  }
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000010 	.word	0x20000010

080029f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a04:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a10:	4013      	ands	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a26:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	60d3      	str	r3, [r2, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a40:	4b04      	ldr	r3, [pc, #16]	@ (8002a54 <__NVIC_GetPriorityGrouping+0x18>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	f003 0307 	and.w	r3, r3, #7
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	db0b      	blt.n	8002a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4907      	ldr	r1, [pc, #28]	@ (8002a90 <__NVIC_EnableIRQ+0x38>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2001      	movs	r0, #1
 8002a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	db0a      	blt.n	8002abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	490c      	ldr	r1, [pc, #48]	@ (8002ae0 <__NVIC_SetPriority+0x4c>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002abc:	e00a      	b.n	8002ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4908      	ldr	r1, [pc, #32]	@ (8002ae4 <__NVIC_SetPriority+0x50>)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	3b04      	subs	r3, #4
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	761a      	strb	r2, [r3, #24]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000e100 	.word	0xe000e100
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	@ 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f1c3 0307 	rsb	r3, r3, #7
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	bf28      	it	cs
 8002b06:	2304      	movcs	r3, #4
 8002b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d902      	bls.n	8002b18 <NVIC_EncodePriority+0x30>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3b03      	subs	r3, #3
 8002b16:	e000      	b.n	8002b1a <NVIC_EncodePriority+0x32>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43d9      	mvns	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	4313      	orrs	r3, r2
         );
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3724      	adds	r7, #36	@ 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b60:	d301      	bcc.n	8002b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00f      	b.n	8002b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b66:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <SysTick_Config+0x40>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6e:	210f      	movs	r1, #15
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f7ff ff8e 	bl	8002a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <SysTick_Config+0x40>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7e:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <SysTick_Config+0x40>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010

08002b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff29 	bl	80029f4 <__NVIC_SetPriorityGrouping>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff3e 	bl	8002a3c <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff8e 	bl	8002ae8 <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5d 	bl	8002a94 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff31 	bl	8002a58 <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffa2 	bl	8002b50 <SysTick_Config>
 8002c0c:	4603      	mov	r3, r0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_DCMI_Start_DMA+0x20>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e08a      	b.n	8002d4e <HAL_DCMI_Start_DMA+0x136>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c56:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0202 	bic.w	r2, r2, #2
 8002c66:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7c:	4a36      	ldr	r2, [pc, #216]	@ (8002d58 <HAL_DCMI_Start_DMA+0x140>)
 8002c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	4a35      	ldr	r2, [pc, #212]	@ (8002d5c <HAL_DCMI_Start_DMA+0x144>)
 8002c86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi->XferTransferNumber = 0U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30

  if(Length <= 0xFFFFU)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca2:	d20c      	bcs.n	8002cbe <HAL_DCMI_Start_DMA+0xa6>
  {
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3328      	adds	r3, #40	@ 0x28
 8002cae:	4619      	mov	r1, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	f000 fb4c 	bl	8003350 <HAL_DMA_Start_IT>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	75fb      	strb	r3, [r7, #23]
 8002cbc:	e03a      	b.n	8002d34 <HAL_DCMI_Start_DMA+0x11c>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc2:	4a25      	ldr	r2, [pc, #148]	@ (8002d58 <HAL_DCMI_Start_DMA+0x140>)
 8002cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferSize = Length;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdcmi->pBuffPtr = pData;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8002cd8:	e009      	b.n	8002cee <HAL_DCMI_Start_DMA+0xd6>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cde:	085a      	lsrs	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	005a      	lsls	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	629a      	str	r2, [r3, #40]	@ 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf6:	d2f0      	bcs.n	8002cda <HAL_DCMI_Start_DMA+0xc2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	1e9a      	subs	r2, r3, #2
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

    /* Start DMA multi buffer transfer */
    status = HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3328      	adds	r3, #40	@ 0x28
 8002d20:	4619      	mov	r1, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	f000 fe70 	bl	8003a10 <HAL_DMAEx_MultiBufferStart_IT>
 8002d30:	4603      	mov	r3, r0
 8002d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return status;
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	08002fc3 	.word	0x08002fc3
 8002d5c:	080030ed 	.word	0x080030ed

08002d60 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8002d68:	4b29      	ldr	r3, [pc, #164]	@ (8002e10 <HAL_DCMI_Stop+0xb0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	4a29      	ldr	r2, [pc, #164]	@ (8002e14 <HAL_DCMI_Stop+0xb4>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_DCMI_Stop+0x2a>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e03e      	b.n	8002e08 <HAL_DCMI_Stop+0xa8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	60ba      	str	r2, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d108      	bne.n	8002dc6 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

      status = HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc4:	e006      	b.n	8002dd4 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ea      	bne.n	8002daa <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002de2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fb09 	bl	8003400 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return status;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000008 	.word	0x20000008
 8002e14:	92492493 	.word	0x92492493

08002e18 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01e      	beq.n	8002e70 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2204      	movs	r2, #4
 8002e38:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3e:	f043 0202 	orr.w	r2, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e52:	4a37      	ldr	r2, [pc, #220]	@ (8002f30 <HAL_DCMI_IRQHandler+0x118>)
 8002e54:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fb40 	bl	80034e0 <HAL_DMA_Abort_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f93e 	bl	80030ec <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01e      	beq.n	8002eb8 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2204      	movs	r2, #4
 8002e92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	4a25      	ldr	r2, [pc, #148]	@ (8002f30 <HAL_DCMI_IRQHandler+0x118>)
 8002e9c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fb1c 	bl	80034e0 <HAL_DMA_Abort_IT>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f91a 	bl	80030ec <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe fcca 	bl	8001864 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2208      	movs	r2, #8
 8002ee0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe fc8c 	bl	8001800 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d019      	beq.n	8002f26 <HAL_DCMI_IRQHandler+0x10e>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d107      	bne.n	8002f10 <HAL_DCMI_IRQHandler+0xf8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 021e 	bic.w	r2, r2, #30
 8002f0e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f811 	bl	8002f48 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	080030ed 	.word	0x080030ed

08002f34 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_DCMI_ConfigCrop>:
  * @param  XSize DCMI Pixel per line
  * @param  YSize DCMI Line number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_DCMI_ConfigCrop+0x1c>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e01e      	b.n	8002fb6 <HAL_DCMI_ConfigCrop+0x5a>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_POSITION_CWSIZE_VLINE));
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	0419      	lsls	r1, r3, #16
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_POSITION_CWSTRT_VST));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0419      	lsls	r1, r3, #16
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	621a      	str	r2, [r3, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd2:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d043      	beq.n	8003064 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fe8:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <DCMI_DMAXferCplt+0x66>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	00da      	lsls	r2, r3, #3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	2200      	movs	r2, #0
 8003016:	4619      	mov	r1, r3
 8003018:	f001 fe42 	bl	8004ca0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	1e5a      	subs	r2, r3, #1
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	629a      	str	r2, [r3, #40]	@ 0x28
 8003026:	e044      	b.n	80030b2 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d13c      	bne.n	80030b2 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	00da      	lsls	r2, r3, #3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	2201      	movs	r2, #1
 8003052:	4619      	mov	r1, r3
 8003054:	f001 fe24 	bl	8004ca0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	629a      	str	r2, [r3, #40]	@ 0x28
 8003062:	e026      	b.n	80030b2 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800307e:	60da      	str	r2, [r3, #12]
 8003080:	e017      	b.n	80030b2 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003096:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	0099      	lsls	r1, r3, #2
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	440a      	add	r2, r1
 80030a8:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d112      	bne.n	80030e4 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d103      	bne.n	80030e4 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	2b02      	cmp	r3, #2
 8003102:	d003      	beq.n	800310c <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff ff11 	bl	8002f34 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e05f      	b.n	80031ec <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fe ffb7 	bl	80020b4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fe ffb4 	bl	80020b4 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003162:	f023 0308 	bic.w	r3, r3, #8
 8003166:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800317c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003188:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003194:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d112      	bne.n	80031cc <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7f1b      	ldrb	r3, [r3, #28]
 80031aa:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7f5b      	ldrb	r3, [r3, #29]
 80031b0:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80031b2:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7f9b      	ldrb	r3, [r3, #30]
 80031b8:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80031ba:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7fdb      	ldrb	r3, [r3, #31]
 80031c2:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80031c8:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80031ca:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 021e 	orr.w	r2, r2, #30
 80031da:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff fbc8 	bl	8002994 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e099      	b.n	8003344 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003230:	e00f      	b.n	8003252 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003232:	f7ff fbaf 	bl	8002994 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b05      	cmp	r3, #5
 800323e:	d908      	bls.n	8003252 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e078      	b.n	8003344 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e8      	bne.n	8003232 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4b38      	ldr	r3, [pc, #224]	@ (800334c <HAL_DMA_Init+0x158>)
 800326c:	4013      	ands	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800327e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d107      	bne.n	80032bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	4313      	orrs	r3, r2
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0307 	bic.w	r3, r3, #7
 80032d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d117      	bne.n	8003316 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fb0d 	bl	8003918 <DMA_CheckFifoParam>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2240      	movs	r2, #64	@ 0x40
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003312:	2301      	movs	r3, #1
 8003314:	e016      	b.n	8003344 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fac4 	bl	80038ac <DMA_CalcBaseAndBitshift>
 8003324:	4603      	mov	r3, r0
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332c:	223f      	movs	r2, #63	@ 0x3f
 800332e:	409a      	lsls	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	f010803f 	.word	0xf010803f

08003350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_DMA_Start_IT+0x26>
 8003372:	2302      	movs	r3, #2
 8003374:	e040      	b.n	80033f8 <HAL_DMA_Start_IT+0xa8>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d12f      	bne.n	80033ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fa56 	bl	8003850 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	223f      	movs	r2, #63	@ 0x3f
 80033aa:	409a      	lsls	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0216 	orr.w	r2, r2, #22
 80033be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0208 	orr.w	r2, r2, #8
 80033d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e005      	b.n	80033f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033f2:	2302      	movs	r3, #2
 80033f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800340e:	f7ff fac1 	bl	8002994 <HAL_GetTick>
 8003412:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d008      	beq.n	8003432 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2280      	movs	r2, #128	@ 0x80
 8003424:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e052      	b.n	80034d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0216 	bic.w	r2, r2, #22
 8003440:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003450:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_DMA_Abort+0x62>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0208 	bic.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003482:	e013      	b.n	80034ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003484:	f7ff fa86 	bl	8002994 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b05      	cmp	r3, #5
 8003490:	d90c      	bls.n	80034ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2203      	movs	r2, #3
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e015      	b.n	80034d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e4      	bne.n	8003484 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	223f      	movs	r2, #63	@ 0x3f
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2280      	movs	r2, #128	@ 0x80
 80034f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00c      	b.n	8003518 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2205      	movs	r2, #5
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003530:	4b8e      	ldr	r3, [pc, #568]	@ (800376c <HAL_DMA_IRQHandler+0x248>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a8e      	ldr	r2, [pc, #568]	@ (8003770 <HAL_DMA_IRQHandler+0x24c>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0a9b      	lsrs	r3, r3, #10
 800353c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003542:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354e:	2208      	movs	r2, #8
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01a      	beq.n	8003590 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357c:	2208      	movs	r2, #8
 800357e:	409a      	lsls	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d012      	beq.n	80035c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b2:	2201      	movs	r2, #1
 80035b4:	409a      	lsls	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035be:	f043 0202 	orr.w	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ca:	2204      	movs	r2, #4
 80035cc:	409a      	lsls	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00b      	beq.n	80035fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e8:	2204      	movs	r2, #4
 80035ea:	409a      	lsls	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	2210      	movs	r2, #16
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d043      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d03c      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	2210      	movs	r2, #16
 8003620:	409a      	lsls	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d018      	beq.n	8003666 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d108      	bne.n	8003654 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d024      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
 8003652:	e01f      	b.n	8003694 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
 8003664:	e016      	b.n	8003694 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0208 	bic.w	r2, r2, #8
 8003682:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	2220      	movs	r2, #32
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 808f 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8087 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	2220      	movs	r2, #32
 80036bc:	409a      	lsls	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d136      	bne.n	800373c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0216 	bic.w	r2, r2, #22
 80036dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <HAL_DMA_IRQHandler+0x1da>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0208 	bic.w	r2, r2, #8
 800370c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003712:	223f      	movs	r2, #63	@ 0x3f
 8003714:	409a      	lsls	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372e:	2b00      	cmp	r3, #0
 8003730:	d07e      	beq.n	8003830 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
        }
        return;
 800373a:	e079      	b.n	8003830 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01d      	beq.n	8003786 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375c:	2b00      	cmp	r3, #0
 800375e:	d031      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e02c      	b.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
 800376a:	bf00      	nop
 800376c:	20000008 	.word	0x20000008
 8003770:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d023      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
 8003784:	e01e      	b.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10f      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0210 	bic.w	r2, r2, #16
 80037a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d032      	beq.n	8003832 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d022      	beq.n	800381e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2205      	movs	r2, #5
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d307      	bcc.n	800380c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f2      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x2cc>
 800380a:	e000      	b.n	800380e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800380c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
 800382e:	e000      	b.n	8003832 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003830:	bf00      	nop
    }
  }
}
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800386c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b40      	cmp	r3, #64	@ 0x40
 800387c:	d108      	bne.n	8003890 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800388e:	e007      	b.n	80038a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	3b10      	subs	r3, #16
 80038bc:	4a14      	ldr	r2, [pc, #80]	@ (8003910 <DMA_CalcBaseAndBitshift+0x64>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038c6:	4a13      	ldr	r2, [pc, #76]	@ (8003914 <DMA_CalcBaseAndBitshift+0x68>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d909      	bls.n	80038ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	1d1a      	adds	r2, r3, #4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80038ec:	e007      	b.n	80038fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	aaaaaaab 	.word	0xaaaaaaab
 8003914:	080155f8 	.word	0x080155f8

08003918 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11f      	bne.n	8003972 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d856      	bhi.n	80039e6 <DMA_CheckFifoParam+0xce>
 8003938:	a201      	add	r2, pc, #4	@ (adr r2, 8003940 <DMA_CheckFifoParam+0x28>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003951 	.word	0x08003951
 8003944:	08003963 	.word	0x08003963
 8003948:	08003951 	.word	0x08003951
 800394c:	080039e7 	.word	0x080039e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d046      	beq.n	80039ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003960:	e043      	b.n	80039ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800396a:	d140      	bne.n	80039ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e03d      	b.n	80039ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800397a:	d121      	bne.n	80039c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b03      	cmp	r3, #3
 8003980:	d837      	bhi.n	80039f2 <DMA_CheckFifoParam+0xda>
 8003982:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <DMA_CheckFifoParam+0x70>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	08003999 	.word	0x08003999
 800398c:	0800399f 	.word	0x0800399f
 8003990:	08003999 	.word	0x08003999
 8003994:	080039b1 	.word	0x080039b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e030      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d025      	beq.n	80039f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ae:	e022      	b.n	80039f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80039b8:	d11f      	bne.n	80039fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039be:	e01c      	b.n	80039fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d903      	bls.n	80039ce <DMA_CheckFifoParam+0xb6>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d003      	beq.n	80039d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039cc:	e018      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
      break;
 80039d2:	e015      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00e      	beq.n	80039fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e00b      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      break;
 80039e6:	bf00      	nop
 80039e8:	e00a      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039ea:	bf00      	nop
 80039ec:	e008      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039ee:	bf00      	nop
 80039f0:	e006      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039f2:	bf00      	nop
 80039f4:	e004      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;   
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop

08003a10 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b80      	cmp	r3, #128	@ 0x80
 8003a28:	d106      	bne.n	8003a38 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f001 b911 	b.w	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2240      	movs	r2, #64	@ 0x40
 8003a54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f001 b8ff 	b.w	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d102      	bne.n	8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8003a66:	2302      	movs	r3, #2
 8003a68:	f001 b8f7 	b.w	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	f041 80e5 	bne.w	8004c4c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003a9e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f001 f910 	bl	8004cd4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b8d      	ldr	r3, [pc, #564]	@ (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d960      	bls.n	8003b82 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a8b      	ldr	r2, [pc, #556]	@ (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d057      	beq.n	8003b7a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a8a      	ldr	r2, [pc, #552]	@ (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d050      	beq.n	8003b76 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a88      	ldr	r2, [pc, #544]	@ (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d049      	beq.n	8003b72 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a87      	ldr	r2, [pc, #540]	@ (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d042      	beq.n	8003b6e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a85      	ldr	r2, [pc, #532]	@ (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d03a      	beq.n	8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a84      	ldr	r2, [pc, #528]	@ (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d032      	beq.n	8003b62 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a82      	ldr	r2, [pc, #520]	@ (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d02a      	beq.n	8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a81      	ldr	r2, [pc, #516]	@ (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7f      	ldr	r2, [pc, #508]	@ (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01a      	beq.n	8003b50 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d012      	beq.n	8003b4a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a7c      	ldr	r2, [pc, #496]	@ (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00a      	beq.n	8003b44 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a7b      	ldr	r2, [pc, #492]	@ (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d102      	bne.n	8003b3e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003b38:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b3c:	e01e      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b3e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b42:	e01b      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b48:	e018      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b4a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b4e:	e015      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b50:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b54:	e012      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b5a:	e00f      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b60:	e00c      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b66:	e009      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b6c:	e006      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b6e:	2320      	movs	r3, #32
 8003b70:	e004      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b72:	2320      	movs	r3, #32
 8003b74:	e002      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b76:	2320      	movs	r3, #32
 8003b78:	e000      	b.n	8003b7c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	4a69      	ldr	r2, [pc, #420]	@ (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003b7e:	60d3      	str	r3, [r2, #12]
 8003b80:	e14f      	b.n	8003e22 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b67      	ldr	r3, [pc, #412]	@ (8003d28 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d960      	bls.n	8003c50 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a58      	ldr	r2, [pc, #352]	@ (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d057      	beq.n	8003c48 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a56      	ldr	r2, [pc, #344]	@ (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d050      	beq.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a55      	ldr	r2, [pc, #340]	@ (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d049      	beq.n	8003c40 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a53      	ldr	r2, [pc, #332]	@ (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d042      	beq.n	8003c3c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a52      	ldr	r2, [pc, #328]	@ (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d03a      	beq.n	8003c36 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a50      	ldr	r2, [pc, #320]	@ (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d032      	beq.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a4f      	ldr	r2, [pc, #316]	@ (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d02a      	beq.n	8003c2a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a4d      	ldr	r2, [pc, #308]	@ (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d022      	beq.n	8003c24 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a4c      	ldr	r2, [pc, #304]	@ (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d01a      	beq.n	8003c1e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a4a      	ldr	r2, [pc, #296]	@ (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d012      	beq.n	8003c18 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a49      	ldr	r2, [pc, #292]	@ (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00a      	beq.n	8003c12 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a47      	ldr	r2, [pc, #284]	@ (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d102      	bne.n	8003c0c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8003c06:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003c0a:	e01e      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c10:	e01b      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c12:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003c16:	e018      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003c1c:	e015      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c1e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003c22:	e012      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c28:	e00f      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c2e:	e00c      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c34:	e009      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c3a:	e006      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c3c:	2320      	movs	r3, #32
 8003c3e:	e004      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c40:	2320      	movs	r3, #32
 8003c42:	e002      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c44:	2320      	movs	r3, #32
 8003c46:	e000      	b.n	8003c4a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003c48:	2320      	movs	r3, #32
 8003c4a:	4a36      	ldr	r2, [pc, #216]	@ (8003d24 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003c4c:	6093      	str	r3, [r2, #8]
 8003c4e:	e0e8      	b.n	8003e22 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b35      	ldr	r3, [pc, #212]	@ (8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	f240 8082 	bls.w	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a24      	ldr	r2, [pc, #144]	@ (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d078      	beq.n	8003d5a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a22      	ldr	r2, [pc, #136]	@ (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d071      	beq.n	8003d56 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a21      	ldr	r2, [pc, #132]	@ (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d06a      	beq.n	8003d52 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1f      	ldr	r2, [pc, #124]	@ (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d063      	beq.n	8003d4e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d05b      	beq.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d053      	beq.n	8003d42 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d04b      	beq.n	8003d3c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d043      	beq.n	8003d36 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d03b      	beq.n	8003d30 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	@ (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d012      	beq.n	8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a15      	ldr	r2, [pc, #84]	@ (8003d1c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00a      	beq.n	8003ce2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a13      	ldr	r2, [pc, #76]	@ (8003d20 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d102      	bne.n	8003cdc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8003cd6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003cda:	e03f      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003cdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ce0:	e03c      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003ce2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003ce6:	e039      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003ce8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003cec:	e036      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003cee:	bf00      	nop
 8003cf0:	40026458 	.word	0x40026458
 8003cf4:	40026010 	.word	0x40026010
 8003cf8:	40026410 	.word	0x40026410
 8003cfc:	40026070 	.word	0x40026070
 8003d00:	40026470 	.word	0x40026470
 8003d04:	40026028 	.word	0x40026028
 8003d08:	40026428 	.word	0x40026428
 8003d0c:	40026088 	.word	0x40026088
 8003d10:	40026488 	.word	0x40026488
 8003d14:	40026040 	.word	0x40026040
 8003d18:	40026440 	.word	0x40026440
 8003d1c:	400260a0 	.word	0x400260a0
 8003d20:	400264a0 	.word	0x400264a0
 8003d24:	40026400 	.word	0x40026400
 8003d28:	400260b8 	.word	0x400260b8
 8003d2c:	40026058 	.word	0x40026058
 8003d30:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003d34:	e012      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003d36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d3a:	e00f      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003d3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d40:	e00c      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003d42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d46:	e009      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003d48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d4c:	e006      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003d4e:	2320      	movs	r3, #32
 8003d50:	e004      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003d52:	2320      	movs	r3, #32
 8003d54:	e002      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003d56:	2320      	movs	r3, #32
 8003d58:	e000      	b.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	4a8c      	ldr	r2, [pc, #560]	@ (8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003d5e:	60d3      	str	r3, [r2, #12]
 8003d60:	e05f      	b.n	8003e22 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a8b      	ldr	r2, [pc, #556]	@ (8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d057      	beq.n	8003e1c <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a89      	ldr	r2, [pc, #548]	@ (8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d050      	beq.n	8003e18 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a88      	ldr	r2, [pc, #544]	@ (8003f9c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d049      	beq.n	8003e14 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a86      	ldr	r2, [pc, #536]	@ (8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d042      	beq.n	8003e10 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a85      	ldr	r2, [pc, #532]	@ (8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d03a      	beq.n	8003e0a <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a83      	ldr	r2, [pc, #524]	@ (8003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d032      	beq.n	8003e04 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a82      	ldr	r2, [pc, #520]	@ (8003fac <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d02a      	beq.n	8003dfe <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a80      	ldr	r2, [pc, #512]	@ (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d022      	beq.n	8003df8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7f      	ldr	r2, [pc, #508]	@ (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d01a      	beq.n	8003df2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a7d      	ldr	r2, [pc, #500]	@ (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d012      	beq.n	8003dec <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a7c      	ldr	r2, [pc, #496]	@ (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00a      	beq.n	8003de6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a7a      	ldr	r2, [pc, #488]	@ (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d102      	bne.n	8003de0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8003dda:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dde:	e01e      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003de0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003de4:	e01b      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003de6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dea:	e018      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003dec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003df0:	e015      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003df2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003df6:	e012      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003df8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003dfc:	e00f      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003dfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e02:	e00c      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003e04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e08:	e009      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003e0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e0e:	e006      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003e10:	2320      	movs	r3, #32
 8003e12:	e004      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003e14:	2320      	movs	r3, #32
 8003e16:	e002      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003e18:	2320      	movs	r3, #32
 8003e1a:	e000      	b.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003e1c:	2320      	movs	r3, #32
 8003e1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003f90 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003e20:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	4b66      	ldr	r3, [pc, #408]	@ (8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d960      	bls.n	8003ef0 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a58      	ldr	r2, [pc, #352]	@ (8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d057      	beq.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a56      	ldr	r2, [pc, #344]	@ (8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d050      	beq.n	8003ee4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a55      	ldr	r2, [pc, #340]	@ (8003f9c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d049      	beq.n	8003ee0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a53      	ldr	r2, [pc, #332]	@ (8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d042      	beq.n	8003edc <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a52      	ldr	r2, [pc, #328]	@ (8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d03a      	beq.n	8003ed6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a50      	ldr	r2, [pc, #320]	@ (8003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d032      	beq.n	8003ed0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a4f      	ldr	r2, [pc, #316]	@ (8003fac <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d02a      	beq.n	8003eca <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a4d      	ldr	r2, [pc, #308]	@ (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d022      	beq.n	8003ec4 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4c      	ldr	r2, [pc, #304]	@ (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d01a      	beq.n	8003ebe <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d012      	beq.n	8003eb8 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a49      	ldr	r2, [pc, #292]	@ (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a47      	ldr	r2, [pc, #284]	@ (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d102      	bne.n	8003eac <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8003ea6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003eaa:	e01e      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003eac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003eb0:	e01b      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003eb2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003eb6:	e018      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003eb8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003ebc:	e015      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ebe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003ec2:	e012      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ec4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ec8:	e00f      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ece:	e00c      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ed4:	e009      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eda:	e006      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003edc:	2310      	movs	r3, #16
 8003ede:	e004      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	e002      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	e000      	b.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	4a37      	ldr	r2, [pc, #220]	@ (8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003eec:	60d3      	str	r3, [r2, #12]
 8003eee:	e14f      	b.n	8004190 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4b35      	ldr	r3, [pc, #212]	@ (8003fcc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	f240 8082 	bls.w	8004002 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a24      	ldr	r2, [pc, #144]	@ (8003f94 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d078      	beq.n	8003ffa <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a22      	ldr	r2, [pc, #136]	@ (8003f98 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d071      	beq.n	8003ff6 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a21      	ldr	r2, [pc, #132]	@ (8003f9c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d06a      	beq.n	8003ff2 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d063      	beq.n	8003fee <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d05b      	beq.n	8003fe8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d053      	beq.n	8003fe2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fac <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d04b      	beq.n	8003fdc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a19      	ldr	r2, [pc, #100]	@ (8003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d043      	beq.n	8003fd6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a18      	ldr	r2, [pc, #96]	@ (8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d03b      	beq.n	8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a16      	ldr	r2, [pc, #88]	@ (8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d012      	beq.n	8003f88 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a15      	ldr	r2, [pc, #84]	@ (8003fbc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00a      	beq.n	8003f82 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a13      	ldr	r2, [pc, #76]	@ (8003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d102      	bne.n	8003f7c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8003f76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f7a:	e03f      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003f7c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003f80:	e03c      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003f82:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f86:	e039      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003f88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f8c:	e036      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003f8e:	bf00      	nop
 8003f90:	40026000 	.word	0x40026000
 8003f94:	40026010 	.word	0x40026010
 8003f98:	40026410 	.word	0x40026410
 8003f9c:	40026070 	.word	0x40026070
 8003fa0:	40026470 	.word	0x40026470
 8003fa4:	40026028 	.word	0x40026028
 8003fa8:	40026428 	.word	0x40026428
 8003fac:	40026088 	.word	0x40026088
 8003fb0:	40026488 	.word	0x40026488
 8003fb4:	40026040 	.word	0x40026040
 8003fb8:	40026440 	.word	0x40026440
 8003fbc:	400260a0 	.word	0x400260a0
 8003fc0:	400264a0 	.word	0x400264a0
 8003fc4:	40026458 	.word	0x40026458
 8003fc8:	40026400 	.word	0x40026400
 8003fcc:	400260b8 	.word	0x400260b8
 8003fd0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003fd4:	e012      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fda:	e00f      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fe0:	e00c      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fe6:	e009      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fec:	e006      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003fee:	2310      	movs	r3, #16
 8003ff0:	e004      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	e002      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003ff6:	2310      	movs	r3, #16
 8003ff8:	e000      	b.n	8003ffc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	4a8c      	ldr	r2, [pc, #560]	@ (8004230 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8003ffe:	6093      	str	r3, [r2, #8]
 8004000:	e0c6      	b.n	8004190 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	4b8a      	ldr	r3, [pc, #552]	@ (8004234 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800400a:	429a      	cmp	r2, r3
 800400c:	d960      	bls.n	80040d0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a89      	ldr	r2, [pc, #548]	@ (8004238 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d057      	beq.n	80040c8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a87      	ldr	r2, [pc, #540]	@ (800423c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d050      	beq.n	80040c4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a86      	ldr	r2, [pc, #536]	@ (8004240 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d049      	beq.n	80040c0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a84      	ldr	r2, [pc, #528]	@ (8004244 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d042      	beq.n	80040bc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a83      	ldr	r2, [pc, #524]	@ (8004248 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d03a      	beq.n	80040b6 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a81      	ldr	r2, [pc, #516]	@ (800424c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d032      	beq.n	80040b0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a80      	ldr	r2, [pc, #512]	@ (8004250 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d02a      	beq.n	80040aa <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a7e      	ldr	r2, [pc, #504]	@ (8004254 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d022      	beq.n	80040a4 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a7d      	ldr	r2, [pc, #500]	@ (8004258 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d01a      	beq.n	800409e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a7b      	ldr	r2, [pc, #492]	@ (800425c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d012      	beq.n	8004098 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7a      	ldr	r2, [pc, #488]	@ (8004260 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00a      	beq.n	8004092 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a78      	ldr	r2, [pc, #480]	@ (8004264 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d102      	bne.n	800408c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8004086:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800408a:	e01e      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800408c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004090:	e01b      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004092:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004096:	e018      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004098:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800409c:	e015      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800409e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80040a2:	e012      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80040a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040a8:	e00f      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80040aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040ae:	e00c      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80040b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040b4:	e009      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80040b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040ba:	e006      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80040bc:	2310      	movs	r3, #16
 80040be:	e004      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80040c0:	2310      	movs	r3, #16
 80040c2:	e002      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80040c4:	2310      	movs	r3, #16
 80040c6:	e000      	b.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80040c8:	2310      	movs	r3, #16
 80040ca:	4a67      	ldr	r2, [pc, #412]	@ (8004268 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80040cc:	60d3      	str	r3, [r2, #12]
 80040ce:	e05f      	b.n	8004190 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a58      	ldr	r2, [pc, #352]	@ (8004238 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d057      	beq.n	800418a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a57      	ldr	r2, [pc, #348]	@ (800423c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d050      	beq.n	8004186 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a55      	ldr	r2, [pc, #340]	@ (8004240 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d049      	beq.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a54      	ldr	r2, [pc, #336]	@ (8004244 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d042      	beq.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a52      	ldr	r2, [pc, #328]	@ (8004248 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d03a      	beq.n	8004178 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a51      	ldr	r2, [pc, #324]	@ (800424c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d032      	beq.n	8004172 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a4f      	ldr	r2, [pc, #316]	@ (8004250 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02a      	beq.n	800416c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a4e      	ldr	r2, [pc, #312]	@ (8004254 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a4c      	ldr	r2, [pc, #304]	@ (8004258 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01a      	beq.n	8004160 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4b      	ldr	r2, [pc, #300]	@ (800425c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d012      	beq.n	800415a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a49      	ldr	r2, [pc, #292]	@ (8004260 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00a      	beq.n	8004154 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a48      	ldr	r2, [pc, #288]	@ (8004264 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d102      	bne.n	800414e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8004148:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800414c:	e01e      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800414e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004152:	e01b      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004154:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004158:	e018      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800415a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800415e:	e015      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004160:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004164:	e012      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800416a:	e00f      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800416c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004170:	e00c      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004176:	e009      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800417c:	e006      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800417e:	2310      	movs	r3, #16
 8004180:	e004      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004182:	2310      	movs	r3, #16
 8004184:	e002      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004186:	2310      	movs	r3, #16
 8004188:	e000      	b.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800418a:	2310      	movs	r3, #16
 800418c:	4a36      	ldr	r2, [pc, #216]	@ (8004268 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800418e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	4b35      	ldr	r3, [pc, #212]	@ (800426c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004198:	429a      	cmp	r2, r3
 800419a:	f240 8082 	bls.w	80042a2 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a25      	ldr	r2, [pc, #148]	@ (8004238 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d078      	beq.n	800429a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a23      	ldr	r2, [pc, #140]	@ (800423c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d071      	beq.n	8004296 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a22      	ldr	r2, [pc, #136]	@ (8004240 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d06a      	beq.n	8004292 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a20      	ldr	r2, [pc, #128]	@ (8004244 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d063      	beq.n	800428e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004248 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d05b      	beq.n	8004288 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	@ (800424c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d053      	beq.n	8004282 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1c      	ldr	r2, [pc, #112]	@ (8004250 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d04b      	beq.n	800427c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004254 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d043      	beq.n	8004276 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d03b      	beq.n	8004270 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a17      	ldr	r2, [pc, #92]	@ (800425c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d012      	beq.n	8004228 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00a      	beq.n	8004222 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a14      	ldr	r2, [pc, #80]	@ (8004264 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d102      	bne.n	800421c <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8004216:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800421a:	e03f      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800421c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004220:	e03c      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004222:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004226:	e039      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004228:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800422c:	e036      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800422e:	bf00      	nop
 8004230:	40026400 	.word	0x40026400
 8004234:	40026058 	.word	0x40026058
 8004238:	40026010 	.word	0x40026010
 800423c:	40026410 	.word	0x40026410
 8004240:	40026070 	.word	0x40026070
 8004244:	40026470 	.word	0x40026470
 8004248:	40026028 	.word	0x40026028
 800424c:	40026428 	.word	0x40026428
 8004250:	40026088 	.word	0x40026088
 8004254:	40026488 	.word	0x40026488
 8004258:	40026040 	.word	0x40026040
 800425c:	40026440 	.word	0x40026440
 8004260:	400260a0 	.word	0x400260a0
 8004264:	400264a0 	.word	0x400264a0
 8004268:	40026000 	.word	0x40026000
 800426c:	40026458 	.word	0x40026458
 8004270:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004274:	e012      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004276:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800427a:	e00f      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800427c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004280:	e00c      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004286:	e009      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800428c:	e006      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800428e:	2308      	movs	r3, #8
 8004290:	e004      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004292:	2308      	movs	r3, #8
 8004294:	e002      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004296:	2308      	movs	r3, #8
 8004298:	e000      	b.n	800429c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800429a:	2308      	movs	r3, #8
 800429c:	4a8c      	ldr	r2, [pc, #560]	@ (80044d0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800429e:	60d3      	str	r3, [r2, #12]
 80042a0:	e14e      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b8a      	ldr	r3, [pc, #552]	@ (80044d4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d960      	bls.n	8004370 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a89      	ldr	r2, [pc, #548]	@ (80044d8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d057      	beq.n	8004368 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a87      	ldr	r2, [pc, #540]	@ (80044dc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d050      	beq.n	8004364 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a86      	ldr	r2, [pc, #536]	@ (80044e0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d049      	beq.n	8004360 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a84      	ldr	r2, [pc, #528]	@ (80044e4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d042      	beq.n	800435c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a83      	ldr	r2, [pc, #524]	@ (80044e8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d03a      	beq.n	8004356 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a81      	ldr	r2, [pc, #516]	@ (80044ec <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d032      	beq.n	8004350 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a80      	ldr	r2, [pc, #512]	@ (80044f0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d02a      	beq.n	800434a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7e      	ldr	r2, [pc, #504]	@ (80044f4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d022      	beq.n	8004344 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7d      	ldr	r2, [pc, #500]	@ (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d01a      	beq.n	800433e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a7b      	ldr	r2, [pc, #492]	@ (80044fc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d012      	beq.n	8004338 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7a      	ldr	r2, [pc, #488]	@ (8004500 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00a      	beq.n	8004332 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a78      	ldr	r2, [pc, #480]	@ (8004504 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d102      	bne.n	800432c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8004326:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800432a:	e01e      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800432c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004330:	e01b      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004332:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004336:	e018      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004338:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800433c:	e015      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800433e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004342:	e012      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004348:	e00f      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800434a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800434e:	e00c      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004354:	e009      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800435a:	e006      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800435c:	2308      	movs	r3, #8
 800435e:	e004      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004360:	2308      	movs	r3, #8
 8004362:	e002      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004364:	2308      	movs	r3, #8
 8004366:	e000      	b.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004368:	2308      	movs	r3, #8
 800436a:	4a59      	ldr	r2, [pc, #356]	@ (80044d0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800436c:	6093      	str	r3, [r2, #8]
 800436e:	e0e7      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	4b64      	ldr	r3, [pc, #400]	@ (8004508 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004378:	429a      	cmp	r2, r3
 800437a:	d960      	bls.n	800443e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a55      	ldr	r2, [pc, #340]	@ (80044d8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d057      	beq.n	8004436 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a54      	ldr	r2, [pc, #336]	@ (80044dc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d050      	beq.n	8004432 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a52      	ldr	r2, [pc, #328]	@ (80044e0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d049      	beq.n	800442e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a51      	ldr	r2, [pc, #324]	@ (80044e4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d042      	beq.n	800442a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a4f      	ldr	r2, [pc, #316]	@ (80044e8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d03a      	beq.n	8004424 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4e      	ldr	r2, [pc, #312]	@ (80044ec <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d032      	beq.n	800441e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a4c      	ldr	r2, [pc, #304]	@ (80044f0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02a      	beq.n	8004418 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4b      	ldr	r2, [pc, #300]	@ (80044f4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a49      	ldr	r2, [pc, #292]	@ (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01a      	beq.n	800440c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a48      	ldr	r2, [pc, #288]	@ (80044fc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d012      	beq.n	8004406 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a46      	ldr	r2, [pc, #280]	@ (8004500 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00a      	beq.n	8004400 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a45      	ldr	r2, [pc, #276]	@ (8004504 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d102      	bne.n	80043fa <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80043f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80043f8:	e01e      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80043fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043fe:	e01b      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004400:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004404:	e018      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004406:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800440a:	e015      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800440c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004410:	e012      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004412:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004416:	e00f      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800441c:	e00c      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800441e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004422:	e009      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004428:	e006      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800442a:	2308      	movs	r3, #8
 800442c:	e004      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800442e:	2308      	movs	r3, #8
 8004430:	e002      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004432:	2308      	movs	r3, #8
 8004434:	e000      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004436:	2308      	movs	r3, #8
 8004438:	4a34      	ldr	r2, [pc, #208]	@ (800450c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800443a:	60d3      	str	r3, [r2, #12]
 800443c:	e080      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a25      	ldr	r2, [pc, #148]	@ (80044d8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d078      	beq.n	800453a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a23      	ldr	r2, [pc, #140]	@ (80044dc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d071      	beq.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a22      	ldr	r2, [pc, #136]	@ (80044e0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d06a      	beq.n	8004532 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a20      	ldr	r2, [pc, #128]	@ (80044e4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d063      	beq.n	800452e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1f      	ldr	r2, [pc, #124]	@ (80044e8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d05b      	beq.n	8004528 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1d      	ldr	r2, [pc, #116]	@ (80044ec <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d053      	beq.n	8004522 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1c      	ldr	r2, [pc, #112]	@ (80044f0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d04b      	beq.n	800451c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1a      	ldr	r2, [pc, #104]	@ (80044f4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d043      	beq.n	8004516 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a19      	ldr	r2, [pc, #100]	@ (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d03b      	beq.n	8004510 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a17      	ldr	r2, [pc, #92]	@ (80044fc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d012      	beq.n	80044c8 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a16      	ldr	r2, [pc, #88]	@ (8004500 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00a      	beq.n	80044c2 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a14      	ldr	r2, [pc, #80]	@ (8004504 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d102      	bne.n	80044bc <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80044b6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80044ba:	e03f      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80044bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044c0:	e03c      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80044c2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80044c6:	e039      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80044c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80044cc:	e036      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80044ce:	bf00      	nop
 80044d0:	40026400 	.word	0x40026400
 80044d4:	400260b8 	.word	0x400260b8
 80044d8:	40026010 	.word	0x40026010
 80044dc:	40026410 	.word	0x40026410
 80044e0:	40026070 	.word	0x40026070
 80044e4:	40026470 	.word	0x40026470
 80044e8:	40026028 	.word	0x40026028
 80044ec:	40026428 	.word	0x40026428
 80044f0:	40026088 	.word	0x40026088
 80044f4:	40026488 	.word	0x40026488
 80044f8:	40026040 	.word	0x40026040
 80044fc:	40026440 	.word	0x40026440
 8004500:	400260a0 	.word	0x400260a0
 8004504:	400264a0 	.word	0x400264a0
 8004508:	40026058 	.word	0x40026058
 800450c:	40026000 	.word	0x40026000
 8004510:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004514:	e012      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800451a:	e00f      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800451c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004520:	e00c      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004522:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004526:	e009      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800452c:	e006      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800452e:	2308      	movs	r3, #8
 8004530:	e004      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004532:	2308      	movs	r3, #8
 8004534:	e002      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004536:	2308      	movs	r3, #8
 8004538:	e000      	b.n	800453c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800453a:	2308      	movs	r3, #8
 800453c:	4a8a      	ldr	r2, [pc, #552]	@ (8004768 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800453e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	4b89      	ldr	r3, [pc, #548]	@ (800476c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004548:	429a      	cmp	r2, r3
 800454a:	d960      	bls.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a87      	ldr	r2, [pc, #540]	@ (8004770 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d057      	beq.n	8004606 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a86      	ldr	r2, [pc, #536]	@ (8004774 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d050      	beq.n	8004602 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a84      	ldr	r2, [pc, #528]	@ (8004778 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d049      	beq.n	80045fe <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a83      	ldr	r2, [pc, #524]	@ (800477c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d042      	beq.n	80045fa <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a81      	ldr	r2, [pc, #516]	@ (8004780 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d03a      	beq.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a80      	ldr	r2, [pc, #512]	@ (8004784 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d032      	beq.n	80045ee <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a7e      	ldr	r2, [pc, #504]	@ (8004788 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d02a      	beq.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a7d      	ldr	r2, [pc, #500]	@ (800478c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d022      	beq.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a7b      	ldr	r2, [pc, #492]	@ (8004790 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01a      	beq.n	80045dc <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a7a      	ldr	r2, [pc, #488]	@ (8004794 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d012      	beq.n	80045d6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a78      	ldr	r2, [pc, #480]	@ (8004798 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00a      	beq.n	80045d0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a77      	ldr	r2, [pc, #476]	@ (800479c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d102      	bne.n	80045ca <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80045c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80045c8:	e01e      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045ce:	e01b      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80045d4:	e018      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045d6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80045da:	e015      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80045e0:	e012      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045e6:	e00f      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045ec:	e00c      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045f2:	e009      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045f8:	e006      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045fa:	2304      	movs	r3, #4
 80045fc:	e004      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80045fe:	2304      	movs	r3, #4
 8004600:	e002      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004602:	2304      	movs	r3, #4
 8004604:	e000      	b.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004606:	2304      	movs	r3, #4
 8004608:	4a65      	ldr	r2, [pc, #404]	@ (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800460a:	60d3      	str	r3, [r2, #12]
 800460c:	e150      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	4b63      	ldr	r3, [pc, #396]	@ (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004616:	429a      	cmp	r2, r3
 8004618:	d960      	bls.n	80046dc <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a54      	ldr	r2, [pc, #336]	@ (8004770 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d057      	beq.n	80046d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a52      	ldr	r2, [pc, #328]	@ (8004774 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d050      	beq.n	80046d0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a51      	ldr	r2, [pc, #324]	@ (8004778 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d049      	beq.n	80046cc <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a4f      	ldr	r2, [pc, #316]	@ (800477c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d042      	beq.n	80046c8 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a4e      	ldr	r2, [pc, #312]	@ (8004780 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d03a      	beq.n	80046c2 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a4c      	ldr	r2, [pc, #304]	@ (8004784 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d032      	beq.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a4b      	ldr	r2, [pc, #300]	@ (8004788 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d02a      	beq.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a49      	ldr	r2, [pc, #292]	@ (800478c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d022      	beq.n	80046b0 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a48      	ldr	r2, [pc, #288]	@ (8004790 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d01a      	beq.n	80046aa <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a46      	ldr	r2, [pc, #280]	@ (8004794 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d012      	beq.n	80046a4 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a45      	ldr	r2, [pc, #276]	@ (8004798 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00a      	beq.n	800469e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a43      	ldr	r2, [pc, #268]	@ (800479c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d102      	bne.n	8004698 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8004692:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004696:	e01e      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004698:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800469c:	e01b      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800469e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80046a2:	e018      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80046a8:	e015      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046aa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80046ae:	e012      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046b4:	e00f      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046ba:	e00c      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046c0:	e009      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046c6:	e006      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046c8:	2304      	movs	r3, #4
 80046ca:	e004      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046cc:	2304      	movs	r3, #4
 80046ce:	e002      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046d0:	2304      	movs	r3, #4
 80046d2:	e000      	b.n	80046d6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80046d4:	2304      	movs	r3, #4
 80046d6:	4a32      	ldr	r2, [pc, #200]	@ (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80046d8:	6093      	str	r3, [r2, #8]
 80046da:	e0e9      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	4b31      	ldr	r3, [pc, #196]	@ (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80046e4:	429a      	cmp	r2, r3
 80046e6:	f240 8083 	bls.w	80047f0 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a20      	ldr	r2, [pc, #128]	@ (8004770 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d079      	beq.n	80047e8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004774 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d072      	beq.n	80047e4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1d      	ldr	r2, [pc, #116]	@ (8004778 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d06b      	beq.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1b      	ldr	r2, [pc, #108]	@ (800477c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d064      	beq.n	80047dc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1a      	ldr	r2, [pc, #104]	@ (8004780 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d05c      	beq.n	80047d6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a18      	ldr	r2, [pc, #96]	@ (8004784 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d054      	beq.n	80047d0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a17      	ldr	r2, [pc, #92]	@ (8004788 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d04c      	beq.n	80047ca <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a15      	ldr	r2, [pc, #84]	@ (800478c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d044      	beq.n	80047c4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a14      	ldr	r2, [pc, #80]	@ (8004790 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d03c      	beq.n	80047be <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d034      	beq.n	80047b8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a11      	ldr	r2, [pc, #68]	@ (8004798 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d02c      	beq.n	80047b2 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0f      	ldr	r2, [pc, #60]	@ (800479c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d124      	bne.n	80047ac <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8004762:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004766:	e040      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004768:	40026000 	.word	0x40026000
 800476c:	40026458 	.word	0x40026458
 8004770:	40026010 	.word	0x40026010
 8004774:	40026410 	.word	0x40026410
 8004778:	40026070 	.word	0x40026070
 800477c:	40026470 	.word	0x40026470
 8004780:	40026028 	.word	0x40026028
 8004784:	40026428 	.word	0x40026428
 8004788:	40026088 	.word	0x40026088
 800478c:	40026488 	.word	0x40026488
 8004790:	40026040 	.word	0x40026040
 8004794:	40026440 	.word	0x40026440
 8004798:	400260a0 	.word	0x400260a0
 800479c:	400264a0 	.word	0x400264a0
 80047a0:	40026400 	.word	0x40026400
 80047a4:	400260b8 	.word	0x400260b8
 80047a8:	40026058 	.word	0x40026058
 80047ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b0:	e01b      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047b2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80047b6:	e018      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80047bc:	e015      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047be:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80047c2:	e012      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047c8:	e00f      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047ce:	e00c      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047d4:	e009      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047da:	e006      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047dc:	2304      	movs	r3, #4
 80047de:	e004      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047e0:	2304      	movs	r3, #4
 80047e2:	e002      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047e4:	2304      	movs	r3, #4
 80047e6:	e000      	b.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80047e8:	2304      	movs	r3, #4
 80047ea:	4a8b      	ldr	r2, [pc, #556]	@ (8004a18 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80047ec:	60d3      	str	r3, [r2, #12]
 80047ee:	e05f      	b.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a89      	ldr	r2, [pc, #548]	@ (8004a1c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d057      	beq.n	80048aa <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a88      	ldr	r2, [pc, #544]	@ (8004a20 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d050      	beq.n	80048a6 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a86      	ldr	r2, [pc, #536]	@ (8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d049      	beq.n	80048a2 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a85      	ldr	r2, [pc, #532]	@ (8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d042      	beq.n	800489e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a83      	ldr	r2, [pc, #524]	@ (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d03a      	beq.n	8004898 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a82      	ldr	r2, [pc, #520]	@ (8004a30 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d032      	beq.n	8004892 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a80      	ldr	r2, [pc, #512]	@ (8004a34 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d02a      	beq.n	800488c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a7f      	ldr	r2, [pc, #508]	@ (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a7d      	ldr	r2, [pc, #500]	@ (8004a3c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01a      	beq.n	8004880 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a40 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d012      	beq.n	800487a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a7a      	ldr	r2, [pc, #488]	@ (8004a44 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00a      	beq.n	8004874 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a79      	ldr	r2, [pc, #484]	@ (8004a48 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d102      	bne.n	800486e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8004868:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800486c:	e01e      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800486e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004872:	e01b      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004874:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004878:	e018      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800487a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800487e:	e015      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004880:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004884:	e012      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800488a:	e00f      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800488c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004890:	e00c      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004892:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004896:	e009      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800489c:	e006      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800489e:	2304      	movs	r3, #4
 80048a0:	e004      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80048a2:	2304      	movs	r3, #4
 80048a4:	e002      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80048a6:	2304      	movs	r3, #4
 80048a8:	e000      	b.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80048aa:	2304      	movs	r3, #4
 80048ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004a18 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80048ae:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	4b65      	ldr	r3, [pc, #404]	@ (8004a4c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d95c      	bls.n	8004976 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a56      	ldr	r2, [pc, #344]	@ (8004a1c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d053      	beq.n	800496e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a55      	ldr	r2, [pc, #340]	@ (8004a20 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d04c      	beq.n	800496a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a53      	ldr	r2, [pc, #332]	@ (8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d045      	beq.n	8004966 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a52      	ldr	r2, [pc, #328]	@ (8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d03e      	beq.n	8004962 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a50      	ldr	r2, [pc, #320]	@ (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d037      	beq.n	800495e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a4f      	ldr	r2, [pc, #316]	@ (8004a30 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d030      	beq.n	800495a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a4d      	ldr	r2, [pc, #308]	@ (8004a34 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d029      	beq.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a4c      	ldr	r2, [pc, #304]	@ (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d022      	beq.n	8004952 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a4a      	ldr	r2, [pc, #296]	@ (8004a3c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01a      	beq.n	800494c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a49      	ldr	r2, [pc, #292]	@ (8004a40 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d012      	beq.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a47      	ldr	r2, [pc, #284]	@ (8004a44 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00a      	beq.n	8004940 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a46      	ldr	r2, [pc, #280]	@ (8004a48 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d102      	bne.n	800493a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8004934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004938:	e01a      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800493a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800493e:	e017      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004940:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004944:	e014      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004946:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800494a:	e011      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800494c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004950:	e00e      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004952:	2340      	movs	r3, #64	@ 0x40
 8004954:	e00c      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004956:	2340      	movs	r3, #64	@ 0x40
 8004958:	e00a      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800495a:	2340      	movs	r3, #64	@ 0x40
 800495c:	e008      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800495e:	2340      	movs	r3, #64	@ 0x40
 8004960:	e006      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004962:	2301      	movs	r3, #1
 8004964:	e004      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004966:	2301      	movs	r3, #1
 8004968:	e002      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800496e:	2301      	movs	r3, #1
 8004970:	4a37      	ldr	r2, [pc, #220]	@ (8004a50 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8004972:	60d3      	str	r3, [r2, #12]
 8004974:	e141      	b.n	8004bfa <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	4b35      	ldr	r3, [pc, #212]	@ (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800497e:	429a      	cmp	r2, r3
 8004980:	d97c      	bls.n	8004a7c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a25      	ldr	r2, [pc, #148]	@ (8004a1c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d073      	beq.n	8004a74 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a23      	ldr	r2, [pc, #140]	@ (8004a20 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d06c      	beq.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a22      	ldr	r2, [pc, #136]	@ (8004a24 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d065      	beq.n	8004a6c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a20      	ldr	r2, [pc, #128]	@ (8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d05e      	beq.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1f      	ldr	r2, [pc, #124]	@ (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d057      	beq.n	8004a64 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a30 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d050      	beq.n	8004a60 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a34 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d049      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d042      	beq.n	8004a58 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a19      	ldr	r2, [pc, #100]	@ (8004a3c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d01a      	beq.n	8004a12 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a17      	ldr	r2, [pc, #92]	@ (8004a40 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d012      	beq.n	8004a0c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a16      	ldr	r2, [pc, #88]	@ (8004a44 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00a      	beq.n	8004a06 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a14      	ldr	r2, [pc, #80]	@ (8004a48 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d102      	bne.n	8004a00 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80049fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049fe:	e03a      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a04:	e037      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a0a:	e034      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a10:	e031      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a16:	e02e      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a18:	40026000 	.word	0x40026000
 8004a1c:	40026010 	.word	0x40026010
 8004a20:	40026410 	.word	0x40026410
 8004a24:	40026070 	.word	0x40026070
 8004a28:	40026470 	.word	0x40026470
 8004a2c:	40026028 	.word	0x40026028
 8004a30:	40026428 	.word	0x40026428
 8004a34:	40026088 	.word	0x40026088
 8004a38:	40026488 	.word	0x40026488
 8004a3c:	40026040 	.word	0x40026040
 8004a40:	40026440 	.word	0x40026440
 8004a44:	400260a0 	.word	0x400260a0
 8004a48:	400264a0 	.word	0x400264a0
 8004a4c:	40026458 	.word	0x40026458
 8004a50:	40026400 	.word	0x40026400
 8004a54:	400260b8 	.word	0x400260b8
 8004a58:	2340      	movs	r3, #64	@ 0x40
 8004a5a:	e00c      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a5c:	2340      	movs	r3, #64	@ 0x40
 8004a5e:	e00a      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a60:	2340      	movs	r3, #64	@ 0x40
 8004a62:	e008      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a64:	2340      	movs	r3, #64	@ 0x40
 8004a66:	e006      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e004      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e002      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004a74:	2301      	movs	r3, #1
 8004a76:	4a7b      	ldr	r2, [pc, #492]	@ (8004c64 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8004a78:	6093      	str	r3, [r2, #8]
 8004a7a:	e0be      	b.n	8004bfa <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b79      	ldr	r3, [pc, #484]	@ (8004c68 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d95c      	bls.n	8004b42 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a77      	ldr	r2, [pc, #476]	@ (8004c6c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d053      	beq.n	8004b3a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a76      	ldr	r2, [pc, #472]	@ (8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d04c      	beq.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a74      	ldr	r2, [pc, #464]	@ (8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d045      	beq.n	8004b32 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a73      	ldr	r2, [pc, #460]	@ (8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d03e      	beq.n	8004b2e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a71      	ldr	r2, [pc, #452]	@ (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d037      	beq.n	8004b2a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a70      	ldr	r2, [pc, #448]	@ (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d030      	beq.n	8004b26 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d029      	beq.n	8004b22 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6d      	ldr	r2, [pc, #436]	@ (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d022      	beq.n	8004b1e <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a6b      	ldr	r2, [pc, #428]	@ (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01a      	beq.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a6a      	ldr	r2, [pc, #424]	@ (8004c90 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d012      	beq.n	8004b12 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a68      	ldr	r2, [pc, #416]	@ (8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00a      	beq.n	8004b0c <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a67      	ldr	r2, [pc, #412]	@ (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d102      	bne.n	8004b06 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8004b00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b04:	e01a      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b0a:	e017      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b10:	e014      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b16:	e011      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b1c:	e00e      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b1e:	2340      	movs	r3, #64	@ 0x40
 8004b20:	e00c      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b22:	2340      	movs	r3, #64	@ 0x40
 8004b24:	e00a      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b26:	2340      	movs	r3, #64	@ 0x40
 8004b28:	e008      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b2a:	2340      	movs	r3, #64	@ 0x40
 8004b2c:	e006      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e004      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e002      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	4a57      	ldr	r2, [pc, #348]	@ (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004b3e:	60d3      	str	r3, [r2, #12]
 8004b40:	e05b      	b.n	8004bfa <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a49      	ldr	r2, [pc, #292]	@ (8004c6c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d053      	beq.n	8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a47      	ldr	r2, [pc, #284]	@ (8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d04c      	beq.n	8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a46      	ldr	r2, [pc, #280]	@ (8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d045      	beq.n	8004bec <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a44      	ldr	r2, [pc, #272]	@ (8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d03e      	beq.n	8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a43      	ldr	r2, [pc, #268]	@ (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d037      	beq.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a41      	ldr	r2, [pc, #260]	@ (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d030      	beq.n	8004be0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a40      	ldr	r2, [pc, #256]	@ (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d029      	beq.n	8004bdc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3e      	ldr	r2, [pc, #248]	@ (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a3d      	ldr	r2, [pc, #244]	@ (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a3b      	ldr	r2, [pc, #236]	@ (8004c90 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d012      	beq.n	8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3a      	ldr	r2, [pc, #232]	@ (8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00a      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a38      	ldr	r2, [pc, #224]	@ (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d102      	bne.n	8004bc0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8004bba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bbe:	e01a      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004bc0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bc4:	e017      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004bc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bca:	e014      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bd0:	e011      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004bd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bd6:	e00e      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004bd8:	2340      	movs	r3, #64	@ 0x40
 8004bda:	e00c      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004bdc:	2340      	movs	r3, #64	@ 0x40
 8004bde:	e00a      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004be0:	2340      	movs	r3, #64	@ 0x40
 8004be2:	e008      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004be4:	2340      	movs	r3, #64	@ 0x40
 8004be6:	e006      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e004      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e002      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4a29      	ldr	r2, [pc, #164]	@ (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004bf8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0216 	orr.w	r2, r2, #22
 8004c08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0208 	orr.w	r2, r2, #8
 8004c38:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e005      	b.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c54:	2302      	movs	r3, #2
 8004c56:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40026400 	.word	0x40026400
 8004c68:	40026058 	.word	0x40026058
 8004c6c:	40026010 	.word	0x40026010
 8004c70:	40026410 	.word	0x40026410
 8004c74:	40026070 	.word	0x40026070
 8004c78:	40026470 	.word	0x40026470
 8004c7c:	40026028 	.word	0x40026028
 8004c80:	40026428 	.word	0x40026428
 8004c84:	40026088 	.word	0x40026088
 8004c88:	40026488 	.word	0x40026488
 8004c8c:	40026040 	.word	0x40026040
 8004c90:	40026440 	.word	0x40026440
 8004c94:	400260a0 	.word	0x400260a0
 8004c98:	400264a0 	.word	0x400264a0
 8004c9c:	40026000 	.word	0x40026000

08004ca0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d104      	bne.n	8004cbe <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	60da      	str	r2, [r3, #12]
 8004cbc:	e003      	b.n	8004cc6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b40      	cmp	r3, #64	@ 0x40
 8004cf0:	d108      	bne.n	8004d04 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d02:	e007      	b.n	8004d14 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	60da      	str	r2, [r3, #12]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	@ 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e16b      	b.n	8005014 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	f040 815a 	bne.w	800500e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d005      	beq.n	8004d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d130      	bne.n	8004dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004da8:	2201      	movs	r2, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 0201 	and.w	r2, r3, #1
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d017      	beq.n	8004e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	2203      	movs	r2, #3
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d123      	bne.n	8004e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	08da      	lsrs	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3208      	adds	r2, #8
 8004e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	220f      	movs	r2, #15
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	08da      	lsrs	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3208      	adds	r2, #8
 8004e5e:	69b9      	ldr	r1, [r7, #24]
 8004e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	2203      	movs	r2, #3
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80b4 	beq.w	800500e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4b60      	ldr	r3, [pc, #384]	@ (800502c <HAL_GPIO_Init+0x30c>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eae:	4a5f      	ldr	r2, [pc, #380]	@ (800502c <HAL_GPIO_Init+0x30c>)
 8004eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800502c <HAL_GPIO_Init+0x30c>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ec2:	4a5b      	ldr	r2, [pc, #364]	@ (8005030 <HAL_GPIO_Init+0x310>)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	3302      	adds	r3, #2
 8004eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	220f      	movs	r2, #15
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a52      	ldr	r2, [pc, #328]	@ (8005034 <HAL_GPIO_Init+0x314>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02b      	beq.n	8004f46 <HAL_GPIO_Init+0x226>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a51      	ldr	r2, [pc, #324]	@ (8005038 <HAL_GPIO_Init+0x318>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d025      	beq.n	8004f42 <HAL_GPIO_Init+0x222>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a50      	ldr	r2, [pc, #320]	@ (800503c <HAL_GPIO_Init+0x31c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01f      	beq.n	8004f3e <HAL_GPIO_Init+0x21e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a4f      	ldr	r2, [pc, #316]	@ (8005040 <HAL_GPIO_Init+0x320>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d019      	beq.n	8004f3a <HAL_GPIO_Init+0x21a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a4e      	ldr	r2, [pc, #312]	@ (8005044 <HAL_GPIO_Init+0x324>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_GPIO_Init+0x216>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a4d      	ldr	r2, [pc, #308]	@ (8005048 <HAL_GPIO_Init+0x328>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00d      	beq.n	8004f32 <HAL_GPIO_Init+0x212>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a4c      	ldr	r2, [pc, #304]	@ (800504c <HAL_GPIO_Init+0x32c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <HAL_GPIO_Init+0x20e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a4b      	ldr	r2, [pc, #300]	@ (8005050 <HAL_GPIO_Init+0x330>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d101      	bne.n	8004f2a <HAL_GPIO_Init+0x20a>
 8004f26:	2307      	movs	r3, #7
 8004f28:	e00e      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	e00c      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f2e:	2306      	movs	r3, #6
 8004f30:	e00a      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f32:	2305      	movs	r3, #5
 8004f34:	e008      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f36:	2304      	movs	r3, #4
 8004f38:	e006      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e004      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e002      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_GPIO_Init+0x228>
 8004f46:	2300      	movs	r3, #0
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	f002 0203 	and.w	r2, r2, #3
 8004f4e:	0092      	lsls	r2, r2, #2
 8004f50:	4093      	lsls	r3, r2
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f58:	4935      	ldr	r1, [pc, #212]	@ (8005030 <HAL_GPIO_Init+0x310>)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	3302      	adds	r3, #2
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f66:	4b3b      	ldr	r3, [pc, #236]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f8a:	4a32      	ldr	r2, [pc, #200]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f90:	4b30      	ldr	r3, [pc, #192]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fb4:	4a27      	ldr	r2, [pc, #156]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fba:	4b26      	ldr	r3, [pc, #152]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fde:	4a1d      	ldr	r2, [pc, #116]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8005054 <HAL_GPIO_Init+0x334>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005008:	4a12      	ldr	r2, [pc, #72]	@ (8005054 <HAL_GPIO_Init+0x334>)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3301      	adds	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	f67f ae90 	bls.w	8004d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	3724      	adds	r7, #36	@ 0x24
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	40013800 	.word	0x40013800
 8005034:	40020000 	.word	0x40020000
 8005038:	40020400 	.word	0x40020400
 800503c:	40020800 	.word	0x40020800
 8005040:	40020c00 	.word	0x40020c00
 8005044:	40021000 	.word	0x40021000
 8005048:	40021400 	.word	0x40021400
 800504c:	40021800 	.word	0x40021800
 8005050:	40021c00 	.word	0x40021c00
 8005054:	40013c00 	.word	0x40013c00

08005058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	807b      	strh	r3, [r7, #2]
 8005064:	4613      	mov	r3, r2
 8005066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005068:	787b      	ldrb	r3, [r7, #1]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005074:	e003      	b.n	800507e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005076:	887b      	ldrh	r3, [r7, #2]
 8005078:	041a      	lsls	r2, r3, #16
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	619a      	str	r2, [r3, #24]
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005096:	4b08      	ldr	r3, [pc, #32]	@ (80050b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050a2:	4a05      	ldr	r2, [pc, #20]	@ (80050b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fc ff80 	bl	8001fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40013c00 	.word	0x40013c00

080050bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t pclk1;

  /* Check the I2C handle allocation */


  if (hi2c == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e12b      	b.n	8005326 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fd f8f6 	bl	80022d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2224      	movs	r2, #36	@ 0x24
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800510e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800511e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005120:	f002 f9ee 	bl	8007500 <HAL_RCC_GetPCLK1Freq>
 8005124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4a81      	ldr	r2, [pc, #516]	@ (8005330 <HAL_I2C_Init+0x274>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d807      	bhi.n	8005140 <HAL_I2C_Init+0x84>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4a80      	ldr	r2, [pc, #512]	@ (8005334 <HAL_I2C_Init+0x278>)
 8005134:	4293      	cmp	r3, r2
 8005136:	bf94      	ite	ls
 8005138:	2301      	movls	r3, #1
 800513a:	2300      	movhi	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e006      	b.n	800514e <HAL_I2C_Init+0x92>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a7d      	ldr	r2, [pc, #500]	@ (8005338 <HAL_I2C_Init+0x27c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	bf94      	ite	ls
 8005148:	2301      	movls	r3, #1
 800514a:	2300      	movhi	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0e7      	b.n	8005326 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a78      	ldr	r2, [pc, #480]	@ (800533c <HAL_I2C_Init+0x280>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0c9b      	lsrs	r3, r3, #18
 8005160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4a6a      	ldr	r2, [pc, #424]	@ (8005330 <HAL_I2C_Init+0x274>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d802      	bhi.n	8005190 <HAL_I2C_Init+0xd4>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	3301      	adds	r3, #1
 800518e:	e009      	b.n	80051a4 <HAL_I2C_Init+0xe8>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	4a69      	ldr	r2, [pc, #420]	@ (8005340 <HAL_I2C_Init+0x284>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	3301      	adds	r3, #1
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80051b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	495c      	ldr	r1, [pc, #368]	@ (8005330 <HAL_I2C_Init+0x274>)
 80051c0:	428b      	cmp	r3, r1
 80051c2:	d819      	bhi.n	80051f8 <HAL_I2C_Init+0x13c>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1e59      	subs	r1, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80051d8:	400b      	ands	r3, r1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_I2C_Init+0x138>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1e59      	subs	r1, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ec:	3301      	adds	r3, #1
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	e051      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 80051f4:	2304      	movs	r3, #4
 80051f6:	e04f      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d111      	bne.n	8005224 <HAL_I2C_Init+0x168>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1e58      	subs	r0, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6859      	ldr	r1, [r3, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	440b      	add	r3, r1
 800520e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005212:	3301      	adds	r3, #1
 8005214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e012      	b.n	800524a <HAL_I2C_Init+0x18e>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1e58      	subs	r0, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	0099      	lsls	r1, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	fbb0 f3f3 	udiv	r3, r0, r3
 800523a:	3301      	adds	r3, #1
 800523c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_I2C_Init+0x196>
 800524e:	2301      	movs	r3, #1
 8005250:	e022      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10e      	bne.n	8005278 <HAL_I2C_Init+0x1bc>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1e58      	subs	r0, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	440b      	add	r3, r1
 8005268:	fbb0 f3f3 	udiv	r3, r0, r3
 800526c:	3301      	adds	r3, #1
 800526e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005276:	e00f      	b.n	8005298 <HAL_I2C_Init+0x1dc>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1e58      	subs	r0, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	0099      	lsls	r1, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	fbb0 f3f3 	udiv	r3, r0, r3
 800528e:	3301      	adds	r3, #1
 8005290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005294:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	6809      	ldr	r1, [r1, #0]
 800529c:	4313      	orrs	r3, r2
 800529e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80052c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6911      	ldr	r1, [r2, #16]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68d2      	ldr	r2, [r2, #12]
 80052d2:	4311      	orrs	r1, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	430b      	orrs	r3, r1
 80052da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	000186a0 	.word	0x000186a0
 8005334:	001e847f 	.word	0x001e847f
 8005338:	003d08ff 	.word	0x003d08ff
 800533c:	431bde83 	.word	0x431bde83
 8005340:	10624dd3 	.word	0x10624dd3

08005344 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	@ 0x28
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	460b      	mov	r3, r1
 8005352:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005354:	f7fd fb1e 	bl	8002994 <HAL_GetTick>
 8005358:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b20      	cmp	r3, #32
 8005368:	f040 8111 	bne.w	800558e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2319      	movs	r3, #25
 8005372:	2201      	movs	r2, #1
 8005374:	4988      	ldr	r1, [pc, #544]	@ (8005598 <HAL_I2C_IsDeviceReady+0x254>)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f912 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	e104      	b.n	8005590 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_I2C_IsDeviceReady+0x50>
 8005390:	2302      	movs	r3, #2
 8005392:	e0fd      	b.n	8005590 <HAL_I2C_IsDeviceReady+0x24c>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d007      	beq.n	80053ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2224      	movs	r2, #36	@ 0x24
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a70      	ldr	r2, [pc, #448]	@ (800559c <HAL_I2C_IsDeviceReady+0x258>)
 80053dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f8d0 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005414:	d103      	bne.n	800541e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800541c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e0b6      	b.n	8005590 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005422:	897b      	ldrh	r3, [r7, #10]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005430:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005432:	f7fd faaf 	bl	8002994 <HAL_GetTick>
 8005436:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005466:	e025      	b.n	80054b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005468:	f7fd fa94 	bl	8002994 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <HAL_I2C_IsDeviceReady+0x13a>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	22a0      	movs	r2, #160	@ 0xa0
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b02      	cmp	r3, #2
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80054be:	d005      	beq.n	80054cc <HAL_I2C_IsDeviceReady+0x188>
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <HAL_I2C_IsDeviceReady+0x188>
 80054c6:	7dbb      	ldrb	r3, [r7, #22]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0cd      	beq.n	8005468 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d129      	bne.n	8005536 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	2319      	movs	r3, #25
 800550e:	2201      	movs	r2, #1
 8005510:	4921      	ldr	r1, [pc, #132]	@ (8005598 <HAL_I2C_IsDeviceReady+0x254>)
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f844 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e036      	b.n	8005590 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	e02c      	b.n	8005590 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005544:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800554e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	2319      	movs	r3, #25
 8005556:	2201      	movs	r2, #1
 8005558:	490f      	ldr	r1, [pc, #60]	@ (8005598 <HAL_I2C_IsDeviceReady+0x254>)
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f820 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e012      	b.n	8005590 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	3301      	adds	r3, #1
 800556e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	f4ff af32 	bcc.w	80053de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800558e:	2302      	movs	r3, #2
  }
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	00100002 	.word	0x00100002
 800559c:	ffff0000 	.word	0xffff0000

080055a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b0:	e048      	b.n	8005644 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d044      	beq.n	8005644 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ba:	f7fd f9eb 	bl	8002994 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d139      	bne.n	8005644 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d10d      	bne.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	43da      	mvns	r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4013      	ands	r3, r2
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	e00c      	b.n	8005610 <I2C_WaitOnFlagUntilTimeout+0x70>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	43da      	mvns	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4013      	ands	r3, r2
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	bf0c      	ite	eq
 8005608:	2301      	moveq	r3, #1
 800560a:	2300      	movne	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	429a      	cmp	r2, r3
 8005614:	d116      	bne.n	8005644 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005630:	f043 0220 	orr.w	r2, r3, #32
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e023      	b.n	800568c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10d      	bne.n	800566a <I2C_WaitOnFlagUntilTimeout+0xca>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	43da      	mvns	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4013      	ands	r3, r2
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	e00c      	b.n	8005684 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	43da      	mvns	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4013      	ands	r3, r2
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	429a      	cmp	r2, r3
 8005688:	d093      	beq.n	80055b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af02      	add	r7, sp, #8
 800569a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e101      	b.n	80058aa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f00c fb21 	bl	8011d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2203      	movs	r2, #3
 80056ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056d4:	d102      	bne.n	80056dc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f004 fd98 	bl	800a216 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	7c1a      	ldrb	r2, [r3, #16]
 80056ee:	f88d 2000 	strb.w	r2, [sp]
 80056f2:	3304      	adds	r3, #4
 80056f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056f6:	f004 fc77 	bl	8009fe8 <USB_CoreInit>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0ce      	b.n	80058aa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f004 fd90 	bl	800a238 <USB_SetCurrentMode>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e0bf      	b.n	80058aa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572a:	2300      	movs	r3, #0
 800572c:	73fb      	strb	r3, [r7, #15]
 800572e:	e04a      	b.n	80057c6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005730:	7bfa      	ldrb	r2, [r7, #15]
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	3315      	adds	r3, #21
 8005740:	2201      	movs	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005744:	7bfa      	ldrb	r2, [r7, #15]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	3314      	adds	r3, #20
 8005754:	7bfa      	ldrb	r2, [r7, #15]
 8005756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005758:	7bfa      	ldrb	r2, [r7, #15]
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	b298      	uxth	r0, r3
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	332e      	adds	r3, #46	@ 0x2e
 800576c:	4602      	mov	r2, r0
 800576e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005770:	7bfa      	ldrb	r2, [r7, #15]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	3318      	adds	r3, #24
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005784:	7bfa      	ldrb	r2, [r7, #15]
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	331c      	adds	r3, #28
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005798:	7bfa      	ldrb	r2, [r7, #15]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	3320      	adds	r3, #32
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057ac:	7bfa      	ldrb	r2, [r7, #15]
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	3324      	adds	r3, #36	@ 0x24
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	3301      	adds	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	791b      	ldrb	r3, [r3, #4]
 80057ca:	7bfa      	ldrb	r2, [r7, #15]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d3af      	bcc.n	8005730 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057d0:	2300      	movs	r3, #0
 80057d2:	73fb      	strb	r3, [r7, #15]
 80057d4:	e044      	b.n	8005860 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057d6:	7bfa      	ldrb	r2, [r7, #15]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057ec:	7bfa      	ldrb	r2, [r7, #15]
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80057fe:	7bfa      	ldrb	r2, [r7, #15]
 8005800:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005802:	7bfa      	ldrb	r2, [r7, #15]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005818:	7bfa      	ldrb	r2, [r7, #15]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800582e:	7bfa      	ldrb	r2, [r7, #15]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005844:	7bfa      	ldrb	r2, [r7, #15]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	3301      	adds	r3, #1
 800585e:	73fb      	strb	r3, [r7, #15]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	791b      	ldrb	r3, [r3, #4]
 8005864:	7bfa      	ldrb	r2, [r7, #15]
 8005866:	429a      	cmp	r2, r3
 8005868:	d3b5      	bcc.n	80057d6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	7c1a      	ldrb	r2, [r3, #16]
 8005872:	f88d 2000 	strb.w	r2, [sp]
 8005876:	3304      	adds	r3, #4
 8005878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800587a:	f004 fd29 	bl	800a2d0 <USB_DevInit>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e00c      	b.n	80058aa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f005 fd73 	bl	800b38e <USB_DevDisconnect>

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_PCD_Start+0x1c>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e022      	b.n	8005914 <HAL_PCD_Start+0x62>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d105      	bne.n	80058f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f004 fc7a 	bl	800a1f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f005 fd21 	bl	800b34c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800591c:	b590      	push	{r4, r7, lr}
 800591e:	b08d      	sub	sp, #52	@ 0x34
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f005 fddf 	bl	800b4f6 <USB_GetMode>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	f040 848c 	bne.w	8006258 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f005 fd43 	bl	800b3d0 <USB_ReadInterrupts>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8482 	beq.w	8006256 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0a1b      	lsrs	r3, r3, #8
 800595c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f005 fd30 	bl	800b3d0 <USB_ReadInterrupts>
 8005970:	4603      	mov	r3, r0
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d107      	bne.n	800598a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695a      	ldr	r2, [r3, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f002 0202 	and.w	r2, r2, #2
 8005988:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f005 fd1e 	bl	800b3d0 <USB_ReadInterrupts>
 8005994:	4603      	mov	r3, r0
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b10      	cmp	r3, #16
 800599c:	d161      	bne.n	8005a62 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0210 	bic.w	r2, r2, #16
 80059ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f003 020f 	and.w	r2, r3, #15
 80059ba:	4613      	mov	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4413      	add	r3, r2
 80059ca:	3304      	adds	r3, #4
 80059cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80059d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059d8:	d124      	bne.n	8005a24 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d035      	beq.n	8005a52 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	6a38      	ldr	r0, [r7, #32]
 80059fa:	f005 fb55 	bl	800b0a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a0a:	441a      	add	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a1c:	441a      	add	r2, r3
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	615a      	str	r2, [r3, #20]
 8005a22:	e016      	b.n	8005a52 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005a2a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a2e:	d110      	bne.n	8005a52 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a36:	2208      	movs	r2, #8
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6a38      	ldr	r0, [r7, #32]
 8005a3c:	f005 fb34 	bl	800b0a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a4c:	441a      	add	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0210 	orr.w	r2, r2, #16
 8005a60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f005 fcb2 	bl	800b3d0 <USB_ReadInterrupts>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a76:	f040 80a7 	bne.w	8005bc8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f005 fcb7 	bl	800b3f6 <USB_ReadDevAllOutEpInterrupt>
 8005a88:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005a8a:	e099      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 808e 	beq.w	8005bb4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f005 fcdb 	bl	800b45e <USB_ReadDevOutEPInterrupt>
 8005aa8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00c      	beq.n	8005ace <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005ac6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fea3 	bl	8006814 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00c      	beq.n	8005af2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005aea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 ff79 	bl	80069e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2310      	movs	r3, #16
 8005b0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d030      	beq.n	8005b7a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b20:	2b80      	cmp	r3, #128	@ 0x80
 8005b22:	d109      	bne.n	8005b38 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b36:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	78db      	ldrb	r3, [r3, #3]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d108      	bne.n	8005b68 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f00c f9d6 	bl	8011f14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b74:	461a      	mov	r2, r3
 8005b76:	2302      	movs	r3, #2
 8005b78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	2320      	movs	r3, #32
 8005b94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bac:	461a      	mov	r2, r3
 8005bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005bb2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f47f af62 	bne.w	8005a8c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f005 fbff 	bl	800b3d0 <USB_ReadInterrupts>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bdc:	f040 80db 	bne.w	8005d96 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f005 fc20 	bl	800b42a <USB_ReadDevAllInEpInterrupt>
 8005bea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005bf0:	e0cd      	b.n	8005d8e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 80c2 	beq.w	8005d82 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f005 fc46 	bl	800b49a <USB_ReadDevInEPInterrupt>
 8005c0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d057      	beq.n	8005cca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2201      	movs	r2, #1
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69f9      	ldr	r1, [r7, #28]
 8005c36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	799b      	ldrb	r3, [r3, #6]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d132      	bne.n	8005cbe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	3320      	adds	r3, #32
 8005c68:	6819      	ldr	r1, [r3, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4403      	add	r3, r0
 8005c78:	331c      	adds	r3, #28
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4419      	add	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4403      	add	r3, r0
 8005c8c:	3320      	adds	r3, #32
 8005c8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <HAL_PCD_IRQHandler+0x3a2>
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3324      	adds	r3, #36	@ 0x24
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d108      	bne.n	8005cbe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2101      	movs	r1, #1
 8005cba:	f005 fc4d 	bl	800b558 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f00c f8a0 	bl	8011e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2310      	movs	r3, #16
 8005d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d18:	461a      	mov	r2, r3
 8005d1a:	2340      	movs	r3, #64	@ 0x40
 8005d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d023      	beq.n	8005d70 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d2a:	6a38      	ldr	r0, [r7, #32]
 8005d2c:	f004 fc34 	bl	800a598 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d32:	4613      	mov	r3, r2
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	3310      	adds	r3, #16
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4413      	add	r3, r2
 8005d40:	3304      	adds	r3, #4
 8005d42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	78db      	ldrb	r3, [r3, #3]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d108      	bne.n	8005d5e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f00c f8ed 	bl	8011f38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fcbd 	bl	80066fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	3301      	adds	r3, #1
 8005d86:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f47f af2e 	bne.w	8005bf2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f005 fb18 	bl	800b3d0 <USB_ReadInterrupts>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005daa:	d122      	bne.n	8005df2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d108      	bne.n	8005ddc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fea3 	bl	8006b20 <HAL_PCDEx_LPM_Callback>
 8005dda:	e002      	b.n	8005de2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f00c f88b 	bl	8011ef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f005 faea 	bl	800b3d0 <USB_ReadInterrupts>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e06:	d112      	bne.n	8005e2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d102      	bne.n	8005e1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f00c f847 	bl	8011eac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005e2c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f005 facc 	bl	800b3d0 <USB_ReadInterrupts>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e42:	f040 80b7 	bne.w	8005fb4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2110      	movs	r1, #16
 8005e60:	4618      	mov	r0, r3
 8005e62:	f004 fb99 	bl	800a598 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e66:	2300      	movs	r3, #0
 8005e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e6a:	e046      	b.n	8005efa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eac:	461a      	mov	r2, r3
 8005eae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005eb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ece:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ed2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ef2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	791b      	ldrb	r3, [r3, #4]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d3b2      	bcc.n	8005e6c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f14:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005f18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	7bdb      	ldrb	r3, [r3, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d016      	beq.n	8005f50 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f32:	f043 030b 	orr.w	r3, r3, #11
 8005f36:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f48:	f043 030b 	orr.w	r3, r3, #11
 8005f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f4e:	e015      	b.n	8005f7c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005f62:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005f66:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f76:	f043 030b 	orr.w	r3, r3, #11
 8005f7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f005 fada 	bl	800b558 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695a      	ldr	r2, [r3, #20]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f005 fa09 	bl	800b3d0 <USB_ReadInterrupts>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fc8:	d123      	bne.n	8006012 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f005 fa9f 	bl	800b512 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f004 fb56 	bl	800a68a <USB_GetDevSpeed>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681c      	ldr	r4, [r3, #0]
 8005fea:	f001 fa7d 	bl	80074e8 <HAL_RCC_GetHCLKFreq>
 8005fee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f004 f85a 	bl	800a0b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f00b ff2c 	bl	8011e5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006010:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f005 f9da 	bl	800b3d0 <USB_ReadInterrupts>
 800601c:	4603      	mov	r3, r0
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b08      	cmp	r3, #8
 8006024:	d10a      	bne.n	800603c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f00b ff09 	bl	8011e3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f002 0208 	and.w	r2, r2, #8
 800603a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f005 f9c5 	bl	800b3d0 <USB_ReadInterrupts>
 8006046:	4603      	mov	r3, r0
 8006048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604c:	2b80      	cmp	r3, #128	@ 0x80
 800604e:	d123      	bne.n	8006098 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800605c:	2301      	movs	r3, #1
 800605e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006060:	e014      	b.n	800608c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006066:	4613      	mov	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d105      	bne.n	8006086 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	b2db      	uxtb	r3, r3
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb0a 	bl	800669a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	3301      	adds	r3, #1
 800608a:	627b      	str	r3, [r7, #36]	@ 0x24
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	791b      	ldrb	r3, [r3, #4]
 8006090:	461a      	mov	r2, r3
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	4293      	cmp	r3, r2
 8006096:	d3e4      	bcc.n	8006062 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f005 f997 	bl	800b3d0 <USB_ReadInterrupts>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060ac:	d13c      	bne.n	8006128 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060ae:	2301      	movs	r3, #1
 80060b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060b2:	e02b      	b.n	800610c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c8:	4613      	mov	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	3318      	adds	r3, #24
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d115      	bne.n	8006106 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80060da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060dc:	2b00      	cmp	r3, #0
 80060de:	da12      	bge.n	8006106 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e4:	4613      	mov	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	3317      	adds	r3, #23
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 faca 	bl	800669a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	3301      	adds	r3, #1
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	791b      	ldrb	r3, [r3, #4]
 8006110:	461a      	mov	r2, r3
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	4293      	cmp	r3, r2
 8006116:	d3cd      	bcc.n	80060b4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695a      	ldr	r2, [r3, #20]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f005 f94f 	bl	800b3d0 <USB_ReadInterrupts>
 8006132:	4603      	mov	r3, r0
 8006134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006138:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800613c:	d156      	bne.n	80061ec <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800613e:	2301      	movs	r3, #1
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
 8006142:	e045      	b.n	80061d0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006158:	4613      	mov	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d12e      	bne.n	80061ca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800616c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800616e:	2b00      	cmp	r3, #0
 8006170:	da2b      	bge.n	80061ca <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	0c1a      	lsrs	r2, r3, #16
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800617c:	4053      	eors	r3, r2
 800617e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006182:	2b00      	cmp	r3, #0
 8006184:	d121      	bne.n	80061ca <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618a:	4613      	mov	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061c6:	6053      	str	r3, [r2, #4]
            break;
 80061c8:	e008      	b.n	80061dc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	3301      	adds	r3, #1
 80061ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	791b      	ldrb	r3, [r3, #4]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	4293      	cmp	r3, r2
 80061da:	d3b3      	bcc.n	8006144 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695a      	ldr	r2, [r3, #20]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80061ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f005 f8ed 	bl	800b3d0 <USB_ReadInterrupts>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006200:	d10a      	bne.n	8006218 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f00b feaa 	bl	8011f5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4618      	mov	r0, r3
 800621e:	f005 f8d7 	bl	800b3d0 <USB_ReadInterrupts>
 8006222:	4603      	mov	r3, r0
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b04      	cmp	r3, #4
 800622a:	d115      	bne.n	8006258 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f00b fe9a 	bl	8011f78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
 8006254:	e000      	b.n	8006258 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006256:	bf00      	nop
    }
  }
}
 8006258:	3734      	adds	r7, #52	@ 0x34
 800625a:	46bd      	mov	sp, r7
 800625c:	bd90      	pop	{r4, r7, pc}

0800625e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_PCD_SetAddress+0x1a>
 8006274:	2302      	movs	r3, #2
 8006276:	e012      	b.n	800629e <HAL_PCD_SetAddress+0x40>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	78fa      	ldrb	r2, [r7, #3]
 8006284:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	78fa      	ldrb	r2, [r7, #3]
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f005 f836 	bl	800b300 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	4608      	mov	r0, r1
 80062b0:	4611      	mov	r1, r2
 80062b2:	461a      	mov	r2, r3
 80062b4:	4603      	mov	r3, r0
 80062b6:	70fb      	strb	r3, [r7, #3]
 80062b8:	460b      	mov	r3, r1
 80062ba:	803b      	strh	r3, [r7, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da0f      	bge.n	80062ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	f003 020f 	and.w	r2, r3, #15
 80062d2:	4613      	mov	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	3310      	adds	r3, #16
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	4413      	add	r3, r2
 80062e0:	3304      	adds	r3, #4
 80062e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	705a      	strb	r2, [r3, #1]
 80062ea:	e00f      	b.n	800630c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	f003 020f 	and.w	r2, r3, #15
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	4413      	add	r3, r2
 8006302:	3304      	adds	r3, #4
 8006304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	b2da      	uxtb	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006318:	883b      	ldrh	r3, [r7, #0]
 800631a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	78ba      	ldrb	r2, [r7, #2]
 8006326:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800633a:	78bb      	ldrb	r3, [r7, #2]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d102      	bne.n	8006346 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_PCD_EP_Open+0xae>
 8006350:	2302      	movs	r3, #2
 8006352:	e00e      	b.n	8006372 <HAL_PCD_EP_Open+0xcc>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68f9      	ldr	r1, [r7, #12]
 8006362:	4618      	mov	r0, r3
 8006364:	f004 f9b6 	bl	800a6d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006370:	7afb      	ldrb	r3, [r7, #11]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800638a:	2b00      	cmp	r3, #0
 800638c:	da0f      	bge.n	80063ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	f003 020f 	and.w	r2, r3, #15
 8006394:	4613      	mov	r3, r2
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	3310      	adds	r3, #16
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	3304      	adds	r3, #4
 80063a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	705a      	strb	r2, [r3, #1]
 80063ac:	e00f      	b.n	80063ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	f003 020f 	and.w	r2, r3, #15
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	3304      	adds	r3, #4
 80063c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_PCD_EP_Close+0x6e>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e00e      	b.n	8006406 <HAL_PCD_EP_Close+0x8c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68f9      	ldr	r1, [r7, #12]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f004 f9f4 	bl	800a7e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	460b      	mov	r3, r1
 800641c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800641e:	7afb      	ldrb	r3, [r7, #11]
 8006420:	f003 020f 	and.w	r2, r3, #15
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	3304      	adds	r3, #4
 8006436:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2200      	movs	r2, #0
 8006448:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2200      	movs	r2, #0
 800644e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006450:	7afb      	ldrb	r3, [r7, #11]
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	b2da      	uxtb	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	799b      	ldrb	r3, [r3, #6]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d102      	bne.n	800646a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	799b      	ldrb	r3, [r3, #6]
 8006472:	461a      	mov	r2, r3
 8006474:	6979      	ldr	r1, [r7, #20]
 8006476:	f004 fa91 	bl	800a99c <USB_EPStartXfer>

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	f003 020f 	and.w	r2, r3, #15
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	4613      	mov	r3, r2
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80064a6:	681b      	ldr	r3, [r3, #0]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	460b      	mov	r3, r1
 80064c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	f003 020f 	and.w	r2, r3, #15
 80064ca:	4613      	mov	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	3310      	adds	r3, #16
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	3304      	adds	r3, #4
 80064da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2200      	movs	r2, #0
 80064ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2201      	movs	r2, #1
 80064f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064f4:	7afb      	ldrb	r3, [r7, #11]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	799b      	ldrb	r3, [r3, #6]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d102      	bne.n	800650e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	799b      	ldrb	r3, [r3, #6]
 8006516:	461a      	mov	r2, r3
 8006518:	6979      	ldr	r1, [r7, #20]
 800651a:	f004 fa3f 	bl	800a99c <USB_EPStartXfer>

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	7912      	ldrb	r2, [r2, #4]
 800653e:	4293      	cmp	r3, r2
 8006540:	d901      	bls.n	8006546 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e04f      	b.n	80065e6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800654a:	2b00      	cmp	r3, #0
 800654c:	da0f      	bge.n	800656e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	f003 020f 	and.w	r2, r3, #15
 8006554:	4613      	mov	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	3310      	adds	r3, #16
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	4413      	add	r3, r2
 8006562:	3304      	adds	r3, #4
 8006564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	705a      	strb	r2, [r3, #1]
 800656c:	e00d      	b.n	800658a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800656e:	78fa      	ldrb	r2, [r7, #3]
 8006570:	4613      	mov	r3, r2
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	3304      	adds	r3, #4
 8006582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_PCD_EP_SetStall+0x82>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e01d      	b.n	80065e6 <HAL_PCD_EP_SetStall+0xbe>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f004 fdcd 	bl	800b158 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	7999      	ldrb	r1, [r3, #6]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065d6:	461a      	mov	r2, r3
 80065d8:	f004 ffbe 	bl	800b558 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	460b      	mov	r3, r1
 80065f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	7912      	ldrb	r2, [r2, #4]
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e042      	b.n	8006692 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800660c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006610:	2b00      	cmp	r3, #0
 8006612:	da0f      	bge.n	8006634 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	f003 020f 	and.w	r2, r3, #15
 800661a:	4613      	mov	r3, r2
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	3310      	adds	r3, #16
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	3304      	adds	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	705a      	strb	r2, [r3, #1]
 8006632:	e00f      	b.n	8006654 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	f003 020f 	and.w	r2, r3, #15
 800663a:	4613      	mov	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	4413      	add	r3, r2
 800664a:	3304      	adds	r3, #4
 800664c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	b2da      	uxtb	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_PCD_EP_ClrStall+0x86>
 8006670:	2302      	movs	r3, #2
 8006672:	e00e      	b.n	8006692 <HAL_PCD_EP_ClrStall+0xa4>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68f9      	ldr	r1, [r7, #12]
 8006682:	4618      	mov	r0, r3
 8006684:	f004 fdd6 	bl	800b234 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80066a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da0c      	bge.n	80066c8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	f003 020f 	and.w	r2, r3, #15
 80066b4:	4613      	mov	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	3310      	adds	r3, #16
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	3304      	adds	r3, #4
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e00c      	b.n	80066e2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	f003 020f 	and.w	r2, r3, #15
 80066ce:	4613      	mov	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	3304      	adds	r3, #4
 80066e0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f004 fbf5 	bl	800aed8 <USB_EPStopXfer>
 80066ee:	4603      	mov	r3, r0
 80066f0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80066f2:	7afb      	ldrb	r3, [r7, #11]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	4613      	mov	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	3310      	adds	r3, #16
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	4413      	add	r3, r2
 8006720:	3304      	adds	r3, #4
 8006722:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	695a      	ldr	r2, [r3, #20]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	429a      	cmp	r2, r3
 800672e:	d901      	bls.n	8006734 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e06b      	b.n	800680c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	429a      	cmp	r2, r3
 8006748:	d902      	bls.n	8006750 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	3303      	adds	r3, #3
 8006754:	089b      	lsrs	r3, r3, #2
 8006756:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006758:	e02a      	b.n	80067b0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	429a      	cmp	r2, r3
 800676e:	d902      	bls.n	8006776 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	3303      	adds	r3, #3
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68d9      	ldr	r1, [r3, #12]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	4603      	mov	r3, r0
 8006792:	6978      	ldr	r0, [r7, #20]
 8006794:	f004 fc4a 	bl	800b02c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	441a      	add	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	441a      	add	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d809      	bhi.n	80067da <PCD_WriteEmptyTxFifo+0xde>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	695a      	ldr	r2, [r3, #20]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d203      	bcs.n	80067da <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1bf      	bne.n	800675a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d811      	bhi.n	800680a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	2201      	movs	r2, #1
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	43db      	mvns	r3, r3
 8006800:	6939      	ldr	r1, [r7, #16]
 8006802:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006806:	4013      	ands	r3, r2
 8006808:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	333c      	adds	r3, #60	@ 0x3c
 800682c:	3304      	adds	r3, #4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	799b      	ldrb	r3, [r3, #6]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d17b      	bne.n	8006942 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d015      	beq.n	8006880 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	4a61      	ldr	r2, [pc, #388]	@ (80069dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	f240 80b9 	bls.w	80069d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80b3 	beq.w	80069d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006876:	461a      	mov	r2, r3
 8006878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800687c:	6093      	str	r3, [r2, #8]
 800687e:	e0a7      	b.n	80069d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006896:	461a      	mov	r2, r3
 8006898:	2320      	movs	r3, #32
 800689a:	6093      	str	r3, [r2, #8]
 800689c:	e098      	b.n	80069d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f040 8093 	bne.w	80069d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	4a4b      	ldr	r2, [pc, #300]	@ (80069dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d90f      	bls.n	80068d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c8:	461a      	mov	r2, r3
 80068ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ce:	6093      	str	r3, [r2, #8]
 80068d0:	e07e      	b.n	80069d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	4413      	add	r3, r2
 80068e4:	3304      	adds	r3, #4
 80068e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	0159      	lsls	r1, r3, #5
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	440b      	add	r3, r1
 80068f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d114      	bne.n	8006934 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800691c:	461a      	mov	r2, r3
 800691e:	2101      	movs	r1, #1
 8006920:	f004 fe1a 	bl	800b558 <USB_EP0_OutStart>
 8006924:	e006      	b.n	8006934 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	441a      	add	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f00b fa4a 	bl	8011dd4 <HAL_PCD_DataOutStageCallback>
 8006940:	e046      	b.n	80069d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	4a26      	ldr	r2, [pc, #152]	@ (80069e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d124      	bne.n	8006994 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006960:	461a      	mov	r2, r3
 8006962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006966:	6093      	str	r3, [r2, #8]
 8006968:	e032      	b.n	80069d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006980:	461a      	mov	r2, r3
 8006982:	2320      	movs	r3, #32
 8006984:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f00b fa21 	bl	8011dd4 <HAL_PCD_DataOutStageCallback>
 8006992:	e01d      	b.n	80069d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d114      	bne.n	80069c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	4613      	mov	r3, r2
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069bc:	461a      	mov	r2, r3
 80069be:	2100      	movs	r1, #0
 80069c0:	f004 fdca 	bl	800b558 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f00b fa02 	bl	8011dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	4f54300a 	.word	0x4f54300a
 80069e0:	4f54310a 	.word	0x4f54310a

080069e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	333c      	adds	r3, #60	@ 0x3c
 80069fc:	3304      	adds	r3, #4
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a15      	ldr	r2, [pc, #84]	@ (8006a6c <PCD_EP_OutSetupPacket_int+0x88>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d90e      	bls.n	8006a38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a30:	461a      	mov	r2, r3
 8006a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f00b f9b9 	bl	8011db0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a0a      	ldr	r2, [pc, #40]	@ (8006a6c <PCD_EP_OutSetupPacket_int+0x88>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d90c      	bls.n	8006a60 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	799b      	ldrb	r3, [r3, #6]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d108      	bne.n	8006a60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	f004 fd7c 	bl	800b558 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	4f54300a 	.word	0x4f54300a

08006a70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d107      	bne.n	8006a9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a8e:	883b      	ldrh	r3, [r7, #0]
 8006a90:	0419      	lsls	r1, r3, #16
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a9c:	e028      	b.n	8006af0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	0c1b      	lsrs	r3, r3, #16
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006aac:	2300      	movs	r3, #0
 8006aae:	73fb      	strb	r3, [r7, #15]
 8006ab0:	e00d      	b.n	8006ace <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	3340      	adds	r3, #64	@ 0x40
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	0c1b      	lsrs	r3, r3, #16
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	3301      	adds	r3, #1
 8006acc:	73fb      	strb	r3, [r7, #15]
 8006ace:	7bfa      	ldrb	r2, [r7, #15]
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d3ec      	bcc.n	8006ab2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ad8:	883b      	ldrh	r3, [r7, #0]
 8006ada:	0418      	lsls	r0, r3, #16
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	4302      	orrs	r2, r0
 8006ae8:	3340      	adds	r3, #64	@ 0x40
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	887a      	ldrh	r2, [r7, #2]
 8006b10:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e267      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d075      	beq.n	8006c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b56:	4b88      	ldr	r3, [pc, #544]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 030c 	and.w	r3, r3, #12
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d00c      	beq.n	8006b7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b62:	4b85      	ldr	r3, [pc, #532]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d112      	bne.n	8006b94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b6e:	4b82      	ldr	r3, [pc, #520]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b7a:	d10b      	bne.n	8006b94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d05b      	beq.n	8006c40 <HAL_RCC_OscConfig+0x108>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d157      	bne.n	8006c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e242      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9c:	d106      	bne.n	8006bac <HAL_RCC_OscConfig+0x74>
 8006b9e:	4b76      	ldr	r3, [pc, #472]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a75      	ldr	r2, [pc, #468]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e01d      	b.n	8006be8 <HAL_RCC_OscConfig+0xb0>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x98>
 8006bb6:	4b70      	ldr	r3, [pc, #448]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6f      	ldr	r2, [pc, #444]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6c      	ldr	r2, [pc, #432]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	e00b      	b.n	8006be8 <HAL_RCC_OscConfig+0xb0>
 8006bd0:	4b69      	ldr	r3, [pc, #420]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a68      	ldr	r2, [pc, #416]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	4b66      	ldr	r3, [pc, #408]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a65      	ldr	r2, [pc, #404]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d013      	beq.n	8006c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf0:	f7fb fed0 	bl	8002994 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bf8:	f7fb fecc 	bl	8002994 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b64      	cmp	r3, #100	@ 0x64
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e207      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0xc0>
 8006c16:	e014      	b.n	8006c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fb febc 	bl	8002994 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c20:	f7fb feb8 	bl	8002994 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	@ 0x64
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e1f3      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c32:	4b51      	ldr	r3, [pc, #324]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0xe8>
 8006c3e:	e000      	b.n	8006c42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d063      	beq.n	8006d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 030c 	and.w	r3, r3, #12
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c5a:	4b47      	ldr	r3, [pc, #284]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d11c      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c66:	4b44      	ldr	r3, [pc, #272]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d116      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c72:	4b41      	ldr	r3, [pc, #260]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <HAL_RCC_OscConfig+0x152>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d001      	beq.n	8006c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e1c7      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4937      	ldr	r1, [pc, #220]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c9e:	e03a      	b.n	8006d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d020      	beq.n	8006cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca8:	4b34      	ldr	r3, [pc, #208]	@ (8006d7c <HAL_RCC_OscConfig+0x244>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cae:	f7fb fe71 	bl	8002994 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb6:	f7fb fe6d 	bl	8002994 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e1a8      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd4:	4b28      	ldr	r3, [pc, #160]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	4925      	ldr	r1, [pc, #148]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	600b      	str	r3, [r1, #0]
 8006ce8:	e015      	b.n	8006d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cea:	4b24      	ldr	r3, [pc, #144]	@ (8006d7c <HAL_RCC_OscConfig+0x244>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fb fe50 	bl	8002994 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf8:	f7fb fe4c 	bl	8002994 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e187      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d036      	beq.n	8006d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d016      	beq.n	8006d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d2a:	4b15      	ldr	r3, [pc, #84]	@ (8006d80 <HAL_RCC_OscConfig+0x248>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d30:	f7fb fe30 	bl	8002994 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d38:	f7fb fe2c 	bl	8002994 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e167      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x200>
 8006d56:	e01b      	b.n	8006d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d58:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <HAL_RCC_OscConfig+0x248>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d5e:	f7fb fe19 	bl	8002994 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d64:	e00e      	b.n	8006d84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d66:	f7fb fe15 	bl	8002994 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d907      	bls.n	8006d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e150      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	42470000 	.word	0x42470000
 8006d80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d84:	4b88      	ldr	r3, [pc, #544]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ea      	bne.n	8006d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8097 	beq.w	8006ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da2:	4b81      	ldr	r3, [pc, #516]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10f      	bne.n	8006dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	4b7d      	ldr	r3, [pc, #500]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db6:	4a7c      	ldr	r2, [pc, #496]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dce:	4b77      	ldr	r3, [pc, #476]	@ (8006fac <HAL_RCC_OscConfig+0x474>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d118      	bne.n	8006e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dda:	4b74      	ldr	r3, [pc, #464]	@ (8006fac <HAL_RCC_OscConfig+0x474>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a73      	ldr	r2, [pc, #460]	@ (8006fac <HAL_RCC_OscConfig+0x474>)
 8006de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006de6:	f7fb fdd5 	bl	8002994 <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dee:	f7fb fdd1 	bl	8002994 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e10c      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e00:	4b6a      	ldr	r3, [pc, #424]	@ (8006fac <HAL_RCC_OscConfig+0x474>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0f0      	beq.n	8006dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d106      	bne.n	8006e22 <HAL_RCC_OscConfig+0x2ea>
 8006e14:	4b64      	ldr	r3, [pc, #400]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e18:	4a63      	ldr	r2, [pc, #396]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e20:	e01c      	b.n	8006e5c <HAL_RCC_OscConfig+0x324>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCC_OscConfig+0x30c>
 8006e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e30:	f043 0304 	orr.w	r3, r3, #4
 8006e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e36:	4b5c      	ldr	r3, [pc, #368]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e42:	e00b      	b.n	8006e5c <HAL_RCC_OscConfig+0x324>
 8006e44:	4b58      	ldr	r3, [pc, #352]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e48:	4a57      	ldr	r2, [pc, #348]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e50:	4b55      	ldr	r3, [pc, #340]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e54:	4a54      	ldr	r2, [pc, #336]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e56:	f023 0304 	bic.w	r3, r3, #4
 8006e5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d015      	beq.n	8006e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e64:	f7fb fd96 	bl	8002994 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6a:	e00a      	b.n	8006e82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6c:	f7fb fd92 	bl	8002994 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e0cb      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e82:	4b49      	ldr	r3, [pc, #292]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0ee      	beq.n	8006e6c <HAL_RCC_OscConfig+0x334>
 8006e8e:	e014      	b.n	8006eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e90:	f7fb fd80 	bl	8002994 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e98:	f7fb fd7c 	bl	8002994 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e0b5      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eae:	4b3e      	ldr	r3, [pc, #248]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1ee      	bne.n	8006e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec0:	4b39      	ldr	r3, [pc, #228]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec4:	4a38      	ldr	r2, [pc, #224]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80a1 	beq.w	8007018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ed6:	4b34      	ldr	r3, [pc, #208]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 030c 	and.w	r3, r3, #12
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d05c      	beq.n	8006f9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d141      	bne.n	8006f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eea:	4b31      	ldr	r3, [pc, #196]	@ (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef0:	f7fb fd50 	bl	8002994 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef8:	f7fb fd4c 	bl	8002994 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e087      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f0a:	4b27      	ldr	r3, [pc, #156]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	019b      	lsls	r3, r3, #6
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f38:	061b      	lsls	r3, r3, #24
 8006f3a:	491b      	ldr	r1, [pc, #108]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f40:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f46:	f7fb fd25 	bl	8002994 <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4e:	f7fb fd21 	bl	8002994 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e05c      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f60:	4b11      	ldr	r3, [pc, #68]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <HAL_RCC_OscConfig+0x416>
 8006f6c:	e054      	b.n	8007018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f6e:	4b10      	ldr	r3, [pc, #64]	@ (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f74:	f7fb fd0e 	bl	8002994 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7c:	f7fb fd0a 	bl	8002994 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e045      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8e:	4b06      	ldr	r3, [pc, #24]	@ (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x444>
 8006f9a:	e03d      	b.n	8007018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d107      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e038      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	40007000 	.word	0x40007000
 8006fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007024 <HAL_RCC_OscConfig+0x4ec>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d028      	beq.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d121      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d11a      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d111      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007000:	429a      	cmp	r2, r3
 8007002:	d107      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800

08007028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e0cc      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800703c:	4b68      	ldr	r3, [pc, #416]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d90c      	bls.n	8007064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704a:	4b65      	ldr	r3, [pc, #404]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007052:	4b63      	ldr	r3, [pc, #396]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d001      	beq.n	8007064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0b8      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d020      	beq.n	80070b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800707c:	4b59      	ldr	r3, [pc, #356]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	4a58      	ldr	r2, [pc, #352]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007094:	4b53      	ldr	r3, [pc, #332]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	4a52      	ldr	r2, [pc, #328]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800709e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070a0:	4b50      	ldr	r3, [pc, #320]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	494d      	ldr	r1, [pc, #308]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d044      	beq.n	8007148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d107      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c6:	4b47      	ldr	r3, [pc, #284]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d119      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e07f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d003      	beq.n	80070e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d107      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070e6:	4b3f      	ldr	r3, [pc, #252]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e06f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f6:	4b3b      	ldr	r3, [pc, #236]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e067      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007106:	4b37      	ldr	r3, [pc, #220]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f023 0203 	bic.w	r2, r3, #3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4934      	ldr	r1, [pc, #208]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	4313      	orrs	r3, r2
 8007116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007118:	f7fb fc3c 	bl	8002994 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711e:	e00a      	b.n	8007136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007120:	f7fb fc38 	bl	8002994 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800712e:	4293      	cmp	r3, r2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e04f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007136:	4b2b      	ldr	r3, [pc, #172]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 020c 	and.w	r2, r3, #12
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	429a      	cmp	r2, r3
 8007146:	d1eb      	bne.n	8007120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007148:	4b25      	ldr	r3, [pc, #148]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d20c      	bcs.n	8007170 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007156:	4b22      	ldr	r3, [pc, #136]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800715e:	4b20      	ldr	r3, [pc, #128]	@ (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e032      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800717c:	4b19      	ldr	r3, [pc, #100]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	4916      	ldr	r1, [pc, #88]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800718a:	4313      	orrs	r3, r2
 800718c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800719a:	4b12      	ldr	r3, [pc, #72]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	490e      	ldr	r1, [pc, #56]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071ae:	f000 f895 	bl	80072dc <HAL_RCC_GetSysClockFreq>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	490a      	ldr	r1, [pc, #40]	@ (80071e8 <HAL_RCC_ClockConfig+0x1c0>)
 80071c0:	5ccb      	ldrb	r3, [r1, r3]
 80071c2:	fa22 f303 	lsr.w	r3, r2, r3
 80071c6:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <HAL_RCC_ClockConfig+0x1c4>)
 80071c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80071ca:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fb fb9c 	bl	800290c <HAL_InitTick>

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	40023c00 	.word	0x40023c00
 80071e4:	40023800 	.word	0x40023800
 80071e8:	080155e0 	.word	0x080155e0
 80071ec:	20000008 	.word	0x20000008
 80071f0:	2000000c 	.word	0x2000000c

080071f4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08c      	sub	sp, #48	@ 0x30
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d129      	bne.n	800725a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	4b2b      	ldr	r3, [pc, #172]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720e:	4a2a      	ldr	r2, [pc, #168]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	6313      	str	r3, [r2, #48]	@ 0x30
 8007216:	4b28      	ldr	r3, [pc, #160]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007222:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007228:	2302      	movs	r3, #2
 800722a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800722c:	2303      	movs	r3, #3
 800722e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007230:	2300      	movs	r3, #0
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007234:	2300      	movs	r3, #0
 8007236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007238:	f107 031c 	add.w	r3, r7, #28
 800723c:	4619      	mov	r1, r3
 800723e:	481f      	ldr	r0, [pc, #124]	@ (80072bc <HAL_RCC_MCOConfig+0xc8>)
 8007240:	f7fd fd6e 	bl	8004d20 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007244:	4b1c      	ldr	r3, [pc, #112]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	430b      	orrs	r3, r1
 8007252:	4919      	ldr	r1, [pc, #100]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 8007254:	4313      	orrs	r3, r2
 8007256:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007258:	e029      	b.n	80072ae <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	4b16      	ldr	r3, [pc, #88]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007262:	4a15      	ldr	r2, [pc, #84]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 8007264:	f043 0304 	orr.w	r3, r3, #4
 8007268:	6313      	str	r3, [r2, #48]	@ 0x30
 800726a:	4b13      	ldr	r3, [pc, #76]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007276:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800727a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727c:	2302      	movs	r3, #2
 800727e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007280:	2303      	movs	r3, #3
 8007282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007284:	2300      	movs	r3, #0
 8007286:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007288:	2300      	movs	r3, #0
 800728a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800728c:	f107 031c 	add.w	r3, r7, #28
 8007290:	4619      	mov	r1, r3
 8007292:	480b      	ldr	r0, [pc, #44]	@ (80072c0 <HAL_RCC_MCOConfig+0xcc>)
 8007294:	f7fd fd44 	bl	8004d20 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007298:	4b07      	ldr	r3, [pc, #28]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	00d9      	lsls	r1, r3, #3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	430b      	orrs	r3, r1
 80072a8:	4903      	ldr	r1, [pc, #12]	@ (80072b8 <HAL_RCC_MCOConfig+0xc4>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	608b      	str	r3, [r1, #8]
}
 80072ae:	bf00      	nop
 80072b0:	3730      	adds	r7, #48	@ 0x30
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40023800 	.word	0x40023800
 80072bc:	40020000 	.word	0x40020000
 80072c0:	40020800 	.word	0x40020800

080072c4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80072c8:	4b03      	ldr	r3, [pc, #12]	@ (80072d8 <HAL_RCC_EnableCSS+0x14>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	601a      	str	r2, [r3, #0]
}
 80072ce:	bf00      	nop
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	4247004c 	.word	0x4247004c

080072dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072e0:	b094      	sub	sp, #80	@ 0x50
 80072e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072f4:	4b79      	ldr	r3, [pc, #484]	@ (80074dc <HAL_RCC_GetSysClockFreq+0x200>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f003 030c 	and.w	r3, r3, #12
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d00d      	beq.n	800731c <HAL_RCC_GetSysClockFreq+0x40>
 8007300:	2b08      	cmp	r3, #8
 8007302:	f200 80e1 	bhi.w	80074c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_RCC_GetSysClockFreq+0x34>
 800730a:	2b04      	cmp	r3, #4
 800730c:	d003      	beq.n	8007316 <HAL_RCC_GetSysClockFreq+0x3a>
 800730e:	e0db      	b.n	80074c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007310:	4b73      	ldr	r3, [pc, #460]	@ (80074e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007312:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007314:	e0db      	b.n	80074ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007316:	4b73      	ldr	r3, [pc, #460]	@ (80074e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007318:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800731a:	e0d8      	b.n	80074ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800731c:	4b6f      	ldr	r3, [pc, #444]	@ (80074dc <HAL_RCC_GetSysClockFreq+0x200>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007324:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007326:	4b6d      	ldr	r3, [pc, #436]	@ (80074dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d063      	beq.n	80073fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007332:	4b6a      	ldr	r3, [pc, #424]	@ (80074dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	099b      	lsrs	r3, r3, #6
 8007338:	2200      	movs	r2, #0
 800733a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800733c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800733e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007344:	633b      	str	r3, [r7, #48]	@ 0x30
 8007346:	2300      	movs	r3, #0
 8007348:	637b      	str	r3, [r7, #52]	@ 0x34
 800734a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800734e:	4622      	mov	r2, r4
 8007350:	462b      	mov	r3, r5
 8007352:	f04f 0000 	mov.w	r0, #0
 8007356:	f04f 0100 	mov.w	r1, #0
 800735a:	0159      	lsls	r1, r3, #5
 800735c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007360:	0150      	lsls	r0, r2, #5
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4621      	mov	r1, r4
 8007368:	1a51      	subs	r1, r2, r1
 800736a:	6139      	str	r1, [r7, #16]
 800736c:	4629      	mov	r1, r5
 800736e:	eb63 0301 	sbc.w	r3, r3, r1
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007380:	4659      	mov	r1, fp
 8007382:	018b      	lsls	r3, r1, #6
 8007384:	4651      	mov	r1, sl
 8007386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800738a:	4651      	mov	r1, sl
 800738c:	018a      	lsls	r2, r1, #6
 800738e:	4651      	mov	r1, sl
 8007390:	ebb2 0801 	subs.w	r8, r2, r1
 8007394:	4659      	mov	r1, fp
 8007396:	eb63 0901 	sbc.w	r9, r3, r1
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ae:	4690      	mov	r8, r2
 80073b0:	4699      	mov	r9, r3
 80073b2:	4623      	mov	r3, r4
 80073b4:	eb18 0303 	adds.w	r3, r8, r3
 80073b8:	60bb      	str	r3, [r7, #8]
 80073ba:	462b      	mov	r3, r5
 80073bc:	eb49 0303 	adc.w	r3, r9, r3
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	f04f 0200 	mov.w	r2, #0
 80073c6:	f04f 0300 	mov.w	r3, #0
 80073ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073ce:	4629      	mov	r1, r5
 80073d0:	024b      	lsls	r3, r1, #9
 80073d2:	4621      	mov	r1, r4
 80073d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073d8:	4621      	mov	r1, r4
 80073da:	024a      	lsls	r2, r1, #9
 80073dc:	4610      	mov	r0, r2
 80073de:	4619      	mov	r1, r3
 80073e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e2:	2200      	movs	r2, #0
 80073e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073ec:	f7f9 fbdc 	bl	8000ba8 <__aeabi_uldivmod>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4613      	mov	r3, r2
 80073f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073f8:	e058      	b.n	80074ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073fa:	4b38      	ldr	r3, [pc, #224]	@ (80074dc <HAL_RCC_GetSysClockFreq+0x200>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	099b      	lsrs	r3, r3, #6
 8007400:	2200      	movs	r2, #0
 8007402:	4618      	mov	r0, r3
 8007404:	4611      	mov	r1, r2
 8007406:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800740a:	623b      	str	r3, [r7, #32]
 800740c:	2300      	movs	r3, #0
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007410:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007414:	4642      	mov	r2, r8
 8007416:	464b      	mov	r3, r9
 8007418:	f04f 0000 	mov.w	r0, #0
 800741c:	f04f 0100 	mov.w	r1, #0
 8007420:	0159      	lsls	r1, r3, #5
 8007422:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007426:	0150      	lsls	r0, r2, #5
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4641      	mov	r1, r8
 800742e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007432:	4649      	mov	r1, r9
 8007434:	eb63 0b01 	sbc.w	fp, r3, r1
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007444:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007448:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800744c:	ebb2 040a 	subs.w	r4, r2, sl
 8007450:	eb63 050b 	sbc.w	r5, r3, fp
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	f04f 0300 	mov.w	r3, #0
 800745c:	00eb      	lsls	r3, r5, #3
 800745e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007462:	00e2      	lsls	r2, r4, #3
 8007464:	4614      	mov	r4, r2
 8007466:	461d      	mov	r5, r3
 8007468:	4643      	mov	r3, r8
 800746a:	18e3      	adds	r3, r4, r3
 800746c:	603b      	str	r3, [r7, #0]
 800746e:	464b      	mov	r3, r9
 8007470:	eb45 0303 	adc.w	r3, r5, r3
 8007474:	607b      	str	r3, [r7, #4]
 8007476:	f04f 0200 	mov.w	r2, #0
 800747a:	f04f 0300 	mov.w	r3, #0
 800747e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007482:	4629      	mov	r1, r5
 8007484:	028b      	lsls	r3, r1, #10
 8007486:	4621      	mov	r1, r4
 8007488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800748c:	4621      	mov	r1, r4
 800748e:	028a      	lsls	r2, r1, #10
 8007490:	4610      	mov	r0, r2
 8007492:	4619      	mov	r1, r3
 8007494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007496:	2200      	movs	r2, #0
 8007498:	61bb      	str	r3, [r7, #24]
 800749a:	61fa      	str	r2, [r7, #28]
 800749c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074a0:	f7f9 fb82 	bl	8000ba8 <__aeabi_uldivmod>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4613      	mov	r3, r2
 80074aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80074ac:	4b0b      	ldr	r3, [pc, #44]	@ (80074dc <HAL_RCC_GetSysClockFreq+0x200>)
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	0c1b      	lsrs	r3, r3, #16
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	3301      	adds	r3, #1
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80074bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074c6:	e002      	b.n	80074ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074c8:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80074ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3750      	adds	r7, #80	@ 0x50
 80074d4:	46bd      	mov	sp, r7
 80074d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074da:	bf00      	nop
 80074dc:	40023800 	.word	0x40023800
 80074e0:	00f42400 	.word	0x00f42400
 80074e4:	007a1200 	.word	0x007a1200

080074e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074ec:	4b03      	ldr	r3, [pc, #12]	@ (80074fc <HAL_RCC_GetHCLKFreq+0x14>)
 80074ee:	681b      	ldr	r3, [r3, #0]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20000008 	.word	0x20000008

08007500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007504:	f7ff fff0 	bl	80074e8 <HAL_RCC_GetHCLKFreq>
 8007508:	4602      	mov	r2, r0
 800750a:	4b05      	ldr	r3, [pc, #20]	@ (8007520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	0a9b      	lsrs	r3, r3, #10
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	4903      	ldr	r1, [pc, #12]	@ (8007524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007516:	5ccb      	ldrb	r3, [r1, r3]
 8007518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40023800 	.word	0x40023800
 8007524:	080155f0 	.word	0x080155f0

08007528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800752c:	f7ff ffdc 	bl	80074e8 <HAL_RCC_GetHCLKFreq>
 8007530:	4602      	mov	r2, r0
 8007532:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	0b5b      	lsrs	r3, r3, #13
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	4903      	ldr	r1, [pc, #12]	@ (800754c <HAL_RCC_GetPCLK2Freq+0x24>)
 800753e:	5ccb      	ldrb	r3, [r1, r3]
 8007540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007544:	4618      	mov	r0, r3
 8007546:	bd80      	pop	{r7, pc}
 8007548:	40023800 	.word	0x40023800
 800754c:	080155f0 	.word	0x080155f0

08007550 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007554:	4b06      	ldr	r3, [pc, #24]	@ (8007570 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800755c:	2b80      	cmp	r3, #128	@ 0x80
 800755e:	d104      	bne.n	800756a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007560:	f000 f80a 	bl	8007578 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007564:	4b03      	ldr	r3, [pc, #12]	@ (8007574 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007566:	2280      	movs	r2, #128	@ 0x80
 8007568:	701a      	strb	r2, [r3, #0]
  }
}
 800756a:	bf00      	nop
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	40023800 	.word	0x40023800
 8007574:	4002380e 	.word	0x4002380e

08007578 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e022      	b.n	80075de <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fa feda 	bl	8002364 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2203      	movs	r2, #3
 80075b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f815 	bl	80075e8 <HAL_SD_InitCard>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e00a      	b.n	80075de <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075e8:	b5b0      	push	{r4, r5, r7, lr}
 80075ea:	b08e      	sub	sp, #56	@ 0x38
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007604:	2376      	movs	r3, #118	@ 0x76
 8007606:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681d      	ldr	r5, [r3, #0]
 800760c:	466c      	mov	r4, sp
 800760e:	f107 0318 	add.w	r3, r7, #24
 8007612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800761a:	f107 030c 	add.w	r3, r7, #12
 800761e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007620:	4628      	mov	r0, r5
 8007622:	f001 ff6d 	bl	8009500 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007626:	4b2a      	ldr	r3, [pc, #168]	@ (80076d0 <HAL_SD_InitCard+0xe8>)
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f001 ffae 	bl	8009592 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007636:	4b26      	ldr	r3, [pc, #152]	@ (80076d0 <HAL_SD_InitCard+0xe8>)
 8007638:	2201      	movs	r2, #1
 800763a:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800763c:	2002      	movs	r0, #2
 800763e:	f7fb f9b5 	bl	80029ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 f884 	bl	8008750 <SD_PowerON>
 8007648:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e02e      	b.n	80076c6 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 ffa3 	bl	80085b4 <SD_InitCard>
 800766e:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e01b      	b.n	80076c6 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007696:	4618      	mov	r0, r3
 8007698:	f002 f80d 	bl	80096b6 <SDMMC_CmdBlockLength>
 800769c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00f      	beq.n	80076c4 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a0a      	ldr	r2, [pc, #40]	@ (80076d4 <HAL_SD_InitCard+0xec>)
 80076aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3728      	adds	r7, #40	@ 0x28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bdb0      	pop	{r4, r5, r7, pc}
 80076ce:	bf00      	nop
 80076d0:	422580a0 	.word	0x422580a0
 80076d4:	004005ff 	.word	0x004005ff

080076d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08c      	sub	sp, #48	@ 0x30
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d107      	bne.n	8007700 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0c0      	b.n	8007882 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b01      	cmp	r3, #1
 800770a:	f040 80b9 	bne.w	8007880 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	441a      	add	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800771e:	429a      	cmp	r2, r3
 8007720:	d907      	bls.n	8007732 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007726:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e0a7      	b.n	8007882 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2203      	movs	r2, #3
 8007736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2200      	movs	r2, #0
 8007740:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8007750:	f043 0302 	orr.w	r3, r3, #2
 8007754:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	4a4c      	ldr	r2, [pc, #304]	@ (800788c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800775c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	4a4b      	ldr	r2, [pc, #300]	@ (8007890 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007764:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	2200      	movs	r2, #0
 800776c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007772:	2200      	movs	r2, #0
 8007774:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3380      	adds	r3, #128	@ 0x80
 800779c:	4619      	mov	r1, r3
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	025b      	lsls	r3, r3, #9
 80077a4:	089b      	lsrs	r3, r3, #2
 80077a6:	f7fb fdd3 	bl	8003350 <HAL_DMA_Start_IT>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d017      	beq.n	80077e0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80077be:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a33      	ldr	r2, [pc, #204]	@ (8007894 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80077c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e050      	b.n	8007882 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80077e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007898 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d002      	beq.n	80077f4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80077ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f0:	025b      	lsls	r3, r3, #9
 80077f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80077f4:	f04f 33ff 	mov.w	r3, #4294967295
 80077f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	025b      	lsls	r3, r3, #9
 80077fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007800:	2390      	movs	r3, #144	@ 0x90
 8007802:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007804:	2302      	movs	r3, #2
 8007806:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007808:	2300      	movs	r3, #0
 800780a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800780c:	2301      	movs	r3, #1
 800780e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f107 0210 	add.w	r2, r7, #16
 8007818:	4611      	mov	r1, r2
 800781a:	4618      	mov	r0, r3
 800781c:	f001 ff1f 	bl	800965e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d90a      	bls.n	800783c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2282      	movs	r2, #130	@ 0x82
 800782a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007832:	4618      	mov	r0, r3
 8007834:	f001 ff83 	bl	800973e <SDMMC_CmdReadMultiBlock>
 8007838:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800783a:	e009      	b.n	8007850 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2281      	movs	r2, #129	@ 0x81
 8007840:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007848:	4618      	mov	r0, r3
 800784a:	f001 ff56 	bl	80096fa <SDMMC_CmdReadSingleBlock>
 800784e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d012      	beq.n	800787c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a0e      	ldr	r2, [pc, #56]	@ (8007894 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800785c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007864:	431a      	orrs	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e002      	b.n	8007882 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	e000      	b.n	8007882 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007880:	2302      	movs	r3, #2
  }
}
 8007882:	4618      	mov	r0, r3
 8007884:	3730      	adds	r7, #48	@ 0x30
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	080083c3 	.word	0x080083c3
 8007890:	08008435 	.word	0x08008435
 8007894:	004005ff 	.word	0x004005ff
 8007898:	4225858c 	.word	0x4225858c

0800789c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08c      	sub	sp, #48	@ 0x30
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d107      	bne.n	80078c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0c5      	b.n	8007a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	f040 80be 	bne.w	8007a4e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80078d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	441a      	add	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d907      	bls.n	80078f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ea:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e0ac      	b.n	8007a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2203      	movs	r2, #3
 80078fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8007914:	f043 0302 	orr.w	r3, r3, #2
 8007918:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791e:	4a4e      	ldr	r2, [pc, #312]	@ (8007a58 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007920:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007926:	4a4d      	ldr	r2, [pc, #308]	@ (8007a5c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007928:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800792e:	2200      	movs	r2, #0
 8007930:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007936:	2b01      	cmp	r3, #1
 8007938:	d002      	beq.n	8007940 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	025b      	lsls	r3, r3, #9
 800793e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d90a      	bls.n	800795c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	22a0      	movs	r2, #160	@ 0xa0
 800794a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007952:	4618      	mov	r0, r3
 8007954:	f001 ff37 	bl	80097c6 <SDMMC_CmdWriteMultiBlock>
 8007958:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800795a:	e009      	b.n	8007970 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2290      	movs	r2, #144	@ 0x90
 8007960:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007968:	4618      	mov	r0, r3
 800796a:	f001 ff0a 	bl	8009782 <SDMMC_CmdWriteSingleBlock>
 800796e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d012      	beq.n	800799c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a39      	ldr	r2, [pc, #228]	@ (8007a60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800797c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007984:	431a      	orrs	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e059      	b.n	8007a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800799c:	4b31      	ldr	r3, [pc, #196]	@ (8007a64 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800799e:	2201      	movs	r2, #1
 80079a0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a6:	2240      	movs	r2, #64	@ 0x40
 80079a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3380      	adds	r3, #128	@ 0x80
 80079d2:	461a      	mov	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	025b      	lsls	r3, r3, #9
 80079d8:	089b      	lsrs	r3, r3, #2
 80079da:	f7fb fcb9 	bl	8003350 <HAL_DMA_Start_IT>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01c      	beq.n	8007a1e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 80079f2:	f023 0302 	bic.w	r3, r3, #2
 80079f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a18      	ldr	r2, [pc, #96]	@ (8007a60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80079fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e018      	b.n	8007a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a22:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	025b      	lsls	r3, r3, #9
 8007a28:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007a2a:	2390      	movs	r3, #144	@ 0x90
 8007a2c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007a36:	2301      	movs	r3, #1
 8007a38:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f107 0210 	add.w	r2, r7, #16
 8007a42:	4611      	mov	r1, r2
 8007a44:	4618      	mov	r0, r3
 8007a46:	f001 fe0a 	bl	800965e <SDIO_ConfigData>

      return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007a4e:	2302      	movs	r3, #2
  }
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3730      	adds	r7, #48	@ 0x30
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	08008399 	.word	0x08008399
 8007a5c:	08008435 	.word	0x08008435
 8007a60:	004005ff 	.word	0x004005ff
 8007a64:	4225858c 	.word	0x4225858c

08007a68 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <HAL_SD_IRQHandler+0x2e>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 f884 	bl	8008b9c <SD_Read_IT>
 8007a94:	e165      	b.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 808f 	beq.w	8007bc4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007aae:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8007abe:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007ac2:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0201 	bic.w	r2, r2, #1
 8007ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d039      	beq.n	8007b52 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <HAL_SD_IRQHandler+0x8a>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d011      	beq.n	8007b16 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 fe88 	bl	800980c <SDMMC_CmdStopTransfer>
 8007afc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d008      	beq.n	8007b16 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f92f 	bl	8007d74 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <HAL_SD_IRQHandler+0xda>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f003 fe3c 	bl	800b7c0 <HAL_SD_RxCpltCallback>
 8007b48:	e10b      	b.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f003 fe2e 	bl	800b7ac <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b50:	e107      	b.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8102 	beq.w	8007d62 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d011      	beq.n	8007b8c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 fe4d 	bl	800980c <SDMMC_CmdStopTransfer>
 8007b72:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d008      	beq.n	8007b8c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f8f4 	bl	8007d74 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f040 80e5 	bne.w	8007d62 <HAL_SD_IRQHandler+0x2fa>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f040 80df 	bne.w	8007d62 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0208 	bic.w	r2, r2, #8
 8007bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f003 fdf5 	bl	800b7ac <HAL_SD_TxCpltCallback>
}
 8007bc2:	e0ce      	b.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d008      	beq.n	8007be4 <HAL_SD_IRQHandler+0x17c>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f82e 	bl	8008c3e <SD_Write_IT>
 8007be2:	e0be      	b.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bea:	f240 233a 	movw	r3, #570	@ 0x23a
 8007bee:	4013      	ands	r3, r2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 80b6 	beq.w	8007d62 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c08:	f043 0202 	orr.w	r2, r3, #2
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c16:	f003 0308 	and.w	r3, r3, #8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c22:	f043 0208 	orr.w	r2, r3, #8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3c:	f043 0220 	orr.w	r2, r3, #32
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d005      	beq.n	8007c5e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c56:	f043 0210 	orr.w	r2, r3, #16
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	f043 0208 	orr.w	r2, r3, #8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f240 723a 	movw	r2, #1850	@ 0x73a
 8007c80:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	6812      	ldr	r2, [r2, #0]
 8007c8c:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8007c90:	f023 0302 	bic.w	r3, r3, #2
 8007c94:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 fdb6 	bl	800980c <SDMMC_CmdStopTransfer>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f855 	bl	8007d74 <HAL_SD_ErrorCallback>
}
 8007cca:	e04a      	b.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d045      	beq.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <HAL_SD_IRQHandler+0x282>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d011      	beq.n	8007d0e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cee:	4a1f      	ldr	r2, [pc, #124]	@ (8007d6c <HAL_SD_IRQHandler+0x304>)
 8007cf0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fb fbf2 	bl	80034e0 <HAL_DMA_Abort_IT>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d02f      	beq.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fbe6 	bl	80084d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007d0c:	e029      	b.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d104      	bne.n	8007d22 <HAL_SD_IRQHandler+0x2ba>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d011      	beq.n	8007d46 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d26:	4a12      	ldr	r2, [pc, #72]	@ (8007d70 <HAL_SD_IRQHandler+0x308>)
 8007d28:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fb fbd6 	bl	80034e0 <HAL_DMA_Abort_IT>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d013      	beq.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fc01 	bl	8008546 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007d44:	e00d      	b.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f003 fd1c 	bl	800b798 <HAL_SD_AbortCallback>
}
 8007d60:	e7ff      	b.n	8007d62 <HAL_SD_IRQHandler+0x2fa>
 8007d62:	bf00      	nop
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	080084d9 	.word	0x080084d9
 8007d70:	08008547 	.word	0x08008547

08007d74 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d96:	0f9b      	lsrs	r3, r3, #30
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da2:	0e9b      	lsrs	r3, r3, #26
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 030f 	and.w	r3, r3, #15
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007db4:	0e1b      	lsrs	r3, r3, #24
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f003 0303 	and.w	r3, r3, #3
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dc6:	0c1b      	lsrs	r3, r3, #16
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007de8:	0d1b      	lsrs	r3, r3, #20
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007df4:	0c1b      	lsrs	r3, r3, #16
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e06:	0bdb      	lsrs	r3, r3, #15
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e18:	0b9b      	lsrs	r3, r3, #14
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e2a:	0b5b      	lsrs	r3, r3, #13
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e3c:	0b1b      	lsrs	r3, r3, #12
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d163      	bne.n	8007f20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e5c:	009a      	lsls	r2, r3, #2
 8007e5e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007e62:	4013      	ands	r3, r2
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007e68:	0f92      	lsrs	r2, r2, #30
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e74:	0edb      	lsrs	r3, r3, #27
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e86:	0e1b      	lsrs	r3, r3, #24
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e98:	0d5b      	lsrs	r3, r3, #21
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eaa:	0c9b      	lsrs	r3, r3, #18
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	f003 0307 	and.w	r3, r3, #7
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ebc:	0bdb      	lsrs	r3, r3, #15
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	7e1b      	ldrb	r3, [r3, #24]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	f003 0307 	and.w	r3, r3, #7
 8007ede:	3302      	adds	r3, #2
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007eea:	fb03 f202 	mul.w	r2, r3, r2
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	7a1b      	ldrb	r3, [r3, #8]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 030f 	and.w	r3, r3, #15
 8007efc:	2201      	movs	r2, #1
 8007efe:	409a      	lsls	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007f0c:	0a52      	lsrs	r2, r2, #9
 8007f0e:	fb03 f202 	mul.w	r2, r3, r2
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f1c:	661a      	str	r2, [r3, #96]	@ 0x60
 8007f1e:	e031      	b.n	8007f84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d11d      	bne.n	8007f64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f2c:	041b      	lsls	r3, r3, #16
 8007f2e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f36:	0c1b      	lsrs	r3, r3, #16
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	3301      	adds	r3, #1
 8007f44:	029a      	lsls	r2, r3, #10
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f58:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	661a      	str	r2, [r3, #96]	@ 0x60
 8007f62:	e00f      	b.n	8007f84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a58      	ldr	r2, [pc, #352]	@ (80080cc <HAL_SD_GetCardCSD+0x344>)
 8007f6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e09d      	b.n	80080c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f88:	0b9b      	lsrs	r3, r3, #14
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f9a:	09db      	lsrs	r3, r3, #7
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fbc:	0fdb      	lsrs	r3, r3, #31
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc8:	0f5b      	lsrs	r3, r3, #29
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fda:	0e9b      	lsrs	r3, r3, #26
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0307 	and.w	r3, r3, #7
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fec:	0d9b      	lsrs	r3, r3, #22
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ffe:	0d5b      	lsrs	r3, r3, #21
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	b2da      	uxtb	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	b2da      	uxtb	r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802e:	0bdb      	lsrs	r3, r3, #15
 8008030:	b2db      	uxtb	r3, r3
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	b2da      	uxtb	r2, r3
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008042:	0b9b      	lsrs	r3, r3, #14
 8008044:	b2db      	uxtb	r3, r3
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	b2da      	uxtb	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008056:	0b5b      	lsrs	r3, r3, #13
 8008058:	b2db      	uxtb	r3, r3
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	b2da      	uxtb	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800806a:	0b1b      	lsrs	r3, r3, #12
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	b2da      	uxtb	r2, r3
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800807e:	0a9b      	lsrs	r3, r3, #10
 8008080:	b2db      	uxtb	r3, r3
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	b2da      	uxtb	r2, r3
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008092:	0a1b      	lsrs	r3, r3, #8
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	b2da      	uxtb	r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a6:	085b      	lsrs	r3, r3, #1
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	004005ff 	.word	0x004005ff

080080d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008128:	b5b0      	push	{r4, r5, r7, lr}
 800812a:	b08e      	sub	sp, #56	@ 0x38
 800812c:	af04      	add	r7, sp, #16
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2203      	movs	r2, #3
 800813c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008144:	2b03      	cmp	r3, #3
 8008146:	d02e      	beq.n	80081a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800814e:	d106      	bne.n	800815e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008154:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	639a      	str	r2, [r3, #56]	@ 0x38
 800815c:	e029      	b.n	80081b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008164:	d10a      	bne.n	800817c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fba8 	bl	80088bc <SD_WideBus_Enable>
 800816c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	639a      	str	r2, [r3, #56]	@ 0x38
 800817a:	e01a      	b.n	80081b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fbe5 	bl	8008952 <SD_WideBus_Disable>
 8008188:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	639a      	str	r2, [r3, #56]	@ 0x38
 8008196:	e00c      	b.n	80081b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80081a4:	e005      	b.n	80081b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a26      	ldr	r2, [pc, #152]	@ (8008258 <HAL_SD_ConfigWideBusOperation+0x130>)
 80081c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80081d0:	e01f      	b.n	8008212 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681d      	ldr	r5, [r3, #0]
 80081f8:	466c      	mov	r4, sp
 80081fa:	f107 0314 	add.w	r3, r7, #20
 80081fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008206:	f107 0308 	add.w	r3, r7, #8
 800820a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800820c:	4628      	mov	r0, r5
 800820e:	f001 f977 	bl	8009500 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fa4b 	bl	80096b6 <SDMMC_CmdBlockLength>
 8008220:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00c      	beq.n	8008242 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a0a      	ldr	r2, [pc, #40]	@ (8008258 <HAL_SD_ConfigWideBusOperation+0x130>)
 800822e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	431a      	orrs	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800824a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800824e:	4618      	mov	r0, r3
 8008250:	3728      	adds	r7, #40	@ 0x28
 8008252:	46bd      	mov	sp, r7
 8008254:	bdb0      	pop	{r4, r5, r7, pc}
 8008256:	bf00      	nop
 8008258:	004005ff 	.word	0x004005ff

0800825c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008268:	f107 030c 	add.w	r3, r7, #12
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fafc 	bl	800886c <SD_SendStatus>
 8008274:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	431a      	orrs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	0a5b      	lsrs	r3, r3, #9
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008292:	693b      	ldr	r3, [r7, #16]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_SD_Abort>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *                the configuration information for SD module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Abort(SD_HandleTypeDef *hsd)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t context = hsd->Context;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a8:	60fb      	str	r3, [r7, #12]

  /* DIsable All interrupts */
  __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80082b8:	63da      	str	r2, [r3, #60]	@ 0x3c
                           SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f240 523a 	movw	r2, #1338	@ 0x53a
 80082c2:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hsd->Instance->DCTRL, SDIO_DCTRL_DTEN);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0201 	bic.w	r2, r2, #1
 80082d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if ((context & SD_CONTEXT_DMA) != 0U)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d038      	beq.n	8008350 <HAL_SD_Abort+0xb4>
  {
    /* Disable the SD DMA request */
    hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 0208 	bic.w	r2, r2, #8
 80082ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Abort the SD DMA Tx channel */
    if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d104      	bne.n	8008302 <HAL_SD_Abort+0x66>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00e      	beq.n	8008320 <HAL_SD_Abort+0x84>
    {
      if(HAL_DMA_Abort(hsd->hdmatx) != HAL_OK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008306:	4618      	mov	r0, r3
 8008308:	f7fb f87a 	bl	8003400 <HAL_DMA_Abort>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d01e      	beq.n	8008350 <HAL_SD_Abort+0xb4>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	639a      	str	r2, [r3, #56]	@ 0x38
      if(HAL_DMA_Abort(hsd->hdmatx) != HAL_OK)
 800831e:	e017      	b.n	8008350 <HAL_SD_Abort+0xb4>
      }
    }
    /* Abort the SD DMA Rx channel */
    else if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d104      	bne.n	8008334 <HAL_SD_Abort+0x98>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f003 0302 	and.w	r3, r3, #2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00d      	beq.n	8008350 <HAL_SD_Abort+0xb4>
    {
      if(HAL_DMA_Abort(hsd->hdmarx) != HAL_OK)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008338:	4618      	mov	r0, r3
 800833a:	f7fb f861 	bl	8003400 <HAL_DMA_Abort>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <HAL_SD_Abort+0xb4>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	639a      	str	r2, [r3, #56]	@ 0x38
    {
      /* Nothing to do */
    }
  }

  hsd->State = HAL_SD_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	631a      	str	r2, [r3, #48]	@ 0x30

  CardState = HAL_SD_GetCardState(hsd);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff ff7c 	bl	800825c <HAL_SD_GetCardState>
 8008364:	60b8      	str	r0, [r7, #8]
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b06      	cmp	r3, #6
 800836a:	d002      	beq.n	8008372 <HAL_SD_Abort+0xd6>
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b05      	cmp	r3, #5
 8008370:	d107      	bne.n	8008382 <HAL_SD_Abort+0xe6>
  {
    hsd->ErrorCode = SDMMC_CmdStopTransfer(hsd->Instance);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f001 fa48 	bl	800980c <SDMMC_CmdStopTransfer>
 800837c:	4602      	mov	r2, r0
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <HAL_SD_Abort+0xf2>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e000      	b.n	8008390 <HAL_SD_Abort+0xf4>
  }
  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083b4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d4:	2b82      	cmp	r3, #130	@ 0x82
 80083d6:	d111      	bne.n	80083fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 fa15 	bl	800980c <SDMMC_CmdStopTransfer>
 80083e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d008      	beq.n	80083fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	431a      	orrs	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff fcbc 	bl	8007d74 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0208 	bic.w	r2, r2, #8
 800840a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008414:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f003 f9cb 	bl	800b7c0 <HAL_SD_RxCpltCallback>
#endif
}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008440:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7fb f9f8 	bl	8003838 <HAL_DMA_GetError>
 8008448:	4603      	mov	r3, r0
 800844a:	2b02      	cmp	r3, #2
 800844c:	d03e      	beq.n	80084cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008454:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d002      	beq.n	800846a <SD_DMAError+0x36>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d12d      	bne.n	80084c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a19      	ldr	r2, [pc, #100]	@ (80084d4 <SD_DMAError+0xa0>)
 8008470:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008480:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008486:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800848e:	6978      	ldr	r0, [r7, #20]
 8008490:	f7ff fee4 	bl	800825c <HAL_SD_GetCardState>
 8008494:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b06      	cmp	r3, #6
 800849a:	d002      	beq.n	80084a2 <SD_DMAError+0x6e>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b05      	cmp	r3, #5
 80084a0:	d10a      	bne.n	80084b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 f9b0 	bl	800980c <SDMMC_CmdStopTransfer>
 80084ac:	4602      	mov	r2, r0
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b2:	431a      	orrs	r2, r3
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2200      	movs	r2, #0
 80084c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80084c6:	6978      	ldr	r0, [r7, #20]
 80084c8:	f7ff fc54 	bl	8007d74 <HAL_SD_ErrorCallback>
#endif
  }
}
 80084cc:	bf00      	nop
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	004005ff 	.word	0x004005ff

080084d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f240 523a 	movw	r2, #1338	@ 0x53a
 80084ee:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f7ff feb3 	bl	800825c <HAL_SD_GetCardState>
 80084f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b06      	cmp	r3, #6
 800850a:	d002      	beq.n	8008512 <SD_DMATxAbort+0x3a>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b05      	cmp	r3, #5
 8008510:	d10a      	bne.n	8008528 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4618      	mov	r0, r3
 8008518:	f001 f978 	bl	800980c <SDMMC_CmdStopTransfer>
 800851c:	4602      	mov	r2, r0
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008522:	431a      	orrs	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852c:	2b00      	cmp	r3, #0
 800852e:	d103      	bne.n	8008538 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f003 f931 	bl	800b798 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008536:	e002      	b.n	800853e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff fc1b 	bl	8007d74 <HAL_SD_ErrorCallback>
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008552:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f240 523a 	movw	r2, #1338	@ 0x53a
 800855c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7ff fe7c 	bl	800825c <HAL_SD_GetCardState>
 8008564:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b06      	cmp	r3, #6
 8008578:	d002      	beq.n	8008580 <SD_DMARxAbort+0x3a>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b05      	cmp	r3, #5
 800857e:	d10a      	bne.n	8008596 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f001 f941 	bl	800980c <SDMMC_CmdStopTransfer>
 800858a:	4602      	mov	r2, r0
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008590:	431a      	orrs	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859a:	2b00      	cmp	r3, #0
 800859c:	d103      	bne.n	80085a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f003 f8fa 	bl	800b798 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80085a4:	e002      	b.n	80085ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff fbe4 	bl	8007d74 <HAL_SD_ErrorCallback>
}
 80085ac:	bf00      	nop
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085b4:	b5b0      	push	{r4, r5, r7, lr}
 80085b6:	b094      	sub	sp, #80	@ 0x50
 80085b8:	af04      	add	r7, sp, #16
 80085ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80085bc:	2301      	movs	r3, #1
 80085be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fff2 	bl	80095ae <SDIO_GetPowerState>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80085d4:	e0b8      	b.n	8008748 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d02f      	beq.n	800863e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 fa1c 	bl	8009a20 <SDMMC_CmdSendCID>
 80085e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80085f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f2:	e0a9      	b.n	8008748 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 f81c 	bl	8009638 <SDIO_GetResponse>
 8008600:	4602      	mov	r2, r0
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2104      	movs	r1, #4
 800860c:	4618      	mov	r0, r3
 800860e:	f001 f813 	bl	8009638 <SDIO_GetResponse>
 8008612:	4602      	mov	r2, r0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2108      	movs	r1, #8
 800861e:	4618      	mov	r0, r3
 8008620:	f001 f80a 	bl	8009638 <SDIO_GetResponse>
 8008624:	4602      	mov	r2, r0
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	210c      	movs	r1, #12
 8008630:	4618      	mov	r0, r3
 8008632:	f001 f801 	bl	8009638 <SDIO_GetResponse>
 8008636:	4602      	mov	r2, r0
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008642:	2b03      	cmp	r3, #3
 8008644:	d00d      	beq.n	8008662 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f107 020e 	add.w	r2, r7, #14
 800864e:	4611      	mov	r1, r2
 8008650:	4618      	mov	r0, r3
 8008652:	f001 fa22 	bl	8009a9a <SDMMC_CmdSetRelAdd>
 8008656:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <SD_InitCard+0xae>
    {
      return errorstate;
 800865e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008660:	e072      	b.n	8008748 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008666:	2b03      	cmp	r3, #3
 8008668:	d036      	beq.n	80086d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800866a:	89fb      	ldrh	r3, [r7, #14]
 800866c:	461a      	mov	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	4619      	mov	r1, r3
 800867e:	4610      	mov	r0, r2
 8008680:	f001 f9ec 	bl	8009a5c <SDMMC_CmdSendCSD>
 8008684:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <SD_InitCard+0xdc>
    {
      return errorstate;
 800868c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800868e:	e05b      	b.n	8008748 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f000 ffce 	bl	8009638 <SDIO_GetResponse>
 800869c:	4602      	mov	r2, r0
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2104      	movs	r1, #4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 ffc5 	bl	8009638 <SDIO_GetResponse>
 80086ae:	4602      	mov	r2, r0
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2108      	movs	r1, #8
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 ffbc 	bl	8009638 <SDIO_GetResponse>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	210c      	movs	r1, #12
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 ffb3 	bl	8009638 <SDIO_GetResponse>
 80086d2:	4602      	mov	r2, r0
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2104      	movs	r1, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 ffaa 	bl	8009638 <SDIO_GetResponse>
 80086e4:	4603      	mov	r3, r0
 80086e6:	0d1a      	lsrs	r2, r3, #20
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80086ec:	f107 0310 	add.w	r3, r7, #16
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff fb48 	bl	8007d88 <HAL_SD_GetCardCSD>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008702:	e021      	b.n	8008748 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6819      	ldr	r1, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800870c:	041b      	lsls	r3, r3, #16
 800870e:	2200      	movs	r2, #0
 8008710:	461c      	mov	r4, r3
 8008712:	4615      	mov	r5, r2
 8008714:	4622      	mov	r2, r4
 8008716:	462b      	mov	r3, r5
 8008718:	4608      	mov	r0, r1
 800871a:	f001 f899 	bl	8009850 <SDMMC_CmdSelDesel>
 800871e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <SD_InitCard+0x176>
  {
    return errorstate;
 8008726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008728:	e00e      	b.n	8008748 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681d      	ldr	r5, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	466c      	mov	r4, sp
 8008732:	f103 0210 	add.w	r2, r3, #16
 8008736:	ca07      	ldmia	r2, {r0, r1, r2}
 8008738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800873c:	3304      	adds	r3, #4
 800873e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008740:	4628      	mov	r0, r5
 8008742:	f000 fedd 	bl	8009500 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3740      	adds	r7, #64	@ 0x40
 800874c:	46bd      	mov	sp, r7
 800874e:	bdb0      	pop	{r4, r5, r7, pc}

08008750 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	2300      	movs	r3, #0
 8008762:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f001 f894 	bl	8009896 <SDMMC_CmdGoIdleState>
 800876e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	e072      	b.n	8008860 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f001 f8a7 	bl	80098d2 <SDMMC_CmdOperCond>
 8008784:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00d      	beq.n	80087a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4618      	mov	r0, r3
 8008798:	f001 f87d 	bl	8009896 <SDMMC_CmdGoIdleState>
 800879c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d004      	beq.n	80087ae <SD_PowerON+0x5e>
    {
      return errorstate;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	e05b      	b.n	8008860 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d137      	bne.n	8008826 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2100      	movs	r1, #0
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 f8a7 	bl	8009910 <SDMMC_CmdAppCommand>
 80087c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d02d      	beq.n	8008826 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80087ce:	e047      	b.n	8008860 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f001 f89a 	bl	8009910 <SDMMC_CmdAppCommand>
 80087dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <SD_PowerON+0x98>
    {
      return errorstate;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	e03b      	b.n	8008860 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	491e      	ldr	r1, [pc, #120]	@ (8008868 <SD_PowerON+0x118>)
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 f8b0 	bl	8009954 <SDMMC_CmdAppOperCommand>
 80087f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008800:	e02e      	b.n	8008860 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2100      	movs	r1, #0
 8008808:	4618      	mov	r0, r3
 800880a:	f000 ff15 	bl	8009638 <SDIO_GetResponse>
 800880e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	0fdb      	lsrs	r3, r3, #31
 8008814:	2b01      	cmp	r3, #1
 8008816:	d101      	bne.n	800881c <SD_PowerON+0xcc>
 8008818:	2301      	movs	r3, #1
 800881a:	e000      	b.n	800881e <SD_PowerON+0xce>
 800881c:	2300      	movs	r3, #0
 800881e:	613b      	str	r3, [r7, #16]

    count++;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	3301      	adds	r3, #1
 8008824:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800882c:	4293      	cmp	r3, r2
 800882e:	d802      	bhi.n	8008836 <SD_PowerON+0xe6>
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0cc      	beq.n	80087d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800883c:	4293      	cmp	r3, r2
 800883e:	d902      	bls.n	8008846 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008840:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008844:	e00c      	b.n	8008860 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	645a      	str	r2, [r3, #68]	@ 0x44
 8008856:	e002      	b.n	800885e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	c1100000 	.word	0xc1100000

0800886c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d102      	bne.n	8008882 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800887c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008880:	e018      	b.n	80088b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800888a:	041b      	lsls	r3, r3, #16
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	f001 f924 	bl	8009adc <SDMMC_CmdSendStatus>
 8008894:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	e009      	b.n	80088b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 fec6 	bl	8009638 <SDIO_GetResponse>
 80088ac:	4602      	mov	r2, r0
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	2300      	movs	r3, #0
 80088ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 feb0 	bl	8009638 <SDIO_GetResponse>
 80088d8:	4603      	mov	r3, r0
 80088da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088e2:	d102      	bne.n	80088ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088e8:	e02f      	b.n	800894a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088ea:	f107 030c 	add.w	r3, r7, #12
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f879 	bl	80089e8 <SD_FindSCR>
 80088f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	e023      	b.n	800894a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01c      	beq.n	8008946 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008914:	041b      	lsls	r3, r3, #16
 8008916:	4619      	mov	r1, r3
 8008918:	4610      	mov	r0, r2
 800891a:	f000 fff9 	bl	8009910 <SDMMC_CmdAppCommand>
 800891e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	e00f      	b.n	800894a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2102      	movs	r1, #2
 8008930:	4618      	mov	r0, r3
 8008932:	f001 f832 	bl	800999a <SDMMC_CmdBusWidth>
 8008936:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	e003      	b.n	800894a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008942:	2300      	movs	r3, #0
 8008944:	e001      	b.n	800894a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008946:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b086      	sub	sp, #24
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	2300      	movs	r3, #0
 8008960:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2100      	movs	r1, #0
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fe65 	bl	8009638 <SDIO_GetResponse>
 800896e:	4603      	mov	r3, r0
 8008970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008974:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008978:	d102      	bne.n	8008980 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800897a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800897e:	e02f      	b.n	80089e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008980:	f107 030c 	add.w	r3, r7, #12
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f82e 	bl	80089e8 <SD_FindSCR>
 800898c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	e023      	b.n	80089e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01c      	beq.n	80089dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089aa:	041b      	lsls	r3, r3, #16
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f000 ffae 	bl	8009910 <SDMMC_CmdAppCommand>
 80089b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	e00f      	b.n	80089e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 ffe7 	bl	800999a <SDMMC_CmdBusWidth>
 80089cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	e003      	b.n	80089e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80089d8:	2300      	movs	r3, #0
 80089da:	e001      	b.n	80089e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80089e8:	b590      	push	{r4, r7, lr}
 80089ea:	b08f      	sub	sp, #60	@ 0x3c
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80089f2:	f7f9 ffcf 	bl	8002994 <HAL_GetTick>
 80089f6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80089fc:	2300      	movs	r3, #0
 80089fe:	60bb      	str	r3, [r7, #8]
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2108      	movs	r1, #8
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fe51 	bl	80096b6 <SDMMC_CmdBlockLength>
 8008a14:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1e:	e0b9      	b.n	8008b94 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a28:	041b      	lsls	r3, r3, #16
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f000 ff6f 	bl	8009910 <SDMMC_CmdAppCommand>
 8008a32:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3c:	e0aa      	b.n	8008b94 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a42:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008a44:	2308      	movs	r3, #8
 8008a46:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008a48:	2330      	movs	r3, #48	@ 0x30
 8008a4a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008a54:	2301      	movs	r3, #1
 8008a56:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f107 0210 	add.w	r2, r7, #16
 8008a60:	4611      	mov	r1, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fdfb 	bl	800965e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 ffb6 	bl	80099de <SDMMC_CmdSendSCR>
 8008a72:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d02a      	beq.n	8008ad0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	e08a      	b.n	8008b94 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00f      	beq.n	8008aac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6819      	ldr	r1, [r3, #0]
 8008a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	f107 0208 	add.w	r2, r7, #8
 8008a98:	18d4      	adds	r4, r2, r3
 8008a9a:	4608      	mov	r0, r1
 8008a9c:	f000 fd5b 	bl	8009556 <SDIO_ReadFIFO>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	6023      	str	r3, [r4, #0]
      index++;
 8008aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aaa:	e006      	b.n	8008aba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d012      	beq.n	8008ae0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008aba:	f7f9 ff6b 	bl	8002994 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac8:	d102      	bne.n	8008ad0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008aca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ace:	e061      	b.n	8008b94 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0cf      	beq.n	8008a7e <SD_FindSCR+0x96>
 8008ade:	e000      	b.n	8008ae2 <SD_FindSCR+0xfa>
      break;
 8008ae0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae8:	f003 0308 	and.w	r3, r3, #8
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d106      	bne.n	8008afe <SD_FindSCR+0x116>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d005      	beq.n	8008b0a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2208      	movs	r2, #8
 8008b04:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b06:	2308      	movs	r3, #8
 8008b08:	e044      	b.n	8008b94 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b20:	2302      	movs	r3, #2
 8008b22:	e037      	b.n	8008b94 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b2a:	f003 0320 	and.w	r3, r3, #32
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2220      	movs	r2, #32
 8008b38:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008b3a:	2320      	movs	r3, #32
 8008b3c:	e02a      	b.n	8008b94 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008b46:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	061a      	lsls	r2, r3, #24
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	0e1b      	lsrs	r3, r3, #24
 8008b64:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b68:	601a      	str	r2, [r3, #0]
    scr++;
 8008b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	061a      	lsls	r2, r3, #24
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	021b      	lsls	r3, r3, #8
 8008b78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	0e1b      	lsrs	r3, r3, #24
 8008b8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	373c      	adds	r7, #60	@ 0x3c
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd90      	pop	{r4, r7, pc}

08008b9c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d03f      	beq.n	8008c36 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	617b      	str	r3, [r7, #20]
 8008bba:	e033      	b.n	8008c24 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fcc8 	bl	8009556 <SDIO_ReadFIFO>
 8008bc6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	0a1b      	lsrs	r3, r3, #8
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	0c1b      	lsrs	r3, r3, #16
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	0e1b      	lsrs	r3, r3, #24
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3301      	adds	r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	3301      	adds	r3, #1
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2b07      	cmp	r3, #7
 8008c28:	d9c8      	bls.n	8008bbc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008c36:	bf00      	nop
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b086      	sub	sp, #24
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c50:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d043      	beq.n	8008ce0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
 8008c5c:	e037      	b.n	8008cce <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	021a      	lsls	r2, r3, #8
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	041a      	lsls	r2, r3, #16
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3301      	adds	r3, #1
 8008c98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	061a      	lsls	r2, r3, #24
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f107 0208 	add.w	r2, r7, #8
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fc54 	bl	8009570 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	617b      	str	r3, [r7, #20]
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b07      	cmp	r3, #7
 8008cd2:	d9c4      	bls.n	8008c5e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e042      	b.n	8008d80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d106      	bne.n	8008d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7f9 fc2a 	bl	8002568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2224      	movs	r2, #36	@ 0x24
 8008d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f973 	bl	8009018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	695a      	ldr	r2, [r3, #20]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08a      	sub	sp, #40	@ 0x28
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	4613      	mov	r3, r2
 8008d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d175      	bne.n	8008e94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_UART_Transmit+0x2c>
 8008dae:	88fb      	ldrh	r3, [r7, #6]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e06e      	b.n	8008e96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2221      	movs	r2, #33	@ 0x21
 8008dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dc6:	f7f9 fde5 	bl	8002994 <HAL_GetTick>
 8008dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	88fa      	ldrh	r2, [r7, #6]
 8008dd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	88fa      	ldrh	r2, [r7, #6]
 8008dd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008de0:	d108      	bne.n	8008df4 <HAL_UART_Transmit+0x6c>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d104      	bne.n	8008df4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	61bb      	str	r3, [r7, #24]
 8008df2:	e003      	b.n	8008dfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008dfc:	e02e      	b.n	8008e5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2200      	movs	r2, #0
 8008e06:	2180      	movs	r1, #128	@ 0x80
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 f848 	bl	8008e9e <UART_WaitOnFlagUntilTimeout>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e03a      	b.n	8008e96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10b      	bne.n	8008e3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	3302      	adds	r3, #2
 8008e3a:	61bb      	str	r3, [r7, #24]
 8008e3c:	e007      	b.n	8008e4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	781a      	ldrb	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1cb      	bne.n	8008dfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2140      	movs	r1, #64	@ 0x40
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f814 	bl	8008e9e <UART_WaitOnFlagUntilTimeout>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d005      	beq.n	8008e88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e006      	b.n	8008e96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	e000      	b.n	8008e96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008e94:	2302      	movs	r3, #2
  }
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3720      	adds	r7, #32
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b086      	sub	sp, #24
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	603b      	str	r3, [r7, #0]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eae:	e03b      	b.n	8008f28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d037      	beq.n	8008f28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb8:	f7f9 fd6c 	bl	8002994 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	6a3a      	ldr	r2, [r7, #32]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d302      	bcc.n	8008ece <UART_WaitOnFlagUntilTimeout+0x30>
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e03a      	b.n	8008f48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d023      	beq.n	8008f28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b80      	cmp	r3, #128	@ 0x80
 8008ee4:	d020      	beq.n	8008f28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b40      	cmp	r3, #64	@ 0x40
 8008eea:	d01d      	beq.n	8008f28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0308 	and.w	r3, r3, #8
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	d116      	bne.n	8008f28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 f81d 	bl	8008f50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2208      	movs	r2, #8
 8008f1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e00f      	b.n	8008f48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	4013      	ands	r3, r2
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	bf0c      	ite	eq
 8008f38:	2301      	moveq	r3, #1
 8008f3a:	2300      	movne	r3, #0
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	461a      	mov	r2, r3
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d0b4      	beq.n	8008eb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b095      	sub	sp, #84	@ 0x54
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	330c      	adds	r3, #12
 8008f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f62:	e853 3f00 	ldrex	r3, [r3]
 8008f66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	330c      	adds	r3, #12
 8008f76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f78:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e5      	bne.n	8008f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3314      	adds	r3, #20
 8008f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f023 0301 	bic.w	r3, r3, #1
 8008fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3314      	adds	r3, #20
 8008faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e5      	bne.n	8008f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d119      	bne.n	8008ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	330c      	adds	r3, #12
 8008fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f023 0310 	bic.w	r3, r3, #16
 8008fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	330c      	adds	r3, #12
 8008fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fe8:	61ba      	str	r2, [r7, #24]
 8008fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6979      	ldr	r1, [r7, #20]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e5      	bne.n	8008fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800900a:	bf00      	nop
 800900c:	3754      	adds	r7, #84	@ 0x54
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
	...

08009018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800901c:	b0c0      	sub	sp, #256	@ 0x100
 800901e:	af00      	add	r7, sp, #0
 8009020:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009034:	68d9      	ldr	r1, [r3, #12]
 8009036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	ea40 0301 	orr.w	r3, r0, r1
 8009040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	431a      	orrs	r2, r3
 8009050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	431a      	orrs	r2, r3
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	4313      	orrs	r3, r2
 8009060:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009070:	f021 010c 	bic.w	r1, r1, #12
 8009074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800907e:	430b      	orrs	r3, r1
 8009080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800908e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009092:	6999      	ldr	r1, [r3, #24]
 8009094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	ea40 0301 	orr.w	r3, r0, r1
 800909e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	4b8f      	ldr	r3, [pc, #572]	@ (80092e4 <UART_SetConfig+0x2cc>)
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d005      	beq.n	80090b8 <UART_SetConfig+0xa0>
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b8d      	ldr	r3, [pc, #564]	@ (80092e8 <UART_SetConfig+0x2d0>)
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d104      	bne.n	80090c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090b8:	f7fe fa36 	bl	8007528 <HAL_RCC_GetPCLK2Freq>
 80090bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090c0:	e003      	b.n	80090ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090c2:	f7fe fa1d 	bl	8007500 <HAL_RCC_GetPCLK1Freq>
 80090c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090d4:	f040 810c 	bne.w	80092f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090dc:	2200      	movs	r2, #0
 80090de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80090e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80090ea:	4622      	mov	r2, r4
 80090ec:	462b      	mov	r3, r5
 80090ee:	1891      	adds	r1, r2, r2
 80090f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80090f2:	415b      	adcs	r3, r3
 80090f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80090fa:	4621      	mov	r1, r4
 80090fc:	eb12 0801 	adds.w	r8, r2, r1
 8009100:	4629      	mov	r1, r5
 8009102:	eb43 0901 	adc.w	r9, r3, r1
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	f04f 0300 	mov.w	r3, #0
 800910e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800911a:	4690      	mov	r8, r2
 800911c:	4699      	mov	r9, r3
 800911e:	4623      	mov	r3, r4
 8009120:	eb18 0303 	adds.w	r3, r8, r3
 8009124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009128:	462b      	mov	r3, r5
 800912a:	eb49 0303 	adc.w	r3, r9, r3
 800912e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800913e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009146:	460b      	mov	r3, r1
 8009148:	18db      	adds	r3, r3, r3
 800914a:	653b      	str	r3, [r7, #80]	@ 0x50
 800914c:	4613      	mov	r3, r2
 800914e:	eb42 0303 	adc.w	r3, r2, r3
 8009152:	657b      	str	r3, [r7, #84]	@ 0x54
 8009154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800915c:	f7f7 fd24 	bl	8000ba8 <__aeabi_uldivmod>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4b61      	ldr	r3, [pc, #388]	@ (80092ec <UART_SetConfig+0x2d4>)
 8009166:	fba3 2302 	umull	r2, r3, r3, r2
 800916a:	095b      	lsrs	r3, r3, #5
 800916c:	011c      	lsls	r4, r3, #4
 800916e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009172:	2200      	movs	r2, #0
 8009174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009178:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800917c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009180:	4642      	mov	r2, r8
 8009182:	464b      	mov	r3, r9
 8009184:	1891      	adds	r1, r2, r2
 8009186:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009188:	415b      	adcs	r3, r3
 800918a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800918c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009190:	4641      	mov	r1, r8
 8009192:	eb12 0a01 	adds.w	sl, r2, r1
 8009196:	4649      	mov	r1, r9
 8009198:	eb43 0b01 	adc.w	fp, r3, r1
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091b0:	4692      	mov	sl, r2
 80091b2:	469b      	mov	fp, r3
 80091b4:	4643      	mov	r3, r8
 80091b6:	eb1a 0303 	adds.w	r3, sl, r3
 80091ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091be:	464b      	mov	r3, r9
 80091c0:	eb4b 0303 	adc.w	r3, fp, r3
 80091c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80091dc:	460b      	mov	r3, r1
 80091de:	18db      	adds	r3, r3, r3
 80091e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80091e2:	4613      	mov	r3, r2
 80091e4:	eb42 0303 	adc.w	r3, r2, r3
 80091e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80091ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80091f2:	f7f7 fcd9 	bl	8000ba8 <__aeabi_uldivmod>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4611      	mov	r1, r2
 80091fc:	4b3b      	ldr	r3, [pc, #236]	@ (80092ec <UART_SetConfig+0x2d4>)
 80091fe:	fba3 2301 	umull	r2, r3, r3, r1
 8009202:	095b      	lsrs	r3, r3, #5
 8009204:	2264      	movs	r2, #100	@ 0x64
 8009206:	fb02 f303 	mul.w	r3, r2, r3
 800920a:	1acb      	subs	r3, r1, r3
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009212:	4b36      	ldr	r3, [pc, #216]	@ (80092ec <UART_SetConfig+0x2d4>)
 8009214:	fba3 2302 	umull	r2, r3, r3, r2
 8009218:	095b      	lsrs	r3, r3, #5
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009220:	441c      	add	r4, r3
 8009222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009226:	2200      	movs	r2, #0
 8009228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800922c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009234:	4642      	mov	r2, r8
 8009236:	464b      	mov	r3, r9
 8009238:	1891      	adds	r1, r2, r2
 800923a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800923c:	415b      	adcs	r3, r3
 800923e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009244:	4641      	mov	r1, r8
 8009246:	1851      	adds	r1, r2, r1
 8009248:	6339      	str	r1, [r7, #48]	@ 0x30
 800924a:	4649      	mov	r1, r9
 800924c:	414b      	adcs	r3, r1
 800924e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009250:	f04f 0200 	mov.w	r2, #0
 8009254:	f04f 0300 	mov.w	r3, #0
 8009258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800925c:	4659      	mov	r1, fp
 800925e:	00cb      	lsls	r3, r1, #3
 8009260:	4651      	mov	r1, sl
 8009262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009266:	4651      	mov	r1, sl
 8009268:	00ca      	lsls	r2, r1, #3
 800926a:	4610      	mov	r0, r2
 800926c:	4619      	mov	r1, r3
 800926e:	4603      	mov	r3, r0
 8009270:	4642      	mov	r2, r8
 8009272:	189b      	adds	r3, r3, r2
 8009274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009278:	464b      	mov	r3, r9
 800927a:	460a      	mov	r2, r1
 800927c:	eb42 0303 	adc.w	r3, r2, r3
 8009280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009290:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009298:	460b      	mov	r3, r1
 800929a:	18db      	adds	r3, r3, r3
 800929c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800929e:	4613      	mov	r3, r2
 80092a0:	eb42 0303 	adc.w	r3, r2, r3
 80092a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092ae:	f7f7 fc7b 	bl	8000ba8 <__aeabi_uldivmod>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	4b0d      	ldr	r3, [pc, #52]	@ (80092ec <UART_SetConfig+0x2d4>)
 80092b8:	fba3 1302 	umull	r1, r3, r3, r2
 80092bc:	095b      	lsrs	r3, r3, #5
 80092be:	2164      	movs	r1, #100	@ 0x64
 80092c0:	fb01 f303 	mul.w	r3, r1, r3
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	3332      	adds	r3, #50	@ 0x32
 80092ca:	4a08      	ldr	r2, [pc, #32]	@ (80092ec <UART_SetConfig+0x2d4>)
 80092cc:	fba2 2303 	umull	r2, r3, r2, r3
 80092d0:	095b      	lsrs	r3, r3, #5
 80092d2:	f003 0207 	and.w	r2, r3, #7
 80092d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4422      	add	r2, r4
 80092de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092e0:	e106      	b.n	80094f0 <UART_SetConfig+0x4d8>
 80092e2:	bf00      	nop
 80092e4:	40011000 	.word	0x40011000
 80092e8:	40011400 	.word	0x40011400
 80092ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80092fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009302:	4642      	mov	r2, r8
 8009304:	464b      	mov	r3, r9
 8009306:	1891      	adds	r1, r2, r2
 8009308:	6239      	str	r1, [r7, #32]
 800930a:	415b      	adcs	r3, r3
 800930c:	627b      	str	r3, [r7, #36]	@ 0x24
 800930e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009312:	4641      	mov	r1, r8
 8009314:	1854      	adds	r4, r2, r1
 8009316:	4649      	mov	r1, r9
 8009318:	eb43 0501 	adc.w	r5, r3, r1
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	f04f 0300 	mov.w	r3, #0
 8009324:	00eb      	lsls	r3, r5, #3
 8009326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800932a:	00e2      	lsls	r2, r4, #3
 800932c:	4614      	mov	r4, r2
 800932e:	461d      	mov	r5, r3
 8009330:	4643      	mov	r3, r8
 8009332:	18e3      	adds	r3, r4, r3
 8009334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009338:	464b      	mov	r3, r9
 800933a:	eb45 0303 	adc.w	r3, r5, r3
 800933e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800934e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009352:	f04f 0200 	mov.w	r2, #0
 8009356:	f04f 0300 	mov.w	r3, #0
 800935a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800935e:	4629      	mov	r1, r5
 8009360:	008b      	lsls	r3, r1, #2
 8009362:	4621      	mov	r1, r4
 8009364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009368:	4621      	mov	r1, r4
 800936a:	008a      	lsls	r2, r1, #2
 800936c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009370:	f7f7 fc1a 	bl	8000ba8 <__aeabi_uldivmod>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4b60      	ldr	r3, [pc, #384]	@ (80094fc <UART_SetConfig+0x4e4>)
 800937a:	fba3 2302 	umull	r2, r3, r3, r2
 800937e:	095b      	lsrs	r3, r3, #5
 8009380:	011c      	lsls	r4, r3, #4
 8009382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009386:	2200      	movs	r2, #0
 8009388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800938c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009394:	4642      	mov	r2, r8
 8009396:	464b      	mov	r3, r9
 8009398:	1891      	adds	r1, r2, r2
 800939a:	61b9      	str	r1, [r7, #24]
 800939c:	415b      	adcs	r3, r3
 800939e:	61fb      	str	r3, [r7, #28]
 80093a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093a4:	4641      	mov	r1, r8
 80093a6:	1851      	adds	r1, r2, r1
 80093a8:	6139      	str	r1, [r7, #16]
 80093aa:	4649      	mov	r1, r9
 80093ac:	414b      	adcs	r3, r1
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	f04f 0300 	mov.w	r3, #0
 80093b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093bc:	4659      	mov	r1, fp
 80093be:	00cb      	lsls	r3, r1, #3
 80093c0:	4651      	mov	r1, sl
 80093c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093c6:	4651      	mov	r1, sl
 80093c8:	00ca      	lsls	r2, r1, #3
 80093ca:	4610      	mov	r0, r2
 80093cc:	4619      	mov	r1, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	4642      	mov	r2, r8
 80093d2:	189b      	adds	r3, r3, r2
 80093d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093d8:	464b      	mov	r3, r9
 80093da:	460a      	mov	r2, r1
 80093dc:	eb42 0303 	adc.w	r3, r2, r3
 80093e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80093fc:	4649      	mov	r1, r9
 80093fe:	008b      	lsls	r3, r1, #2
 8009400:	4641      	mov	r1, r8
 8009402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009406:	4641      	mov	r1, r8
 8009408:	008a      	lsls	r2, r1, #2
 800940a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800940e:	f7f7 fbcb 	bl	8000ba8 <__aeabi_uldivmod>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4611      	mov	r1, r2
 8009418:	4b38      	ldr	r3, [pc, #224]	@ (80094fc <UART_SetConfig+0x4e4>)
 800941a:	fba3 2301 	umull	r2, r3, r3, r1
 800941e:	095b      	lsrs	r3, r3, #5
 8009420:	2264      	movs	r2, #100	@ 0x64
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	1acb      	subs	r3, r1, r3
 8009428:	011b      	lsls	r3, r3, #4
 800942a:	3332      	adds	r3, #50	@ 0x32
 800942c:	4a33      	ldr	r2, [pc, #204]	@ (80094fc <UART_SetConfig+0x4e4>)
 800942e:	fba2 2303 	umull	r2, r3, r2, r3
 8009432:	095b      	lsrs	r3, r3, #5
 8009434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009438:	441c      	add	r4, r3
 800943a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800943e:	2200      	movs	r2, #0
 8009440:	673b      	str	r3, [r7, #112]	@ 0x70
 8009442:	677a      	str	r2, [r7, #116]	@ 0x74
 8009444:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009448:	4642      	mov	r2, r8
 800944a:	464b      	mov	r3, r9
 800944c:	1891      	adds	r1, r2, r2
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	415b      	adcs	r3, r3
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009458:	4641      	mov	r1, r8
 800945a:	1851      	adds	r1, r2, r1
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	4649      	mov	r1, r9
 8009460:	414b      	adcs	r3, r1
 8009462:	607b      	str	r3, [r7, #4]
 8009464:	f04f 0200 	mov.w	r2, #0
 8009468:	f04f 0300 	mov.w	r3, #0
 800946c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009470:	4659      	mov	r1, fp
 8009472:	00cb      	lsls	r3, r1, #3
 8009474:	4651      	mov	r1, sl
 8009476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800947a:	4651      	mov	r1, sl
 800947c:	00ca      	lsls	r2, r1, #3
 800947e:	4610      	mov	r0, r2
 8009480:	4619      	mov	r1, r3
 8009482:	4603      	mov	r3, r0
 8009484:	4642      	mov	r2, r8
 8009486:	189b      	adds	r3, r3, r2
 8009488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800948a:	464b      	mov	r3, r9
 800948c:	460a      	mov	r2, r1
 800948e:	eb42 0303 	adc.w	r3, r2, r3
 8009492:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	663b      	str	r3, [r7, #96]	@ 0x60
 800949e:	667a      	str	r2, [r7, #100]	@ 0x64
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094ac:	4649      	mov	r1, r9
 80094ae:	008b      	lsls	r3, r1, #2
 80094b0:	4641      	mov	r1, r8
 80094b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094b6:	4641      	mov	r1, r8
 80094b8:	008a      	lsls	r2, r1, #2
 80094ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094be:	f7f7 fb73 	bl	8000ba8 <__aeabi_uldivmod>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	4b0d      	ldr	r3, [pc, #52]	@ (80094fc <UART_SetConfig+0x4e4>)
 80094c8:	fba3 1302 	umull	r1, r3, r3, r2
 80094cc:	095b      	lsrs	r3, r3, #5
 80094ce:	2164      	movs	r1, #100	@ 0x64
 80094d0:	fb01 f303 	mul.w	r3, r1, r3
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	3332      	adds	r3, #50	@ 0x32
 80094da:	4a08      	ldr	r2, [pc, #32]	@ (80094fc <UART_SetConfig+0x4e4>)
 80094dc:	fba2 2303 	umull	r2, r3, r2, r3
 80094e0:	095b      	lsrs	r3, r3, #5
 80094e2:	f003 020f 	and.w	r2, r3, #15
 80094e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4422      	add	r2, r4
 80094ee:	609a      	str	r2, [r3, #8]
}
 80094f0:	bf00      	nop
 80094f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80094f6:	46bd      	mov	sp, r7
 80094f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094fc:	51eb851f 	.word	0x51eb851f

08009500 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009500:	b084      	sub	sp, #16
 8009502:	b480      	push	{r7}
 8009504:	b085      	sub	sp, #20
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	f107 001c 	add.w	r0, r7, #28
 800950e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009516:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009518:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800951a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800951c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800951e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009522:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009526:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800952a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800953a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	b004      	add	sp, #16
 8009554:	4770      	bx	lr

08009556 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2203      	movs	r2, #3
 800959e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0303 	and.w	r3, r3, #3
}
 80095be:	4618      	mov	r0, r3
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b085      	sub	sp, #20
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80095e8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80095ee:	431a      	orrs	r2, r3
                       Command->CPSM);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80095f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009604:	f023 030f 	bic.w	r3, r3, #15
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	431a      	orrs	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	b2db      	uxtb	r3, r3
}
 800962c:	4618      	mov	r0, r3
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3314      	adds	r3, #20
 8009646:	461a      	mov	r2, r3
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	4413      	add	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
}  
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800965e:	b480      	push	{r7}
 8009660:	b085      	sub	sp, #20
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009684:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800968a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009690:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4313      	orrs	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0

}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b088      	sub	sp, #32
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80096c4:	2310      	movs	r3, #16
 80096c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096c8:	2340      	movs	r3, #64	@ 0x40
 80096ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096cc:	2300      	movs	r3, #0
 80096ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096d6:	f107 0308 	add.w	r3, r7, #8
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7ff ff74 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80096e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096e6:	2110      	movs	r1, #16
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa19 	bl	8009b20 <SDMMC_GetCmdResp1>
 80096ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096f0:	69fb      	ldr	r3, [r7, #28]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3720      	adds	r7, #32
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b088      	sub	sp, #32
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009708:	2311      	movs	r3, #17
 800970a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800970c:	2340      	movs	r3, #64	@ 0x40
 800970e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009710:	2300      	movs	r3, #0
 8009712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009718:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800971a:	f107 0308 	add.w	r3, r7, #8
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff ff52 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800972a:	2111      	movs	r1, #17
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f9f7 	bl	8009b20 <SDMMC_GetCmdResp1>
 8009732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009734:	69fb      	ldr	r3, [r7, #28]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b088      	sub	sp, #32
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800974c:	2312      	movs	r3, #18
 800974e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009750:	2340      	movs	r3, #64	@ 0x40
 8009752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009754:	2300      	movs	r3, #0
 8009756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800975c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800975e:	f107 0308 	add.w	r3, r7, #8
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff ff30 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800976a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800976e:	2112      	movs	r1, #18
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f9d5 	bl	8009b20 <SDMMC_GetCmdResp1>
 8009776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009778:	69fb      	ldr	r3, [r7, #28]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3720      	adds	r7, #32
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b088      	sub	sp, #32
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009790:	2318      	movs	r3, #24
 8009792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009794:	2340      	movs	r3, #64	@ 0x40
 8009796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800979c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097a2:	f107 0308 	add.w	r3, r7, #8
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff ff0e 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80097ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097b2:	2118      	movs	r1, #24
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f9b3 	bl	8009b20 <SDMMC_GetCmdResp1>
 80097ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097bc:	69fb      	ldr	r3, [r7, #28]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3720      	adds	r7, #32
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b088      	sub	sp, #32
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80097d4:	2319      	movs	r3, #25
 80097d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097d8:	2340      	movs	r3, #64	@ 0x40
 80097da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097dc:	2300      	movs	r3, #0
 80097de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097e6:	f107 0308 	add.w	r3, r7, #8
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff feec 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80097f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097f6:	2119      	movs	r1, #25
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f991 	bl	8009b20 <SDMMC_GetCmdResp1>
 80097fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009800:	69fb      	ldr	r3, [r7, #28]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3720      	adds	r7, #32
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009814:	2300      	movs	r3, #0
 8009816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009818:	230c      	movs	r3, #12
 800981a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800981c:	2340      	movs	r3, #64	@ 0x40
 800981e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009828:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800982a:	f107 0308 	add.w	r3, r7, #8
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff feca 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009836:	4a05      	ldr	r2, [pc, #20]	@ (800984c <SDMMC_CmdStopTransfer+0x40>)
 8009838:	210c      	movs	r1, #12
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f970 	bl	8009b20 <SDMMC_GetCmdResp1>
 8009840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009842:	69fb      	ldr	r3, [r7, #28]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	05f5e100 	.word	0x05f5e100

08009850 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08a      	sub	sp, #40	@ 0x28
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009860:	2307      	movs	r3, #7
 8009862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009864:	2340      	movs	r3, #64	@ 0x40
 8009866:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009868:	2300      	movs	r3, #0
 800986a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800986c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009870:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009872:	f107 0310 	add.w	r3, r7, #16
 8009876:	4619      	mov	r1, r3
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f7ff fea6 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800987e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009882:	2107      	movs	r1, #7
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 f94b 	bl	8009b20 <SDMMC_GetCmdResp1>
 800988a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800988c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800988e:	4618      	mov	r0, r3
 8009890:	3728      	adds	r7, #40	@ 0x28
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b088      	sub	sp, #32
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80098a6:	2300      	movs	r3, #0
 80098a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098aa:	2300      	movs	r3, #0
 80098ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098b4:	f107 0308 	add.w	r3, r7, #8
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff fe85 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fb65 	bl	8009f90 <SDMMC_GetCmdError>
 80098c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098c8:	69fb      	ldr	r3, [r7, #28]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3720      	adds	r7, #32
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b088      	sub	sp, #32
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80098da:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80098de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80098e0:	2308      	movs	r3, #8
 80098e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098e4:	2340      	movs	r3, #64	@ 0x40
 80098e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098f2:	f107 0308 	add.w	r3, r7, #8
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff fe66 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 faf8 	bl	8009ef4 <SDMMC_GetCmdResp7>
 8009904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009906:	69fb      	ldr	r3, [r7, #28]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3720      	adds	r7, #32
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800991e:	2337      	movs	r3, #55	@ 0x37
 8009920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009922:	2340      	movs	r3, #64	@ 0x40
 8009924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800992a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800992e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009930:	f107 0308 	add.w	r3, r7, #8
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff fe47 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800993c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009940:	2137      	movs	r1, #55	@ 0x37
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f8ec 	bl	8009b20 <SDMMC_GetCmdResp1>
 8009948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800994a:	69fb      	ldr	r3, [r7, #28]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3720      	adds	r7, #32
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009964:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800996a:	2329      	movs	r3, #41	@ 0x29
 800996c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800996e:	2340      	movs	r3, #64	@ 0x40
 8009970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009972:	2300      	movs	r3, #0
 8009974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800997a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800997c:	f107 0308 	add.w	r3, r7, #8
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff fe21 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f9ff 	bl	8009d8c <SDMMC_GetCmdResp3>
 800998e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009990:	69fb      	ldr	r3, [r7, #28]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3720      	adds	r7, #32
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b088      	sub	sp, #32
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80099a8:	2306      	movs	r3, #6
 80099aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099ac:	2340      	movs	r3, #64	@ 0x40
 80099ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099ba:	f107 0308 	add.w	r3, r7, #8
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff fe02 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80099c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099ca:	2106      	movs	r1, #6
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f8a7 	bl	8009b20 <SDMMC_GetCmdResp1>
 80099d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d4:	69fb      	ldr	r3, [r7, #28]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3720      	adds	r7, #32
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b088      	sub	sp, #32
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80099ea:	2333      	movs	r3, #51	@ 0x33
 80099ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099ee:	2340      	movs	r3, #64	@ 0x40
 80099f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099f2:	2300      	movs	r3, #0
 80099f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099fc:	f107 0308 	add.w	r3, r7, #8
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff fde1 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a0c:	2133      	movs	r1, #51	@ 0x33
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f886 	bl	8009b20 <SDMMC_GetCmdResp1>
 8009a14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a16:	69fb      	ldr	r3, [r7, #28]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3720      	adds	r7, #32
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a30:	23c0      	movs	r3, #192	@ 0xc0
 8009a32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a34:	2300      	movs	r3, #0
 8009a36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a3e:	f107 0308 	add.w	r3, r7, #8
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff fdc0 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f956 	bl	8009cfc <SDMMC_GetCmdResp2>
 8009a50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a52:	69fb      	ldr	r3, [r7, #28]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3720      	adds	r7, #32
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009a6a:	2309      	movs	r3, #9
 8009a6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a6e:	23c0      	movs	r3, #192	@ 0xc0
 8009a70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a72:	2300      	movs	r3, #0
 8009a74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a7c:	f107 0308 	add.w	r3, r7, #8
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7ff fda1 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f937 	bl	8009cfc <SDMMC_GetCmdResp2>
 8009a8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a90:	69fb      	ldr	r3, [r7, #28]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3720      	adds	r7, #32
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b088      	sub	sp, #32
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aac:	2340      	movs	r3, #64	@ 0x40
 8009aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aba:	f107 0308 	add.w	r3, r7, #8
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff fd82 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	2103      	movs	r1, #3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f99c 	bl	8009e08 <SDMMC_GetCmdResp6>
 8009ad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3720      	adds	r7, #32
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009aea:	230d      	movs	r3, #13
 8009aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aee:	2340      	movs	r3, #64	@ 0x40
 8009af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009af2:	2300      	movs	r3, #0
 8009af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009afa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009afc:	f107 0308 	add.w	r3, r7, #8
 8009b00:	4619      	mov	r1, r3
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff fd61 	bl	80095ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b0c:	210d      	movs	r1, #13
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f806 	bl	8009b20 <SDMMC_GetCmdResp1>
 8009b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b16:	69fb      	ldr	r3, [r7, #28]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b2e:	4b70      	ldr	r3, [pc, #448]	@ (8009cf0 <SDMMC_GetCmdResp1+0x1d0>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a70      	ldr	r2, [pc, #448]	@ (8009cf4 <SDMMC_GetCmdResp1+0x1d4>)
 8009b34:	fba2 2303 	umull	r2, r3, r2, r3
 8009b38:	0a5a      	lsrs	r2, r3, #9
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	fb02 f303 	mul.w	r3, r2, r3
 8009b40:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	1e5a      	subs	r2, r3, #1
 8009b46:	61fa      	str	r2, [r7, #28]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d102      	bne.n	8009b52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b50:	e0c9      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b56:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0ef      	beq.n	8009b42 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1ea      	bne.n	8009b42 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b70:	f003 0304 	and.w	r3, r3, #4
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d004      	beq.n	8009b82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2204      	movs	r2, #4
 8009b7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b7e:	2304      	movs	r3, #4
 8009b80:	e0b1      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d004      	beq.n	8009b98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e0a6      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	22c5      	movs	r2, #197	@ 0xc5
 8009b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7ff fd3d 	bl	800961e <SDIO_GetCommandResponse>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	7afb      	ldrb	r3, [r7, #11]
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d001      	beq.n	8009bb2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e099      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7ff fd3f 	bl	8009638 <SDIO_GetResponse>
 8009bba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8009cf8 <SDMMC_GetCmdResp1+0x1d8>)
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e08d      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	da02      	bge.n	8009bd6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009bd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009bd4:	e087      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009be0:	2340      	movs	r3, #64	@ 0x40
 8009be2:	e080      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bee:	2380      	movs	r3, #128	@ 0x80
 8009bf0:	e079      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009bfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c00:	e071      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c10:	e069      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c20:	e061      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c30:	e059      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c40:	e051      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c50:	e049      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009c60:	e041      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c70:	e039      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009c80:	e031      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009c90:	e029      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009c9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ca0:	e021      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009cac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009cb0:	e019      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009cbc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009cc0:	e011      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009ccc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009cd0:	e009      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f003 0308 	and.w	r3, r3, #8
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009cdc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009ce0:	e001      	b.n	8009ce6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ce2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3720      	adds	r7, #32
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	20000008 	.word	0x20000008
 8009cf4:	10624dd3 	.word	0x10624dd3
 8009cf8:	fdffe008 	.word	0xfdffe008

08009cfc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d04:	4b1f      	ldr	r3, [pc, #124]	@ (8009d84 <SDMMC_GetCmdResp2+0x88>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a1f      	ldr	r2, [pc, #124]	@ (8009d88 <SDMMC_GetCmdResp2+0x8c>)
 8009d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0e:	0a5b      	lsrs	r3, r3, #9
 8009d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d14:	fb02 f303 	mul.w	r3, r2, r3
 8009d18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	1e5a      	subs	r2, r3, #1
 8009d1e:	60fa      	str	r2, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d102      	bne.n	8009d2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d28:	e026      	b.n	8009d78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0ef      	beq.n	8009d1a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1ea      	bne.n	8009d1a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d48:	f003 0304 	and.w	r3, r3, #4
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d004      	beq.n	8009d5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2204      	movs	r2, #4
 8009d54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d56:	2304      	movs	r3, #4
 8009d58:	e00e      	b.n	8009d78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d004      	beq.n	8009d70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e003      	b.n	8009d78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	22c5      	movs	r2, #197	@ 0xc5
 8009d74:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	20000008 	.word	0x20000008
 8009d88:	10624dd3 	.word	0x10624dd3

08009d8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d94:	4b1a      	ldr	r3, [pc, #104]	@ (8009e00 <SDMMC_GetCmdResp3+0x74>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a1a      	ldr	r2, [pc, #104]	@ (8009e04 <SDMMC_GetCmdResp3+0x78>)
 8009d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d9e:	0a5b      	lsrs	r3, r3, #9
 8009da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009da4:	fb02 f303 	mul.w	r3, r2, r3
 8009da8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	1e5a      	subs	r2, r3, #1
 8009dae:	60fa      	str	r2, [r7, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d102      	bne.n	8009dba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009db4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009db8:	e01b      	b.n	8009df2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0ef      	beq.n	8009daa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1ea      	bne.n	8009daa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd8:	f003 0304 	and.w	r3, r3, #4
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d004      	beq.n	8009dea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2204      	movs	r2, #4
 8009de4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009de6:	2304      	movs	r3, #4
 8009de8:	e003      	b.n	8009df2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	22c5      	movs	r2, #197	@ 0xc5
 8009dee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20000008 	.word	0x20000008
 8009e04:	10624dd3 	.word	0x10624dd3

08009e08 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	460b      	mov	r3, r1
 8009e12:	607a      	str	r2, [r7, #4]
 8009e14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e16:	4b35      	ldr	r3, [pc, #212]	@ (8009eec <SDMMC_GetCmdResp6+0xe4>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a35      	ldr	r2, [pc, #212]	@ (8009ef0 <SDMMC_GetCmdResp6+0xe8>)
 8009e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e20:	0a5b      	lsrs	r3, r3, #9
 8009e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e26:	fb02 f303 	mul.w	r3, r2, r3
 8009e2a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	1e5a      	subs	r2, r3, #1
 8009e30:	61fa      	str	r2, [r7, #28]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d102      	bne.n	8009e3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e3a:	e052      	b.n	8009ee2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e40:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d0ef      	beq.n	8009e2c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1ea      	bne.n	8009e2c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d004      	beq.n	8009e6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2204      	movs	r2, #4
 8009e66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e68:	2304      	movs	r3, #4
 8009e6a:	e03a      	b.n	8009ee2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d004      	beq.n	8009e82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e02f      	b.n	8009ee2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff fbcb 	bl	800961e <SDIO_GetCommandResponse>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d001      	beq.n	8009e96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e025      	b.n	8009ee2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	22c5      	movs	r2, #197	@ 0xc5
 8009e9a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f7ff fbca 	bl	8009638 <SDIO_GetResponse>
 8009ea4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d106      	bne.n	8009ebe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	0c1b      	lsrs	r3, r3, #16
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e011      	b.n	8009ee2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ec8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ecc:	e009      	b.n	8009ee2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009edc:	e001      	b.n	8009ee2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ede:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3720      	adds	r7, #32
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20000008 	.word	0x20000008
 8009ef0:	10624dd3 	.word	0x10624dd3

08009ef4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009efc:	4b22      	ldr	r3, [pc, #136]	@ (8009f88 <SDMMC_GetCmdResp7+0x94>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a22      	ldr	r2, [pc, #136]	@ (8009f8c <SDMMC_GetCmdResp7+0x98>)
 8009f02:	fba2 2303 	umull	r2, r3, r2, r3
 8009f06:	0a5b      	lsrs	r3, r3, #9
 8009f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f0c:	fb02 f303 	mul.w	r3, r2, r3
 8009f10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	1e5a      	subs	r2, r3, #1
 8009f16:	60fa      	str	r2, [r7, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d102      	bne.n	8009f22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f20:	e02c      	b.n	8009f7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0ef      	beq.n	8009f12 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1ea      	bne.n	8009f12 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f40:	f003 0304 	and.w	r3, r3, #4
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d004      	beq.n	8009f52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f4e:	2304      	movs	r3, #4
 8009f50:	e014      	b.n	8009f7c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d004      	beq.n	8009f68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e009      	b.n	8009f7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2240      	movs	r2, #64	@ 0x40
 8009f78:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f7a:	2300      	movs	r3, #0
  
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	20000008 	.word	0x20000008
 8009f8c:	10624dd3 	.word	0x10624dd3

08009f90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f98:	4b11      	ldr	r3, [pc, #68]	@ (8009fe0 <SDMMC_GetCmdError+0x50>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a11      	ldr	r2, [pc, #68]	@ (8009fe4 <SDMMC_GetCmdError+0x54>)
 8009f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa2:	0a5b      	lsrs	r3, r3, #9
 8009fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fa8:	fb02 f303 	mul.w	r3, r2, r3
 8009fac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1e5a      	subs	r2, r3, #1
 8009fb2:	60fa      	str	r2, [r7, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fbc:	e009      	b.n	8009fd2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0f1      	beq.n	8009fae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	22c5      	movs	r2, #197	@ 0xc5
 8009fce:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	20000008 	.word	0x20000008
 8009fe4:	10624dd3 	.word	0x10624dd3

08009fe8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fe8:	b084      	sub	sp, #16
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	f107 001c 	add.w	r0, r7, #28
 8009ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ffa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d123      	bne.n	800a04a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a006:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a02a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d105      	bne.n	800a03e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 fae8 	bl	800b614 <USB_CoreReset>
 800a044:	4603      	mov	r3, r0
 800a046:	73fb      	strb	r3, [r7, #15]
 800a048:	e01b      	b.n	800a082 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 fadc 	bl	800b614 <USB_CoreReset>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a060:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a064:	2b00      	cmp	r3, #0
 800a066:	d106      	bne.n	800a076 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	639a      	str	r2, [r3, #56]	@ 0x38
 800a074:	e005      	b.n	800a082 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a082:	7fbb      	ldrb	r3, [r7, #30]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d10b      	bne.n	800a0a0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f043 0206 	orr.w	r2, r3, #6
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f043 0220 	orr.w	r2, r3, #32
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0ac:	b004      	add	sp, #16
 800a0ae:	4770      	bx	lr

0800a0b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d165      	bne.n	800a190 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4a41      	ldr	r2, [pc, #260]	@ (800a1cc <USB_SetTurnaroundTime+0x11c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d906      	bls.n	800a0da <USB_SetTurnaroundTime+0x2a>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4a40      	ldr	r2, [pc, #256]	@ (800a1d0 <USB_SetTurnaroundTime+0x120>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d202      	bcs.n	800a0da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a0d4:	230f      	movs	r3, #15
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	e062      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	4a3c      	ldr	r2, [pc, #240]	@ (800a1d0 <USB_SetTurnaroundTime+0x120>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d306      	bcc.n	800a0f0 <USB_SetTurnaroundTime+0x40>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	4a3b      	ldr	r2, [pc, #236]	@ (800a1d4 <USB_SetTurnaroundTime+0x124>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d202      	bcs.n	800a0f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a0ea:	230e      	movs	r3, #14
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	e057      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	4a38      	ldr	r2, [pc, #224]	@ (800a1d4 <USB_SetTurnaroundTime+0x124>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d306      	bcc.n	800a106 <USB_SetTurnaroundTime+0x56>
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	4a37      	ldr	r2, [pc, #220]	@ (800a1d8 <USB_SetTurnaroundTime+0x128>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d202      	bcs.n	800a106 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a100:	230d      	movs	r3, #13
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	e04c      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	4a33      	ldr	r2, [pc, #204]	@ (800a1d8 <USB_SetTurnaroundTime+0x128>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d306      	bcc.n	800a11c <USB_SetTurnaroundTime+0x6c>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	4a32      	ldr	r2, [pc, #200]	@ (800a1dc <USB_SetTurnaroundTime+0x12c>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d802      	bhi.n	800a11c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a116:	230c      	movs	r3, #12
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e041      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	4a2f      	ldr	r2, [pc, #188]	@ (800a1dc <USB_SetTurnaroundTime+0x12c>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d906      	bls.n	800a132 <USB_SetTurnaroundTime+0x82>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4a2e      	ldr	r2, [pc, #184]	@ (800a1e0 <USB_SetTurnaroundTime+0x130>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d802      	bhi.n	800a132 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a12c:	230b      	movs	r3, #11
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	e036      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	4a2a      	ldr	r2, [pc, #168]	@ (800a1e0 <USB_SetTurnaroundTime+0x130>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d906      	bls.n	800a148 <USB_SetTurnaroundTime+0x98>
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4a29      	ldr	r2, [pc, #164]	@ (800a1e4 <USB_SetTurnaroundTime+0x134>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d802      	bhi.n	800a148 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a142:	230a      	movs	r3, #10
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	e02b      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	4a26      	ldr	r2, [pc, #152]	@ (800a1e4 <USB_SetTurnaroundTime+0x134>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d906      	bls.n	800a15e <USB_SetTurnaroundTime+0xae>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4a25      	ldr	r2, [pc, #148]	@ (800a1e8 <USB_SetTurnaroundTime+0x138>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d202      	bcs.n	800a15e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a158:	2309      	movs	r3, #9
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	e020      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	4a21      	ldr	r2, [pc, #132]	@ (800a1e8 <USB_SetTurnaroundTime+0x138>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d306      	bcc.n	800a174 <USB_SetTurnaroundTime+0xc4>
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	4a20      	ldr	r2, [pc, #128]	@ (800a1ec <USB_SetTurnaroundTime+0x13c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d802      	bhi.n	800a174 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a16e:	2308      	movs	r3, #8
 800a170:	617b      	str	r3, [r7, #20]
 800a172:	e015      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	4a1d      	ldr	r2, [pc, #116]	@ (800a1ec <USB_SetTurnaroundTime+0x13c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d906      	bls.n	800a18a <USB_SetTurnaroundTime+0xda>
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	4a1c      	ldr	r2, [pc, #112]	@ (800a1f0 <USB_SetTurnaroundTime+0x140>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d202      	bcs.n	800a18a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a184:	2307      	movs	r3, #7
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	e00a      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a18a:	2306      	movs	r3, #6
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	e007      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a196:	2309      	movs	r3, #9
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	e001      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a19c:	2309      	movs	r3, #9
 800a19e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	029b      	lsls	r3, r3, #10
 800a1b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	00d8acbf 	.word	0x00d8acbf
 800a1d0:	00e4e1c0 	.word	0x00e4e1c0
 800a1d4:	00f42400 	.word	0x00f42400
 800a1d8:	01067380 	.word	0x01067380
 800a1dc:	011a499f 	.word	0x011a499f
 800a1e0:	01312cff 	.word	0x01312cff
 800a1e4:	014ca43f 	.word	0x014ca43f
 800a1e8:	016e3600 	.word	0x016e3600
 800a1ec:	01a6ab1f 	.word	0x01a6ab1f
 800a1f0:	01e84800 	.word	0x01e84800

0800a1f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f043 0201 	orr.w	r2, r3, #1
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f023 0201 	bic.w	r2, r3, #1
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d115      	bne.n	800a286 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a266:	200a      	movs	r0, #10
 800a268:	f7f8 fba0 	bl	80029ac <HAL_Delay>
      ms += 10U;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	330a      	adds	r3, #10
 800a270:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 f93f 	bl	800b4f6 <USB_GetMode>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d01e      	beq.n	800a2bc <USB_SetCurrentMode+0x84>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2bc7      	cmp	r3, #199	@ 0xc7
 800a282:	d9f0      	bls.n	800a266 <USB_SetCurrentMode+0x2e>
 800a284:	e01a      	b.n	800a2bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a286:	78fb      	ldrb	r3, [r7, #3]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d115      	bne.n	800a2b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a298:	200a      	movs	r0, #10
 800a29a:	f7f8 fb87 	bl	80029ac <HAL_Delay>
      ms += 10U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	330a      	adds	r3, #10
 800a2a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f001 f926 	bl	800b4f6 <USB_GetMode>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d005      	beq.n	800a2bc <USB_SetCurrentMode+0x84>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2b4:	d9f0      	bls.n	800a298 <USB_SetCurrentMode+0x60>
 800a2b6:	e001      	b.n	800a2bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e005      	b.n	800a2c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2bc8      	cmp	r3, #200	@ 0xc8
 800a2c0:	d101      	bne.n	800a2c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b086      	sub	sp, #24
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a2de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	613b      	str	r3, [r7, #16]
 800a2ee:	e009      	b.n	800a304 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	3340      	adds	r3, #64	@ 0x40
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	3301      	adds	r3, #1
 800a302:	613b      	str	r3, [r7, #16]
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	2b0e      	cmp	r3, #14
 800a308:	d9f2      	bls.n	800a2f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a30a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d11c      	bne.n	800a34c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a320:	f043 0302 	orr.w	r3, r3, #2
 800a324:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a336:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a342:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	639a      	str	r2, [r3, #56]	@ 0x38
 800a34a:	e00b      	b.n	800a364 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a350:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a35c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a36a:	461a      	mov	r2, r3
 800a36c:	2300      	movs	r3, #0
 800a36e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a370:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a374:	2b01      	cmp	r3, #1
 800a376:	d10d      	bne.n	800a394 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d104      	bne.n	800a38a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f968 	bl	800a658 <USB_SetDevSpeed>
 800a388:	e008      	b.n	800a39c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a38a:	2101      	movs	r1, #1
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f963 	bl	800a658 <USB_SetDevSpeed>
 800a392:	e003      	b.n	800a39c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a394:	2103      	movs	r1, #3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f95e 	bl	800a658 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a39c:	2110      	movs	r1, #16
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f8fa 	bl	800a598 <USB_FlushTxFifo>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f924 	bl	800a5fc <USB_FlushRxFifo>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3dc:	461a      	mov	r2, r3
 800a3de:	2300      	movs	r3, #0
 800a3e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	613b      	str	r3, [r7, #16]
 800a3e6:	e043      	b.n	800a470 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3fe:	d118      	bne.n	800a432 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10a      	bne.n	800a41c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a412:	461a      	mov	r2, r3
 800a414:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a418:	6013      	str	r3, [r2, #0]
 800a41a:	e013      	b.n	800a444 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a428:	461a      	mov	r2, r3
 800a42a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	e008      	b.n	800a444 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a43e:	461a      	mov	r2, r3
 800a440:	2300      	movs	r3, #0
 800a442:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a450:	461a      	mov	r2, r3
 800a452:	2300      	movs	r3, #0
 800a454:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a462:	461a      	mov	r2, r3
 800a464:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a468:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	3301      	adds	r3, #1
 800a46e:	613b      	str	r3, [r7, #16]
 800a470:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a474:	461a      	mov	r2, r3
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	4293      	cmp	r3, r2
 800a47a:	d3b5      	bcc.n	800a3e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a47c:	2300      	movs	r3, #0
 800a47e:	613b      	str	r3, [r7, #16]
 800a480:	e043      	b.n	800a50a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	015a      	lsls	r2, r3, #5
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4413      	add	r3, r2
 800a48a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a494:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a498:	d118      	bne.n	800a4cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	015a      	lsls	r2, r3, #5
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	e013      	b.n	800a4de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	e008      	b.n	800a4de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d8:	461a      	mov	r2, r3
 800a4da:	2300      	movs	r3, #0
 800a4dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	015a      	lsls	r2, r3, #5
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a502:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	3301      	adds	r3, #1
 800a508:	613b      	str	r3, [r7, #16]
 800a50a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a50e:	461a      	mov	r2, r3
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	4293      	cmp	r3, r2
 800a514:	d3b5      	bcc.n	800a482 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a528:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a536:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a538:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d105      	bne.n	800a54c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	f043 0210 	orr.w	r2, r3, #16
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	699a      	ldr	r2, [r3, #24]
 800a550:	4b10      	ldr	r3, [pc, #64]	@ (800a594 <USB_DevInit+0x2c4>)
 800a552:	4313      	orrs	r3, r2
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a558:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d005      	beq.n	800a56c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	f043 0208 	orr.w	r2, r3, #8
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a56c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a570:	2b01      	cmp	r3, #1
 800a572:	d107      	bne.n	800a584 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a57c:	f043 0304 	orr.w	r3, r3, #4
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a584:	7dfb      	ldrb	r3, [r7, #23]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a590:	b004      	add	sp, #16
 800a592:	4770      	bx	lr
 800a594:	803c3800 	.word	0x803c3800

0800a598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5b2:	d901      	bls.n	800a5b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e01b      	b.n	800a5f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	daf2      	bge.n	800a5a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	019b      	lsls	r3, r3, #6
 800a5c8:	f043 0220 	orr.w	r2, r3, #32
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5dc:	d901      	bls.n	800a5e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e006      	b.n	800a5f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	f003 0320 	and.w	r3, r3, #32
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	d0f0      	beq.n	800a5d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3301      	adds	r3, #1
 800a60c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a614:	d901      	bls.n	800a61a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e018      	b.n	800a64c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	daf2      	bge.n	800a608 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2210      	movs	r2, #16
 800a62a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	3301      	adds	r3, #1
 800a630:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a638:	d901      	bls.n	800a63e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e006      	b.n	800a64c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	f003 0310 	and.w	r3, r3, #16
 800a646:	2b10      	cmp	r3, #16
 800a648:	d0f0      	beq.n	800a62c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	68f9      	ldr	r1, [r7, #12]
 800a674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a678:	4313      	orrs	r3, r2
 800a67a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b087      	sub	sp, #28
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f003 0306 	and.w	r3, r3, #6
 800a6a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d102      	bne.n	800a6b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	75fb      	strb	r3, [r7, #23]
 800a6ae:	e00a      	b.n	800a6c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d002      	beq.n	800a6bc <USB_GetDevSpeed+0x32>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2b06      	cmp	r3, #6
 800a6ba:	d102      	bne.n	800a6c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a6bc:	2302      	movs	r3, #2
 800a6be:	75fb      	strb	r3, [r7, #23]
 800a6c0:	e001      	b.n	800a6c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a6c2:	230f      	movs	r3, #15
 800a6c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	371c      	adds	r7, #28
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	785b      	ldrb	r3, [r3, #1]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d13a      	bne.n	800a766 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f6:	69da      	ldr	r2, [r3, #28]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	f003 030f 	and.w	r3, r3, #15
 800a700:	2101      	movs	r1, #1
 800a702:	fa01 f303 	lsl.w	r3, r1, r3
 800a706:	b29b      	uxth	r3, r3
 800a708:	68f9      	ldr	r1, [r7, #12]
 800a70a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a70e:	4313      	orrs	r3, r2
 800a710:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d155      	bne.n	800a7d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	791b      	ldrb	r3, [r3, #4]
 800a742:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a744:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	059b      	lsls	r3, r3, #22
 800a74a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a74c:	4313      	orrs	r3, r2
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	0151      	lsls	r1, r2, #5
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	440a      	add	r2, r1
 800a756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a75a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a75e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	e036      	b.n	800a7d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a76c:	69da      	ldr	r2, [r3, #28]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	f003 030f 	and.w	r3, r3, #15
 800a776:	2101      	movs	r1, #1
 800a778:	fa01 f303 	lsl.w	r3, r1, r3
 800a77c:	041b      	lsls	r3, r3, #16
 800a77e:	68f9      	ldr	r1, [r7, #12]
 800a780:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a784:	4313      	orrs	r3, r2
 800a786:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	015a      	lsls	r2, r3, #5
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4413      	add	r3, r2
 800a790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d11a      	bne.n	800a7d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	791b      	ldrb	r3, [r3, #4]
 800a7b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7ba:	430b      	orrs	r3, r1
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	785b      	ldrb	r3, [r3, #1]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d161      	bne.n	800a8c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a816:	d11f      	bne.n	800a858 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	0151      	lsls	r1, r2, #5
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	440a      	add	r2, r1
 800a82e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a832:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a836:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	015a      	lsls	r2, r3, #5
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	0151      	lsls	r1, r2, #5
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	440a      	add	r2, r1
 800a84e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a852:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a856:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a85e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	f003 030f 	and.w	r3, r3, #15
 800a868:	2101      	movs	r1, #1
 800a86a:	fa01 f303 	lsl.w	r3, r1, r3
 800a86e:	b29b      	uxth	r3, r3
 800a870:	43db      	mvns	r3, r3
 800a872:	68f9      	ldr	r1, [r7, #12]
 800a874:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a878:	4013      	ands	r3, r2
 800a87a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a882:	69da      	ldr	r2, [r3, #28]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	f003 030f 	and.w	r3, r3, #15
 800a88c:	2101      	movs	r1, #1
 800a88e:	fa01 f303 	lsl.w	r3, r1, r3
 800a892:	b29b      	uxth	r3, r3
 800a894:	43db      	mvns	r3, r3
 800a896:	68f9      	ldr	r1, [r7, #12]
 800a898:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a89c:	4013      	ands	r3, r2
 800a89e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	015a      	lsls	r2, r3, #5
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	0159      	lsls	r1, r3, #5
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	440b      	add	r3, r1
 800a8b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4b35      	ldr	r3, [pc, #212]	@ (800a994 <USB_DeactivateEndpoint+0x1b0>)
 800a8be:	4013      	ands	r3, r2
 800a8c0:	600b      	str	r3, [r1, #0]
 800a8c2:	e060      	b.n	800a986 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	015a      	lsls	r2, r3, #5
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8da:	d11f      	bne.n	800a91c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	0151      	lsls	r1, r2, #5
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	440a      	add	r2, r1
 800a8f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	015a      	lsls	r2, r3, #5
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4413      	add	r3, r2
 800a904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	0151      	lsls	r1, r2, #5
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	440a      	add	r2, r1
 800a912:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a916:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a91a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a922:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f003 030f 	and.w	r3, r3, #15
 800a92c:	2101      	movs	r1, #1
 800a92e:	fa01 f303 	lsl.w	r3, r1, r3
 800a932:	041b      	lsls	r3, r3, #16
 800a934:	43db      	mvns	r3, r3
 800a936:	68f9      	ldr	r1, [r7, #12]
 800a938:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a93c:	4013      	ands	r3, r2
 800a93e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a946:	69da      	ldr	r2, [r3, #28]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	f003 030f 	and.w	r3, r3, #15
 800a950:	2101      	movs	r1, #1
 800a952:	fa01 f303 	lsl.w	r3, r1, r3
 800a956:	041b      	lsls	r3, r3, #16
 800a958:	43db      	mvns	r3, r3
 800a95a:	68f9      	ldr	r1, [r7, #12]
 800a95c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a960:	4013      	ands	r3, r2
 800a962:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	015a      	lsls	r2, r3, #5
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	0159      	lsls	r1, r3, #5
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	440b      	add	r3, r1
 800a97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97e:	4619      	mov	r1, r3
 800a980:	4b05      	ldr	r3, [pc, #20]	@ (800a998 <USB_DeactivateEndpoint+0x1b4>)
 800a982:	4013      	ands	r3, r2
 800a984:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	ec337800 	.word	0xec337800
 800a998:	eff37800 	.word	0xeff37800

0800a99c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08a      	sub	sp, #40	@ 0x28
 800a9a0:	af02      	add	r7, sp, #8
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	785b      	ldrb	r3, [r3, #1]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	f040 817f 	bne.w	800acbc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d132      	bne.n	800aa2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	015a      	lsls	r2, r3, #5
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	0151      	lsls	r1, r2, #5
 800a9d8:	69fa      	ldr	r2, [r7, #28]
 800a9da:	440a      	add	r2, r1
 800a9dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a9e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a9e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	69ba      	ldr	r2, [r7, #24]
 800a9fa:	0151      	lsls	r1, r2, #5
 800a9fc:	69fa      	ldr	r2, [r7, #28]
 800a9fe:	440a      	add	r2, r1
 800aa00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	0151      	lsls	r1, r2, #5
 800aa1c:	69fa      	ldr	r2, [r7, #28]
 800aa1e:	440a      	add	r2, r1
 800aa20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa24:	0cdb      	lsrs	r3, r3, #19
 800aa26:	04db      	lsls	r3, r3, #19
 800aa28:	6113      	str	r3, [r2, #16]
 800aa2a:	e097      	b.n	800ab5c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	0151      	lsls	r1, r2, #5
 800aa3e:	69fa      	ldr	r2, [r7, #28]
 800aa40:	440a      	add	r2, r1
 800aa42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa46:	0cdb      	lsrs	r3, r3, #19
 800aa48:	04db      	lsls	r3, r3, #19
 800aa4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	69fa      	ldr	r2, [r7, #28]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa66:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa6a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa6e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d11a      	bne.n	800aaac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	691a      	ldr	r2, [r3, #16]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d903      	bls.n	800aa8a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	015a      	lsls	r2, r3, #5
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	4413      	add	r3, r2
 800aa92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	0151      	lsls	r1, r2, #5
 800aa9c:	69fa      	ldr	r2, [r7, #28]
 800aa9e:	440a      	add	r2, r1
 800aaa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aaa8:	6113      	str	r3, [r2, #16]
 800aaaa:	e044      	b.n	800ab36 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	691a      	ldr	r2, [r3, #16]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	4413      	add	r3, r2
 800aab6:	1e5a      	subs	r2, r3, #1
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aace:	691a      	ldr	r2, [r3, #16]
 800aad0:	8afb      	ldrh	r3, [r7, #22]
 800aad2:	04d9      	lsls	r1, r3, #19
 800aad4:	4ba4      	ldr	r3, [pc, #656]	@ (800ad68 <USB_EPStartXfer+0x3cc>)
 800aad6:	400b      	ands	r3, r1
 800aad8:	69b9      	ldr	r1, [r7, #24]
 800aada:	0148      	lsls	r0, r1, #5
 800aadc:	69f9      	ldr	r1, [r7, #28]
 800aade:	4401      	add	r1, r0
 800aae0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aae4:	4313      	orrs	r3, r2
 800aae6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	791b      	ldrb	r3, [r3, #4]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d122      	bne.n	800ab36 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	69ba      	ldr	r2, [r7, #24]
 800ab00:	0151      	lsls	r1, r2, #5
 800ab02:	69fa      	ldr	r2, [r7, #28]
 800ab04:	440a      	add	r2, r1
 800ab06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab0a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ab0e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab1c:	691a      	ldr	r2, [r3, #16]
 800ab1e:	8afb      	ldrh	r3, [r7, #22]
 800ab20:	075b      	lsls	r3, r3, #29
 800ab22:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ab26:	69b9      	ldr	r1, [r7, #24]
 800ab28:	0148      	lsls	r0, r1, #5
 800ab2a:	69f9      	ldr	r1, [r7, #28]
 800ab2c:	4401      	add	r1, r0
 800ab2e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab32:	4313      	orrs	r3, r2
 800ab34:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab42:	691a      	ldr	r2, [r3, #16]
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab4c:	69b9      	ldr	r1, [r7, #24]
 800ab4e:	0148      	lsls	r0, r1, #5
 800ab50:	69f9      	ldr	r1, [r7, #28]
 800ab52:	4401      	add	r1, r0
 800ab54:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d14b      	bne.n	800abfa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d009      	beq.n	800ab7e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab76:	461a      	mov	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	791b      	ldrb	r3, [r3, #4]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d128      	bne.n	800abd8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d110      	bne.n	800abb8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	0151      	lsls	r1, r2, #5
 800aba8:	69fa      	ldr	r2, [r7, #28]
 800abaa:	440a      	add	r2, r1
 800abac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800abb4:	6013      	str	r3, [r2, #0]
 800abb6:	e00f      	b.n	800abd8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	0151      	lsls	r1, r2, #5
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	440a      	add	r2, r1
 800abce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abd6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	69ba      	ldr	r2, [r7, #24]
 800abe8:	0151      	lsls	r1, r2, #5
 800abea:	69fa      	ldr	r2, [r7, #28]
 800abec:	440a      	add	r2, r1
 800abee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abf2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	e166      	b.n	800aec8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	69ba      	ldr	r2, [r7, #24]
 800ac0a:	0151      	lsls	r1, r2, #5
 800ac0c:	69fa      	ldr	r2, [r7, #28]
 800ac0e:	440a      	add	r2, r1
 800ac10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac18:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	791b      	ldrb	r3, [r3, #4]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d015      	beq.n	800ac4e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 814e 	beq.w	800aec8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	f003 030f 	and.w	r3, r3, #15
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac42:	69f9      	ldr	r1, [r7, #28]
 800ac44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	634b      	str	r3, [r1, #52]	@ 0x34
 800ac4c:	e13c      	b.n	800aec8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d110      	bne.n	800ac80 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	015a      	lsls	r2, r3, #5
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	4413      	add	r3, r2
 800ac66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	69ba      	ldr	r2, [r7, #24]
 800ac6e:	0151      	lsls	r1, r2, #5
 800ac70:	69fa      	ldr	r2, [r7, #28]
 800ac72:	440a      	add	r2, r1
 800ac74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac7c:	6013      	str	r3, [r2, #0]
 800ac7e:	e00f      	b.n	800aca0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	015a      	lsls	r2, r3, #5
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	4413      	add	r3, r2
 800ac88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	0151      	lsls	r1, r2, #5
 800ac92:	69fa      	ldr	r2, [r7, #28]
 800ac94:	440a      	add	r2, r1
 800ac96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac9e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	68d9      	ldr	r1, [r3, #12]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	781a      	ldrb	r2, [r3, #0]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	b298      	uxth	r0, r3
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	4603      	mov	r3, r0
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 f9b9 	bl	800b02c <USB_WritePacket>
 800acba:	e105      	b.n	800aec8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	015a      	lsls	r2, r3, #5
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	4413      	add	r3, r2
 800acc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	0151      	lsls	r1, r2, #5
 800acce:	69fa      	ldr	r2, [r7, #28]
 800acd0:	440a      	add	r2, r1
 800acd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acd6:	0cdb      	lsrs	r3, r3, #19
 800acd8:	04db      	lsls	r3, r3, #19
 800acda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	69ba      	ldr	r2, [r7, #24]
 800acec:	0151      	lsls	r1, r2, #5
 800acee:	69fa      	ldr	r2, [r7, #28]
 800acf0:	440a      	add	r2, r1
 800acf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acf6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800acfa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800acfe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d132      	bne.n	800ad6c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad2a:	691a      	ldr	r2, [r3, #16]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	6a1b      	ldr	r3, [r3, #32]
 800ad30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad34:	69b9      	ldr	r1, [r7, #24]
 800ad36:	0148      	lsls	r0, r1, #5
 800ad38:	69f9      	ldr	r1, [r7, #28]
 800ad3a:	4401      	add	r1, r0
 800ad3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad40:	4313      	orrs	r3, r2
 800ad42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	69ba      	ldr	r2, [r7, #24]
 800ad54:	0151      	lsls	r1, r2, #5
 800ad56:	69fa      	ldr	r2, [r7, #28]
 800ad58:	440a      	add	r2, r1
 800ad5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad62:	6113      	str	r3, [r2, #16]
 800ad64:	e062      	b.n	800ae2c <USB_EPStartXfer+0x490>
 800ad66:	bf00      	nop
 800ad68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d123      	bne.n	800adbc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad80:	691a      	ldr	r2, [r3, #16]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad8a:	69b9      	ldr	r1, [r7, #24]
 800ad8c:	0148      	lsls	r0, r1, #5
 800ad8e:	69f9      	ldr	r1, [r7, #28]
 800ad90:	4401      	add	r1, r0
 800ad92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad96:	4313      	orrs	r3, r2
 800ad98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	0151      	lsls	r1, r2, #5
 800adac:	69fa      	ldr	r2, [r7, #28]
 800adae:	440a      	add	r2, r1
 800adb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adb8:	6113      	str	r3, [r2, #16]
 800adba:	e037      	b.n	800ae2c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	691a      	ldr	r2, [r3, #16]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	4413      	add	r3, r2
 800adc6:	1e5a      	subs	r2, r3, #1
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800add0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	8afa      	ldrh	r2, [r7, #22]
 800add8:	fb03 f202 	mul.w	r2, r3, r2
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adec:	691a      	ldr	r2, [r3, #16]
 800adee:	8afb      	ldrh	r3, [r7, #22]
 800adf0:	04d9      	lsls	r1, r3, #19
 800adf2:	4b38      	ldr	r3, [pc, #224]	@ (800aed4 <USB_EPStartXfer+0x538>)
 800adf4:	400b      	ands	r3, r1
 800adf6:	69b9      	ldr	r1, [r7, #24]
 800adf8:	0148      	lsls	r0, r1, #5
 800adfa:	69f9      	ldr	r1, [r7, #28]
 800adfc:	4401      	add	r1, r0
 800adfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae02:	4313      	orrs	r3, r2
 800ae04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	015a      	lsls	r2, r3, #5
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae12:	691a      	ldr	r2, [r3, #16]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae1c:	69b9      	ldr	r1, [r7, #24]
 800ae1e:	0148      	lsls	r0, r1, #5
 800ae20:	69f9      	ldr	r1, [r7, #28]
 800ae22:	4401      	add	r1, r0
 800ae24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ae2c:	79fb      	ldrb	r3, [r7, #7]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d10d      	bne.n	800ae4e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d009      	beq.n	800ae4e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	68d9      	ldr	r1, [r3, #12]
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae4a:	460a      	mov	r2, r1
 800ae4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	791b      	ldrb	r3, [r3, #4]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d128      	bne.n	800aea8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d110      	bne.n	800ae88 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	015a      	lsls	r2, r3, #5
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	69ba      	ldr	r2, [r7, #24]
 800ae76:	0151      	lsls	r1, r2, #5
 800ae78:	69fa      	ldr	r2, [r7, #28]
 800ae7a:	440a      	add	r2, r1
 800ae7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	e00f      	b.n	800aea8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69ba      	ldr	r2, [r7, #24]
 800ae98:	0151      	lsls	r1, r2, #5
 800ae9a:	69fa      	ldr	r2, [r7, #28]
 800ae9c:	440a      	add	r2, r1
 800ae9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aea6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	015a      	lsls	r2, r3, #5
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	4413      	add	r3, r2
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	69ba      	ldr	r2, [r7, #24]
 800aeb8:	0151      	lsls	r1, r2, #5
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	440a      	add	r2, r1
 800aebe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aec2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aec6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3720      	adds	r7, #32
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	1ff80000 	.word	0x1ff80000

0800aed8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aee2:	2300      	movs	r3, #0
 800aee4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	785b      	ldrb	r3, [r3, #1]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d14a      	bne.n	800af8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af0e:	f040 8086 	bne.w	800b01e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	7812      	ldrb	r2, [r2, #0]
 800af26:	0151      	lsls	r1, r2, #5
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	440a      	add	r2, r1
 800af2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	7812      	ldrb	r2, [r2, #0]
 800af4a:	0151      	lsls	r1, r2, #5
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	440a      	add	r2, r1
 800af50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3301      	adds	r3, #1
 800af5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f242 7210 	movw	r2, #10000	@ 0x2710
 800af66:	4293      	cmp	r3, r2
 800af68:	d902      	bls.n	800af70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	75fb      	strb	r3, [r7, #23]
          break;
 800af6e:	e056      	b.n	800b01e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	015a      	lsls	r2, r3, #5
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	4413      	add	r3, r2
 800af7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af88:	d0e7      	beq.n	800af5a <USB_EPStopXfer+0x82>
 800af8a:	e048      	b.n	800b01e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	4413      	add	r3, r2
 800af96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afa4:	d13b      	bne.n	800b01e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	7812      	ldrb	r2, [r2, #0]
 800afba:	0151      	lsls	r1, r2, #5
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	440a      	add	r2, r1
 800afc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800afc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	7812      	ldrb	r2, [r2, #0]
 800afde:	0151      	lsls	r1, r2, #5
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	440a      	add	r2, r1
 800afe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afe8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800afec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3301      	adds	r3, #1
 800aff2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800affa:	4293      	cmp	r3, r2
 800affc:	d902      	bls.n	800b004 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	75fb      	strb	r3, [r7, #23]
          break;
 800b002:	e00c      	b.n	800b01e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	015a      	lsls	r2, r3, #5
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	4413      	add	r3, r2
 800b00e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b018:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b01c:	d0e7      	beq.n	800afee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b020:	4618      	mov	r0, r3
 800b022:	371c      	adds	r7, #28
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b089      	sub	sp, #36	@ 0x24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	4611      	mov	r1, r2
 800b038:	461a      	mov	r2, r3
 800b03a:	460b      	mov	r3, r1
 800b03c:	71fb      	strb	r3, [r7, #7]
 800b03e:	4613      	mov	r3, r2
 800b040:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b04a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d123      	bne.n	800b09a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b052:	88bb      	ldrh	r3, [r7, #4]
 800b054:	3303      	adds	r3, #3
 800b056:	089b      	lsrs	r3, r3, #2
 800b058:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b05a:	2300      	movs	r3, #0
 800b05c:	61bb      	str	r3, [r7, #24]
 800b05e:	e018      	b.n	800b092 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b060:	79fb      	ldrb	r3, [r7, #7]
 800b062:	031a      	lsls	r2, r3, #12
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	4413      	add	r3, r2
 800b068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b06c:	461a      	mov	r2, r3
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	3301      	adds	r3, #1
 800b078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	3301      	adds	r3, #1
 800b07e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	3301      	adds	r3, #1
 800b084:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	3301      	adds	r3, #1
 800b08a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	3301      	adds	r3, #1
 800b090:	61bb      	str	r3, [r7, #24]
 800b092:	69ba      	ldr	r2, [r7, #24]
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	429a      	cmp	r2, r3
 800b098:	d3e2      	bcc.n	800b060 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3724      	adds	r7, #36	@ 0x24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b08b      	sub	sp, #44	@ 0x2c
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b0be:	88fb      	ldrh	r3, [r7, #6]
 800b0c0:	089b      	lsrs	r3, r3, #2
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b0c6:	88fb      	ldrh	r3, [r7, #6]
 800b0c8:	f003 0303 	and.w	r3, r3, #3
 800b0cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	623b      	str	r3, [r7, #32]
 800b0d2:	e014      	b.n	800b0fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0de:	601a      	str	r2, [r3, #0]
    pDest++;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	623b      	str	r3, [r7, #32]
 800b0fe:	6a3a      	ldr	r2, [r7, #32]
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	429a      	cmp	r2, r3
 800b104:	d3e6      	bcc.n	800b0d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b106:	8bfb      	ldrh	r3, [r7, #30]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01e      	beq.n	800b14a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b10c:	2300      	movs	r3, #0
 800b10e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b116:	461a      	mov	r2, r3
 800b118:	f107 0310 	add.w	r3, r7, #16
 800b11c:	6812      	ldr	r2, [r2, #0]
 800b11e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	6a3b      	ldr	r3, [r7, #32]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	fa22 f303 	lsr.w	r3, r2, r3
 800b12c:	b2da      	uxtb	r2, r3
 800b12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b130:	701a      	strb	r2, [r3, #0]
      i++;
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	3301      	adds	r3, #1
 800b136:	623b      	str	r3, [r7, #32]
      pDest++;
 800b138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13a:	3301      	adds	r3, #1
 800b13c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b13e:	8bfb      	ldrh	r3, [r7, #30]
 800b140:	3b01      	subs	r3, #1
 800b142:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b144:	8bfb      	ldrh	r3, [r7, #30]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1ea      	bne.n	800b120 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	372c      	adds	r7, #44	@ 0x2c
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	785b      	ldrb	r3, [r3, #1]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d12c      	bne.n	800b1ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	db12      	blt.n	800b1ac <USB_EPSetStall+0x54>
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00f      	beq.n	800b1ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	4413      	add	r3, r2
 800b194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	0151      	lsls	r1, r2, #5
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	440a      	add	r2, r1
 800b1a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b1aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	015a      	lsls	r2, r3, #5
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	0151      	lsls	r1, r2, #5
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	440a      	add	r2, r1
 800b1c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	e02b      	b.n	800b226 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	015a      	lsls	r2, r3, #5
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	db12      	blt.n	800b206 <USB_EPSetStall+0xae>
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00f      	beq.n	800b206 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	0151      	lsls	r1, r2, #5
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	440a      	add	r2, r1
 800b1fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b200:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b204:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	015a      	lsls	r2, r3, #5
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	4413      	add	r3, r2
 800b20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	0151      	lsls	r1, r2, #5
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	440a      	add	r2, r1
 800b21c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b220:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b224:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	785b      	ldrb	r3, [r3, #1]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d128      	bne.n	800b2a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	0151      	lsls	r1, r2, #5
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	440a      	add	r2, r1
 800b266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b26a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b26e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	791b      	ldrb	r3, [r3, #4]
 800b274:	2b03      	cmp	r3, #3
 800b276:	d003      	beq.n	800b280 <USB_EPClearStall+0x4c>
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	791b      	ldrb	r3, [r3, #4]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d138      	bne.n	800b2f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	0151      	lsls	r1, r2, #5
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	440a      	add	r2, r1
 800b296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b29a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	e027      	b.n	800b2f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	015a      	lsls	r2, r3, #5
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	0151      	lsls	r1, r2, #5
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	440a      	add	r2, r1
 800b2b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	791b      	ldrb	r3, [r3, #4]
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d003      	beq.n	800b2d2 <USB_EPClearStall+0x9e>
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	791b      	ldrb	r3, [r3, #4]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d10f      	bne.n	800b2f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	015a      	lsls	r2, r3, #5
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	0151      	lsls	r1, r2, #5
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	440a      	add	r2, r1
 800b2e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b31e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b322:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	011b      	lsls	r3, r3, #4
 800b330:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b334:	68f9      	ldr	r1, [r7, #12]
 800b336:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b33a:	4313      	orrs	r3, r2
 800b33c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b366:	f023 0303 	bic.w	r3, r3, #3
 800b36a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b37a:	f023 0302 	bic.w	r3, r3, #2
 800b37e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b38e:	b480      	push	{r7}
 800b390:	b085      	sub	sp, #20
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3a8:	f023 0303 	bic.w	r3, r3, #3
 800b3ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3bc:	f043 0302 	orr.w	r3, r3, #2
 800b3c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	699b      	ldr	r3, [r3, #24]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b085      	sub	sp, #20
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	4013      	ands	r3, r2
 800b418:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	0c1b      	lsrs	r3, r3, #16
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b085      	sub	sp, #20
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b446:	69db      	ldr	r3, [r3, #28]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	4013      	ands	r3, r2
 800b44c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	b29b      	uxth	r3, r3
}
 800b452:	4618      	mov	r0, r3
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b45e:	b480      	push	{r7}
 800b460:	b085      	sub	sp, #20
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	460b      	mov	r3, r1
 800b468:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b46e:	78fb      	ldrb	r3, [r7, #3]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	4013      	ands	r3, r2
 800b48a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b48c:	68bb      	ldr	r3, [r7, #8]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b087      	sub	sp, #28
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b4be:	78fb      	ldrb	r3, [r7, #3]
 800b4c0:	f003 030f 	and.w	r3, r3, #15
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ca:	01db      	lsls	r3, r3, #7
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b4d4:	78fb      	ldrb	r3, [r7, #3]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	371c      	adds	r7, #28
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	f003 0301 	and.w	r3, r3, #1
}
 800b506:	4618      	mov	r0, r3
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b512:	b480      	push	{r7}
 800b514:	b085      	sub	sp, #20
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b52c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b530:	f023 0307 	bic.w	r3, r3, #7
 800b534:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b548:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b558:	b480      	push	{r7}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	460b      	mov	r3, r1
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	333c      	adds	r3, #60	@ 0x3c
 800b56e:	3304      	adds	r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	4a26      	ldr	r2, [pc, #152]	@ (800b610 <USB_EP0_OutStart+0xb8>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d90a      	bls.n	800b592 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b58c:	d101      	bne.n	800b592 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	e037      	b.n	800b602 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b598:	461a      	mov	r2, r3
 800b59a:	2300      	movs	r3, #0
 800b59c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b5b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5c0:	f043 0318 	orr.w	r3, r3, #24
 800b5c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b5d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b5da:	7afb      	ldrb	r3, [r7, #11]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d10f      	bne.n	800b600 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b5fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	4f54300a 	.word	0x4f54300a

0800b614 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3301      	adds	r3, #1
 800b624:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b62c:	d901      	bls.n	800b632 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	e022      	b.n	800b678 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	2b00      	cmp	r3, #0
 800b638:	daf2      	bge.n	800b620 <USB_CoreReset+0xc>

  count = 10U;
 800b63a:	230a      	movs	r3, #10
 800b63c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b63e:	e002      	b.n	800b646 <USB_CoreReset+0x32>
  {
    count--;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3b01      	subs	r3, #1
 800b644:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1f9      	bne.n	800b640 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	f043 0201 	orr.w	r2, r3, #1
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	3301      	adds	r3, #1
 800b65c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b664:	d901      	bls.n	800b66a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b666:	2303      	movs	r3, #3
 800b668:	e006      	b.n	800b678 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	f003 0301 	and.w	r3, r3, #1
 800b672:	2b01      	cmp	r3, #1
 800b674:	d0f0      	beq.n	800b658 <USB_CoreReset+0x44>

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b688:	4904      	ldr	r1, [pc, #16]	@ (800b69c <MX_FATFS_Init+0x18>)
 800b68a:	4805      	ldr	r0, [pc, #20]	@ (800b6a0 <MX_FATFS_Init+0x1c>)
 800b68c:	f000 fa88 	bl	800bba0 <FATFS_LinkDriver>
 800b690:	4603      	mov	r3, r0
 800b692:	461a      	mov	r2, r3
 800b694:	4b03      	ldr	r3, [pc, #12]	@ (800b6a4 <MX_FATFS_Init+0x20>)
 800b696:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b698:	bf00      	nop
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	20018e54 	.word	0x20018e54
 800b6a0:	08015600 	.word	0x08015600
 800b6a4:	20018e50 	.word	0x20018e50

0800b6a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b6b2:	f000 f896 	bl	800b7e2 <BSP_SD_IsDetected>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d001      	beq.n	800b6c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e012      	b.n	800b6e6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b6c0:	480b      	ldr	r0, [pc, #44]	@ (800b6f0 <BSP_SD_Init+0x48>)
 800b6c2:	f7fb ff60 	bl	8007586 <HAL_SD_Init>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b6ca:	79fb      	ldrb	r3, [r7, #7]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d109      	bne.n	800b6e4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b6d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b6d4:	4806      	ldr	r0, [pc, #24]	@ (800b6f0 <BSP_SD_Init+0x48>)
 800b6d6:	f7fc fd27 	bl	8008128 <HAL_SD_ConfigWideBusOperation>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20018cb8 	.word	0x20018cb8

0800b6f4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	68f9      	ldr	r1, [r7, #12]
 800b70a:	4806      	ldr	r0, [pc, #24]	@ (800b724 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b70c:	f7fb ffe4 	bl	80076d8 <HAL_SD_ReadBlocks_DMA>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3718      	adds	r7, #24
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	20018cb8 	.word	0x20018cb8

0800b728 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b734:	2300      	movs	r3, #0
 800b736:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	68f9      	ldr	r1, [r7, #12]
 800b73e:	4806      	ldr	r0, [pc, #24]	@ (800b758 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b740:	f7fc f8ac 	bl	800789c <HAL_SD_WriteBlocks_DMA>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3718      	adds	r7, #24
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	20018cb8 	.word	0x20018cb8

0800b75c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b760:	4805      	ldr	r0, [pc, #20]	@ (800b778 <BSP_SD_GetCardState+0x1c>)
 800b762:	f7fc fd7b 	bl	800825c <HAL_SD_GetCardState>
 800b766:	4603      	mov	r3, r0
 800b768:	2b04      	cmp	r3, #4
 800b76a:	bf14      	ite	ne
 800b76c:	2301      	movne	r3, #1
 800b76e:	2300      	moveq	r3, #0
 800b770:	b2db      	uxtb	r3, r3
}
 800b772:	4618      	mov	r0, r3
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20018cb8 	.word	0x20018cb8

0800b77c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b784:	6879      	ldr	r1, [r7, #4]
 800b786:	4803      	ldr	r0, [pc, #12]	@ (800b794 <BSP_SD_GetCardInfo+0x18>)
 800b788:	f7fc fca2 	bl	80080d0 <HAL_SD_GetCardInfo>
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20018cb8 	.word	0x20018cb8

0800b798 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b7a0:	f000 f818 	bl	800b7d4 <BSP_SD_AbortCallback>
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b7b4:	f7f5 fcb6 	bl	8001124 <BSP_SD_WriteCpltCallback>
}
 800b7b8:	bf00      	nop
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b7c8:	f7f5 fcce 	bl	8001168 <BSP_SD_ReadCpltCallback>
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	af00      	add	r7, sp, #0

}
 800b7d8:	bf00      	nop
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr

0800b7e2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b083      	sub	sp, #12
 800b7e6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	b2db      	uxtb	r3, r3
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b804:	f000 fa18 	bl	800bc38 <osKernelSysTick>
 800b808:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b80a:	e006      	b.n	800b81a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b80c:	f7ff ffa6 	bl	800b75c <BSP_SD_GetCardState>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b816:	2300      	movs	r3, #0
 800b818:	e009      	b.n	800b82e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b81a:	f000 fa0d 	bl	800bc38 <osKernelSysTick>
 800b81e:	4602      	mov	r2, r0
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	429a      	cmp	r2, r3
 800b828:	d8f0      	bhi.n	800b80c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b82a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	4603      	mov	r3, r0
 800b840:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b842:	4b0b      	ldr	r3, [pc, #44]	@ (800b870 <SD_CheckStatus+0x38>)
 800b844:	2201      	movs	r2, #1
 800b846:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b848:	f7ff ff88 	bl	800b75c <BSP_SD_GetCardState>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d107      	bne.n	800b862 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b852:	4b07      	ldr	r3, [pc, #28]	@ (800b870 <SD_CheckStatus+0x38>)
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	b2db      	uxtb	r3, r3
 800b858:	f023 0301 	bic.w	r3, r3, #1
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	4b04      	ldr	r3, [pc, #16]	@ (800b870 <SD_CheckStatus+0x38>)
 800b860:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b862:	4b03      	ldr	r3, [pc, #12]	@ (800b870 <SD_CheckStatus+0x38>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	b2db      	uxtb	r3, r3
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	20000011 	.word	0x20000011

0800b874 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b874:	b590      	push	{r4, r7, lr}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4603      	mov	r3, r0
 800b87c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b87e:	4b20      	ldr	r3, [pc, #128]	@ (800b900 <SD_initialize+0x8c>)
 800b880:	2201      	movs	r2, #1
 800b882:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b884:	f000 f9cc 	bl	800bc20 <osKernelRunning>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d030      	beq.n	800b8f0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b88e:	f7ff ff0b 	bl	800b6a8 <BSP_SD_Init>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d107      	bne.n	800b8a8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff ffcc 	bl	800b838 <SD_CheckStatus>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	4b16      	ldr	r3, [pc, #88]	@ (800b900 <SD_initialize+0x8c>)
 800b8a6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b8a8:	4b15      	ldr	r3, [pc, #84]	@ (800b900 <SD_initialize+0x8c>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d01e      	beq.n	800b8f0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b8b2:	4b14      	ldr	r3, [pc, #80]	@ (800b904 <SD_initialize+0x90>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10e      	bne.n	800b8d8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b8ba:	4b13      	ldr	r3, [pc, #76]	@ (800b908 <SD_initialize+0x94>)
 800b8bc:	f107 0408 	add.w	r4, r7, #8
 800b8c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b8c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b8c6:	f107 0308 	add.w	r3, r7, #8
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 fa23 	bl	800bd18 <osMessageCreate>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	4a0b      	ldr	r2, [pc, #44]	@ (800b904 <SD_initialize+0x90>)
 800b8d6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b904 <SD_initialize+0x90>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d107      	bne.n	800b8f0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b8e0:	4b07      	ldr	r3, [pc, #28]	@ (800b900 <SD_initialize+0x8c>)
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	4b04      	ldr	r3, [pc, #16]	@ (800b900 <SD_initialize+0x8c>)
 800b8ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b8f0:	4b03      	ldr	r3, [pc, #12]	@ (800b900 <SD_initialize+0x8c>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	b2db      	uxtb	r3, r3
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	371c      	adds	r7, #28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd90      	pop	{r4, r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20000011 	.word	0x20000011
 800b904:	20018e58 	.word	0x20018e58
 800b908:	080154bc 	.word	0x080154bc

0800b90c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b916:	79fb      	ldrb	r3, [r7, #7]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff ff8d 	bl	800b838 <SD_CheckStatus>
 800b91e:	4603      	mov	r3, r0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08a      	sub	sp, #40	@ 0x28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	4603      	mov	r3, r0
 800b936:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b93e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b942:	f7ff ff5b 	bl	800b7fc <SD_CheckStatusWithTimeout>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	da02      	bge.n	800b952 <SD_read+0x2a>
  {
    return res;
 800b94c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b950:	e032      	b.n	800b9b8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	68b8      	ldr	r0, [r7, #8]
 800b958:	f7ff fecc 	bl	800b6f4 <BSP_SD_ReadBlocks_DMA>
 800b95c:	4603      	mov	r3, r0
 800b95e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800b962:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b966:	2b00      	cmp	r3, #0
 800b968:	d124      	bne.n	800b9b4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b96a:	4b15      	ldr	r3, [pc, #84]	@ (800b9c0 <SD_read+0x98>)
 800b96c:	6819      	ldr	r1, [r3, #0]
 800b96e:	f107 0314 	add.w	r3, r7, #20
 800b972:	f247 5230 	movw	r2, #30000	@ 0x7530
 800b976:	4618      	mov	r0, r3
 800b978:	f000 f9f6 	bl	800bd68 <osMessageGet>

    if (event.status == osEventMessage)
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2b10      	cmp	r3, #16
 800b980:	d118      	bne.n	800b9b4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d115      	bne.n	800b9b4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b988:	f000 f956 	bl	800bc38 <osKernelSysTick>
 800b98c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b98e:	e008      	b.n	800b9a2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b990:	f7ff fee4 	bl	800b75c <BSP_SD_GetCardState>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d103      	bne.n	800b9a2 <SD_read+0x7a>
              {
                res = RES_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b9a0:	e008      	b.n	800b9b4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b9a2:	f000 f949 	bl	800bc38 <osKernelSysTick>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	1ad3      	subs	r3, r2, r3
 800b9ac:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d9ed      	bls.n	800b990 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3728      	adds	r7, #40	@ 0x28
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	20018e58 	.word	0x20018e58

0800b9c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b08a      	sub	sp, #40	@ 0x28
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60b9      	str	r1, [r7, #8]
 800b9cc:	607a      	str	r2, [r7, #4]
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b9da:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b9de:	f7ff ff0d 	bl	800b7fc <SD_CheckStatusWithTimeout>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	da02      	bge.n	800b9ee <SD_write+0x2a>
  {
    return res;
 800b9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9ec:	e02e      	b.n	800ba4c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	6879      	ldr	r1, [r7, #4]
 800b9f2:	68b8      	ldr	r0, [r7, #8]
 800b9f4:	f7ff fe98 	bl	800b728 <BSP_SD_WriteBlocks_DMA>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d124      	bne.n	800ba48 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b9fe:	4b15      	ldr	r3, [pc, #84]	@ (800ba54 <SD_write+0x90>)
 800ba00:	6819      	ldr	r1, [r3, #0]
 800ba02:	f107 0314 	add.w	r3, r7, #20
 800ba06:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 f9ac 	bl	800bd68 <osMessageGet>

    if (event.status == osEventMessage)
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2b10      	cmp	r3, #16
 800ba14:	d118      	bne.n	800ba48 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d115      	bne.n	800ba48 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ba1c:	f000 f90c 	bl	800bc38 <osKernelSysTick>
 800ba20:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ba22:	e008      	b.n	800ba36 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba24:	f7ff fe9a 	bl	800b75c <BSP_SD_GetCardState>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d103      	bne.n	800ba36 <SD_write+0x72>
          {
            res = RES_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ba34:	e008      	b.n	800ba48 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ba36:	f000 f8ff 	bl	800bc38 <osKernelSysTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d9ed      	bls.n	800ba24 <SD_write+0x60>
    }

  }
#endif

  return res;
 800ba48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3728      	adds	r7, #40	@ 0x28
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	20018e58 	.word	0x20018e58

0800ba58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08c      	sub	sp, #48	@ 0x30
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	603a      	str	r2, [r7, #0]
 800ba62:	71fb      	strb	r3, [r7, #7]
 800ba64:	460b      	mov	r3, r1
 800ba66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ba6e:	4b25      	ldr	r3, [pc, #148]	@ (800bb04 <SD_ioctl+0xac>)
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <SD_ioctl+0x28>
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e03c      	b.n	800bafa <SD_ioctl+0xa2>

  switch (cmd)
 800ba80:	79bb      	ldrb	r3, [r7, #6]
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d834      	bhi.n	800baf0 <SD_ioctl+0x98>
 800ba86:	a201      	add	r2, pc, #4	@ (adr r2, 800ba8c <SD_ioctl+0x34>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800ba9d 	.word	0x0800ba9d
 800ba90:	0800baa5 	.word	0x0800baa5
 800ba94:	0800babd 	.word	0x0800babd
 800ba98:	0800bad7 	.word	0x0800bad7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800baa2:	e028      	b.n	800baf6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800baa4:	f107 030c 	add.w	r3, r7, #12
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff fe67 	bl	800b77c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800baae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800baba:	e01c      	b.n	800baf6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800babc:	f107 030c 	add.w	r3, r7, #12
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7ff fe5b 	bl	800b77c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac8:	b29a      	uxth	r2, r3
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bad4:	e00f      	b.n	800baf6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bad6:	f107 030c 	add.w	r3, r7, #12
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff fe4e 	bl	800b77c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae2:	0a5a      	lsrs	r2, r3, #9
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bae8:	2300      	movs	r3, #0
 800baea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800baee:	e002      	b.n	800baf6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800baf0:	2304      	movs	r3, #4
 800baf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800baf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3730      	adds	r7, #48	@ 0x30
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	20000011 	.word	0x20000011

0800bb08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b087      	sub	sp, #28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	4613      	mov	r3, r2
 800bb14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bb16:	2301      	movs	r3, #1
 800bb18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bb1e:	4b1f      	ldr	r3, [pc, #124]	@ (800bb9c <FATFS_LinkDriverEx+0x94>)
 800bb20:	7a5b      	ldrb	r3, [r3, #9]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d131      	bne.n	800bb8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bb28:	4b1c      	ldr	r3, [pc, #112]	@ (800bb9c <FATFS_LinkDriverEx+0x94>)
 800bb2a:	7a5b      	ldrb	r3, [r3, #9]
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	461a      	mov	r2, r3
 800bb30:	4b1a      	ldr	r3, [pc, #104]	@ (800bb9c <FATFS_LinkDriverEx+0x94>)
 800bb32:	2100      	movs	r1, #0
 800bb34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb36:	4b19      	ldr	r3, [pc, #100]	@ (800bb9c <FATFS_LinkDriverEx+0x94>)
 800bb38:	7a5b      	ldrb	r3, [r3, #9]
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	4a17      	ldr	r2, [pc, #92]	@ (800bb9c <FATFS_LinkDriverEx+0x94>)
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb46:	4b15      	ldr	r3, [pc, #84]	@ (800bb9c <FATFS_LinkDriverEx+0x94>)
 800bb48:	7a5b      	ldrb	r3, [r3, #9]
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	4b13      	ldr	r3, [pc, #76]	@ (800bb9c <FATFS_LinkDriverEx+0x94>)
 800bb50:	4413      	add	r3, r2
 800bb52:	79fa      	ldrb	r2, [r7, #7]
 800bb54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bb56:	4b11      	ldr	r3, [pc, #68]	@ (800bb9c <FATFS_LinkDriverEx+0x94>)
 800bb58:	7a5b      	ldrb	r3, [r3, #9]
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	1c5a      	adds	r2, r3, #1
 800bb5e:	b2d1      	uxtb	r1, r2
 800bb60:	4a0e      	ldr	r2, [pc, #56]	@ (800bb9c <FATFS_LinkDriverEx+0x94>)
 800bb62:	7251      	strb	r1, [r2, #9]
 800bb64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb66:	7dbb      	ldrb	r3, [r7, #22]
 800bb68:	3330      	adds	r3, #48	@ 0x30
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	3301      	adds	r3, #1
 800bb74:	223a      	movs	r2, #58	@ 0x3a
 800bb76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	3302      	adds	r3, #2
 800bb7c:	222f      	movs	r2, #47	@ 0x2f
 800bb7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	3303      	adds	r3, #3
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	371c      	adds	r7, #28
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	20018e5c 	.word	0x20018e5c

0800bba0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bbaa:	2200      	movs	r2, #0
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7ff ffaa 	bl	800bb08 <FATFS_LinkDriverEx>
 800bbb4:	4603      	mov	r3, r0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b085      	sub	sp, #20
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bbcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbd0:	2b84      	cmp	r3, #132	@ 0x84
 800bbd2:	d005      	beq.n	800bbe0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bbd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4413      	add	r3, r2
 800bbdc:	3303      	adds	r3, #3
 800bbde:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b083      	sub	sp, #12
 800bbf2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbf4:	f3ef 8305 	mrs	r3, IPSR
 800bbf8:	607b      	str	r3, [r7, #4]
  return(result);
 800bbfa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	bf14      	ite	ne
 800bc00:	2301      	movne	r3, #1
 800bc02:	2300      	moveq	r3, #0
 800bc04:	b2db      	uxtb	r3, r3
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc16:	f002 f8ed 	bl	800ddf4 <vTaskStartScheduler>
  
  return osOK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800bc24:	f002 fdf6 	bl	800e814 <xTaskGetSchedulerState>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d101      	bne.n	800bc32 <osKernelRunning+0x12>
    return 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e000      	b.n	800bc34 <osKernelRunning+0x14>
  else
    return 1;
 800bc32:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bc3c:	f7ff ffd7 	bl	800bbee <inHandlerMode>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d003      	beq.n	800bc4e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bc46:	f002 f9f9 	bl	800e03c <xTaskGetTickCountFromISR>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	e002      	b.n	800bc54 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bc4e:	f002 f9e5 	bl	800e01c <xTaskGetTickCount>
 800bc52:	4603      	mov	r3, r0
  }
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bc58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc5a:	b089      	sub	sp, #36	@ 0x24
 800bc5c:	af04      	add	r7, sp, #16
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d020      	beq.n	800bcac <osThreadCreate+0x54>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d01c      	beq.n	800bcac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	685c      	ldr	r4, [r3, #4]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	691e      	ldr	r6, [r3, #16]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff ff9a 	bl	800bbbe <makeFreeRtosPriority>
 800bc8a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	695b      	ldr	r3, [r3, #20]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc94:	9202      	str	r2, [sp, #8]
 800bc96:	9301      	str	r3, [sp, #4]
 800bc98:	9100      	str	r1, [sp, #0]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	4632      	mov	r2, r6
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4620      	mov	r0, r4
 800bca2:	f001 fed9 	bl	800da58 <xTaskCreateStatic>
 800bca6:	4603      	mov	r3, r0
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	e01c      	b.n	800bce6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685c      	ldr	r4, [r3, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcb8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff ff7c 	bl	800bbbe <makeFreeRtosPriority>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	f107 030c 	add.w	r3, r7, #12
 800bccc:	9301      	str	r3, [sp, #4]
 800bcce:	9200      	str	r2, [sp, #0]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f001 ff1e 	bl	800db18 <xTaskCreate>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d001      	beq.n	800bce6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bce2:	2300      	movs	r3, #0
 800bce4:	e000      	b.n	800bce8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bce6:	68fb      	ldr	r3, [r7, #12]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcf0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <osDelay+0x16>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	e000      	b.n	800bd08 <osDelay+0x18>
 800bd06:	2301      	movs	r3, #1
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f002 f83d 	bl	800dd88 <vTaskDelay>
  
  return osOK;
 800bd0e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bd18:	b590      	push	{r4, r7, lr}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af02      	add	r7, sp, #8
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d011      	beq.n	800bd4e <osMessageCreate+0x36>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00d      	beq.n	800bd4e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6818      	ldr	r0, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6859      	ldr	r1, [r3, #4]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689a      	ldr	r2, [r3, #8]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	2400      	movs	r4, #0
 800bd44:	9400      	str	r4, [sp, #0]
 800bd46:	f000 ffe3 	bl	800cd10 <xQueueGenericCreateStatic>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	e008      	b.n	800bd60 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6818      	ldr	r0, [r3, #0]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	4619      	mov	r1, r3
 800bd5a:	f001 f856 	bl	800ce0a <xQueueGenericCreate>
 800bd5e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd90      	pop	{r4, r7, pc}

0800bd68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bd68:	b590      	push	{r4, r7, lr}
 800bd6a:	b08b      	sub	sp, #44	@ 0x2c
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bd82:	2380      	movs	r3, #128	@ 0x80
 800bd84:	617b      	str	r3, [r7, #20]
    return event;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	461c      	mov	r4, r3
 800bd8a:	f107 0314 	add.w	r3, r7, #20
 800bd8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd96:	e054      	b.n	800be42 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda6:	d103      	bne.n	800bdb0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bda8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdac:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdae:	e009      	b.n	800bdc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d006      	beq.n	800bdc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <osMessageGet+0x5c>
      ticks = 1;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bdc4:	f7ff ff13 	bl	800bbee <inHandlerMode>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d01c      	beq.n	800be08 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bdce:	f107 0220 	add.w	r2, r7, #32
 800bdd2:	f107 0314 	add.w	r3, r7, #20
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	4619      	mov	r1, r3
 800bdda:	68b8      	ldr	r0, [r7, #8]
 800bddc:	f001 fc34 	bl	800d648 <xQueueReceiveFromISR>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d102      	bne.n	800bdec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bde6:	2310      	movs	r3, #16
 800bde8:	617b      	str	r3, [r7, #20]
 800bdea:	e001      	b.n	800bdf0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d01d      	beq.n	800be32 <osMessageGet+0xca>
 800bdf6:	4b15      	ldr	r3, [pc, #84]	@ (800be4c <osMessageGet+0xe4>)
 800bdf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	e014      	b.n	800be32 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800be08:	f107 0314 	add.w	r3, r7, #20
 800be0c:	3304      	adds	r3, #4
 800be0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be10:	4619      	mov	r1, r3
 800be12:	68b8      	ldr	r0, [r7, #8]
 800be14:	f001 fa26 	bl	800d264 <xQueueReceive>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d102      	bne.n	800be24 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800be1e:	2310      	movs	r3, #16
 800be20:	617b      	str	r3, [r7, #20]
 800be22:	e006      	b.n	800be32 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be26:	2b00      	cmp	r3, #0
 800be28:	d101      	bne.n	800be2e <osMessageGet+0xc6>
 800be2a:	2300      	movs	r3, #0
 800be2c:	e000      	b.n	800be30 <osMessageGet+0xc8>
 800be2e:	2340      	movs	r3, #64	@ 0x40
 800be30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	461c      	mov	r4, r3
 800be36:	f107 0314 	add.w	r3, r7, #20
 800be3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	372c      	adds	r7, #44	@ 0x2c
 800be46:	46bd      	mov	sp, r7
 800be48:	bd90      	pop	{r4, r7, pc}
 800be4a:	bf00      	nop
 800be4c:	e000ed04 	.word	0xe000ed04

0800be50 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800be56:	201c      	movs	r0, #28
 800be58:	f000 f9fe 	bl	800c258 <pvPortMalloc>
 800be5c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00a      	beq.n	800be7a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	3304      	adds	r3, #4
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 fbe0 	bl	800c634 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800be7a:	687b      	ldr	r3, [r7, #4]
	}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b090      	sub	sp, #64	@ 0x40
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
 800be90:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800be9a:	2300      	movs	r3, #0
 800be9c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10b      	bne.n	800bebc <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800beb6:	bf00      	nop
 800beb8:	bf00      	nop
 800beba:	e7fd      	b.n	800beb8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bec2:	d30b      	bcc.n	800bedc <xEventGroupWaitBits+0x58>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	61fb      	str	r3, [r7, #28]
}
 800bed6:	bf00      	nop
 800bed8:	bf00      	nop
 800beda:	e7fd      	b.n	800bed8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10b      	bne.n	800befa <xEventGroupWaitBits+0x76>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	61bb      	str	r3, [r7, #24]
}
 800bef4:	bf00      	nop
 800bef6:	bf00      	nop
 800bef8:	e7fd      	b.n	800bef6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800befa:	f002 fc8b 	bl	800e814 <xTaskGetSchedulerState>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d102      	bne.n	800bf0a <xEventGroupWaitBits+0x86>
 800bf04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <xEventGroupWaitBits+0x8a>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e000      	b.n	800bf10 <xEventGroupWaitBits+0x8c>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10b      	bne.n	800bf2c <xEventGroupWaitBits+0xa8>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	617b      	str	r3, [r7, #20]
}
 800bf26:	bf00      	nop
 800bf28:	bf00      	nop
 800bf2a:	e7fd      	b.n	800bf28 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800bf2c:	f001 ffca 	bl	800dec4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800bf30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	68b9      	ldr	r1, [r7, #8]
 800bf3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf3c:	f000 f96a 	bl	800c214 <prvTestWaitCondition>
 800bf40:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800bf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00e      	beq.n	800bf66 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800bf48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d028      	beq.n	800bfa8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bf56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	43db      	mvns	r3, r3
 800bf5e:	401a      	ands	r2, r3
 800bf60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	e020      	b.n	800bfa8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800bf66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800bf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800bf70:	2301      	movs	r3, #1
 800bf72:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf74:	e018      	b.n	800bfa8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf82:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d003      	beq.n	800bf92 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf90:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800bf92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf94:	1d18      	adds	r0, r3, #4
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	f002 f99a 	bl	800e2d8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800bfa8:	f001 ff9a 	bl	800dee0 <xTaskResumeAll>
 800bfac:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800bfae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d031      	beq.n	800c018 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d107      	bne.n	800bfca <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800bfba:	4b1a      	ldr	r3, [pc, #104]	@ (800c024 <xEventGroupWaitBits+0x1a0>)
 800bfbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800bfca:	f002 fdcf 	bl	800eb6c <uxTaskResetEventItemValue>
 800bfce:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800bfd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d11a      	bne.n	800c010 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800bfda:	f000 fd0d 	bl	800c9f8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800bfde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bfea:	f000 f913 	bl	800c214 <prvTestWaitCondition>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d009      	beq.n	800c008 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d006      	beq.n	800c008 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	43db      	mvns	r3, r3
 800c002:	401a      	ands	r2, r3
 800c004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c006:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c008:	2301      	movs	r3, #1
 800c00a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c00c:	f000 fd26 	bl	800ca5c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c012:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c016:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3740      	adds	r7, #64	@ 0x40
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	e000ed04 	.word	0xe000ed04

0800c028 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10b      	bne.n	800c054 <xEventGroupClearBits+0x2c>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	60fb      	str	r3, [r7, #12]
}
 800c04e:	bf00      	nop
 800c050:	bf00      	nop
 800c052:	e7fd      	b.n	800c050 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c05a:	d30b      	bcc.n	800c074 <xEventGroupClearBits+0x4c>
	__asm volatile
 800c05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	60bb      	str	r3, [r7, #8]
}
 800c06e:	bf00      	nop
 800c070:	bf00      	nop
 800c072:	e7fd      	b.n	800c070 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800c074:	f000 fcc0 	bl	800c9f8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	43db      	mvns	r3, r3
 800c086:	401a      	ands	r2, r3
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800c08c:	f000 fce6 	bl	800ca5c <vPortExitCritical>

	return uxReturn;
 800c090:	693b      	ldr	r3, [r7, #16]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800c09a:	b480      	push	{r7}
 800c09c:	b089      	sub	sp, #36	@ 0x24
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c0a6:	f3ef 8211 	mrs	r2, BASEPRI
 800c0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	60fa      	str	r2, [r7, #12]
 800c0bc:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c0be:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0c0:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	617b      	str	r3, [r7, #20]
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c0d2:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800c0d4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3724      	adds	r7, #36	@ 0x24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b08e      	sub	sp, #56	@ 0x38
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10b      	bne.n	800c116 <xEventGroupSetBits+0x34>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	613b      	str	r3, [r7, #16]
}
 800c110:	bf00      	nop
 800c112:	bf00      	nop
 800c114:	e7fd      	b.n	800c112 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c11c:	d30b      	bcc.n	800c136 <xEventGroupSetBits+0x54>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	60fb      	str	r3, [r7, #12]
}
 800c130:	bf00      	nop
 800c132:	bf00      	nop
 800c134:	e7fd      	b.n	800c132 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c138:	3304      	adds	r3, #4
 800c13a:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13e:	3308      	adds	r3, #8
 800c140:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c142:	f001 febf 	bl	800dec4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	431a      	orrs	r2, r3
 800c154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c156:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c158:	e03c      	b.n	800c1d4 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c166:	2300      	movs	r3, #0
 800c168:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c170:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c178:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c180:	2b00      	cmp	r3, #0
 800c182:	d108      	bne.n	800c196 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	4013      	ands	r3, r2
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00b      	beq.n	800c1a8 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800c190:	2301      	movs	r3, #1
 800c192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c194:	e008      	b.n	800c1a8 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	4013      	ands	r3, r2
 800c19e:	69ba      	ldr	r2, [r7, #24]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d101      	bne.n	800c1a8 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d010      	beq.n	800c1d0 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d003      	beq.n	800c1c0 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c1b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c1cc:	f002 f952 	bl	800e474 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c1d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d1be      	bne.n	800c15a <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e2:	43db      	mvns	r3, r3
 800c1e4:	401a      	ands	r2, r3
 800c1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c1ea:	f001 fe79 	bl	800dee0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f0:	681b      	ldr	r3, [r3, #0]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3738      	adds	r7, #56	@ 0x38
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7ff ff6b 	bl	800c0e2 <xEventGroupSetBits>
}
 800c20c:	bf00      	nop
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c214:	b480      	push	{r7}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c220:	2300      	movs	r3, #0
 800c222:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d107      	bne.n	800c23a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	4013      	ands	r3, r2
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00a      	beq.n	800c24a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c234:	2301      	movs	r3, #1
 800c236:	617b      	str	r3, [r7, #20]
 800c238:	e007      	b.n	800c24a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	4013      	ands	r3, r2
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	429a      	cmp	r2, r3
 800c244:	d101      	bne.n	800c24a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c246:	2301      	movs	r3, #1
 800c248:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c24a:	697b      	ldr	r3, [r7, #20]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	371c      	adds	r7, #28
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08a      	sub	sp, #40	@ 0x28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c260:	2300      	movs	r3, #0
 800c262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c264:	f001 fe2e 	bl	800dec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c268:	4b5c      	ldr	r3, [pc, #368]	@ (800c3dc <pvPortMalloc+0x184>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d101      	bne.n	800c274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c270:	f000 f924 	bl	800c4bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c274:	4b5a      	ldr	r3, [pc, #360]	@ (800c3e0 <pvPortMalloc+0x188>)
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4013      	ands	r3, r2
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f040 8095 	bne.w	800c3ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d01e      	beq.n	800c2c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c288:	2208      	movs	r2, #8
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4413      	add	r3, r2
 800c28e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f003 0307 	and.w	r3, r3, #7
 800c296:	2b00      	cmp	r3, #0
 800c298:	d015      	beq.n	800c2c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f023 0307 	bic.w	r3, r3, #7
 800c2a0:	3308      	adds	r3, #8
 800c2a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f003 0307 	and.w	r3, r3, #7
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00b      	beq.n	800c2c6 <pvPortMalloc+0x6e>
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	617b      	str	r3, [r7, #20]
}
 800c2c0:	bf00      	nop
 800c2c2:	bf00      	nop
 800c2c4:	e7fd      	b.n	800c2c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d06f      	beq.n	800c3ac <pvPortMalloc+0x154>
 800c2cc:	4b45      	ldr	r3, [pc, #276]	@ (800c3e4 <pvPortMalloc+0x18c>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d86a      	bhi.n	800c3ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2d6:	4b44      	ldr	r3, [pc, #272]	@ (800c3e8 <pvPortMalloc+0x190>)
 800c2d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2da:	4b43      	ldr	r3, [pc, #268]	@ (800c3e8 <pvPortMalloc+0x190>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2e0:	e004      	b.n	800c2ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d903      	bls.n	800c2fe <pvPortMalloc+0xa6>
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1f1      	bne.n	800c2e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2fe:	4b37      	ldr	r3, [pc, #220]	@ (800c3dc <pvPortMalloc+0x184>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c304:	429a      	cmp	r2, r3
 800c306:	d051      	beq.n	800c3ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2208      	movs	r2, #8
 800c30e:	4413      	add	r3, r2
 800c310:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	1ad2      	subs	r2, r2, r3
 800c322:	2308      	movs	r3, #8
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	429a      	cmp	r2, r3
 800c328:	d920      	bls.n	800c36c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c32a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4413      	add	r3, r2
 800c330:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <pvPortMalloc+0xfc>
	__asm volatile
 800c33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	613b      	str	r3, [r7, #16]
}
 800c34e:	bf00      	nop
 800c350:	bf00      	nop
 800c352:	e7fd      	b.n	800c350 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c356:	685a      	ldr	r2, [r3, #4]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	1ad2      	subs	r2, r2, r3
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c366:	69b8      	ldr	r0, [r7, #24]
 800c368:	f000 f90a 	bl	800c580 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c36c:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e4 <pvPortMalloc+0x18c>)
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	4a1b      	ldr	r2, [pc, #108]	@ (800c3e4 <pvPortMalloc+0x18c>)
 800c378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c37a:	4b1a      	ldr	r3, [pc, #104]	@ (800c3e4 <pvPortMalloc+0x18c>)
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	4b1b      	ldr	r3, [pc, #108]	@ (800c3ec <pvPortMalloc+0x194>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	429a      	cmp	r2, r3
 800c384:	d203      	bcs.n	800c38e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c386:	4b17      	ldr	r3, [pc, #92]	@ (800c3e4 <pvPortMalloc+0x18c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a18      	ldr	r2, [pc, #96]	@ (800c3ec <pvPortMalloc+0x194>)
 800c38c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c390:	685a      	ldr	r2, [r3, #4]
 800c392:	4b13      	ldr	r3, [pc, #76]	@ (800c3e0 <pvPortMalloc+0x188>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	431a      	orrs	r2, r3
 800c398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39e:	2200      	movs	r2, #0
 800c3a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c3a2:	4b13      	ldr	r3, [pc, #76]	@ (800c3f0 <pvPortMalloc+0x198>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	4a11      	ldr	r2, [pc, #68]	@ (800c3f0 <pvPortMalloc+0x198>)
 800c3aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3ac:	f001 fd98 	bl	800dee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	f003 0307 	and.w	r3, r3, #7
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00b      	beq.n	800c3d2 <pvPortMalloc+0x17a>
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	60fb      	str	r3, [r7, #12]
}
 800c3cc:	bf00      	nop
 800c3ce:	bf00      	nop
 800c3d0:	e7fd      	b.n	800c3ce <pvPortMalloc+0x176>
	return pvReturn;
 800c3d2:	69fb      	ldr	r3, [r7, #28]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3728      	adds	r7, #40	@ 0x28
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	2001ca70 	.word	0x2001ca70
 800c3e0:	2001ca84 	.word	0x2001ca84
 800c3e4:	2001ca74 	.word	0x2001ca74
 800c3e8:	2001ca68 	.word	0x2001ca68
 800c3ec:	2001ca78 	.word	0x2001ca78
 800c3f0:	2001ca7c 	.word	0x2001ca7c

0800c3f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d04f      	beq.n	800c4a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c406:	2308      	movs	r3, #8
 800c408:	425b      	negs	r3, r3
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	4413      	add	r3, r2
 800c40e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	4b25      	ldr	r3, [pc, #148]	@ (800c4b0 <vPortFree+0xbc>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4013      	ands	r3, r2
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10b      	bne.n	800c43a <vPortFree+0x46>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	60fb      	str	r3, [r7, #12]
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	e7fd      	b.n	800c436 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00b      	beq.n	800c45a <vPortFree+0x66>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	60bb      	str	r3, [r7, #8]
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	e7fd      	b.n	800c456 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	685a      	ldr	r2, [r3, #4]
 800c45e:	4b14      	ldr	r3, [pc, #80]	@ (800c4b0 <vPortFree+0xbc>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4013      	ands	r3, r2
 800c464:	2b00      	cmp	r3, #0
 800c466:	d01e      	beq.n	800c4a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d11a      	bne.n	800c4a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	4b0e      	ldr	r3, [pc, #56]	@ (800c4b0 <vPortFree+0xbc>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	43db      	mvns	r3, r3
 800c47a:	401a      	ands	r2, r3
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c480:	f001 fd20 	bl	800dec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	685a      	ldr	r2, [r3, #4]
 800c488:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b4 <vPortFree+0xc0>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4413      	add	r3, r2
 800c48e:	4a09      	ldr	r2, [pc, #36]	@ (800c4b4 <vPortFree+0xc0>)
 800c490:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c492:	6938      	ldr	r0, [r7, #16]
 800c494:	f000 f874 	bl	800c580 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c498:	4b07      	ldr	r3, [pc, #28]	@ (800c4b8 <vPortFree+0xc4>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3301      	adds	r3, #1
 800c49e:	4a06      	ldr	r2, [pc, #24]	@ (800c4b8 <vPortFree+0xc4>)
 800c4a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c4a2:	f001 fd1d 	bl	800dee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4a6:	bf00      	nop
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	2001ca84 	.word	0x2001ca84
 800c4b4:	2001ca74 	.word	0x2001ca74
 800c4b8:	2001ca80 	.word	0x2001ca80

0800c4bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c4c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4c8:	4b27      	ldr	r3, [pc, #156]	@ (800c568 <prvHeapInit+0xac>)
 800c4ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f003 0307 	and.w	r3, r3, #7
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00c      	beq.n	800c4f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3307      	adds	r3, #7
 800c4da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f023 0307 	bic.w	r3, r3, #7
 800c4e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	4a1f      	ldr	r2, [pc, #124]	@ (800c568 <prvHeapInit+0xac>)
 800c4ec:	4413      	add	r3, r2
 800c4ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c56c <prvHeapInit+0xb0>)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4fa:	4b1c      	ldr	r3, [pc, #112]	@ (800c56c <prvHeapInit+0xb0>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	4413      	add	r3, r2
 800c506:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c508:	2208      	movs	r2, #8
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	1a9b      	subs	r3, r3, r2
 800c50e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f023 0307 	bic.w	r3, r3, #7
 800c516:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	4a15      	ldr	r2, [pc, #84]	@ (800c570 <prvHeapInit+0xb4>)
 800c51c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c51e:	4b14      	ldr	r3, [pc, #80]	@ (800c570 <prvHeapInit+0xb4>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2200      	movs	r2, #0
 800c524:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c526:	4b12      	ldr	r3, [pc, #72]	@ (800c570 <prvHeapInit+0xb4>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2200      	movs	r2, #0
 800c52c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	1ad2      	subs	r2, r2, r3
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c53c:	4b0c      	ldr	r3, [pc, #48]	@ (800c570 <prvHeapInit+0xb4>)
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	4a0a      	ldr	r2, [pc, #40]	@ (800c574 <prvHeapInit+0xb8>)
 800c54a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	4a09      	ldr	r2, [pc, #36]	@ (800c578 <prvHeapInit+0xbc>)
 800c552:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c554:	4b09      	ldr	r3, [pc, #36]	@ (800c57c <prvHeapInit+0xc0>)
 800c556:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c55a:	601a      	str	r2, [r3, #0]
}
 800c55c:	bf00      	nop
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	20018e68 	.word	0x20018e68
 800c56c:	2001ca68 	.word	0x2001ca68
 800c570:	2001ca70 	.word	0x2001ca70
 800c574:	2001ca78 	.word	0x2001ca78
 800c578:	2001ca74 	.word	0x2001ca74
 800c57c:	2001ca84 	.word	0x2001ca84

0800c580 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c588:	4b28      	ldr	r3, [pc, #160]	@ (800c62c <prvInsertBlockIntoFreeList+0xac>)
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	e002      	b.n	800c594 <prvInsertBlockIntoFreeList+0x14>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	60fb      	str	r3, [r7, #12]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d8f7      	bhi.n	800c58e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d108      	bne.n	800c5c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	441a      	add	r2, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	441a      	add	r2, r3
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d118      	bne.n	800c608 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	4b15      	ldr	r3, [pc, #84]	@ (800c630 <prvInsertBlockIntoFreeList+0xb0>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d00d      	beq.n	800c5fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	441a      	add	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	e008      	b.n	800c610 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c630 <prvInsertBlockIntoFreeList+0xb0>)
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	e003      	b.n	800c610 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	429a      	cmp	r2, r3
 800c616:	d002      	beq.n	800c61e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c61e:	bf00      	nop
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	2001ca68 	.word	0x2001ca68
 800c630:	2001ca70 	.word	0x2001ca70

0800c634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f103 0208 	add.w	r2, r3, #8
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f04f 32ff 	mov.w	r2, #4294967295
 800c64c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f103 0208 	add.w	r2, r3, #8
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f103 0208 	add.w	r2, r3, #8
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c682:	bf00      	nop
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c68e:	b480      	push	{r7}
 800c690:	b085      	sub	sp, #20
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	689a      	ldr	r2, [r3, #8]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	1c5a      	adds	r2, r3, #1
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	601a      	str	r2, [r3, #0]
}
 800c6ca:	bf00      	nop
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b085      	sub	sp, #20
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ec:	d103      	bne.n	800c6f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	e00c      	b.n	800c710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	3308      	adds	r3, #8
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	e002      	b.n	800c704 <vListInsert+0x2e>
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d2f6      	bcs.n	800c6fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	683a      	ldr	r2, [r7, #0]
 800c72a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	601a      	str	r2, [r3, #0]
}
 800c73c:	bf00      	nop
 800c73e:	3714      	adds	r7, #20
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	6892      	ldr	r2, [r2, #8]
 800c75e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	6852      	ldr	r2, [r2, #4]
 800c768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	429a      	cmp	r2, r3
 800c772:	d103      	bne.n	800c77c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	689a      	ldr	r2, [r3, #8]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	1e5a      	subs	r2, r3, #1
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	3b04      	subs	r3, #4
 800c7ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c7b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3b04      	subs	r3, #4
 800c7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	f023 0201 	bic.w	r2, r3, #1
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3b04      	subs	r3, #4
 800c7ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c800 <pxPortInitialiseStack+0x64>)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3b14      	subs	r3, #20
 800c7d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3b04      	subs	r3, #4
 800c7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f06f 0202 	mvn.w	r2, #2
 800c7ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3b20      	subs	r3, #32
 800c7f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	0800c805 	.word	0x0800c805

0800c804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c80e:	4b13      	ldr	r3, [pc, #76]	@ (800c85c <prvTaskExitError+0x58>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c816:	d00b      	beq.n	800c830 <prvTaskExitError+0x2c>
	__asm volatile
 800c818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	60fb      	str	r3, [r7, #12]
}
 800c82a:	bf00      	nop
 800c82c:	bf00      	nop
 800c82e:	e7fd      	b.n	800c82c <prvTaskExitError+0x28>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	60bb      	str	r3, [r7, #8]
}
 800c842:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c844:	bf00      	nop
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0fc      	beq.n	800c846 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c84c:	bf00      	nop
 800c84e:	bf00      	nop
 800c850:	3714      	adds	r7, #20
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	20000014 	.word	0x20000014

0800c860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c860:	4b07      	ldr	r3, [pc, #28]	@ (800c880 <pxCurrentTCBConst2>)
 800c862:	6819      	ldr	r1, [r3, #0]
 800c864:	6808      	ldr	r0, [r1, #0]
 800c866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86a:	f380 8809 	msr	PSP, r0
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f04f 0000 	mov.w	r0, #0
 800c876:	f380 8811 	msr	BASEPRI, r0
 800c87a:	4770      	bx	lr
 800c87c:	f3af 8000 	nop.w

0800c880 <pxCurrentTCBConst2>:
 800c880:	2001cad0 	.word	0x2001cad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c884:	bf00      	nop
 800c886:	bf00      	nop

0800c888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c888:	4808      	ldr	r0, [pc, #32]	@ (800c8ac <prvPortStartFirstTask+0x24>)
 800c88a:	6800      	ldr	r0, [r0, #0]
 800c88c:	6800      	ldr	r0, [r0, #0]
 800c88e:	f380 8808 	msr	MSP, r0
 800c892:	f04f 0000 	mov.w	r0, #0
 800c896:	f380 8814 	msr	CONTROL, r0
 800c89a:	b662      	cpsie	i
 800c89c:	b661      	cpsie	f
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	df00      	svc	0
 800c8a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c8aa:	bf00      	nop
 800c8ac:	e000ed08 	.word	0xe000ed08

0800c8b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c8b6:	4b47      	ldr	r3, [pc, #284]	@ (800c9d4 <xPortStartScheduler+0x124>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a47      	ldr	r2, [pc, #284]	@ (800c9d8 <xPortStartScheduler+0x128>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d10b      	bne.n	800c8d8 <xPortStartScheduler+0x28>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	60fb      	str	r3, [r7, #12]
}
 800c8d2:	bf00      	nop
 800c8d4:	bf00      	nop
 800c8d6:	e7fd      	b.n	800c8d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c8d8:	4b3e      	ldr	r3, [pc, #248]	@ (800c9d4 <xPortStartScheduler+0x124>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a3f      	ldr	r2, [pc, #252]	@ (800c9dc <xPortStartScheduler+0x12c>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d10b      	bne.n	800c8fa <xPortStartScheduler+0x4a>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	613b      	str	r3, [r7, #16]
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop
 800c8f8:	e7fd      	b.n	800c8f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8fa:	4b39      	ldr	r3, [pc, #228]	@ (800c9e0 <xPortStartScheduler+0x130>)
 800c8fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	b2db      	uxtb	r3, r3
 800c904:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	22ff      	movs	r2, #255	@ 0xff
 800c90a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	b2db      	uxtb	r3, r3
 800c912:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c914:	78fb      	ldrb	r3, [r7, #3]
 800c916:	b2db      	uxtb	r3, r3
 800c918:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	4b31      	ldr	r3, [pc, #196]	@ (800c9e4 <xPortStartScheduler+0x134>)
 800c920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c922:	4b31      	ldr	r3, [pc, #196]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c924:	2207      	movs	r2, #7
 800c926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c928:	e009      	b.n	800c93e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c92a:	4b2f      	ldr	r3, [pc, #188]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	3b01      	subs	r3, #1
 800c930:	4a2d      	ldr	r2, [pc, #180]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c934:	78fb      	ldrb	r3, [r7, #3]
 800c936:	b2db      	uxtb	r3, r3
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c93e:	78fb      	ldrb	r3, [r7, #3]
 800c940:	b2db      	uxtb	r3, r3
 800c942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c946:	2b80      	cmp	r3, #128	@ 0x80
 800c948:	d0ef      	beq.n	800c92a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c94a:	4b27      	ldr	r3, [pc, #156]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f1c3 0307 	rsb	r3, r3, #7
 800c952:	2b04      	cmp	r3, #4
 800c954:	d00b      	beq.n	800c96e <xPortStartScheduler+0xbe>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	60bb      	str	r3, [r7, #8]
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	e7fd      	b.n	800c96a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c96e:	4b1e      	ldr	r3, [pc, #120]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	021b      	lsls	r3, r3, #8
 800c974:	4a1c      	ldr	r2, [pc, #112]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c978:	4b1b      	ldr	r3, [pc, #108]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c980:	4a19      	ldr	r2, [pc, #100]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	b2da      	uxtb	r2, r3
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c98c:	4b17      	ldr	r3, [pc, #92]	@ (800c9ec <xPortStartScheduler+0x13c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a16      	ldr	r2, [pc, #88]	@ (800c9ec <xPortStartScheduler+0x13c>)
 800c992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c998:	4b14      	ldr	r3, [pc, #80]	@ (800c9ec <xPortStartScheduler+0x13c>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a13      	ldr	r2, [pc, #76]	@ (800c9ec <xPortStartScheduler+0x13c>)
 800c99e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c9a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9a4:	f000 f8da 	bl	800cb5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9a8:	4b11      	ldr	r3, [pc, #68]	@ (800c9f0 <xPortStartScheduler+0x140>)
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c9ae:	f000 f8f9 	bl	800cba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c9b2:	4b10      	ldr	r3, [pc, #64]	@ (800c9f4 <xPortStartScheduler+0x144>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c9f4 <xPortStartScheduler+0x144>)
 800c9b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c9bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9be:	f7ff ff63 	bl	800c888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9c2:	f001 fc07 	bl	800e1d4 <vTaskSwitchContext>
	prvTaskExitError();
 800c9c6:	f7ff ff1d 	bl	800c804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	e000ed00 	.word	0xe000ed00
 800c9d8:	410fc271 	.word	0x410fc271
 800c9dc:	410fc270 	.word	0x410fc270
 800c9e0:	e000e400 	.word	0xe000e400
 800c9e4:	2001ca88 	.word	0x2001ca88
 800c9e8:	2001ca8c 	.word	0x2001ca8c
 800c9ec:	e000ed20 	.word	0xe000ed20
 800c9f0:	20000014 	.word	0x20000014
 800c9f4:	e000ef34 	.word	0xe000ef34

0800c9f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	607b      	str	r3, [r7, #4]
}
 800ca10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca12:	4b10      	ldr	r3, [pc, #64]	@ (800ca54 <vPortEnterCritical+0x5c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	3301      	adds	r3, #1
 800ca18:	4a0e      	ldr	r2, [pc, #56]	@ (800ca54 <vPortEnterCritical+0x5c>)
 800ca1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca54 <vPortEnterCritical+0x5c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d110      	bne.n	800ca46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca24:	4b0c      	ldr	r3, [pc, #48]	@ (800ca58 <vPortEnterCritical+0x60>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <vPortEnterCritical+0x4e>
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	603b      	str	r3, [r7, #0]
}
 800ca40:	bf00      	nop
 800ca42:	bf00      	nop
 800ca44:	e7fd      	b.n	800ca42 <vPortEnterCritical+0x4a>
	}
}
 800ca46:	bf00      	nop
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	20000014 	.word	0x20000014
 800ca58:	e000ed04 	.word	0xe000ed04

0800ca5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca62:	4b12      	ldr	r3, [pc, #72]	@ (800caac <vPortExitCritical+0x50>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10b      	bne.n	800ca82 <vPortExitCritical+0x26>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	607b      	str	r3, [r7, #4]
}
 800ca7c:	bf00      	nop
 800ca7e:	bf00      	nop
 800ca80:	e7fd      	b.n	800ca7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca82:	4b0a      	ldr	r3, [pc, #40]	@ (800caac <vPortExitCritical+0x50>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	4a08      	ldr	r2, [pc, #32]	@ (800caac <vPortExitCritical+0x50>)
 800ca8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca8c:	4b07      	ldr	r3, [pc, #28]	@ (800caac <vPortExitCritical+0x50>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d105      	bne.n	800caa0 <vPortExitCritical+0x44>
 800ca94:	2300      	movs	r3, #0
 800ca96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	f383 8811 	msr	BASEPRI, r3
}
 800ca9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	20000014 	.word	0x20000014

0800cab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cab0:	f3ef 8009 	mrs	r0, PSP
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	4b15      	ldr	r3, [pc, #84]	@ (800cb10 <pxCurrentTCBConst>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	f01e 0f10 	tst.w	lr, #16
 800cac0:	bf08      	it	eq
 800cac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caca:	6010      	str	r0, [r2, #0]
 800cacc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cad4:	f380 8811 	msr	BASEPRI, r0
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f001 fb78 	bl	800e1d4 <vTaskSwitchContext>
 800cae4:	f04f 0000 	mov.w	r0, #0
 800cae8:	f380 8811 	msr	BASEPRI, r0
 800caec:	bc09      	pop	{r0, r3}
 800caee:	6819      	ldr	r1, [r3, #0]
 800caf0:	6808      	ldr	r0, [r1, #0]
 800caf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf6:	f01e 0f10 	tst.w	lr, #16
 800cafa:	bf08      	it	eq
 800cafc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb00:	f380 8809 	msr	PSP, r0
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	f3af 8000 	nop.w

0800cb10 <pxCurrentTCBConst>:
 800cb10:	2001cad0 	.word	0x2001cad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop

0800cb18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	607b      	str	r3, [r7, #4]
}
 800cb30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb32:	f001 fa95 	bl	800e060 <xTaskIncrementTick>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb3c:	4b06      	ldr	r3, [pc, #24]	@ (800cb58 <xPortSysTickHandler+0x40>)
 800cb3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	2300      	movs	r3, #0
 800cb46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	f383 8811 	msr	BASEPRI, r3
}
 800cb4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb50:	bf00      	nop
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	e000ed04 	.word	0xe000ed04

0800cb5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb60:	4b0b      	ldr	r3, [pc, #44]	@ (800cb90 <vPortSetupTimerInterrupt+0x34>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb66:	4b0b      	ldr	r3, [pc, #44]	@ (800cb94 <vPortSetupTimerInterrupt+0x38>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb98 <vPortSetupTimerInterrupt+0x3c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a0a      	ldr	r2, [pc, #40]	@ (800cb9c <vPortSetupTimerInterrupt+0x40>)
 800cb72:	fba2 2303 	umull	r2, r3, r2, r3
 800cb76:	099b      	lsrs	r3, r3, #6
 800cb78:	4a09      	ldr	r2, [pc, #36]	@ (800cba0 <vPortSetupTimerInterrupt+0x44>)
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb7e:	4b04      	ldr	r3, [pc, #16]	@ (800cb90 <vPortSetupTimerInterrupt+0x34>)
 800cb80:	2207      	movs	r2, #7
 800cb82:	601a      	str	r2, [r3, #0]
}
 800cb84:	bf00      	nop
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	e000e010 	.word	0xe000e010
 800cb94:	e000e018 	.word	0xe000e018
 800cb98:	20000008 	.word	0x20000008
 800cb9c:	10624dd3 	.word	0x10624dd3
 800cba0:	e000e014 	.word	0xe000e014

0800cba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cbb4 <vPortEnableVFP+0x10>
 800cba8:	6801      	ldr	r1, [r0, #0]
 800cbaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cbae:	6001      	str	r1, [r0, #0]
 800cbb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cbb2:	bf00      	nop
 800cbb4:	e000ed88 	.word	0xe000ed88

0800cbb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cbbe:	f3ef 8305 	mrs	r3, IPSR
 800cbc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b0f      	cmp	r3, #15
 800cbc8:	d915      	bls.n	800cbf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cbca:	4a18      	ldr	r2, [pc, #96]	@ (800cc2c <vPortValidateInterruptPriority+0x74>)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	4413      	add	r3, r2
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cbd4:	4b16      	ldr	r3, [pc, #88]	@ (800cc30 <vPortValidateInterruptPriority+0x78>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	7afa      	ldrb	r2, [r7, #11]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d20b      	bcs.n	800cbf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe2:	f383 8811 	msr	BASEPRI, r3
 800cbe6:	f3bf 8f6f 	isb	sy
 800cbea:	f3bf 8f4f 	dsb	sy
 800cbee:	607b      	str	r3, [r7, #4]
}
 800cbf0:	bf00      	nop
 800cbf2:	bf00      	nop
 800cbf4:	e7fd      	b.n	800cbf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbf6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc34 <vPortValidateInterruptPriority+0x7c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cbfe:	4b0e      	ldr	r3, [pc, #56]	@ (800cc38 <vPortValidateInterruptPriority+0x80>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d90b      	bls.n	800cc1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc0a:	f383 8811 	msr	BASEPRI, r3
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	603b      	str	r3, [r7, #0]
}
 800cc18:	bf00      	nop
 800cc1a:	bf00      	nop
 800cc1c:	e7fd      	b.n	800cc1a <vPortValidateInterruptPriority+0x62>
	}
 800cc1e:	bf00      	nop
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	e000e3f0 	.word	0xe000e3f0
 800cc30:	2001ca88 	.word	0x2001ca88
 800cc34:	e000ed0c 	.word	0xe000ed0c
 800cc38:	2001ca8c 	.word	0x2001ca8c

0800cc3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10b      	bne.n	800cc68 <xQueueGenericReset+0x2c>
	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	60bb      	str	r3, [r7, #8]
}
 800cc62:	bf00      	nop
 800cc64:	bf00      	nop
 800cc66:	e7fd      	b.n	800cc64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc68:	f7ff fec6 	bl	800c9f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc74:	68f9      	ldr	r1, [r7, #12]
 800cc76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc78:	fb01 f303 	mul.w	r3, r1, r3
 800cc7c:	441a      	add	r2, r3
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	68f9      	ldr	r1, [r7, #12]
 800cc9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc9e:	fb01 f303 	mul.w	r3, r1, r3
 800cca2:	441a      	add	r2, r3
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	22ff      	movs	r2, #255	@ 0xff
 800ccac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	22ff      	movs	r2, #255	@ 0xff
 800ccb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d114      	bne.n	800cce8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d01a      	beq.n	800ccfc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	3310      	adds	r3, #16
 800ccca:	4618      	mov	r0, r3
 800cccc:	f001 fb6e 	bl	800e3ac <xTaskRemoveFromEventList>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d012      	beq.n	800ccfc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ccd6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <xQueueGenericReset+0xd0>)
 800ccd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	e009      	b.n	800ccfc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	3310      	adds	r3, #16
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fca1 	bl	800c634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	3324      	adds	r3, #36	@ 0x24
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff fc9c 	bl	800c634 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ccfc:	f7ff feae 	bl	800ca5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd00:	2301      	movs	r3, #1
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	e000ed04 	.word	0xe000ed04

0800cd10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b08e      	sub	sp, #56	@ 0x38
 800cd14:	af02      	add	r7, sp, #8
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
 800cd1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10b      	bne.n	800cd3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd36:	bf00      	nop
 800cd38:	bf00      	nop
 800cd3a:	e7fd      	b.n	800cd38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10b      	bne.n	800cd5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd54:	bf00      	nop
 800cd56:	bf00      	nop
 800cd58:	e7fd      	b.n	800cd56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <xQueueGenericCreateStatic+0x56>
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <xQueueGenericCreateStatic+0x5a>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e000      	b.n	800cd6c <xQueueGenericCreateStatic+0x5c>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10b      	bne.n	800cd88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	623b      	str	r3, [r7, #32]
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	e7fd      	b.n	800cd84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d102      	bne.n	800cd94 <xQueueGenericCreateStatic+0x84>
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <xQueueGenericCreateStatic+0x88>
 800cd94:	2301      	movs	r3, #1
 800cd96:	e000      	b.n	800cd9a <xQueueGenericCreateStatic+0x8a>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10b      	bne.n	800cdb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	61fb      	str	r3, [r7, #28]
}
 800cdb0:	bf00      	nop
 800cdb2:	bf00      	nop
 800cdb4:	e7fd      	b.n	800cdb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cdb6:	2348      	movs	r3, #72	@ 0x48
 800cdb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2b48      	cmp	r3, #72	@ 0x48
 800cdbe:	d00b      	beq.n	800cdd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	61bb      	str	r3, [r7, #24]
}
 800cdd2:	bf00      	nop
 800cdd4:	bf00      	nop
 800cdd6:	e7fd      	b.n	800cdd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cdd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00d      	beq.n	800ce00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	68b9      	ldr	r1, [r7, #8]
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f000 f840 	bl	800ce80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3730      	adds	r7, #48	@ 0x30
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b08a      	sub	sp, #40	@ 0x28
 800ce0e:	af02      	add	r7, sp, #8
 800ce10:	60f8      	str	r0, [r7, #12]
 800ce12:	60b9      	str	r1, [r7, #8]
 800ce14:	4613      	mov	r3, r2
 800ce16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10b      	bne.n	800ce36 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	613b      	str	r3, [r7, #16]
}
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
 800ce34:	e7fd      	b.n	800ce32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	fb02 f303 	mul.w	r3, r2, r3
 800ce3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	3348      	adds	r3, #72	@ 0x48
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7ff fa07 	bl	800c258 <pvPortMalloc>
 800ce4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d011      	beq.n	800ce76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	3348      	adds	r3, #72	@ 0x48
 800ce5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce64:	79fa      	ldrb	r2, [r7, #7]
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	68b9      	ldr	r1, [r7, #8]
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f000 f805 	bl	800ce80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce76:	69bb      	ldr	r3, [r7, #24]
	}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3720      	adds	r7, #32
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d103      	bne.n	800ce9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	69ba      	ldr	r2, [r7, #24]
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	e002      	b.n	800cea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ceae:	2101      	movs	r1, #1
 800ceb0:	69b8      	ldr	r0, [r7, #24]
 800ceb2:	f7ff fec3 	bl	800cc3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ceb6:	bf00      	nop
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b082      	sub	sp, #8
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00e      	beq.n	800ceea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cede:	2300      	movs	r3, #0
 800cee0:	2200      	movs	r2, #0
 800cee2:	2100      	movs	r1, #0
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 f81d 	bl	800cf24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ceea:	bf00      	nop
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b086      	sub	sp, #24
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	4603      	mov	r3, r0
 800cefa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cefc:	2301      	movs	r3, #1
 800cefe:	617b      	str	r3, [r7, #20]
 800cf00:	2300      	movs	r3, #0
 800cf02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	461a      	mov	r2, r3
 800cf08:	6939      	ldr	r1, [r7, #16]
 800cf0a:	6978      	ldr	r0, [r7, #20]
 800cf0c:	f7ff ff7d 	bl	800ce0a <xQueueGenericCreate>
 800cf10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f7ff ffd3 	bl	800cebe <prvInitialiseMutex>

		return xNewQueue;
 800cf18:	68fb      	ldr	r3, [r7, #12]
	}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3718      	adds	r7, #24
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
	...

0800cf24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08e      	sub	sp, #56	@ 0x38
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
 800cf30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf32:	2300      	movs	r3, #0
 800cf34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10b      	bne.n	800cf58 <xQueueGenericSend+0x34>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf52:	bf00      	nop
 800cf54:	bf00      	nop
 800cf56:	e7fd      	b.n	800cf54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d103      	bne.n	800cf66 <xQueueGenericSend+0x42>
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <xQueueGenericSend+0x46>
 800cf66:	2301      	movs	r3, #1
 800cf68:	e000      	b.n	800cf6c <xQueueGenericSend+0x48>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10b      	bne.n	800cf88 <xQueueGenericSend+0x64>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cf82:	bf00      	nop
 800cf84:	bf00      	nop
 800cf86:	e7fd      	b.n	800cf84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d103      	bne.n	800cf96 <xQueueGenericSend+0x72>
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d101      	bne.n	800cf9a <xQueueGenericSend+0x76>
 800cf96:	2301      	movs	r3, #1
 800cf98:	e000      	b.n	800cf9c <xQueueGenericSend+0x78>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10b      	bne.n	800cfb8 <xQueueGenericSend+0x94>
	__asm volatile
 800cfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa4:	f383 8811 	msr	BASEPRI, r3
 800cfa8:	f3bf 8f6f 	isb	sy
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	623b      	str	r3, [r7, #32]
}
 800cfb2:	bf00      	nop
 800cfb4:	bf00      	nop
 800cfb6:	e7fd      	b.n	800cfb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfb8:	f001 fc2c 	bl	800e814 <xTaskGetSchedulerState>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d102      	bne.n	800cfc8 <xQueueGenericSend+0xa4>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d101      	bne.n	800cfcc <xQueueGenericSend+0xa8>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e000      	b.n	800cfce <xQueueGenericSend+0xaa>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10b      	bne.n	800cfea <xQueueGenericSend+0xc6>
	__asm volatile
 800cfd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	61fb      	str	r3, [r7, #28]
}
 800cfe4:	bf00      	nop
 800cfe6:	bf00      	nop
 800cfe8:	e7fd      	b.n	800cfe6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfea:	f7ff fd05 	bl	800c9f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d302      	bcc.n	800d000 <xQueueGenericSend+0xdc>
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d129      	bne.n	800d054 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	68b9      	ldr	r1, [r7, #8]
 800d004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d006:	f000 fbb9 	bl	800d77c <prvCopyDataToQueue>
 800d00a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d010:	2b00      	cmp	r3, #0
 800d012:	d010      	beq.n	800d036 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d016:	3324      	adds	r3, #36	@ 0x24
 800d018:	4618      	mov	r0, r3
 800d01a:	f001 f9c7 	bl	800e3ac <xTaskRemoveFromEventList>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d013      	beq.n	800d04c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d024:	4b3f      	ldr	r3, [pc, #252]	@ (800d124 <xQueueGenericSend+0x200>)
 800d026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	e00a      	b.n	800d04c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d007      	beq.n	800d04c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d03c:	4b39      	ldr	r3, [pc, #228]	@ (800d124 <xQueueGenericSend+0x200>)
 800d03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d04c:	f7ff fd06 	bl	800ca5c <vPortExitCritical>
				return pdPASS;
 800d050:	2301      	movs	r3, #1
 800d052:	e063      	b.n	800d11c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d103      	bne.n	800d062 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d05a:	f7ff fcff 	bl	800ca5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d05e:	2300      	movs	r3, #0
 800d060:	e05c      	b.n	800d11c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d064:	2b00      	cmp	r3, #0
 800d066:	d106      	bne.n	800d076 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d068:	f107 0314 	add.w	r3, r7, #20
 800d06c:	4618      	mov	r0, r3
 800d06e:	f001 fa65 	bl	800e53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d072:	2301      	movs	r3, #1
 800d074:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d076:	f7ff fcf1 	bl	800ca5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d07a:	f000 ff23 	bl	800dec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d07e:	f7ff fcbb 	bl	800c9f8 <vPortEnterCritical>
 800d082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d088:	b25b      	sxtb	r3, r3
 800d08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d08e:	d103      	bne.n	800d098 <xQueueGenericSend+0x174>
 800d090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d09e:	b25b      	sxtb	r3, r3
 800d0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a4:	d103      	bne.n	800d0ae <xQueueGenericSend+0x18a>
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d0ae:	f7ff fcd5 	bl	800ca5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0b2:	1d3a      	adds	r2, r7, #4
 800d0b4:	f107 0314 	add.w	r3, r7, #20
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f001 fa54 	bl	800e568 <xTaskCheckForTimeOut>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d124      	bne.n	800d110 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d0c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d0c8:	f000 fc50 	bl	800d96c <prvIsQueueFull>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d018      	beq.n	800d104 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d4:	3310      	adds	r3, #16
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f001 f8d6 	bl	800e28c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d0e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d0e2:	f000 fbdb 	bl	800d89c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d0e6:	f000 fefb 	bl	800dee0 <xTaskResumeAll>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f47f af7c 	bne.w	800cfea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d0f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d124 <xQueueGenericSend+0x200>)
 800d0f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0f8:	601a      	str	r2, [r3, #0]
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	e772      	b.n	800cfea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d106:	f000 fbc9 	bl	800d89c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d10a:	f000 fee9 	bl	800dee0 <xTaskResumeAll>
 800d10e:	e76c      	b.n	800cfea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d112:	f000 fbc3 	bl	800d89c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d116:	f000 fee3 	bl	800dee0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d11a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3738      	adds	r7, #56	@ 0x38
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	e000ed04 	.word	0xe000ed04

0800d128 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b090      	sub	sp, #64	@ 0x40
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
 800d134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d10b      	bne.n	800d158 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d152:	bf00      	nop
 800d154:	bf00      	nop
 800d156:	e7fd      	b.n	800d154 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d103      	bne.n	800d166 <xQueueGenericSendFromISR+0x3e>
 800d15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d162:	2b00      	cmp	r3, #0
 800d164:	d101      	bne.n	800d16a <xQueueGenericSendFromISR+0x42>
 800d166:	2301      	movs	r3, #1
 800d168:	e000      	b.n	800d16c <xQueueGenericSendFromISR+0x44>
 800d16a:	2300      	movs	r3, #0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d10b      	bne.n	800d188 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d182:	bf00      	nop
 800d184:	bf00      	nop
 800d186:	e7fd      	b.n	800d184 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d103      	bne.n	800d196 <xQueueGenericSendFromISR+0x6e>
 800d18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d192:	2b01      	cmp	r3, #1
 800d194:	d101      	bne.n	800d19a <xQueueGenericSendFromISR+0x72>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <xQueueGenericSendFromISR+0x74>
 800d19a:	2300      	movs	r3, #0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10b      	bne.n	800d1b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	623b      	str	r3, [r7, #32]
}
 800d1b2:	bf00      	nop
 800d1b4:	bf00      	nop
 800d1b6:	e7fd      	b.n	800d1b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1b8:	f7ff fcfe 	bl	800cbb8 <vPortValidateInterruptPriority>
	__asm volatile
 800d1bc:	f3ef 8211 	mrs	r2, BASEPRI
 800d1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	61fa      	str	r2, [r7, #28]
 800d1d2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d1d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d302      	bcc.n	800d1ea <xQueueGenericSendFromISR+0xc2>
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	d12f      	bne.n	800d24a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1fa:	683a      	ldr	r2, [r7, #0]
 800d1fc:	68b9      	ldr	r1, [r7, #8]
 800d1fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d200:	f000 fabc 	bl	800d77c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d204:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20c:	d112      	bne.n	800d234 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d212:	2b00      	cmp	r3, #0
 800d214:	d016      	beq.n	800d244 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d218:	3324      	adds	r3, #36	@ 0x24
 800d21a:	4618      	mov	r0, r3
 800d21c:	f001 f8c6 	bl	800e3ac <xTaskRemoveFromEventList>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00e      	beq.n	800d244 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00b      	beq.n	800d244 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	601a      	str	r2, [r3, #0]
 800d232:	e007      	b.n	800d244 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d234:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d238:	3301      	adds	r3, #1
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	b25a      	sxtb	r2, r3
 800d23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d244:	2301      	movs	r3, #1
 800d246:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d248:	e001      	b.n	800d24e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d250:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	f383 8811 	msr	BASEPRI, r3
}
 800d258:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d25a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3740      	adds	r7, #64	@ 0x40
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b08c      	sub	sp, #48	@ 0x30
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d270:	2300      	movs	r3, #0
 800d272:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10b      	bne.n	800d296 <xQueueReceive+0x32>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	623b      	str	r3, [r7, #32]
}
 800d290:	bf00      	nop
 800d292:	bf00      	nop
 800d294:	e7fd      	b.n	800d292 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d103      	bne.n	800d2a4 <xQueueReceive+0x40>
 800d29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <xQueueReceive+0x44>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e000      	b.n	800d2aa <xQueueReceive+0x46>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10b      	bne.n	800d2c6 <xQueueReceive+0x62>
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	61fb      	str	r3, [r7, #28]
}
 800d2c0:	bf00      	nop
 800d2c2:	bf00      	nop
 800d2c4:	e7fd      	b.n	800d2c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2c6:	f001 faa5 	bl	800e814 <xTaskGetSchedulerState>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <xQueueReceive+0x72>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d101      	bne.n	800d2da <xQueueReceive+0x76>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e000      	b.n	800d2dc <xQueueReceive+0x78>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d10b      	bne.n	800d2f8 <xQueueReceive+0x94>
	__asm volatile
 800d2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	61bb      	str	r3, [r7, #24]
}
 800d2f2:	bf00      	nop
 800d2f4:	bf00      	nop
 800d2f6:	e7fd      	b.n	800d2f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2f8:	f7ff fb7e 	bl	800c9f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d300:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	2b00      	cmp	r3, #0
 800d306:	d01f      	beq.n	800d348 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d308:	68b9      	ldr	r1, [r7, #8]
 800d30a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d30c:	f000 faa0 	bl	800d850 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d312:	1e5a      	subs	r2, r3, #1
 800d314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d316:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00f      	beq.n	800d340 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d322:	3310      	adds	r3, #16
 800d324:	4618      	mov	r0, r3
 800d326:	f001 f841 	bl	800e3ac <xTaskRemoveFromEventList>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d007      	beq.n	800d340 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d330:	4b3c      	ldr	r3, [pc, #240]	@ (800d424 <xQueueReceive+0x1c0>)
 800d332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d336:	601a      	str	r2, [r3, #0]
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d340:	f7ff fb8c 	bl	800ca5c <vPortExitCritical>
				return pdPASS;
 800d344:	2301      	movs	r3, #1
 800d346:	e069      	b.n	800d41c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d103      	bne.n	800d356 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d34e:	f7ff fb85 	bl	800ca5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d352:	2300      	movs	r3, #0
 800d354:	e062      	b.n	800d41c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d106      	bne.n	800d36a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d35c:	f107 0310 	add.w	r3, r7, #16
 800d360:	4618      	mov	r0, r3
 800d362:	f001 f8eb 	bl	800e53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d366:	2301      	movs	r3, #1
 800d368:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d36a:	f7ff fb77 	bl	800ca5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d36e:	f000 fda9 	bl	800dec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d372:	f7ff fb41 	bl	800c9f8 <vPortEnterCritical>
 800d376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d378:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d37c:	b25b      	sxtb	r3, r3
 800d37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d382:	d103      	bne.n	800d38c <xQueueReceive+0x128>
 800d384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d386:	2200      	movs	r2, #0
 800d388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d392:	b25b      	sxtb	r3, r3
 800d394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d398:	d103      	bne.n	800d3a2 <xQueueReceive+0x13e>
 800d39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3a2:	f7ff fb5b 	bl	800ca5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3a6:	1d3a      	adds	r2, r7, #4
 800d3a8:	f107 0310 	add.w	r3, r7, #16
 800d3ac:	4611      	mov	r1, r2
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f001 f8da 	bl	800e568 <xTaskCheckForTimeOut>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d123      	bne.n	800d402 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3bc:	f000 fac0 	bl	800d940 <prvIsQueueEmpty>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d017      	beq.n	800d3f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c8:	3324      	adds	r3, #36	@ 0x24
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	4611      	mov	r1, r2
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f000 ff5c 	bl	800e28c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3d6:	f000 fa61 	bl	800d89c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3da:	f000 fd81 	bl	800dee0 <xTaskResumeAll>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d189      	bne.n	800d2f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d3e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d424 <xQueueReceive+0x1c0>)
 800d3e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	e780      	b.n	800d2f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d3f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3f8:	f000 fa50 	bl	800d89c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3fc:	f000 fd70 	bl	800dee0 <xTaskResumeAll>
 800d400:	e77a      	b.n	800d2f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d404:	f000 fa4a 	bl	800d89c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d408:	f000 fd6a 	bl	800dee0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d40c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d40e:	f000 fa97 	bl	800d940 <prvIsQueueEmpty>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	f43f af6f 	beq.w	800d2f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d41a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3730      	adds	r7, #48	@ 0x30
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	e000ed04 	.word	0xe000ed04

0800d428 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08e      	sub	sp, #56	@ 0x38
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d432:	2300      	movs	r3, #0
 800d434:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d43a:	2300      	movs	r3, #0
 800d43c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10b      	bne.n	800d45c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	623b      	str	r3, [r7, #32]
}
 800d456:	bf00      	nop
 800d458:	bf00      	nop
 800d45a:	e7fd      	b.n	800d458 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00b      	beq.n	800d47c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d468:	f383 8811 	msr	BASEPRI, r3
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	61fb      	str	r3, [r7, #28]
}
 800d476:	bf00      	nop
 800d478:	bf00      	nop
 800d47a:	e7fd      	b.n	800d478 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d47c:	f001 f9ca 	bl	800e814 <xTaskGetSchedulerState>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d102      	bne.n	800d48c <xQueueSemaphoreTake+0x64>
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d101      	bne.n	800d490 <xQueueSemaphoreTake+0x68>
 800d48c:	2301      	movs	r3, #1
 800d48e:	e000      	b.n	800d492 <xQueueSemaphoreTake+0x6a>
 800d490:	2300      	movs	r3, #0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10b      	bne.n	800d4ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d49a:	f383 8811 	msr	BASEPRI, r3
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f3bf 8f4f 	dsb	sy
 800d4a6:	61bb      	str	r3, [r7, #24]
}
 800d4a8:	bf00      	nop
 800d4aa:	bf00      	nop
 800d4ac:	e7fd      	b.n	800d4aa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4ae:	f7ff faa3 	bl	800c9f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d024      	beq.n	800d508 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c0:	1e5a      	subs	r2, r3, #1
 800d4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d104      	bne.n	800d4d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d4ce:	f001 fb65 	bl	800eb9c <pvTaskIncrementMutexHeldCount>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d00f      	beq.n	800d500 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e2:	3310      	adds	r3, #16
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 ff61 	bl	800e3ac <xTaskRemoveFromEventList>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d007      	beq.n	800d500 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d4f0:	4b54      	ldr	r3, [pc, #336]	@ (800d644 <xQueueSemaphoreTake+0x21c>)
 800d4f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4f6:	601a      	str	r2, [r3, #0]
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d500:	f7ff faac 	bl	800ca5c <vPortExitCritical>
				return pdPASS;
 800d504:	2301      	movs	r3, #1
 800d506:	e098      	b.n	800d63a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d112      	bne.n	800d534 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00b      	beq.n	800d52c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	617b      	str	r3, [r7, #20]
}
 800d526:	bf00      	nop
 800d528:	bf00      	nop
 800d52a:	e7fd      	b.n	800d528 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d52c:	f7ff fa96 	bl	800ca5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d530:	2300      	movs	r3, #0
 800d532:	e082      	b.n	800d63a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d536:	2b00      	cmp	r3, #0
 800d538:	d106      	bne.n	800d548 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d53a:	f107 030c 	add.w	r3, r7, #12
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 fffc 	bl	800e53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d544:	2301      	movs	r3, #1
 800d546:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d548:	f7ff fa88 	bl	800ca5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d54c:	f000 fcba 	bl	800dec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d550:	f7ff fa52 	bl	800c9f8 <vPortEnterCritical>
 800d554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d556:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d55a:	b25b      	sxtb	r3, r3
 800d55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d560:	d103      	bne.n	800d56a <xQueueSemaphoreTake+0x142>
 800d562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d564:	2200      	movs	r2, #0
 800d566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d570:	b25b      	sxtb	r3, r3
 800d572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d576:	d103      	bne.n	800d580 <xQueueSemaphoreTake+0x158>
 800d578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d580:	f7ff fa6c 	bl	800ca5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d584:	463a      	mov	r2, r7
 800d586:	f107 030c 	add.w	r3, r7, #12
 800d58a:	4611      	mov	r1, r2
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 ffeb 	bl	800e568 <xTaskCheckForTimeOut>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d132      	bne.n	800d5fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d598:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d59a:	f000 f9d1 	bl	800d940 <prvIsQueueEmpty>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d026      	beq.n	800d5f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d109      	bne.n	800d5c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d5ac:	f7ff fa24 	bl	800c9f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f001 f94b 	bl	800e850 <xTaskPriorityInherit>
 800d5ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d5bc:	f7ff fa4e 	bl	800ca5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c2:	3324      	adds	r3, #36	@ 0x24
 800d5c4:	683a      	ldr	r2, [r7, #0]
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f000 fe5f 	bl	800e28c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5d0:	f000 f964 	bl	800d89c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5d4:	f000 fc84 	bl	800dee0 <xTaskResumeAll>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f47f af67 	bne.w	800d4ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d5e0:	4b18      	ldr	r3, [pc, #96]	@ (800d644 <xQueueSemaphoreTake+0x21c>)
 800d5e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5e6:	601a      	str	r2, [r3, #0]
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	e75d      	b.n	800d4ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d5f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5f4:	f000 f952 	bl	800d89c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5f8:	f000 fc72 	bl	800dee0 <xTaskResumeAll>
 800d5fc:	e757      	b.n	800d4ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d5fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d600:	f000 f94c 	bl	800d89c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d604:	f000 fc6c 	bl	800dee0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d608:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d60a:	f000 f999 	bl	800d940 <prvIsQueueEmpty>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	f43f af4c 	beq.w	800d4ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00d      	beq.n	800d638 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d61c:	f7ff f9ec 	bl	800c9f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d620:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d622:	f000 f893 	bl	800d74c <prvGetDisinheritPriorityAfterTimeout>
 800d626:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d62e:	4618      	mov	r0, r3
 800d630:	f001 fa0c 	bl	800ea4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d634:	f7ff fa12 	bl	800ca5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3738      	adds	r7, #56	@ 0x38
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	e000ed04 	.word	0xe000ed04

0800d648 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b08e      	sub	sp, #56	@ 0x38
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10b      	bne.n	800d676 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	623b      	str	r3, [r7, #32]
}
 800d670:	bf00      	nop
 800d672:	bf00      	nop
 800d674:	e7fd      	b.n	800d672 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d103      	bne.n	800d684 <xQueueReceiveFromISR+0x3c>
 800d67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <xQueueReceiveFromISR+0x40>
 800d684:	2301      	movs	r3, #1
 800d686:	e000      	b.n	800d68a <xQueueReceiveFromISR+0x42>
 800d688:	2300      	movs	r3, #0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10b      	bne.n	800d6a6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	61fb      	str	r3, [r7, #28]
}
 800d6a0:	bf00      	nop
 800d6a2:	bf00      	nop
 800d6a4:	e7fd      	b.n	800d6a2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6a6:	f7ff fa87 	bl	800cbb8 <vPortValidateInterruptPriority>
	__asm volatile
 800d6aa:	f3ef 8211 	mrs	r2, BASEPRI
 800d6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	61ba      	str	r2, [r7, #24]
 800d6c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d6c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d02f      	beq.n	800d732 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6dc:	68b9      	ldr	r1, [r7, #8]
 800d6de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6e0:	f000 f8b6 	bl	800d850 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e6:	1e5a      	subs	r2, r3, #1
 800d6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d6ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f4:	d112      	bne.n	800d71c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d016      	beq.n	800d72c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d700:	3310      	adds	r3, #16
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fe52 	bl	800e3ac <xTaskRemoveFromEventList>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00e      	beq.n	800d72c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d00b      	beq.n	800d72c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	601a      	str	r2, [r3, #0]
 800d71a:	e007      	b.n	800d72c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d71c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d720:	3301      	adds	r3, #1
 800d722:	b2db      	uxtb	r3, r3
 800d724:	b25a      	sxtb	r2, r3
 800d726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d72c:	2301      	movs	r3, #1
 800d72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d730:	e001      	b.n	800d736 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d732:	2300      	movs	r3, #0
 800d734:	637b      	str	r3, [r7, #52]	@ 0x34
 800d736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d738:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	f383 8811 	msr	BASEPRI, r3
}
 800d740:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d744:	4618      	mov	r0, r3
 800d746:	3738      	adds	r7, #56	@ 0x38
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d006      	beq.n	800d76a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f1c3 0307 	rsb	r3, r3, #7
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	e001      	b.n	800d76e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d76a:	2300      	movs	r3, #0
 800d76c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d76e:	68fb      	ldr	r3, [r7, #12]
	}
 800d770:	4618      	mov	r0, r3
 800d772:	3714      	adds	r7, #20
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d788:	2300      	movs	r3, #0
 800d78a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d790:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10d      	bne.n	800d7b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d14d      	bne.n	800d83e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f001 f8c8 	bl	800e93c <xTaskPriorityDisinherit>
 800d7ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	609a      	str	r2, [r3, #8]
 800d7b4:	e043      	b.n	800d83e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d119      	bne.n	800d7f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6858      	ldr	r0, [r3, #4]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	68b9      	ldr	r1, [r7, #8]
 800d7c8:	f005 fc91 	bl	80130ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	685a      	ldr	r2, [r3, #4]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7d4:	441a      	add	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d32b      	bcc.n	800d83e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	605a      	str	r2, [r3, #4]
 800d7ee:	e026      	b.n	800d83e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	68d8      	ldr	r0, [r3, #12]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	68b9      	ldr	r1, [r7, #8]
 800d7fc:	f005 fc77 	bl	80130ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	68da      	ldr	r2, [r3, #12]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d808:	425b      	negs	r3, r3
 800d80a:	441a      	add	r2, r3
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	68da      	ldr	r2, [r3, #12]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d207      	bcs.n	800d82c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	689a      	ldr	r2, [r3, #8]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d824:	425b      	negs	r3, r3
 800d826:	441a      	add	r2, r3
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d105      	bne.n	800d83e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d002      	beq.n	800d83e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	3b01      	subs	r3, #1
 800d83c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	1c5a      	adds	r2, r3, #1
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d846:	697b      	ldr	r3, [r7, #20]
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3718      	adds	r7, #24
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d018      	beq.n	800d894 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68da      	ldr	r2, [r3, #12]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d86a:	441a      	add	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	68da      	ldr	r2, [r3, #12]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	429a      	cmp	r2, r3
 800d87a:	d303      	bcc.n	800d884 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	68d9      	ldr	r1, [r3, #12]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d88c:	461a      	mov	r2, r3
 800d88e:	6838      	ldr	r0, [r7, #0]
 800d890:	f005 fc2d 	bl	80130ee <memcpy>
	}
}
 800d894:	bf00      	nop
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d8a4:	f7ff f8a8 	bl	800c9f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8b0:	e011      	b.n	800d8d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d012      	beq.n	800d8e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	3324      	adds	r3, #36	@ 0x24
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 fd74 	bl	800e3ac <xTaskRemoveFromEventList>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d001      	beq.n	800d8ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d8ca:	f000 feb1 	bl	800e630 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	dce9      	bgt.n	800d8b2 <prvUnlockQueue+0x16>
 800d8de:	e000      	b.n	800d8e2 <prvUnlockQueue+0x46>
					break;
 800d8e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	22ff      	movs	r2, #255	@ 0xff
 800d8e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d8ea:	f7ff f8b7 	bl	800ca5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d8ee:	f7ff f883 	bl	800c9f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d8f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8fa:	e011      	b.n	800d920 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d012      	beq.n	800d92a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	3310      	adds	r3, #16
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 fd4f 	bl	800e3ac <xTaskRemoveFromEventList>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d914:	f000 fe8c 	bl	800e630 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d924:	2b00      	cmp	r3, #0
 800d926:	dce9      	bgt.n	800d8fc <prvUnlockQueue+0x60>
 800d928:	e000      	b.n	800d92c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d92a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	22ff      	movs	r2, #255	@ 0xff
 800d930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d934:	f7ff f892 	bl	800ca5c <vPortExitCritical>
}
 800d938:	bf00      	nop
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d948:	f7ff f856 	bl	800c9f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d950:	2b00      	cmp	r3, #0
 800d952:	d102      	bne.n	800d95a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d954:	2301      	movs	r3, #1
 800d956:	60fb      	str	r3, [r7, #12]
 800d958:	e001      	b.n	800d95e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d95a:	2300      	movs	r3, #0
 800d95c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d95e:	f7ff f87d 	bl	800ca5c <vPortExitCritical>

	return xReturn;
 800d962:	68fb      	ldr	r3, [r7, #12]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d974:	f7ff f840 	bl	800c9f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d980:	429a      	cmp	r2, r3
 800d982:	d102      	bne.n	800d98a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d984:	2301      	movs	r3, #1
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	e001      	b.n	800d98e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d98a:	2300      	movs	r3, #0
 800d98c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d98e:	f7ff f865 	bl	800ca5c <vPortExitCritical>

	return xReturn;
 800d992:	68fb      	ldr	r3, [r7, #12]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60fb      	str	r3, [r7, #12]
 800d9aa:	e014      	b.n	800d9d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d9ac:	4a0f      	ldr	r2, [pc, #60]	@ (800d9ec <vQueueAddToRegistry+0x50>)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10b      	bne.n	800d9d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d9b8:	490c      	ldr	r1, [pc, #48]	@ (800d9ec <vQueueAddToRegistry+0x50>)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d9c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d9ec <vQueueAddToRegistry+0x50>)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	00db      	lsls	r3, r3, #3
 800d9c8:	4413      	add	r3, r2
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d9ce:	e006      	b.n	800d9de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	60fb      	str	r3, [r7, #12]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b07      	cmp	r3, #7
 800d9da:	d9e7      	bls.n	800d9ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d9dc:	bf00      	nop
 800d9de:	bf00      	nop
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop
 800d9ec:	2001ca90 	.word	0x2001ca90

0800d9f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da00:	f7fe fffa 	bl	800c9f8 <vPortEnterCritical>
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da0a:	b25b      	sxtb	r3, r3
 800da0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da10:	d103      	bne.n	800da1a <vQueueWaitForMessageRestricted+0x2a>
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	2200      	movs	r2, #0
 800da16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da20:	b25b      	sxtb	r3, r3
 800da22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da26:	d103      	bne.n	800da30 <vQueueWaitForMessageRestricted+0x40>
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da30:	f7ff f814 	bl	800ca5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d106      	bne.n	800da4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	3324      	adds	r3, #36	@ 0x24
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	68b9      	ldr	r1, [r7, #8]
 800da44:	4618      	mov	r0, r3
 800da46:	f000 fc85 	bl	800e354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da4a:	6978      	ldr	r0, [r7, #20]
 800da4c:	f7ff ff26 	bl	800d89c <prvUnlockQueue>
	}
 800da50:	bf00      	nop
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b08e      	sub	sp, #56	@ 0x38
 800da5c:	af04      	add	r7, sp, #16
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
 800da64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10b      	bne.n	800da84 <xTaskCreateStatic+0x2c>
	__asm volatile
 800da6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	623b      	str	r3, [r7, #32]
}
 800da7e:	bf00      	nop
 800da80:	bf00      	nop
 800da82:	e7fd      	b.n	800da80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800da84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10b      	bne.n	800daa2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800da8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	61fb      	str	r3, [r7, #28]
}
 800da9c:	bf00      	nop
 800da9e:	bf00      	nop
 800daa0:	e7fd      	b.n	800da9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800daa2:	2354      	movs	r3, #84	@ 0x54
 800daa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	2b54      	cmp	r3, #84	@ 0x54
 800daaa:	d00b      	beq.n	800dac4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800daac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	61bb      	str	r3, [r7, #24]
}
 800dabe:	bf00      	nop
 800dac0:	bf00      	nop
 800dac2:	e7fd      	b.n	800dac0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dac4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d01e      	beq.n	800db0a <xTaskCreateStatic+0xb2>
 800dacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d01b      	beq.n	800db0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dada:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dade:	2202      	movs	r2, #2
 800dae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dae4:	2300      	movs	r3, #0
 800dae6:	9303      	str	r3, [sp, #12]
 800dae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daea:	9302      	str	r3, [sp, #8]
 800daec:	f107 0314 	add.w	r3, r7, #20
 800daf0:	9301      	str	r3, [sp, #4]
 800daf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	68b9      	ldr	r1, [r7, #8]
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f000 f850 	bl	800dba2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db04:	f000 f8d6 	bl	800dcb4 <prvAddNewTaskToReadyList>
 800db08:	e001      	b.n	800db0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800db0a:	2300      	movs	r3, #0
 800db0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db0e:	697b      	ldr	r3, [r7, #20]
	}
 800db10:	4618      	mov	r0, r3
 800db12:	3728      	adds	r7, #40	@ 0x28
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08c      	sub	sp, #48	@ 0x30
 800db1c:	af04      	add	r7, sp, #16
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	603b      	str	r3, [r7, #0]
 800db24:	4613      	mov	r3, r2
 800db26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db28:	88fb      	ldrh	r3, [r7, #6]
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fe fb93 	bl	800c258 <pvPortMalloc>
 800db32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00e      	beq.n	800db58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db3a:	2054      	movs	r0, #84	@ 0x54
 800db3c:	f7fe fb8c 	bl	800c258 <pvPortMalloc>
 800db40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d003      	beq.n	800db50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	697a      	ldr	r2, [r7, #20]
 800db4c:	631a      	str	r2, [r3, #48]	@ 0x30
 800db4e:	e005      	b.n	800db5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db50:	6978      	ldr	r0, [r7, #20]
 800db52:	f7fe fc4f 	bl	800c3f4 <vPortFree>
 800db56:	e001      	b.n	800db5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db58:	2300      	movs	r3, #0
 800db5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d017      	beq.n	800db92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db6a:	88fa      	ldrh	r2, [r7, #6]
 800db6c:	2300      	movs	r3, #0
 800db6e:	9303      	str	r3, [sp, #12]
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	9302      	str	r3, [sp, #8]
 800db74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	68b9      	ldr	r1, [r7, #8]
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f000 f80e 	bl	800dba2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db86:	69f8      	ldr	r0, [r7, #28]
 800db88:	f000 f894 	bl	800dcb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db8c:	2301      	movs	r3, #1
 800db8e:	61bb      	str	r3, [r7, #24]
 800db90:	e002      	b.n	800db98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db92:	f04f 33ff 	mov.w	r3, #4294967295
 800db96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db98:	69bb      	ldr	r3, [r7, #24]
	}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3720      	adds	r7, #32
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b088      	sub	sp, #32
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	60f8      	str	r0, [r7, #12]
 800dbaa:	60b9      	str	r1, [r7, #8]
 800dbac:	607a      	str	r2, [r7, #4]
 800dbae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	4413      	add	r3, r2
 800dbc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	f023 0307 	bic.w	r3, r3, #7
 800dbc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	f003 0307 	and.w	r3, r3, #7
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00b      	beq.n	800dbec <prvInitialiseNewTask+0x4a>
	__asm volatile
 800dbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	617b      	str	r3, [r7, #20]
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	e7fd      	b.n	800dbe8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d01f      	beq.n	800dc32 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	61fb      	str	r3, [r7, #28]
 800dbf6:	e012      	b.n	800dc1e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	7819      	ldrb	r1, [r3, #0]
 800dc00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	4413      	add	r3, r2
 800dc06:	3334      	adds	r3, #52	@ 0x34
 800dc08:	460a      	mov	r2, r1
 800dc0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	4413      	add	r3, r2
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d006      	beq.n	800dc26 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	61fb      	str	r3, [r7, #28]
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	2b0f      	cmp	r3, #15
 800dc22:	d9e9      	bls.n	800dbf8 <prvInitialiseNewTask+0x56>
 800dc24:	e000      	b.n	800dc28 <prvInitialiseNewTask+0x86>
			{
				break;
 800dc26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dc30:	e003      	b.n	800dc3a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc34:	2200      	movs	r2, #0
 800dc36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3c:	2b06      	cmp	r3, #6
 800dc3e:	d901      	bls.n	800dc44 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc40:	2306      	movs	r3, #6
 800dc42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc4e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc52:	2200      	movs	r2, #0
 800dc54:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc58:	3304      	adds	r3, #4
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fe fd0a 	bl	800c674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc62:	3318      	adds	r3, #24
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7fe fd05 	bl	800c674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc72:	f1c3 0207 	rsb	r2, r3, #7
 800dc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc82:	2200      	movs	r2, #0
 800dc84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc8e:	683a      	ldr	r2, [r7, #0]
 800dc90:	68f9      	ldr	r1, [r7, #12]
 800dc92:	69b8      	ldr	r0, [r7, #24]
 800dc94:	f7fe fd82 	bl	800c79c <pxPortInitialiseStack>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcaa:	bf00      	nop
 800dcac:	3720      	adds	r7, #32
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
	...

0800dcb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dcbc:	f7fe fe9c 	bl	800c9f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dcc0:	4b2a      	ldr	r3, [pc, #168]	@ (800dd6c <prvAddNewTaskToReadyList+0xb8>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	4a29      	ldr	r2, [pc, #164]	@ (800dd6c <prvAddNewTaskToReadyList+0xb8>)
 800dcc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dcca:	4b29      	ldr	r3, [pc, #164]	@ (800dd70 <prvAddNewTaskToReadyList+0xbc>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d109      	bne.n	800dce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dcd2:	4a27      	ldr	r2, [pc, #156]	@ (800dd70 <prvAddNewTaskToReadyList+0xbc>)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcd8:	4b24      	ldr	r3, [pc, #144]	@ (800dd6c <prvAddNewTaskToReadyList+0xb8>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d110      	bne.n	800dd02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dce0:	f000 fcca 	bl	800e678 <prvInitialiseTaskLists>
 800dce4:	e00d      	b.n	800dd02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dce6:	4b23      	ldr	r3, [pc, #140]	@ (800dd74 <prvAddNewTaskToReadyList+0xc0>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d109      	bne.n	800dd02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dcee:	4b20      	ldr	r3, [pc, #128]	@ (800dd70 <prvAddNewTaskToReadyList+0xbc>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d802      	bhi.n	800dd02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dcfc:	4a1c      	ldr	r2, [pc, #112]	@ (800dd70 <prvAddNewTaskToReadyList+0xbc>)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd02:	4b1d      	ldr	r3, [pc, #116]	@ (800dd78 <prvAddNewTaskToReadyList+0xc4>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	3301      	adds	r3, #1
 800dd08:	4a1b      	ldr	r2, [pc, #108]	@ (800dd78 <prvAddNewTaskToReadyList+0xc4>)
 800dd0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd10:	2201      	movs	r2, #1
 800dd12:	409a      	lsls	r2, r3
 800dd14:	4b19      	ldr	r3, [pc, #100]	@ (800dd7c <prvAddNewTaskToReadyList+0xc8>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	4a18      	ldr	r2, [pc, #96]	@ (800dd7c <prvAddNewTaskToReadyList+0xc8>)
 800dd1c:	6013      	str	r3, [r2, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd22:	4613      	mov	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4413      	add	r3, r2
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	4a15      	ldr	r2, [pc, #84]	@ (800dd80 <prvAddNewTaskToReadyList+0xcc>)
 800dd2c:	441a      	add	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	3304      	adds	r3, #4
 800dd32:	4619      	mov	r1, r3
 800dd34:	4610      	mov	r0, r2
 800dd36:	f7fe fcaa 	bl	800c68e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd3a:	f7fe fe8f 	bl	800ca5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd74 <prvAddNewTaskToReadyList+0xc0>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00e      	beq.n	800dd64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd46:	4b0a      	ldr	r3, [pc, #40]	@ (800dd70 <prvAddNewTaskToReadyList+0xbc>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d207      	bcs.n	800dd64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd54:	4b0b      	ldr	r3, [pc, #44]	@ (800dd84 <prvAddNewTaskToReadyList+0xd0>)
 800dd56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd5a:	601a      	str	r2, [r3, #0]
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	2001cbd0 	.word	0x2001cbd0
 800dd70:	2001cad0 	.word	0x2001cad0
 800dd74:	2001cbdc 	.word	0x2001cbdc
 800dd78:	2001cbec 	.word	0x2001cbec
 800dd7c:	2001cbd8 	.word	0x2001cbd8
 800dd80:	2001cad4 	.word	0x2001cad4
 800dd84:	e000ed04 	.word	0xe000ed04

0800dd88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dd90:	2300      	movs	r3, #0
 800dd92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d018      	beq.n	800ddcc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd9a:	4b14      	ldr	r3, [pc, #80]	@ (800ddec <vTaskDelay+0x64>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00b      	beq.n	800ddba <vTaskDelay+0x32>
	__asm volatile
 800dda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda6:	f383 8811 	msr	BASEPRI, r3
 800ddaa:	f3bf 8f6f 	isb	sy
 800ddae:	f3bf 8f4f 	dsb	sy
 800ddb2:	60bb      	str	r3, [r7, #8]
}
 800ddb4:	bf00      	nop
 800ddb6:	bf00      	nop
 800ddb8:	e7fd      	b.n	800ddb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ddba:	f000 f883 	bl	800dec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f001 f9cb 	bl	800f15c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ddc6:	f000 f88b 	bl	800dee0 <xTaskResumeAll>
 800ddca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d107      	bne.n	800dde2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ddd2:	4b07      	ldr	r3, [pc, #28]	@ (800ddf0 <vTaskDelay+0x68>)
 800ddd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddd8:	601a      	str	r2, [r3, #0]
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dde2:	bf00      	nop
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	2001cbf8 	.word	0x2001cbf8
 800ddf0:	e000ed04 	.word	0xe000ed04

0800ddf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08a      	sub	sp, #40	@ 0x28
 800ddf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ddfe:	2300      	movs	r3, #0
 800de00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de02:	463a      	mov	r2, r7
 800de04:	1d39      	adds	r1, r7, #4
 800de06:	f107 0308 	add.w	r3, r7, #8
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7f3 fd6e 	bl	80018ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	9202      	str	r2, [sp, #8]
 800de18:	9301      	str	r3, [sp, #4]
 800de1a:	2300      	movs	r3, #0
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	2300      	movs	r3, #0
 800de20:	460a      	mov	r2, r1
 800de22:	4922      	ldr	r1, [pc, #136]	@ (800deac <vTaskStartScheduler+0xb8>)
 800de24:	4822      	ldr	r0, [pc, #136]	@ (800deb0 <vTaskStartScheduler+0xbc>)
 800de26:	f7ff fe17 	bl	800da58 <xTaskCreateStatic>
 800de2a:	4603      	mov	r3, r0
 800de2c:	4a21      	ldr	r2, [pc, #132]	@ (800deb4 <vTaskStartScheduler+0xc0>)
 800de2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de30:	4b20      	ldr	r3, [pc, #128]	@ (800deb4 <vTaskStartScheduler+0xc0>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de38:	2301      	movs	r3, #1
 800de3a:	617b      	str	r3, [r7, #20]
 800de3c:	e001      	b.n	800de42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de3e:	2300      	movs	r3, #0
 800de40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d102      	bne.n	800de4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de48:	f001 f9ee 	bl	800f228 <xTimerCreateTimerTask>
 800de4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d116      	bne.n	800de82 <vTaskStartScheduler+0x8e>
	__asm volatile
 800de54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de58:	f383 8811 	msr	BASEPRI, r3
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	f3bf 8f4f 	dsb	sy
 800de64:	613b      	str	r3, [r7, #16]
}
 800de66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de68:	4b13      	ldr	r3, [pc, #76]	@ (800deb8 <vTaskStartScheduler+0xc4>)
 800de6a:	f04f 32ff 	mov.w	r2, #4294967295
 800de6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de70:	4b12      	ldr	r3, [pc, #72]	@ (800debc <vTaskStartScheduler+0xc8>)
 800de72:	2201      	movs	r2, #1
 800de74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de76:	4b12      	ldr	r3, [pc, #72]	@ (800dec0 <vTaskStartScheduler+0xcc>)
 800de78:	2200      	movs	r2, #0
 800de7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de7c:	f7fe fd18 	bl	800c8b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de80:	e00f      	b.n	800dea2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de88:	d10b      	bne.n	800dea2 <vTaskStartScheduler+0xae>
	__asm volatile
 800de8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8e:	f383 8811 	msr	BASEPRI, r3
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	f3bf 8f4f 	dsb	sy
 800de9a:	60fb      	str	r3, [r7, #12]
}
 800de9c:	bf00      	nop
 800de9e:	bf00      	nop
 800dea0:	e7fd      	b.n	800de9e <vTaskStartScheduler+0xaa>
}
 800dea2:	bf00      	nop
 800dea4:	3718      	adds	r7, #24
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	080154cc 	.word	0x080154cc
 800deb0:	0800e649 	.word	0x0800e649
 800deb4:	2001cbf4 	.word	0x2001cbf4
 800deb8:	2001cbf0 	.word	0x2001cbf0
 800debc:	2001cbdc 	.word	0x2001cbdc
 800dec0:	2001cbd4 	.word	0x2001cbd4

0800dec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dec4:	b480      	push	{r7}
 800dec6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dec8:	4b04      	ldr	r3, [pc, #16]	@ (800dedc <vTaskSuspendAll+0x18>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	3301      	adds	r3, #1
 800dece:	4a03      	ldr	r2, [pc, #12]	@ (800dedc <vTaskSuspendAll+0x18>)
 800ded0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ded2:	bf00      	nop
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr
 800dedc:	2001cbf8 	.word	0x2001cbf8

0800dee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dee6:	2300      	movs	r3, #0
 800dee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800deea:	2300      	movs	r3, #0
 800deec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800deee:	4b42      	ldr	r3, [pc, #264]	@ (800dff8 <xTaskResumeAll+0x118>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d10b      	bne.n	800df0e <xTaskResumeAll+0x2e>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	603b      	str	r3, [r7, #0]
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	e7fd      	b.n	800df0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df0e:	f7fe fd73 	bl	800c9f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df12:	4b39      	ldr	r3, [pc, #228]	@ (800dff8 <xTaskResumeAll+0x118>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3b01      	subs	r3, #1
 800df18:	4a37      	ldr	r2, [pc, #220]	@ (800dff8 <xTaskResumeAll+0x118>)
 800df1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df1c:	4b36      	ldr	r3, [pc, #216]	@ (800dff8 <xTaskResumeAll+0x118>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d161      	bne.n	800dfe8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df24:	4b35      	ldr	r3, [pc, #212]	@ (800dffc <xTaskResumeAll+0x11c>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d05d      	beq.n	800dfe8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df2c:	e02e      	b.n	800df8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df2e:	4b34      	ldr	r3, [pc, #208]	@ (800e000 <xTaskResumeAll+0x120>)
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3318      	adds	r3, #24
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fe fc04 	bl	800c748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	3304      	adds	r3, #4
 800df44:	4618      	mov	r0, r3
 800df46:	f7fe fbff 	bl	800c748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df4e:	2201      	movs	r2, #1
 800df50:	409a      	lsls	r2, r3
 800df52:	4b2c      	ldr	r3, [pc, #176]	@ (800e004 <xTaskResumeAll+0x124>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4313      	orrs	r3, r2
 800df58:	4a2a      	ldr	r2, [pc, #168]	@ (800e004 <xTaskResumeAll+0x124>)
 800df5a:	6013      	str	r3, [r2, #0]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df60:	4613      	mov	r3, r2
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4413      	add	r3, r2
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	4a27      	ldr	r2, [pc, #156]	@ (800e008 <xTaskResumeAll+0x128>)
 800df6a:	441a      	add	r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	3304      	adds	r3, #4
 800df70:	4619      	mov	r1, r3
 800df72:	4610      	mov	r0, r2
 800df74:	f7fe fb8b 	bl	800c68e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df7c:	4b23      	ldr	r3, [pc, #140]	@ (800e00c <xTaskResumeAll+0x12c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df82:	429a      	cmp	r2, r3
 800df84:	d302      	bcc.n	800df8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800df86:	4b22      	ldr	r3, [pc, #136]	@ (800e010 <xTaskResumeAll+0x130>)
 800df88:	2201      	movs	r2, #1
 800df8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df8c:	4b1c      	ldr	r3, [pc, #112]	@ (800e000 <xTaskResumeAll+0x120>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1cc      	bne.n	800df2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df9a:	f000 fc0b 	bl	800e7b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df9e:	4b1d      	ldr	r3, [pc, #116]	@ (800e014 <xTaskResumeAll+0x134>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d010      	beq.n	800dfcc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dfaa:	f000 f859 	bl	800e060 <xTaskIncrementTick>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dfb4:	4b16      	ldr	r3, [pc, #88]	@ (800e010 <xTaskResumeAll+0x130>)
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1f1      	bne.n	800dfaa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dfc6:	4b13      	ldr	r3, [pc, #76]	@ (800e014 <xTaskResumeAll+0x134>)
 800dfc8:	2200      	movs	r2, #0
 800dfca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dfcc:	4b10      	ldr	r3, [pc, #64]	@ (800e010 <xTaskResumeAll+0x130>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d009      	beq.n	800dfe8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dfd8:	4b0f      	ldr	r3, [pc, #60]	@ (800e018 <xTaskResumeAll+0x138>)
 800dfda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfde:	601a      	str	r2, [r3, #0]
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfe8:	f7fe fd38 	bl	800ca5c <vPortExitCritical>

	return xAlreadyYielded;
 800dfec:	68bb      	ldr	r3, [r7, #8]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	2001cbf8 	.word	0x2001cbf8
 800dffc:	2001cbd0 	.word	0x2001cbd0
 800e000:	2001cb90 	.word	0x2001cb90
 800e004:	2001cbd8 	.word	0x2001cbd8
 800e008:	2001cad4 	.word	0x2001cad4
 800e00c:	2001cad0 	.word	0x2001cad0
 800e010:	2001cbe4 	.word	0x2001cbe4
 800e014:	2001cbe0 	.word	0x2001cbe0
 800e018:	e000ed04 	.word	0xe000ed04

0800e01c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e022:	4b05      	ldr	r3, [pc, #20]	@ (800e038 <xTaskGetTickCount+0x1c>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e028:	687b      	ldr	r3, [r7, #4]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	2001cbd4 	.word	0x2001cbd4

0800e03c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e042:	f7fe fdb9 	bl	800cbb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e046:	2300      	movs	r3, #0
 800e048:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e04a:	4b04      	ldr	r3, [pc, #16]	@ (800e05c <xTaskGetTickCountFromISR+0x20>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e050:	683b      	ldr	r3, [r7, #0]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3708      	adds	r7, #8
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	2001cbd4 	.word	0x2001cbd4

0800e060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e066:	2300      	movs	r3, #0
 800e068:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e06a:	4b4f      	ldr	r3, [pc, #316]	@ (800e1a8 <xTaskIncrementTick+0x148>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f040 808f 	bne.w	800e192 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e074:	4b4d      	ldr	r3, [pc, #308]	@ (800e1ac <xTaskIncrementTick+0x14c>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	3301      	adds	r3, #1
 800e07a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e07c:	4a4b      	ldr	r2, [pc, #300]	@ (800e1ac <xTaskIncrementTick+0x14c>)
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d121      	bne.n	800e0cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e088:	4b49      	ldr	r3, [pc, #292]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00b      	beq.n	800e0aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800e092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e096:	f383 8811 	msr	BASEPRI, r3
 800e09a:	f3bf 8f6f 	isb	sy
 800e09e:	f3bf 8f4f 	dsb	sy
 800e0a2:	603b      	str	r3, [r7, #0]
}
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop
 800e0a8:	e7fd      	b.n	800e0a6 <xTaskIncrementTick+0x46>
 800e0aa:	4b41      	ldr	r3, [pc, #260]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	60fb      	str	r3, [r7, #12]
 800e0b0:	4b40      	ldr	r3, [pc, #256]	@ (800e1b4 <xTaskIncrementTick+0x154>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a3e      	ldr	r2, [pc, #248]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e0b6:	6013      	str	r3, [r2, #0]
 800e0b8:	4a3e      	ldr	r2, [pc, #248]	@ (800e1b4 <xTaskIncrementTick+0x154>)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6013      	str	r3, [r2, #0]
 800e0be:	4b3e      	ldr	r3, [pc, #248]	@ (800e1b8 <xTaskIncrementTick+0x158>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	4a3c      	ldr	r2, [pc, #240]	@ (800e1b8 <xTaskIncrementTick+0x158>)
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	f000 fb74 	bl	800e7b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0cc:	4b3b      	ldr	r3, [pc, #236]	@ (800e1bc <xTaskIncrementTick+0x15c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d348      	bcc.n	800e168 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0d6:	4b36      	ldr	r3, [pc, #216]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d104      	bne.n	800e0ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e0:	4b36      	ldr	r3, [pc, #216]	@ (800e1bc <xTaskIncrementTick+0x15c>)
 800e0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e6:	601a      	str	r2, [r3, #0]
					break;
 800e0e8:	e03e      	b.n	800e168 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ea:	4b31      	ldr	r3, [pc, #196]	@ (800e1b0 <xTaskIncrementTick+0x150>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0fa:	693a      	ldr	r2, [r7, #16]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d203      	bcs.n	800e10a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e102:	4a2e      	ldr	r2, [pc, #184]	@ (800e1bc <xTaskIncrementTick+0x15c>)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e108:	e02e      	b.n	800e168 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	3304      	adds	r3, #4
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe fb1a 	bl	800c748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d004      	beq.n	800e126 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	3318      	adds	r3, #24
 800e120:	4618      	mov	r0, r3
 800e122:	f7fe fb11 	bl	800c748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12a:	2201      	movs	r2, #1
 800e12c:	409a      	lsls	r2, r3
 800e12e:	4b24      	ldr	r3, [pc, #144]	@ (800e1c0 <xTaskIncrementTick+0x160>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4313      	orrs	r3, r2
 800e134:	4a22      	ldr	r2, [pc, #136]	@ (800e1c0 <xTaskIncrementTick+0x160>)
 800e136:	6013      	str	r3, [r2, #0]
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e13c:	4613      	mov	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4413      	add	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4a1f      	ldr	r2, [pc, #124]	@ (800e1c4 <xTaskIncrementTick+0x164>)
 800e146:	441a      	add	r2, r3
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	3304      	adds	r3, #4
 800e14c:	4619      	mov	r1, r3
 800e14e:	4610      	mov	r0, r2
 800e150:	f7fe fa9d 	bl	800c68e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e158:	4b1b      	ldr	r3, [pc, #108]	@ (800e1c8 <xTaskIncrementTick+0x168>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e15e:	429a      	cmp	r2, r3
 800e160:	d3b9      	bcc.n	800e0d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e162:	2301      	movs	r3, #1
 800e164:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e166:	e7b6      	b.n	800e0d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e168:	4b17      	ldr	r3, [pc, #92]	@ (800e1c8 <xTaskIncrementTick+0x168>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e16e:	4915      	ldr	r1, [pc, #84]	@ (800e1c4 <xTaskIncrementTick+0x164>)
 800e170:	4613      	mov	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4413      	add	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	440b      	add	r3, r1
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d901      	bls.n	800e184 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e180:	2301      	movs	r3, #1
 800e182:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e184:	4b11      	ldr	r3, [pc, #68]	@ (800e1cc <xTaskIncrementTick+0x16c>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d007      	beq.n	800e19c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e18c:	2301      	movs	r3, #1
 800e18e:	617b      	str	r3, [r7, #20]
 800e190:	e004      	b.n	800e19c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e192:	4b0f      	ldr	r3, [pc, #60]	@ (800e1d0 <xTaskIncrementTick+0x170>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	3301      	adds	r3, #1
 800e198:	4a0d      	ldr	r2, [pc, #52]	@ (800e1d0 <xTaskIncrementTick+0x170>)
 800e19a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e19c:	697b      	ldr	r3, [r7, #20]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	2001cbf8 	.word	0x2001cbf8
 800e1ac:	2001cbd4 	.word	0x2001cbd4
 800e1b0:	2001cb88 	.word	0x2001cb88
 800e1b4:	2001cb8c 	.word	0x2001cb8c
 800e1b8:	2001cbe8 	.word	0x2001cbe8
 800e1bc:	2001cbf0 	.word	0x2001cbf0
 800e1c0:	2001cbd8 	.word	0x2001cbd8
 800e1c4:	2001cad4 	.word	0x2001cad4
 800e1c8:	2001cad0 	.word	0x2001cad0
 800e1cc:	2001cbe4 	.word	0x2001cbe4
 800e1d0:	2001cbe0 	.word	0x2001cbe0

0800e1d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b087      	sub	sp, #28
 800e1d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1da:	4b27      	ldr	r3, [pc, #156]	@ (800e278 <vTaskSwitchContext+0xa4>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d003      	beq.n	800e1ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1e2:	4b26      	ldr	r3, [pc, #152]	@ (800e27c <vTaskSwitchContext+0xa8>)
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1e8:	e040      	b.n	800e26c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e1ea:	4b24      	ldr	r3, [pc, #144]	@ (800e27c <vTaskSwitchContext+0xa8>)
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f0:	4b23      	ldr	r3, [pc, #140]	@ (800e280 <vTaskSwitchContext+0xac>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	fab3 f383 	clz	r3, r3
 800e1fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e1fe:	7afb      	ldrb	r3, [r7, #11]
 800e200:	f1c3 031f 	rsb	r3, r3, #31
 800e204:	617b      	str	r3, [r7, #20]
 800e206:	491f      	ldr	r1, [pc, #124]	@ (800e284 <vTaskSwitchContext+0xb0>)
 800e208:	697a      	ldr	r2, [r7, #20]
 800e20a:	4613      	mov	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4413      	add	r3, r2
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	440b      	add	r3, r1
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d10b      	bne.n	800e232 <vTaskSwitchContext+0x5e>
	__asm volatile
 800e21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21e:	f383 8811 	msr	BASEPRI, r3
 800e222:	f3bf 8f6f 	isb	sy
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	607b      	str	r3, [r7, #4]
}
 800e22c:	bf00      	nop
 800e22e:	bf00      	nop
 800e230:	e7fd      	b.n	800e22e <vTaskSwitchContext+0x5a>
 800e232:	697a      	ldr	r2, [r7, #20]
 800e234:	4613      	mov	r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4413      	add	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	4a11      	ldr	r2, [pc, #68]	@ (800e284 <vTaskSwitchContext+0xb0>)
 800e23e:	4413      	add	r3, r2
 800e240:	613b      	str	r3, [r7, #16]
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	685a      	ldr	r2, [r3, #4]
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	605a      	str	r2, [r3, #4]
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	685a      	ldr	r2, [r3, #4]
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	3308      	adds	r3, #8
 800e254:	429a      	cmp	r2, r3
 800e256:	d104      	bne.n	800e262 <vTaskSwitchContext+0x8e>
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	685a      	ldr	r2, [r3, #4]
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	605a      	str	r2, [r3, #4]
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	4a07      	ldr	r2, [pc, #28]	@ (800e288 <vTaskSwitchContext+0xb4>)
 800e26a:	6013      	str	r3, [r2, #0]
}
 800e26c:	bf00      	nop
 800e26e:	371c      	adds	r7, #28
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	2001cbf8 	.word	0x2001cbf8
 800e27c:	2001cbe4 	.word	0x2001cbe4
 800e280:	2001cbd8 	.word	0x2001cbd8
 800e284:	2001cad4 	.word	0x2001cad4
 800e288:	2001cad0 	.word	0x2001cad0

0800e28c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10b      	bne.n	800e2b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a0:	f383 8811 	msr	BASEPRI, r3
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	60fb      	str	r3, [r7, #12]
}
 800e2ae:	bf00      	nop
 800e2b0:	bf00      	nop
 800e2b2:	e7fd      	b.n	800e2b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2b4:	4b07      	ldr	r3, [pc, #28]	@ (800e2d4 <vTaskPlaceOnEventList+0x48>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	3318      	adds	r3, #24
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7fe fa0a 	bl	800c6d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2c2:	2101      	movs	r1, #1
 800e2c4:	6838      	ldr	r0, [r7, #0]
 800e2c6:	f000 ff49 	bl	800f15c <prvAddCurrentTaskToDelayedList>
}
 800e2ca:	bf00      	nop
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	2001cad0 	.word	0x2001cad0

0800e2d8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b086      	sub	sp, #24
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10b      	bne.n	800e302 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	617b      	str	r3, [r7, #20]
}
 800e2fc:	bf00      	nop
 800e2fe:	bf00      	nop
 800e300:	e7fd      	b.n	800e2fe <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e302:	4b12      	ldr	r3, [pc, #72]	@ (800e34c <vTaskPlaceOnUnorderedEventList+0x74>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10b      	bne.n	800e322 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	613b      	str	r3, [r7, #16]
}
 800e31c:	bf00      	nop
 800e31e:	bf00      	nop
 800e320:	e7fd      	b.n	800e31e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e322:	4b0b      	ldr	r3, [pc, #44]	@ (800e350 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	68ba      	ldr	r2, [r7, #8]
 800e328:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e32c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e32e:	4b08      	ldr	r3, [pc, #32]	@ (800e350 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	3318      	adds	r3, #24
 800e334:	4619      	mov	r1, r3
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f7fe f9a9 	bl	800c68e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e33c:	2101      	movs	r1, #1
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 ff0c 	bl	800f15c <prvAddCurrentTaskToDelayedList>
}
 800e344:	bf00      	nop
 800e346:	3718      	adds	r7, #24
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	2001cbf8 	.word	0x2001cbf8
 800e350:	2001cad0 	.word	0x2001cad0

0800e354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10b      	bne.n	800e37e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	617b      	str	r3, [r7, #20]
}
 800e378:	bf00      	nop
 800e37a:	bf00      	nop
 800e37c:	e7fd      	b.n	800e37a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e37e:	4b0a      	ldr	r3, [pc, #40]	@ (800e3a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3318      	adds	r3, #24
 800e384:	4619      	mov	r1, r3
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f7fe f981 	bl	800c68e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d002      	beq.n	800e398 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e392:	f04f 33ff 	mov.w	r3, #4294967295
 800e396:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e398:	6879      	ldr	r1, [r7, #4]
 800e39a:	68b8      	ldr	r0, [r7, #8]
 800e39c:	f000 fede 	bl	800f15c <prvAddCurrentTaskToDelayedList>
	}
 800e3a0:	bf00      	nop
 800e3a2:	3718      	adds	r7, #24
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	2001cad0 	.word	0x2001cad0

0800e3ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d10b      	bne.n	800e3da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c6:	f383 8811 	msr	BASEPRI, r3
 800e3ca:	f3bf 8f6f 	isb	sy
 800e3ce:	f3bf 8f4f 	dsb	sy
 800e3d2:	60fb      	str	r3, [r7, #12]
}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop
 800e3d8:	e7fd      	b.n	800e3d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	3318      	adds	r3, #24
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fe f9b2 	bl	800c748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e45c <xTaskRemoveFromEventList+0xb0>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d11c      	bne.n	800e426 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	3304      	adds	r3, #4
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fe f9a9 	bl	800c748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	409a      	lsls	r2, r3
 800e3fe:	4b18      	ldr	r3, [pc, #96]	@ (800e460 <xTaskRemoveFromEventList+0xb4>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4313      	orrs	r3, r2
 800e404:	4a16      	ldr	r2, [pc, #88]	@ (800e460 <xTaskRemoveFromEventList+0xb4>)
 800e406:	6013      	str	r3, [r2, #0]
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e40c:	4613      	mov	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	4413      	add	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4a13      	ldr	r2, [pc, #76]	@ (800e464 <xTaskRemoveFromEventList+0xb8>)
 800e416:	441a      	add	r2, r3
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	3304      	adds	r3, #4
 800e41c:	4619      	mov	r1, r3
 800e41e:	4610      	mov	r0, r2
 800e420:	f7fe f935 	bl	800c68e <vListInsertEnd>
 800e424:	e005      	b.n	800e432 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	3318      	adds	r3, #24
 800e42a:	4619      	mov	r1, r3
 800e42c:	480e      	ldr	r0, [pc, #56]	@ (800e468 <xTaskRemoveFromEventList+0xbc>)
 800e42e:	f7fe f92e 	bl	800c68e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e436:	4b0d      	ldr	r3, [pc, #52]	@ (800e46c <xTaskRemoveFromEventList+0xc0>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d905      	bls.n	800e44c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e440:	2301      	movs	r3, #1
 800e442:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e444:	4b0a      	ldr	r3, [pc, #40]	@ (800e470 <xTaskRemoveFromEventList+0xc4>)
 800e446:	2201      	movs	r2, #1
 800e448:	601a      	str	r2, [r3, #0]
 800e44a:	e001      	b.n	800e450 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e44c:	2300      	movs	r3, #0
 800e44e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e450:	697b      	ldr	r3, [r7, #20]
}
 800e452:	4618      	mov	r0, r3
 800e454:	3718      	adds	r7, #24
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	2001cbf8 	.word	0x2001cbf8
 800e460:	2001cbd8 	.word	0x2001cbd8
 800e464:	2001cad4 	.word	0x2001cad4
 800e468:	2001cb90 	.word	0x2001cb90
 800e46c:	2001cad0 	.word	0x2001cad0
 800e470:	2001cbe4 	.word	0x2001cbe4

0800e474 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e47e:	4b2a      	ldr	r3, [pc, #168]	@ (800e528 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d10b      	bne.n	800e49e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	613b      	str	r3, [r7, #16]
}
 800e498:	bf00      	nop
 800e49a:	bf00      	nop
 800e49c:	e7fd      	b.n	800e49a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10b      	bne.n	800e4cc <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	60fb      	str	r3, [r7, #12]
}
 800e4c6:	bf00      	nop
 800e4c8:	bf00      	nop
 800e4ca:	e7fd      	b.n	800e4c8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7fe f93b 	bl	800c748 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	3304      	adds	r3, #4
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe f936 	bl	800c748 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	409a      	lsls	r2, r3
 800e4e4:	4b11      	ldr	r3, [pc, #68]	@ (800e52c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	4a10      	ldr	r2, [pc, #64]	@ (800e52c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e4ec:	6013      	str	r3, [r2, #0]
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	4413      	add	r3, r2
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4a0d      	ldr	r2, [pc, #52]	@ (800e530 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e4fc:	441a      	add	r2, r3
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	3304      	adds	r3, #4
 800e502:	4619      	mov	r1, r3
 800e504:	4610      	mov	r0, r2
 800e506:	f7fe f8c2 	bl	800c68e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e50e:	4b09      	ldr	r3, [pc, #36]	@ (800e534 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e514:	429a      	cmp	r2, r3
 800e516:	d902      	bls.n	800e51e <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e518:	4b07      	ldr	r3, [pc, #28]	@ (800e538 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e51a:	2201      	movs	r2, #1
 800e51c:	601a      	str	r2, [r3, #0]
	}
}
 800e51e:	bf00      	nop
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	2001cbf8 	.word	0x2001cbf8
 800e52c:	2001cbd8 	.word	0x2001cbd8
 800e530:	2001cad4 	.word	0x2001cad4
 800e534:	2001cad0 	.word	0x2001cad0
 800e538:	2001cbe4 	.word	0x2001cbe4

0800e53c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e544:	4b06      	ldr	r3, [pc, #24]	@ (800e560 <vTaskInternalSetTimeOutState+0x24>)
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e54c:	4b05      	ldr	r3, [pc, #20]	@ (800e564 <vTaskInternalSetTimeOutState+0x28>)
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	605a      	str	r2, [r3, #4]
}
 800e554:	bf00      	nop
 800e556:	370c      	adds	r7, #12
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	2001cbe8 	.word	0x2001cbe8
 800e564:	2001cbd4 	.word	0x2001cbd4

0800e568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b088      	sub	sp, #32
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d10b      	bne.n	800e590 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57c:	f383 8811 	msr	BASEPRI, r3
 800e580:	f3bf 8f6f 	isb	sy
 800e584:	f3bf 8f4f 	dsb	sy
 800e588:	613b      	str	r3, [r7, #16]
}
 800e58a:	bf00      	nop
 800e58c:	bf00      	nop
 800e58e:	e7fd      	b.n	800e58c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d10b      	bne.n	800e5ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e59a:	f383 8811 	msr	BASEPRI, r3
 800e59e:	f3bf 8f6f 	isb	sy
 800e5a2:	f3bf 8f4f 	dsb	sy
 800e5a6:	60fb      	str	r3, [r7, #12]
}
 800e5a8:	bf00      	nop
 800e5aa:	bf00      	nop
 800e5ac:	e7fd      	b.n	800e5aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e5ae:	f7fe fa23 	bl	800c9f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800e628 <xTaskCheckForTimeOut+0xc0>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	69ba      	ldr	r2, [r7, #24]
 800e5be:	1ad3      	subs	r3, r2, r3
 800e5c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ca:	d102      	bne.n	800e5d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	61fb      	str	r3, [r7, #28]
 800e5d0:	e023      	b.n	800e61a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	4b15      	ldr	r3, [pc, #84]	@ (800e62c <xTaskCheckForTimeOut+0xc4>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d007      	beq.n	800e5ee <xTaskCheckForTimeOut+0x86>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	69ba      	ldr	r2, [r7, #24]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d302      	bcc.n	800e5ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	61fb      	str	r3, [r7, #28]
 800e5ec:	e015      	b.n	800e61a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	697a      	ldr	r2, [r7, #20]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d20b      	bcs.n	800e610 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	1ad2      	subs	r2, r2, r3
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7ff ff99 	bl	800e53c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e60a:	2300      	movs	r3, #0
 800e60c:	61fb      	str	r3, [r7, #28]
 800e60e:	e004      	b.n	800e61a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	2200      	movs	r2, #0
 800e614:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e616:	2301      	movs	r3, #1
 800e618:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e61a:	f7fe fa1f 	bl	800ca5c <vPortExitCritical>

	return xReturn;
 800e61e:	69fb      	ldr	r3, [r7, #28]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3720      	adds	r7, #32
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	2001cbd4 	.word	0x2001cbd4
 800e62c:	2001cbe8 	.word	0x2001cbe8

0800e630 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e630:	b480      	push	{r7}
 800e632:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e634:	4b03      	ldr	r3, [pc, #12]	@ (800e644 <vTaskMissedYield+0x14>)
 800e636:	2201      	movs	r2, #1
 800e638:	601a      	str	r2, [r3, #0]
}
 800e63a:	bf00      	nop
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	2001cbe4 	.word	0x2001cbe4

0800e648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e650:	f000 f852 	bl	800e6f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e654:	4b06      	ldr	r3, [pc, #24]	@ (800e670 <prvIdleTask+0x28>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d9f9      	bls.n	800e650 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e65c:	4b05      	ldr	r3, [pc, #20]	@ (800e674 <prvIdleTask+0x2c>)
 800e65e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	f3bf 8f4f 	dsb	sy
 800e668:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e66c:	e7f0      	b.n	800e650 <prvIdleTask+0x8>
 800e66e:	bf00      	nop
 800e670:	2001cad4 	.word	0x2001cad4
 800e674:	e000ed04 	.word	0xe000ed04

0800e678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e67e:	2300      	movs	r3, #0
 800e680:	607b      	str	r3, [r7, #4]
 800e682:	e00c      	b.n	800e69e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	4613      	mov	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	4413      	add	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4a12      	ldr	r2, [pc, #72]	@ (800e6d8 <prvInitialiseTaskLists+0x60>)
 800e690:	4413      	add	r3, r2
 800e692:	4618      	mov	r0, r3
 800e694:	f7fd ffce 	bl	800c634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	3301      	adds	r3, #1
 800e69c:	607b      	str	r3, [r7, #4]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2b06      	cmp	r3, #6
 800e6a2:	d9ef      	bls.n	800e684 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e6a4:	480d      	ldr	r0, [pc, #52]	@ (800e6dc <prvInitialiseTaskLists+0x64>)
 800e6a6:	f7fd ffc5 	bl	800c634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e6aa:	480d      	ldr	r0, [pc, #52]	@ (800e6e0 <prvInitialiseTaskLists+0x68>)
 800e6ac:	f7fd ffc2 	bl	800c634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e6b0:	480c      	ldr	r0, [pc, #48]	@ (800e6e4 <prvInitialiseTaskLists+0x6c>)
 800e6b2:	f7fd ffbf 	bl	800c634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e6b6:	480c      	ldr	r0, [pc, #48]	@ (800e6e8 <prvInitialiseTaskLists+0x70>)
 800e6b8:	f7fd ffbc 	bl	800c634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e6bc:	480b      	ldr	r0, [pc, #44]	@ (800e6ec <prvInitialiseTaskLists+0x74>)
 800e6be:	f7fd ffb9 	bl	800c634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e6f0 <prvInitialiseTaskLists+0x78>)
 800e6c4:	4a05      	ldr	r2, [pc, #20]	@ (800e6dc <prvInitialiseTaskLists+0x64>)
 800e6c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e6f4 <prvInitialiseTaskLists+0x7c>)
 800e6ca:	4a05      	ldr	r2, [pc, #20]	@ (800e6e0 <prvInitialiseTaskLists+0x68>)
 800e6cc:	601a      	str	r2, [r3, #0]
}
 800e6ce:	bf00      	nop
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	2001cad4 	.word	0x2001cad4
 800e6dc:	2001cb60 	.word	0x2001cb60
 800e6e0:	2001cb74 	.word	0x2001cb74
 800e6e4:	2001cb90 	.word	0x2001cb90
 800e6e8:	2001cba4 	.word	0x2001cba4
 800e6ec:	2001cbbc 	.word	0x2001cbbc
 800e6f0:	2001cb88 	.word	0x2001cb88
 800e6f4:	2001cb8c 	.word	0x2001cb8c

0800e6f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6fe:	e019      	b.n	800e734 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e700:	f7fe f97a 	bl	800c9f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e704:	4b10      	ldr	r3, [pc, #64]	@ (800e748 <prvCheckTasksWaitingTermination+0x50>)
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	3304      	adds	r3, #4
 800e710:	4618      	mov	r0, r3
 800e712:	f7fe f819 	bl	800c748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e716:	4b0d      	ldr	r3, [pc, #52]	@ (800e74c <prvCheckTasksWaitingTermination+0x54>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3b01      	subs	r3, #1
 800e71c:	4a0b      	ldr	r2, [pc, #44]	@ (800e74c <prvCheckTasksWaitingTermination+0x54>)
 800e71e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e720:	4b0b      	ldr	r3, [pc, #44]	@ (800e750 <prvCheckTasksWaitingTermination+0x58>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3b01      	subs	r3, #1
 800e726:	4a0a      	ldr	r2, [pc, #40]	@ (800e750 <prvCheckTasksWaitingTermination+0x58>)
 800e728:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e72a:	f7fe f997 	bl	800ca5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 f810 	bl	800e754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e734:	4b06      	ldr	r3, [pc, #24]	@ (800e750 <prvCheckTasksWaitingTermination+0x58>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1e1      	bne.n	800e700 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e73c:	bf00      	nop
 800e73e:	bf00      	nop
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	2001cba4 	.word	0x2001cba4
 800e74c:	2001cbd0 	.word	0x2001cbd0
 800e750:	2001cbb8 	.word	0x2001cbb8

0800e754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e762:	2b00      	cmp	r3, #0
 800e764:	d108      	bne.n	800e778 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fd fe42 	bl	800c3f4 <vPortFree>
				vPortFree( pxTCB );
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7fd fe3f 	bl	800c3f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e776:	e019      	b.n	800e7ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d103      	bne.n	800e78a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f7fd fe36 	bl	800c3f4 <vPortFree>
	}
 800e788:	e010      	b.n	800e7ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e790:	2b02      	cmp	r3, #2
 800e792:	d00b      	beq.n	800e7ac <prvDeleteTCB+0x58>
	__asm volatile
 800e794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e798:	f383 8811 	msr	BASEPRI, r3
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	f3bf 8f4f 	dsb	sy
 800e7a4:	60fb      	str	r3, [r7, #12]
}
 800e7a6:	bf00      	nop
 800e7a8:	bf00      	nop
 800e7aa:	e7fd      	b.n	800e7a8 <prvDeleteTCB+0x54>
	}
 800e7ac:	bf00      	nop
 800e7ae:	3710      	adds	r7, #16
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e7ec <prvResetNextTaskUnblockTime+0x38>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d104      	bne.n	800e7ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e7cc:	e008      	b.n	800e7e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ce:	4b07      	ldr	r3, [pc, #28]	@ (800e7ec <prvResetNextTaskUnblockTime+0x38>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	4a04      	ldr	r2, [pc, #16]	@ (800e7f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e7de:	6013      	str	r3, [r2, #0]
}
 800e7e0:	bf00      	nop
 800e7e2:	370c      	adds	r7, #12
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	2001cb88 	.word	0x2001cb88
 800e7f0:	2001cbf0 	.word	0x2001cbf0

0800e7f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e7fa:	4b05      	ldr	r3, [pc, #20]	@ (800e810 <xTaskGetCurrentTaskHandle+0x1c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e800:	687b      	ldr	r3, [r7, #4]
	}
 800e802:	4618      	mov	r0, r3
 800e804:	370c      	adds	r7, #12
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	2001cad0 	.word	0x2001cad0

0800e814 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e81a:	4b0b      	ldr	r3, [pc, #44]	@ (800e848 <xTaskGetSchedulerState+0x34>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d102      	bne.n	800e828 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e822:	2301      	movs	r3, #1
 800e824:	607b      	str	r3, [r7, #4]
 800e826:	e008      	b.n	800e83a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e828:	4b08      	ldr	r3, [pc, #32]	@ (800e84c <xTaskGetSchedulerState+0x38>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d102      	bne.n	800e836 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e830:	2302      	movs	r3, #2
 800e832:	607b      	str	r3, [r7, #4]
 800e834:	e001      	b.n	800e83a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e836:	2300      	movs	r3, #0
 800e838:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e83a:	687b      	ldr	r3, [r7, #4]
	}
 800e83c:	4618      	mov	r0, r3
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr
 800e848:	2001cbdc 	.word	0x2001cbdc
 800e84c:	2001cbf8 	.word	0x2001cbf8

0800e850 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e85c:	2300      	movs	r3, #0
 800e85e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d05e      	beq.n	800e924 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e86a:	4b31      	ldr	r3, [pc, #196]	@ (800e930 <xTaskPriorityInherit+0xe0>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e870:	429a      	cmp	r2, r3
 800e872:	d24e      	bcs.n	800e912 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	699b      	ldr	r3, [r3, #24]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	db06      	blt.n	800e88a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e87c:	4b2c      	ldr	r3, [pc, #176]	@ (800e930 <xTaskPriorityInherit+0xe0>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e882:	f1c3 0207 	rsb	r2, r3, #7
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	6959      	ldr	r1, [r3, #20]
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e892:	4613      	mov	r3, r2
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	4413      	add	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4a26      	ldr	r2, [pc, #152]	@ (800e934 <xTaskPriorityInherit+0xe4>)
 800e89c:	4413      	add	r3, r2
 800e89e:	4299      	cmp	r1, r3
 800e8a0:	d12f      	bne.n	800e902 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	3304      	adds	r3, #4
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fd ff4e 	bl	800c748 <uxListRemove>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d10a      	bne.n	800e8c8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8bc:	43da      	mvns	r2, r3
 800e8be:	4b1e      	ldr	r3, [pc, #120]	@ (800e938 <xTaskPriorityInherit+0xe8>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4013      	ands	r3, r2
 800e8c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e938 <xTaskPriorityInherit+0xe8>)
 800e8c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e8c8:	4b19      	ldr	r3, [pc, #100]	@ (800e930 <xTaskPriorityInherit+0xe0>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	409a      	lsls	r2, r3
 800e8da:	4b17      	ldr	r3, [pc, #92]	@ (800e938 <xTaskPriorityInherit+0xe8>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	4a15      	ldr	r2, [pc, #84]	@ (800e938 <xTaskPriorityInherit+0xe8>)
 800e8e2:	6013      	str	r3, [r2, #0]
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4413      	add	r3, r2
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	4a10      	ldr	r2, [pc, #64]	@ (800e934 <xTaskPriorityInherit+0xe4>)
 800e8f2:	441a      	add	r2, r3
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	4610      	mov	r0, r2
 800e8fc:	f7fd fec7 	bl	800c68e <vListInsertEnd>
 800e900:	e004      	b.n	800e90c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e902:	4b0b      	ldr	r3, [pc, #44]	@ (800e930 <xTaskPriorityInherit+0xe0>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e90c:	2301      	movs	r3, #1
 800e90e:	60fb      	str	r3, [r7, #12]
 800e910:	e008      	b.n	800e924 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e916:	4b06      	ldr	r3, [pc, #24]	@ (800e930 <xTaskPriorityInherit+0xe0>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d201      	bcs.n	800e924 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e920:	2301      	movs	r3, #1
 800e922:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e924:	68fb      	ldr	r3, [r7, #12]
	}
 800e926:	4618      	mov	r0, r3
 800e928:	3710      	adds	r7, #16
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	2001cad0 	.word	0x2001cad0
 800e934:	2001cad4 	.word	0x2001cad4
 800e938:	2001cbd8 	.word	0x2001cbd8

0800e93c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e948:	2300      	movs	r3, #0
 800e94a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d070      	beq.n	800ea34 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e952:	4b3b      	ldr	r3, [pc, #236]	@ (800ea40 <xTaskPriorityDisinherit+0x104>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	693a      	ldr	r2, [r7, #16]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d00b      	beq.n	800e974 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e960:	f383 8811 	msr	BASEPRI, r3
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	60fb      	str	r3, [r7, #12]
}
 800e96e:	bf00      	nop
 800e970:	bf00      	nop
 800e972:	e7fd      	b.n	800e970 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10b      	bne.n	800e994 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	60bb      	str	r3, [r7, #8]
}
 800e98e:	bf00      	nop
 800e990:	bf00      	nop
 800e992:	e7fd      	b.n	800e990 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e998:	1e5a      	subs	r2, r3, #1
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d044      	beq.n	800ea34 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d140      	bne.n	800ea34 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fd fec6 	bl	800c748 <uxListRemove>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d115      	bne.n	800e9ee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9c6:	491f      	ldr	r1, [pc, #124]	@ (800ea44 <xTaskPriorityDisinherit+0x108>)
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	440b      	add	r3, r1
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d10a      	bne.n	800e9ee <xTaskPriorityDisinherit+0xb2>
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9dc:	2201      	movs	r2, #1
 800e9de:	fa02 f303 	lsl.w	r3, r2, r3
 800e9e2:	43da      	mvns	r2, r3
 800e9e4:	4b18      	ldr	r3, [pc, #96]	@ (800ea48 <xTaskPriorityDisinherit+0x10c>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4013      	ands	r3, r2
 800e9ea:	4a17      	ldr	r2, [pc, #92]	@ (800ea48 <xTaskPriorityDisinherit+0x10c>)
 800e9ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9fa:	f1c3 0207 	rsb	r2, r3, #7
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea06:	2201      	movs	r2, #1
 800ea08:	409a      	lsls	r2, r3
 800ea0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ea48 <xTaskPriorityDisinherit+0x10c>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4313      	orrs	r3, r2
 800ea10:	4a0d      	ldr	r2, [pc, #52]	@ (800ea48 <xTaskPriorityDisinherit+0x10c>)
 800ea12:	6013      	str	r3, [r2, #0]
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea18:	4613      	mov	r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	4413      	add	r3, r2
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	4a08      	ldr	r2, [pc, #32]	@ (800ea44 <xTaskPriorityDisinherit+0x108>)
 800ea22:	441a      	add	r2, r3
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	3304      	adds	r3, #4
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4610      	mov	r0, r2
 800ea2c:	f7fd fe2f 	bl	800c68e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea30:	2301      	movs	r3, #1
 800ea32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea34:	697b      	ldr	r3, [r7, #20]
	}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3718      	adds	r7, #24
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	2001cad0 	.word	0x2001cad0
 800ea44:	2001cad4 	.word	0x2001cad4
 800ea48:	2001cbd8 	.word	0x2001cbd8

0800ea4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b088      	sub	sp, #32
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d079      	beq.n	800eb58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d10b      	bne.n	800ea84 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ea6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	60fb      	str	r3, [r7, #12]
}
 800ea7e:	bf00      	nop
 800ea80:	bf00      	nop
 800ea82:	e7fd      	b.n	800ea80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea88:	683a      	ldr	r2, [r7, #0]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d902      	bls.n	800ea94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	61fb      	str	r3, [r7, #28]
 800ea92:	e002      	b.n	800ea9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea9e:	69fa      	ldr	r2, [r7, #28]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d059      	beq.n	800eb58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eaa8:	697a      	ldr	r2, [r7, #20]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d154      	bne.n	800eb58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eaae:	4b2c      	ldr	r3, [pc, #176]	@ (800eb60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	69ba      	ldr	r2, [r7, #24]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d10b      	bne.n	800ead0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800eab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eabc:	f383 8811 	msr	BASEPRI, r3
 800eac0:	f3bf 8f6f 	isb	sy
 800eac4:	f3bf 8f4f 	dsb	sy
 800eac8:	60bb      	str	r3, [r7, #8]
}
 800eaca:	bf00      	nop
 800eacc:	bf00      	nop
 800eace:	e7fd      	b.n	800eacc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	69fa      	ldr	r2, [r7, #28]
 800eada:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	db04      	blt.n	800eaee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	f1c3 0207 	rsb	r2, r3, #7
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	6959      	ldr	r1, [r3, #20]
 800eaf2:	693a      	ldr	r2, [r7, #16]
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	4413      	add	r3, r2
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	4a19      	ldr	r2, [pc, #100]	@ (800eb64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eafe:	4413      	add	r3, r2
 800eb00:	4299      	cmp	r1, r3
 800eb02:	d129      	bne.n	800eb58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	3304      	adds	r3, #4
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fd fe1d 	bl	800c748 <uxListRemove>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d10a      	bne.n	800eb2a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800eb14:	69bb      	ldr	r3, [r7, #24]
 800eb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb18:	2201      	movs	r2, #1
 800eb1a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb1e:	43da      	mvns	r2, r3
 800eb20:	4b11      	ldr	r3, [pc, #68]	@ (800eb68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4013      	ands	r3, r2
 800eb26:	4a10      	ldr	r2, [pc, #64]	@ (800eb68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eb28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb2e:	2201      	movs	r2, #1
 800eb30:	409a      	lsls	r2, r3
 800eb32:	4b0d      	ldr	r3, [pc, #52]	@ (800eb68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	4a0b      	ldr	r2, [pc, #44]	@ (800eb68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800eb3a:	6013      	str	r3, [r2, #0]
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb40:	4613      	mov	r3, r2
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	4413      	add	r3, r2
 800eb46:	009b      	lsls	r3, r3, #2
 800eb48:	4a06      	ldr	r2, [pc, #24]	@ (800eb64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb4a:	441a      	add	r2, r3
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	4619      	mov	r1, r3
 800eb52:	4610      	mov	r0, r2
 800eb54:	f7fd fd9b 	bl	800c68e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb58:	bf00      	nop
 800eb5a:	3720      	adds	r7, #32
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	2001cad0 	.word	0x2001cad0
 800eb64:	2001cad4 	.word	0x2001cad4
 800eb68:	2001cbd8 	.word	0x2001cbd8

0800eb6c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800eb72:	4b09      	ldr	r3, [pc, #36]	@ (800eb98 <uxTaskResetEventItemValue+0x2c>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	699b      	ldr	r3, [r3, #24]
 800eb78:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb7a:	4b07      	ldr	r3, [pc, #28]	@ (800eb98 <uxTaskResetEventItemValue+0x2c>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb80:	4b05      	ldr	r3, [pc, #20]	@ (800eb98 <uxTaskResetEventItemValue+0x2c>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f1c2 0207 	rsb	r2, r2, #7
 800eb88:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800eb8a:	687b      	ldr	r3, [r7, #4]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	2001cad0 	.word	0x2001cad0

0800eb9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eb9c:	b480      	push	{r7}
 800eb9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eba0:	4b07      	ldr	r3, [pc, #28]	@ (800ebc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d004      	beq.n	800ebb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eba8:	4b05      	ldr	r3, [pc, #20]	@ (800ebc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ebae:	3201      	adds	r2, #1
 800ebb0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ebb2:	4b03      	ldr	r3, [pc, #12]	@ (800ebc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
	}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	2001cad0 	.word	0x2001cad0

0800ebc4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ebce:	f7fd ff13 	bl	800c9f8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ebd2:	4b1e      	ldr	r3, [pc, #120]	@ (800ec4c <ulTaskNotifyTake+0x88>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d113      	bne.n	800ec04 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ebdc:	4b1b      	ldr	r3, [pc, #108]	@ (800ec4c <ulTaskNotifyTake+0x88>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00b      	beq.n	800ec04 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebec:	2101      	movs	r1, #1
 800ebee:	6838      	ldr	r0, [r7, #0]
 800ebf0:	f000 fab4 	bl	800f15c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ebf4:	4b16      	ldr	r3, [pc, #88]	@ (800ec50 <ulTaskNotifyTake+0x8c>)
 800ebf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebfa:	601a      	str	r2, [r3, #0]
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ec04:	f7fd ff2a 	bl	800ca5c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ec08:	f7fd fef6 	bl	800c9f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ec0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec4c <ulTaskNotifyTake+0x88>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec12:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00c      	beq.n	800ec34 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d004      	beq.n	800ec2a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ec20:	4b0a      	ldr	r3, [pc, #40]	@ (800ec4c <ulTaskNotifyTake+0x88>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	2200      	movs	r2, #0
 800ec26:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ec28:	e004      	b.n	800ec34 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ec2a:	4b08      	ldr	r3, [pc, #32]	@ (800ec4c <ulTaskNotifyTake+0x88>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	3a01      	subs	r2, #1
 800ec32:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec34:	4b05      	ldr	r3, [pc, #20]	@ (800ec4c <ulTaskNotifyTake+0x88>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800ec3e:	f7fd ff0d 	bl	800ca5c <vPortExitCritical>

		return ulReturn;
 800ec42:	68fb      	ldr	r3, [r7, #12]
	}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3710      	adds	r7, #16
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	2001cad0 	.word	0x2001cad0
 800ec50:	e000ed04 	.word	0xe000ed04

0800ec54 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
 800ec60:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ec62:	f7fd fec9 	bl	800c9f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ec66:	4b26      	ldr	r3, [pc, #152]	@ (800ed00 <xTaskNotifyWait+0xac>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d01a      	beq.n	800ecaa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ec74:	4b22      	ldr	r3, [pc, #136]	@ (800ed00 <xTaskNotifyWait+0xac>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	43d2      	mvns	r2, r2
 800ec7e:	400a      	ands	r2, r1
 800ec80:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ec82:	4b1f      	ldr	r3, [pc, #124]	@ (800ed00 <xTaskNotifyWait+0xac>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2201      	movs	r2, #1
 800ec88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00b      	beq.n	800ecaa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec92:	2101      	movs	r1, #1
 800ec94:	6838      	ldr	r0, [r7, #0]
 800ec96:	f000 fa61 	bl	800f15c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ec9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ed04 <xTaskNotifyWait+0xb0>)
 800ec9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eca0:	601a      	str	r2, [r3, #0]
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ecaa:	f7fd fed7 	bl	800ca5c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ecae:	f7fd fea3 	bl	800c9f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d004      	beq.n	800ecc2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ecb8:	4b11      	ldr	r3, [pc, #68]	@ (800ed00 <xTaskNotifyWait+0xac>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ecc2:	4b0f      	ldr	r3, [pc, #60]	@ (800ed00 <xTaskNotifyWait+0xac>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d002      	beq.n	800ecd6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	617b      	str	r3, [r7, #20]
 800ecd4:	e008      	b.n	800ece8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ecd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ed00 <xTaskNotifyWait+0xac>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ecdc:	68ba      	ldr	r2, [r7, #8]
 800ecde:	43d2      	mvns	r2, r2
 800ece0:	400a      	ands	r2, r1
 800ece2:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 800ece4:	2301      	movs	r3, #1
 800ece6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ece8:	4b05      	ldr	r3, [pc, #20]	@ (800ed00 <xTaskNotifyWait+0xac>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2200      	movs	r2, #0
 800ecee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800ecf2:	f7fd feb3 	bl	800ca5c <vPortExitCritical>

		return xReturn;
 800ecf6:	697b      	ldr	r3, [r7, #20]
	}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3718      	adds	r7, #24
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	2001cad0 	.word	0x2001cad0
 800ed04:	e000ed04 	.word	0xe000ed04

0800ed08 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b08a      	sub	sp, #40	@ 0x28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	603b      	str	r3, [r7, #0]
 800ed14:	4613      	mov	r3, r2
 800ed16:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10b      	bne.n	800ed3a <xTaskGenericNotify+0x32>
	__asm volatile
 800ed22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	61bb      	str	r3, [r7, #24]
}
 800ed34:	bf00      	nop
 800ed36:	bf00      	nop
 800ed38:	e7fd      	b.n	800ed36 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ed3e:	f7fd fe5b 	bl	800c9f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d003      	beq.n	800ed50 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ed48:	6a3b      	ldr	r3, [r7, #32]
 800ed4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ed50:	6a3b      	ldr	r3, [r7, #32]
 800ed52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ed56:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ed58:	6a3b      	ldr	r3, [r7, #32]
 800ed5a:	2202      	movs	r2, #2
 800ed5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800ed60:	79fb      	ldrb	r3, [r7, #7]
 800ed62:	2b04      	cmp	r3, #4
 800ed64:	d827      	bhi.n	800edb6 <xTaskGenericNotify+0xae>
 800ed66:	a201      	add	r2, pc, #4	@ (adr r2, 800ed6c <xTaskGenericNotify+0x64>)
 800ed68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed6c:	0800edd9 	.word	0x0800edd9
 800ed70:	0800ed81 	.word	0x0800ed81
 800ed74:	0800ed8f 	.word	0x0800ed8f
 800ed78:	0800ed9b 	.word	0x0800ed9b
 800ed7c:	0800eda3 	.word	0x0800eda3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ed80:	6a3b      	ldr	r3, [r7, #32]
 800ed82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	431a      	orrs	r2, r3
 800ed88:	6a3b      	ldr	r3, [r7, #32]
 800ed8a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800ed8c:	e027      	b.n	800edde <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed92:	1c5a      	adds	r2, r3, #1
 800ed94:	6a3b      	ldr	r3, [r7, #32]
 800ed96:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800ed98:	e021      	b.n	800edde <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ed9a:	6a3b      	ldr	r3, [r7, #32]
 800ed9c:	68ba      	ldr	r2, [r7, #8]
 800ed9e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800eda0:	e01d      	b.n	800edde <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eda2:	7ffb      	ldrb	r3, [r7, #31]
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d003      	beq.n	800edb0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eda8:	6a3b      	ldr	r3, [r7, #32]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800edae:	e016      	b.n	800edde <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800edb4:	e013      	b.n	800edde <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800edb6:	6a3b      	ldr	r3, [r7, #32]
 800edb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edbe:	d00d      	beq.n	800eddc <xTaskGenericNotify+0xd4>
	__asm volatile
 800edc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc4:	f383 8811 	msr	BASEPRI, r3
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	f3bf 8f4f 	dsb	sy
 800edd0:	617b      	str	r3, [r7, #20]
}
 800edd2:	bf00      	nop
 800edd4:	bf00      	nop
 800edd6:	e7fd      	b.n	800edd4 <xTaskGenericNotify+0xcc>
					break;
 800edd8:	bf00      	nop
 800edda:	e000      	b.n	800edde <xTaskGenericNotify+0xd6>

					break;
 800eddc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800edde:	7ffb      	ldrb	r3, [r7, #31]
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d13a      	bne.n	800ee5a <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	3304      	adds	r3, #4
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fd fcad 	bl	800c748 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800edee:	6a3b      	ldr	r3, [r7, #32]
 800edf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edf2:	2201      	movs	r2, #1
 800edf4:	409a      	lsls	r2, r3
 800edf6:	4b1c      	ldr	r3, [pc, #112]	@ (800ee68 <xTaskGenericNotify+0x160>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	4a1a      	ldr	r2, [pc, #104]	@ (800ee68 <xTaskGenericNotify+0x160>)
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	6a3b      	ldr	r3, [r7, #32]
 800ee02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee04:	4613      	mov	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4413      	add	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	4a17      	ldr	r2, [pc, #92]	@ (800ee6c <xTaskGenericNotify+0x164>)
 800ee0e:	441a      	add	r2, r3
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	3304      	adds	r3, #4
 800ee14:	4619      	mov	r1, r3
 800ee16:	4610      	mov	r0, r2
 800ee18:	f7fd fc39 	bl	800c68e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ee1c:	6a3b      	ldr	r3, [r7, #32]
 800ee1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00b      	beq.n	800ee3c <xTaskGenericNotify+0x134>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	613b      	str	r3, [r7, #16]
}
 800ee36:	bf00      	nop
 800ee38:	bf00      	nop
 800ee3a:	e7fd      	b.n	800ee38 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee40:	4b0b      	ldr	r3, [pc, #44]	@ (800ee70 <xTaskGenericNotify+0x168>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d907      	bls.n	800ee5a <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ee4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ee74 <xTaskGenericNotify+0x16c>)
 800ee4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee50:	601a      	str	r2, [r3, #0]
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee5a:	f7fd fdff 	bl	800ca5c <vPortExitCritical>

		return xReturn;
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3728      	adds	r7, #40	@ 0x28
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	2001cbd8 	.word	0x2001cbd8
 800ee6c:	2001cad4 	.word	0x2001cad4
 800ee70:	2001cad0 	.word	0x2001cad0
 800ee74:	e000ed04 	.word	0xe000ed04

0800ee78 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b08e      	sub	sp, #56	@ 0x38
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	603b      	str	r3, [r7, #0]
 800ee84:	4613      	mov	r3, r2
 800ee86:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10b      	bne.n	800eeaa <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800ee92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee96:	f383 8811 	msr	BASEPRI, r3
 800ee9a:	f3bf 8f6f 	isb	sy
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eea4:	bf00      	nop
 800eea6:	bf00      	nop
 800eea8:	e7fd      	b.n	800eea6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eeaa:	f7fd fe85 	bl	800cbb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800eeb2:	f3ef 8211 	mrs	r2, BASEPRI
 800eeb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeba:	f383 8811 	msr	BASEPRI, r3
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	f3bf 8f4f 	dsb	sy
 800eec6:	623a      	str	r2, [r7, #32]
 800eec8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800eeca:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d003      	beq.n	800eedc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800eed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800eedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eede:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800eee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee8:	2202      	movs	r2, #2
 800eeea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800eeee:	79fb      	ldrb	r3, [r7, #7]
 800eef0:	2b04      	cmp	r3, #4
 800eef2:	d829      	bhi.n	800ef48 <xTaskGenericNotifyFromISR+0xd0>
 800eef4:	a201      	add	r2, pc, #4	@ (adr r2, 800eefc <xTaskGenericNotifyFromISR+0x84>)
 800eef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefa:	bf00      	nop
 800eefc:	0800ef6b 	.word	0x0800ef6b
 800ef00:	0800ef11 	.word	0x0800ef11
 800ef04:	0800ef1f 	.word	0x0800ef1f
 800ef08:	0800ef2b 	.word	0x0800ef2b
 800ef0c:	0800ef33 	.word	0x0800ef33
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ef10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	431a      	orrs	r2, r3
 800ef18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800ef1c:	e028      	b.n	800ef70 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef22:	1c5a      	adds	r2, r3, #1
 800ef24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef26:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800ef28:	e022      	b.n	800ef70 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2c:	68ba      	ldr	r2, [r7, #8]
 800ef2e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800ef30:	e01e      	b.n	800ef70 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ef32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ef36:	2b02      	cmp	r3, #2
 800ef38:	d003      	beq.n	800ef42 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef3c:	68ba      	ldr	r2, [r7, #8]
 800ef3e:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ef40:	e016      	b.n	800ef70 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800ef46:	e013      	b.n	800ef70 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ef48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef50:	d00d      	beq.n	800ef6e <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800ef52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef56:	f383 8811 	msr	BASEPRI, r3
 800ef5a:	f3bf 8f6f 	isb	sy
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	61bb      	str	r3, [r7, #24]
}
 800ef64:	bf00      	nop
 800ef66:	bf00      	nop
 800ef68:	e7fd      	b.n	800ef66 <xTaskGenericNotifyFromISR+0xee>
					break;
 800ef6a:	bf00      	nop
 800ef6c:	e000      	b.n	800ef70 <xTaskGenericNotifyFromISR+0xf8>
					break;
 800ef6e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ef70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d146      	bne.n	800f006 <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ef78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d00b      	beq.n	800ef98 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	617b      	str	r3, [r7, #20]
}
 800ef92:	bf00      	nop
 800ef94:	bf00      	nop
 800ef96:	e7fd      	b.n	800ef94 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef98:	4b20      	ldr	r3, [pc, #128]	@ (800f01c <xTaskGenericNotifyFromISR+0x1a4>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d11c      	bne.n	800efda <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa2:	3304      	adds	r3, #4
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fd fbcf 	bl	800c748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800efaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efae:	2201      	movs	r2, #1
 800efb0:	409a      	lsls	r2, r3
 800efb2:	4b1b      	ldr	r3, [pc, #108]	@ (800f020 <xTaskGenericNotifyFromISR+0x1a8>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	4a19      	ldr	r2, [pc, #100]	@ (800f020 <xTaskGenericNotifyFromISR+0x1a8>)
 800efba:	6013      	str	r3, [r2, #0]
 800efbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efc0:	4613      	mov	r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	4413      	add	r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	4a16      	ldr	r2, [pc, #88]	@ (800f024 <xTaskGenericNotifyFromISR+0x1ac>)
 800efca:	441a      	add	r2, r3
 800efcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efce:	3304      	adds	r3, #4
 800efd0:	4619      	mov	r1, r3
 800efd2:	4610      	mov	r0, r2
 800efd4:	f7fd fb5b 	bl	800c68e <vListInsertEnd>
 800efd8:	e005      	b.n	800efe6 <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800efda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efdc:	3318      	adds	r3, #24
 800efde:	4619      	mov	r1, r3
 800efe0:	4811      	ldr	r0, [pc, #68]	@ (800f028 <xTaskGenericNotifyFromISR+0x1b0>)
 800efe2:	f7fd fb54 	bl	800c68e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800efe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efea:	4b10      	ldr	r3, [pc, #64]	@ (800f02c <xTaskGenericNotifyFromISR+0x1b4>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d908      	bls.n	800f006 <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800eff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d002      	beq.n	800f000 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800effa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800effc:	2201      	movs	r2, #1
 800effe:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f000:	4b0b      	ldr	r3, [pc, #44]	@ (800f030 <xTaskGenericNotifyFromISR+0x1b8>)
 800f002:	2201      	movs	r2, #1
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f008:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	f383 8811 	msr	BASEPRI, r3
}
 800f010:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f014:	4618      	mov	r0, r3
 800f016:	3738      	adds	r7, #56	@ 0x38
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	2001cbf8 	.word	0x2001cbf8
 800f020:	2001cbd8 	.word	0x2001cbd8
 800f024:	2001cad4 	.word	0x2001cad4
 800f028:	2001cb90 	.word	0x2001cb90
 800f02c:	2001cad0 	.word	0x2001cad0
 800f030:	2001cbe4 	.word	0x2001cbe4

0800f034 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f034:	b580      	push	{r7, lr}
 800f036:	b08a      	sub	sp, #40	@ 0x28
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d10b      	bne.n	800f05c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800f044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f048:	f383 8811 	msr	BASEPRI, r3
 800f04c:	f3bf 8f6f 	isb	sy
 800f050:	f3bf 8f4f 	dsb	sy
 800f054:	61bb      	str	r3, [r7, #24]
}
 800f056:	bf00      	nop
 800f058:	bf00      	nop
 800f05a:	e7fd      	b.n	800f058 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f05c:	f7fd fdac 	bl	800cbb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800f064:	f3ef 8211 	mrs	r2, BASEPRI
 800f068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06c:	f383 8811 	msr	BASEPRI, r3
 800f070:	f3bf 8f6f 	isb	sy
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	617a      	str	r2, [r7, #20]
 800f07a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f07c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f07e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f082:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f086:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f08a:	2202      	movs	r2, #2
 800f08c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800f090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f094:	1c5a      	adds	r2, r3, #1
 800f096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f098:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f09a:	7ffb      	ldrb	r3, [r7, #31]
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d146      	bne.n	800f12e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d00b      	beq.n	800f0c0 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800f0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ac:	f383 8811 	msr	BASEPRI, r3
 800f0b0:	f3bf 8f6f 	isb	sy
 800f0b4:	f3bf 8f4f 	dsb	sy
 800f0b8:	60fb      	str	r3, [r7, #12]
}
 800f0ba:	bf00      	nop
 800f0bc:	bf00      	nop
 800f0be:	e7fd      	b.n	800f0bc <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0c0:	4b20      	ldr	r3, [pc, #128]	@ (800f144 <vTaskNotifyGiveFromISR+0x110>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d11c      	bne.n	800f102 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ca:	3304      	adds	r3, #4
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fd fb3b 	bl	800c748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	409a      	lsls	r2, r3
 800f0da:	4b1b      	ldr	r3, [pc, #108]	@ (800f148 <vTaskNotifyGiveFromISR+0x114>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	4a19      	ldr	r2, [pc, #100]	@ (800f148 <vTaskNotifyGiveFromISR+0x114>)
 800f0e2:	6013      	str	r3, [r2, #0]
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	4413      	add	r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	4a16      	ldr	r2, [pc, #88]	@ (800f14c <vTaskNotifyGiveFromISR+0x118>)
 800f0f2:	441a      	add	r2, r3
 800f0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f6:	3304      	adds	r3, #4
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	4610      	mov	r0, r2
 800f0fc:	f7fd fac7 	bl	800c68e <vListInsertEnd>
 800f100:	e005      	b.n	800f10e <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f104:	3318      	adds	r3, #24
 800f106:	4619      	mov	r1, r3
 800f108:	4811      	ldr	r0, [pc, #68]	@ (800f150 <vTaskNotifyGiveFromISR+0x11c>)
 800f10a:	f7fd fac0 	bl	800c68e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f112:	4b10      	ldr	r3, [pc, #64]	@ (800f154 <vTaskNotifyGiveFromISR+0x120>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f118:	429a      	cmp	r2, r3
 800f11a:	d908      	bls.n	800f12e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d002      	beq.n	800f128 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	2201      	movs	r2, #1
 800f126:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f128:	4b0b      	ldr	r3, [pc, #44]	@ (800f158 <vTaskNotifyGiveFromISR+0x124>)
 800f12a:	2201      	movs	r2, #1
 800f12c:	601a      	str	r2, [r3, #0]
 800f12e:	6a3b      	ldr	r3, [r7, #32]
 800f130:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	f383 8811 	msr	BASEPRI, r3
}
 800f138:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800f13a:	bf00      	nop
 800f13c:	3728      	adds	r7, #40	@ 0x28
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	2001cbf8 	.word	0x2001cbf8
 800f148:	2001cbd8 	.word	0x2001cbd8
 800f14c:	2001cad4 	.word	0x2001cad4
 800f150:	2001cb90 	.word	0x2001cb90
 800f154:	2001cad0 	.word	0x2001cad0
 800f158:	2001cbe4 	.word	0x2001cbe4

0800f15c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f166:	4b29      	ldr	r3, [pc, #164]	@ (800f20c <prvAddCurrentTaskToDelayedList+0xb0>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f16c:	4b28      	ldr	r3, [pc, #160]	@ (800f210 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	3304      	adds	r3, #4
 800f172:	4618      	mov	r0, r3
 800f174:	f7fd fae8 	bl	800c748 <uxListRemove>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d10b      	bne.n	800f196 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f17e:	4b24      	ldr	r3, [pc, #144]	@ (800f210 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f184:	2201      	movs	r2, #1
 800f186:	fa02 f303 	lsl.w	r3, r2, r3
 800f18a:	43da      	mvns	r2, r3
 800f18c:	4b21      	ldr	r3, [pc, #132]	@ (800f214 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4013      	ands	r3, r2
 800f192:	4a20      	ldr	r2, [pc, #128]	@ (800f214 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f194:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19c:	d10a      	bne.n	800f1b4 <prvAddCurrentTaskToDelayedList+0x58>
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d007      	beq.n	800f1b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1a4:	4b1a      	ldr	r3, [pc, #104]	@ (800f210 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	481a      	ldr	r0, [pc, #104]	@ (800f218 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f1ae:	f7fd fa6e 	bl	800c68e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1b2:	e026      	b.n	800f202 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1bc:	4b14      	ldr	r3, [pc, #80]	@ (800f210 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68ba      	ldr	r2, [r7, #8]
 800f1c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d209      	bcs.n	800f1e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1cc:	4b13      	ldr	r3, [pc, #76]	@ (800f21c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800f210 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	3304      	adds	r3, #4
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	4610      	mov	r0, r2
 800f1da:	f7fd fa7c 	bl	800c6d6 <vListInsert>
}
 800f1de:	e010      	b.n	800f202 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f220 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	4b0a      	ldr	r3, [pc, #40]	@ (800f210 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	3304      	adds	r3, #4
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	4610      	mov	r0, r2
 800f1ee:	f7fd fa72 	bl	800c6d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f1f2:	4b0c      	ldr	r3, [pc, #48]	@ (800f224 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68ba      	ldr	r2, [r7, #8]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d202      	bcs.n	800f202 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f1fc:	4a09      	ldr	r2, [pc, #36]	@ (800f224 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	6013      	str	r3, [r2, #0]
}
 800f202:	bf00      	nop
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	2001cbd4 	.word	0x2001cbd4
 800f210:	2001cad0 	.word	0x2001cad0
 800f214:	2001cbd8 	.word	0x2001cbd8
 800f218:	2001cbbc 	.word	0x2001cbbc
 800f21c:	2001cb8c 	.word	0x2001cb8c
 800f220:	2001cb88 	.word	0x2001cb88
 800f224:	2001cbf0 	.word	0x2001cbf0

0800f228 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b08a      	sub	sp, #40	@ 0x28
 800f22c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f22e:	2300      	movs	r3, #0
 800f230:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f232:	f000 fb13 	bl	800f85c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f236:	4b1d      	ldr	r3, [pc, #116]	@ (800f2ac <xTimerCreateTimerTask+0x84>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d021      	beq.n	800f282 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f23e:	2300      	movs	r3, #0
 800f240:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f242:	2300      	movs	r3, #0
 800f244:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f246:	1d3a      	adds	r2, r7, #4
 800f248:	f107 0108 	add.w	r1, r7, #8
 800f24c:	f107 030c 	add.w	r3, r7, #12
 800f250:	4618      	mov	r0, r3
 800f252:	f7f2 fb65 	bl	8001920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f256:	6879      	ldr	r1, [r7, #4]
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	68fa      	ldr	r2, [r7, #12]
 800f25c:	9202      	str	r2, [sp, #8]
 800f25e:	9301      	str	r3, [sp, #4]
 800f260:	2302      	movs	r3, #2
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	2300      	movs	r3, #0
 800f266:	460a      	mov	r2, r1
 800f268:	4911      	ldr	r1, [pc, #68]	@ (800f2b0 <xTimerCreateTimerTask+0x88>)
 800f26a:	4812      	ldr	r0, [pc, #72]	@ (800f2b4 <xTimerCreateTimerTask+0x8c>)
 800f26c:	f7fe fbf4 	bl	800da58 <xTaskCreateStatic>
 800f270:	4603      	mov	r3, r0
 800f272:	4a11      	ldr	r2, [pc, #68]	@ (800f2b8 <xTimerCreateTimerTask+0x90>)
 800f274:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f276:	4b10      	ldr	r3, [pc, #64]	@ (800f2b8 <xTimerCreateTimerTask+0x90>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d001      	beq.n	800f282 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f27e:	2301      	movs	r3, #1
 800f280:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10b      	bne.n	800f2a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	613b      	str	r3, [r7, #16]
}
 800f29a:	bf00      	nop
 800f29c:	bf00      	nop
 800f29e:	e7fd      	b.n	800f29c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f2a0:	697b      	ldr	r3, [r7, #20]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3718      	adds	r7, #24
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	2001cc2c 	.word	0x2001cc2c
 800f2b0:	080154d4 	.word	0x080154d4
 800f2b4:	0800f3f5 	.word	0x0800f3f5
 800f2b8:	2001cc30 	.word	0x2001cc30

0800f2bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08a      	sub	sp, #40	@ 0x28
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10b      	bne.n	800f2ec <xTimerGenericCommand+0x30>
	__asm volatile
 800f2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	623b      	str	r3, [r7, #32]
}
 800f2e6:	bf00      	nop
 800f2e8:	bf00      	nop
 800f2ea:	e7fd      	b.n	800f2e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f2ec:	4b19      	ldr	r3, [pc, #100]	@ (800f354 <xTimerGenericCommand+0x98>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d02a      	beq.n	800f34a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	2b05      	cmp	r3, #5
 800f304:	dc18      	bgt.n	800f338 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f306:	f7ff fa85 	bl	800e814 <xTaskGetSchedulerState>
 800f30a:	4603      	mov	r3, r0
 800f30c:	2b02      	cmp	r3, #2
 800f30e:	d109      	bne.n	800f324 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f310:	4b10      	ldr	r3, [pc, #64]	@ (800f354 <xTimerGenericCommand+0x98>)
 800f312:	6818      	ldr	r0, [r3, #0]
 800f314:	f107 0110 	add.w	r1, r7, #16
 800f318:	2300      	movs	r3, #0
 800f31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f31c:	f7fd fe02 	bl	800cf24 <xQueueGenericSend>
 800f320:	6278      	str	r0, [r7, #36]	@ 0x24
 800f322:	e012      	b.n	800f34a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f324:	4b0b      	ldr	r3, [pc, #44]	@ (800f354 <xTimerGenericCommand+0x98>)
 800f326:	6818      	ldr	r0, [r3, #0]
 800f328:	f107 0110 	add.w	r1, r7, #16
 800f32c:	2300      	movs	r3, #0
 800f32e:	2200      	movs	r2, #0
 800f330:	f7fd fdf8 	bl	800cf24 <xQueueGenericSend>
 800f334:	6278      	str	r0, [r7, #36]	@ 0x24
 800f336:	e008      	b.n	800f34a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f338:	4b06      	ldr	r3, [pc, #24]	@ (800f354 <xTimerGenericCommand+0x98>)
 800f33a:	6818      	ldr	r0, [r3, #0]
 800f33c:	f107 0110 	add.w	r1, r7, #16
 800f340:	2300      	movs	r3, #0
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	f7fd fef0 	bl	800d128 <xQueueGenericSendFromISR>
 800f348:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3728      	adds	r7, #40	@ 0x28
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	2001cc2c 	.word	0x2001cc2c

0800f358 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b088      	sub	sp, #32
 800f35c:	af02      	add	r7, sp, #8
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f362:	4b23      	ldr	r3, [pc, #140]	@ (800f3f0 <prvProcessExpiredTimer+0x98>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	3304      	adds	r3, #4
 800f370:	4618      	mov	r0, r3
 800f372:	f7fd f9e9 	bl	800c748 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f37c:	f003 0304 	and.w	r3, r3, #4
 800f380:	2b00      	cmp	r3, #0
 800f382:	d023      	beq.n	800f3cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	699a      	ldr	r2, [r3, #24]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	18d1      	adds	r1, r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	683a      	ldr	r2, [r7, #0]
 800f390:	6978      	ldr	r0, [r7, #20]
 800f392:	f000 f8d5 	bl	800f540 <prvInsertTimerInActiveList>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d020      	beq.n	800f3de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f39c:	2300      	movs	r3, #0
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	2100      	movs	r1, #0
 800f3a6:	6978      	ldr	r0, [r7, #20]
 800f3a8:	f7ff ff88 	bl	800f2bc <xTimerGenericCommand>
 800f3ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d114      	bne.n	800f3de <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3b8:	f383 8811 	msr	BASEPRI, r3
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	60fb      	str	r3, [r7, #12]
}
 800f3c6:	bf00      	nop
 800f3c8:	bf00      	nop
 800f3ca:	e7fd      	b.n	800f3c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f3d2:	f023 0301 	bic.w	r3, r3, #1
 800f3d6:	b2da      	uxtb	r2, r3
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	6a1b      	ldr	r3, [r3, #32]
 800f3e2:	6978      	ldr	r0, [r7, #20]
 800f3e4:	4798      	blx	r3
}
 800f3e6:	bf00      	nop
 800f3e8:	3718      	adds	r7, #24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	2001cc24 	.word	0x2001cc24

0800f3f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f3fc:	f107 0308 	add.w	r3, r7, #8
 800f400:	4618      	mov	r0, r3
 800f402:	f000 f859 	bl	800f4b8 <prvGetNextExpireTime>
 800f406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	4619      	mov	r1, r3
 800f40c:	68f8      	ldr	r0, [r7, #12]
 800f40e:	f000 f805 	bl	800f41c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f412:	f000 f8d7 	bl	800f5c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f416:	bf00      	nop
 800f418:	e7f0      	b.n	800f3fc <prvTimerTask+0x8>
	...

0800f41c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f426:	f7fe fd4d 	bl	800dec4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f42a:	f107 0308 	add.w	r3, r7, #8
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 f866 	bl	800f500 <prvSampleTimeNow>
 800f434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d130      	bne.n	800f49e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d10a      	bne.n	800f458 <prvProcessTimerOrBlockTask+0x3c>
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	429a      	cmp	r2, r3
 800f448:	d806      	bhi.n	800f458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f44a:	f7fe fd49 	bl	800dee0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f44e:	68f9      	ldr	r1, [r7, #12]
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7ff ff81 	bl	800f358 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f456:	e024      	b.n	800f4a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d008      	beq.n	800f470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f45e:	4b13      	ldr	r3, [pc, #76]	@ (800f4ac <prvProcessTimerOrBlockTask+0x90>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d101      	bne.n	800f46c <prvProcessTimerOrBlockTask+0x50>
 800f468:	2301      	movs	r3, #1
 800f46a:	e000      	b.n	800f46e <prvProcessTimerOrBlockTask+0x52>
 800f46c:	2300      	movs	r3, #0
 800f46e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f470:	4b0f      	ldr	r3, [pc, #60]	@ (800f4b0 <prvProcessTimerOrBlockTask+0x94>)
 800f472:	6818      	ldr	r0, [r3, #0]
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	1ad3      	subs	r3, r2, r3
 800f47a:	683a      	ldr	r2, [r7, #0]
 800f47c:	4619      	mov	r1, r3
 800f47e:	f7fe fab7 	bl	800d9f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f482:	f7fe fd2d 	bl	800dee0 <xTaskResumeAll>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d10a      	bne.n	800f4a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f48c:	4b09      	ldr	r3, [pc, #36]	@ (800f4b4 <prvProcessTimerOrBlockTask+0x98>)
 800f48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	f3bf 8f6f 	isb	sy
}
 800f49c:	e001      	b.n	800f4a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f49e:	f7fe fd1f 	bl	800dee0 <xTaskResumeAll>
}
 800f4a2:	bf00      	nop
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	2001cc28 	.word	0x2001cc28
 800f4b0:	2001cc2c 	.word	0x2001cc2c
 800f4b4:	e000ed04 	.word	0xe000ed04

0800f4b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f4c0:	4b0e      	ldr	r3, [pc, #56]	@ (800f4fc <prvGetNextExpireTime+0x44>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d101      	bne.n	800f4ce <prvGetNextExpireTime+0x16>
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	e000      	b.n	800f4d0 <prvGetNextExpireTime+0x18>
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d105      	bne.n	800f4e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f4dc:	4b07      	ldr	r3, [pc, #28]	@ (800f4fc <prvGetNextExpireTime+0x44>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	60fb      	str	r3, [r7, #12]
 800f4e6:	e001      	b.n	800f4ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3714      	adds	r7, #20
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr
 800f4fa:	bf00      	nop
 800f4fc:	2001cc24 	.word	0x2001cc24

0800f500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b084      	sub	sp, #16
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f508:	f7fe fd88 	bl	800e01c <xTaskGetTickCount>
 800f50c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f50e:	4b0b      	ldr	r3, [pc, #44]	@ (800f53c <prvSampleTimeNow+0x3c>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	429a      	cmp	r2, r3
 800f516:	d205      	bcs.n	800f524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f518:	f000 f93a 	bl	800f790 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	601a      	str	r2, [r3, #0]
 800f522:	e002      	b.n	800f52a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2200      	movs	r2, #0
 800f528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f52a:	4a04      	ldr	r2, [pc, #16]	@ (800f53c <prvSampleTimeNow+0x3c>)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f530:	68fb      	ldr	r3, [r7, #12]
}
 800f532:	4618      	mov	r0, r3
 800f534:	3710      	adds	r7, #16
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	2001cc34 	.word	0x2001cc34

0800f540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b086      	sub	sp, #24
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	607a      	str	r2, [r7, #4]
 800f54c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f54e:	2300      	movs	r3, #0
 800f550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f55e:	68ba      	ldr	r2, [r7, #8]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	429a      	cmp	r2, r3
 800f564:	d812      	bhi.n	800f58c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	1ad2      	subs	r2, r2, r3
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	699b      	ldr	r3, [r3, #24]
 800f570:	429a      	cmp	r2, r3
 800f572:	d302      	bcc.n	800f57a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f574:	2301      	movs	r3, #1
 800f576:	617b      	str	r3, [r7, #20]
 800f578:	e01b      	b.n	800f5b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f57a:	4b10      	ldr	r3, [pc, #64]	@ (800f5bc <prvInsertTimerInActiveList+0x7c>)
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	3304      	adds	r3, #4
 800f582:	4619      	mov	r1, r3
 800f584:	4610      	mov	r0, r2
 800f586:	f7fd f8a6 	bl	800c6d6 <vListInsert>
 800f58a:	e012      	b.n	800f5b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	429a      	cmp	r2, r3
 800f592:	d206      	bcs.n	800f5a2 <prvInsertTimerInActiveList+0x62>
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d302      	bcc.n	800f5a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f59c:	2301      	movs	r3, #1
 800f59e:	617b      	str	r3, [r7, #20]
 800f5a0:	e007      	b.n	800f5b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5a2:	4b07      	ldr	r3, [pc, #28]	@ (800f5c0 <prvInsertTimerInActiveList+0x80>)
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	4610      	mov	r0, r2
 800f5ae:	f7fd f892 	bl	800c6d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f5b2:	697b      	ldr	r3, [r7, #20]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3718      	adds	r7, #24
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	2001cc28 	.word	0x2001cc28
 800f5c0:	2001cc24 	.word	0x2001cc24

0800f5c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b08e      	sub	sp, #56	@ 0x38
 800f5c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5ca:	e0ce      	b.n	800f76a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	da19      	bge.n	800f606 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f5d2:	1d3b      	adds	r3, r7, #4
 800f5d4:	3304      	adds	r3, #4
 800f5d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10b      	bne.n	800f5f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	61fb      	str	r3, [r7, #28]
}
 800f5f0:	bf00      	nop
 800f5f2:	bf00      	nop
 800f5f4:	e7fd      	b.n	800f5f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5fc:	6850      	ldr	r0, [r2, #4]
 800f5fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f600:	6892      	ldr	r2, [r2, #8]
 800f602:	4611      	mov	r1, r2
 800f604:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	f2c0 80ae 	blt.w	800f76a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f614:	695b      	ldr	r3, [r3, #20]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d004      	beq.n	800f624 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f61c:	3304      	adds	r3, #4
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fd f892 	bl	800c748 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f624:	463b      	mov	r3, r7
 800f626:	4618      	mov	r0, r3
 800f628:	f7ff ff6a 	bl	800f500 <prvSampleTimeNow>
 800f62c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2b09      	cmp	r3, #9
 800f632:	f200 8097 	bhi.w	800f764 <prvProcessReceivedCommands+0x1a0>
 800f636:	a201      	add	r2, pc, #4	@ (adr r2, 800f63c <prvProcessReceivedCommands+0x78>)
 800f638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f63c:	0800f665 	.word	0x0800f665
 800f640:	0800f665 	.word	0x0800f665
 800f644:	0800f665 	.word	0x0800f665
 800f648:	0800f6db 	.word	0x0800f6db
 800f64c:	0800f6ef 	.word	0x0800f6ef
 800f650:	0800f73b 	.word	0x0800f73b
 800f654:	0800f665 	.word	0x0800f665
 800f658:	0800f665 	.word	0x0800f665
 800f65c:	0800f6db 	.word	0x0800f6db
 800f660:	0800f6ef 	.word	0x0800f6ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f666:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f66a:	f043 0301 	orr.w	r3, r3, #1
 800f66e:	b2da      	uxtb	r2, r3
 800f670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f67a:	699b      	ldr	r3, [r3, #24]
 800f67c:	18d1      	adds	r1, r2, r3
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f684:	f7ff ff5c 	bl	800f540 <prvInsertTimerInActiveList>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d06c      	beq.n	800f768 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f690:	6a1b      	ldr	r3, [r3, #32]
 800f692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f698:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f69c:	f003 0304 	and.w	r3, r3, #4
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d061      	beq.n	800f768 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6a8:	699b      	ldr	r3, [r3, #24]
 800f6aa:	441a      	add	r2, r3
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	9300      	str	r3, [sp, #0]
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6b6:	f7ff fe01 	bl	800f2bc <xTimerGenericCommand>
 800f6ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f6bc:	6a3b      	ldr	r3, [r7, #32]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d152      	bne.n	800f768 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c6:	f383 8811 	msr	BASEPRI, r3
 800f6ca:	f3bf 8f6f 	isb	sy
 800f6ce:	f3bf 8f4f 	dsb	sy
 800f6d2:	61bb      	str	r3, [r7, #24]
}
 800f6d4:	bf00      	nop
 800f6d6:	bf00      	nop
 800f6d8:	e7fd      	b.n	800f6d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f6e0:	f023 0301 	bic.w	r3, r3, #1
 800f6e4:	b2da      	uxtb	r2, r3
 800f6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800f6ec:	e03d      	b.n	800f76a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f6f4:	f043 0301 	orr.w	r3, r3, #1
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f704:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f708:	699b      	ldr	r3, [r3, #24]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d10b      	bne.n	800f726 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f712:	f383 8811 	msr	BASEPRI, r3
 800f716:	f3bf 8f6f 	isb	sy
 800f71a:	f3bf 8f4f 	dsb	sy
 800f71e:	617b      	str	r3, [r7, #20]
}
 800f720:	bf00      	nop
 800f722:	bf00      	nop
 800f724:	e7fd      	b.n	800f722 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f728:	699a      	ldr	r2, [r3, #24]
 800f72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f72c:	18d1      	adds	r1, r2, r3
 800f72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f734:	f7ff ff04 	bl	800f540 <prvInsertTimerInActiveList>
					break;
 800f738:	e017      	b.n	800f76a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f73c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f740:	f003 0302 	and.w	r3, r3, #2
 800f744:	2b00      	cmp	r3, #0
 800f746:	d103      	bne.n	800f750 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f74a:	f7fc fe53 	bl	800c3f4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f74e:	e00c      	b.n	800f76a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f752:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f756:	f023 0301 	bic.w	r3, r3, #1
 800f75a:	b2da      	uxtb	r2, r3
 800f75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f75e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800f762:	e002      	b.n	800f76a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f764:	bf00      	nop
 800f766:	e000      	b.n	800f76a <prvProcessReceivedCommands+0x1a6>
					break;
 800f768:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f76a:	4b08      	ldr	r3, [pc, #32]	@ (800f78c <prvProcessReceivedCommands+0x1c8>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	1d39      	adds	r1, r7, #4
 800f770:	2200      	movs	r2, #0
 800f772:	4618      	mov	r0, r3
 800f774:	f7fd fd76 	bl	800d264 <xQueueReceive>
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f47f af26 	bne.w	800f5cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f780:	bf00      	nop
 800f782:	bf00      	nop
 800f784:	3730      	adds	r7, #48	@ 0x30
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	2001cc2c 	.word	0x2001cc2c

0800f790 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b088      	sub	sp, #32
 800f794:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f796:	e049      	b.n	800f82c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f798:	4b2e      	ldr	r3, [pc, #184]	@ (800f854 <prvSwitchTimerLists+0xc4>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	68db      	ldr	r3, [r3, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7a2:	4b2c      	ldr	r3, [pc, #176]	@ (800f854 <prvSwitchTimerLists+0xc4>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3304      	adds	r3, #4
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fc ffc9 	bl	800c748 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	6a1b      	ldr	r3, [r3, #32]
 800f7ba:	68f8      	ldr	r0, [r7, #12]
 800f7bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f7c4:	f003 0304 	and.w	r3, r3, #4
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d02f      	beq.n	800f82c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	699b      	ldr	r3, [r3, #24]
 800f7d0:	693a      	ldr	r2, [r7, #16]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d90e      	bls.n	800f7fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	68fa      	ldr	r2, [r7, #12]
 800f7e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7ea:	4b1a      	ldr	r3, [pc, #104]	@ (800f854 <prvSwitchTimerLists+0xc4>)
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	3304      	adds	r3, #4
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	4610      	mov	r0, r2
 800f7f6:	f7fc ff6e 	bl	800c6d6 <vListInsert>
 800f7fa:	e017      	b.n	800f82c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	2300      	movs	r3, #0
 800f802:	693a      	ldr	r2, [r7, #16]
 800f804:	2100      	movs	r1, #0
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f7ff fd58 	bl	800f2bc <xTimerGenericCommand>
 800f80c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d10b      	bne.n	800f82c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f818:	f383 8811 	msr	BASEPRI, r3
 800f81c:	f3bf 8f6f 	isb	sy
 800f820:	f3bf 8f4f 	dsb	sy
 800f824:	603b      	str	r3, [r7, #0]
}
 800f826:	bf00      	nop
 800f828:	bf00      	nop
 800f82a:	e7fd      	b.n	800f828 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f82c:	4b09      	ldr	r3, [pc, #36]	@ (800f854 <prvSwitchTimerLists+0xc4>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1b0      	bne.n	800f798 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f836:	4b07      	ldr	r3, [pc, #28]	@ (800f854 <prvSwitchTimerLists+0xc4>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f83c:	4b06      	ldr	r3, [pc, #24]	@ (800f858 <prvSwitchTimerLists+0xc8>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a04      	ldr	r2, [pc, #16]	@ (800f854 <prvSwitchTimerLists+0xc4>)
 800f842:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f844:	4a04      	ldr	r2, [pc, #16]	@ (800f858 <prvSwitchTimerLists+0xc8>)
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	6013      	str	r3, [r2, #0]
}
 800f84a:	bf00      	nop
 800f84c:	3718      	adds	r7, #24
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	2001cc24 	.word	0x2001cc24
 800f858:	2001cc28 	.word	0x2001cc28

0800f85c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f862:	f7fd f8c9 	bl	800c9f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f866:	4b15      	ldr	r3, [pc, #84]	@ (800f8bc <prvCheckForValidListAndQueue+0x60>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d120      	bne.n	800f8b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f86e:	4814      	ldr	r0, [pc, #80]	@ (800f8c0 <prvCheckForValidListAndQueue+0x64>)
 800f870:	f7fc fee0 	bl	800c634 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f874:	4813      	ldr	r0, [pc, #76]	@ (800f8c4 <prvCheckForValidListAndQueue+0x68>)
 800f876:	f7fc fedd 	bl	800c634 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f87a:	4b13      	ldr	r3, [pc, #76]	@ (800f8c8 <prvCheckForValidListAndQueue+0x6c>)
 800f87c:	4a10      	ldr	r2, [pc, #64]	@ (800f8c0 <prvCheckForValidListAndQueue+0x64>)
 800f87e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f880:	4b12      	ldr	r3, [pc, #72]	@ (800f8cc <prvCheckForValidListAndQueue+0x70>)
 800f882:	4a10      	ldr	r2, [pc, #64]	@ (800f8c4 <prvCheckForValidListAndQueue+0x68>)
 800f884:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f886:	2300      	movs	r3, #0
 800f888:	9300      	str	r3, [sp, #0]
 800f88a:	4b11      	ldr	r3, [pc, #68]	@ (800f8d0 <prvCheckForValidListAndQueue+0x74>)
 800f88c:	4a11      	ldr	r2, [pc, #68]	@ (800f8d4 <prvCheckForValidListAndQueue+0x78>)
 800f88e:	2110      	movs	r1, #16
 800f890:	200a      	movs	r0, #10
 800f892:	f7fd fa3d 	bl	800cd10 <xQueueGenericCreateStatic>
 800f896:	4603      	mov	r3, r0
 800f898:	4a08      	ldr	r2, [pc, #32]	@ (800f8bc <prvCheckForValidListAndQueue+0x60>)
 800f89a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f89c:	4b07      	ldr	r3, [pc, #28]	@ (800f8bc <prvCheckForValidListAndQueue+0x60>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d005      	beq.n	800f8b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f8a4:	4b05      	ldr	r3, [pc, #20]	@ (800f8bc <prvCheckForValidListAndQueue+0x60>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	490b      	ldr	r1, [pc, #44]	@ (800f8d8 <prvCheckForValidListAndQueue+0x7c>)
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fe f876 	bl	800d99c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8b0:	f7fd f8d4 	bl	800ca5c <vPortExitCritical>
}
 800f8b4:	bf00      	nop
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	2001cc2c 	.word	0x2001cc2c
 800f8c0:	2001cbfc 	.word	0x2001cbfc
 800f8c4:	2001cc10 	.word	0x2001cc10
 800f8c8:	2001cc24 	.word	0x2001cc24
 800f8cc:	2001cc28 	.word	0x2001cc28
 800f8d0:	2001ccd8 	.word	0x2001ccd8
 800f8d4:	2001cc38 	.word	0x2001cc38
 800f8d8:	080154dc 	.word	0x080154dc

0800f8dc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b08a      	sub	sp, #40	@ 0x28
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
 800f8e8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f8ea:	f06f 0301 	mvn.w	r3, #1
 800f8ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f8fc:	4b06      	ldr	r3, [pc, #24]	@ (800f918 <xTimerPendFunctionCallFromISR+0x3c>)
 800f8fe:	6818      	ldr	r0, [r3, #0]
 800f900:	f107 0114 	add.w	r1, r7, #20
 800f904:	2300      	movs	r3, #0
 800f906:	683a      	ldr	r2, [r7, #0]
 800f908:	f7fd fc0e 	bl	800d128 <xQueueGenericSendFromISR>
 800f90c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f910:	4618      	mov	r0, r3
 800f912:	3728      	adds	r7, #40	@ 0x28
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	2001cc2c 	.word	0x2001cc2c

0800f91c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b084      	sub	sp, #16
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	460b      	mov	r3, r1
 800f926:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f928:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f92c:	f002 fcbc 	bl	80122a8 <USBD_static_malloc>
 800f930:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d109      	bne.n	800f94c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	32b0      	adds	r2, #176	@ 0xb0
 800f942:	2100      	movs	r1, #0
 800f944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f948:	2302      	movs	r3, #2
 800f94a:	e0d4      	b.n	800faf6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f94c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f950:	2100      	movs	r1, #0
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f003 fb4c 	bl	8012ff0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	32b0      	adds	r2, #176	@ 0xb0
 800f962:	68f9      	ldr	r1, [r7, #12]
 800f964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	32b0      	adds	r2, #176	@ 0xb0
 800f972:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	7c1b      	ldrb	r3, [r3, #16]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d138      	bne.n	800f9f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f984:	4b5e      	ldr	r3, [pc, #376]	@ (800fb00 <USBD_CDC_Init+0x1e4>)
 800f986:	7819      	ldrb	r1, [r3, #0]
 800f988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f98c:	2202      	movs	r2, #2
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f002 fb67 	bl	8012062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f994:	4b5a      	ldr	r3, [pc, #360]	@ (800fb00 <USBD_CDC_Init+0x1e4>)
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	f003 020f 	and.w	r2, r3, #15
 800f99c:	6879      	ldr	r1, [r7, #4]
 800f99e:	4613      	mov	r3, r2
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	4413      	add	r3, r2
 800f9a4:	009b      	lsls	r3, r3, #2
 800f9a6:	440b      	add	r3, r1
 800f9a8:	3323      	adds	r3, #35	@ 0x23
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f9ae:	4b55      	ldr	r3, [pc, #340]	@ (800fb04 <USBD_CDC_Init+0x1e8>)
 800f9b0:	7819      	ldrb	r1, [r3, #0]
 800f9b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f9b6:	2202      	movs	r2, #2
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f002 fb52 	bl	8012062 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f9be:	4b51      	ldr	r3, [pc, #324]	@ (800fb04 <USBD_CDC_Init+0x1e8>)
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	f003 020f 	and.w	r2, r3, #15
 800f9c6:	6879      	ldr	r1, [r7, #4]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	4413      	add	r3, r2
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	440b      	add	r3, r1
 800f9d2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f9da:	4b4b      	ldr	r3, [pc, #300]	@ (800fb08 <USBD_CDC_Init+0x1ec>)
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	f003 020f 	and.w	r2, r3, #15
 800f9e2:	6879      	ldr	r1, [r7, #4]
 800f9e4:	4613      	mov	r3, r2
 800f9e6:	009b      	lsls	r3, r3, #2
 800f9e8:	4413      	add	r3, r2
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	440b      	add	r3, r1
 800f9ee:	331c      	adds	r3, #28
 800f9f0:	2210      	movs	r2, #16
 800f9f2:	601a      	str	r2, [r3, #0]
 800f9f4:	e035      	b.n	800fa62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f9f6:	4b42      	ldr	r3, [pc, #264]	@ (800fb00 <USBD_CDC_Init+0x1e4>)
 800f9f8:	7819      	ldrb	r1, [r3, #0]
 800f9fa:	2340      	movs	r3, #64	@ 0x40
 800f9fc:	2202      	movs	r2, #2
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f002 fb2f 	bl	8012062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fa04:	4b3e      	ldr	r3, [pc, #248]	@ (800fb00 <USBD_CDC_Init+0x1e4>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	f003 020f 	and.w	r2, r3, #15
 800fa0c:	6879      	ldr	r1, [r7, #4]
 800fa0e:	4613      	mov	r3, r2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	4413      	add	r3, r2
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	440b      	add	r3, r1
 800fa18:	3323      	adds	r3, #35	@ 0x23
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fa1e:	4b39      	ldr	r3, [pc, #228]	@ (800fb04 <USBD_CDC_Init+0x1e8>)
 800fa20:	7819      	ldrb	r1, [r3, #0]
 800fa22:	2340      	movs	r3, #64	@ 0x40
 800fa24:	2202      	movs	r2, #2
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f002 fb1b 	bl	8012062 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fa2c:	4b35      	ldr	r3, [pc, #212]	@ (800fb04 <USBD_CDC_Init+0x1e8>)
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	f003 020f 	and.w	r2, r3, #15
 800fa34:	6879      	ldr	r1, [r7, #4]
 800fa36:	4613      	mov	r3, r2
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	4413      	add	r3, r2
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	440b      	add	r3, r1
 800fa40:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800fa44:	2201      	movs	r2, #1
 800fa46:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fa48:	4b2f      	ldr	r3, [pc, #188]	@ (800fb08 <USBD_CDC_Init+0x1ec>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	f003 020f 	and.w	r2, r3, #15
 800fa50:	6879      	ldr	r1, [r7, #4]
 800fa52:	4613      	mov	r3, r2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	4413      	add	r3, r2
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	440b      	add	r3, r1
 800fa5c:	331c      	adds	r3, #28
 800fa5e:	2210      	movs	r2, #16
 800fa60:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fa62:	4b29      	ldr	r3, [pc, #164]	@ (800fb08 <USBD_CDC_Init+0x1ec>)
 800fa64:	7819      	ldrb	r1, [r3, #0]
 800fa66:	2308      	movs	r3, #8
 800fa68:	2203      	movs	r2, #3
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f002 faf9 	bl	8012062 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fa70:	4b25      	ldr	r3, [pc, #148]	@ (800fb08 <USBD_CDC_Init+0x1ec>)
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	f003 020f 	and.w	r2, r3, #15
 800fa78:	6879      	ldr	r1, [r7, #4]
 800fa7a:	4613      	mov	r3, r2
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	4413      	add	r3, r2
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	440b      	add	r3, r1
 800fa84:	3323      	adds	r3, #35	@ 0x23
 800fa86:	2201      	movs	r2, #1
 800fa88:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	33b0      	adds	r3, #176	@ 0xb0
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	4413      	add	r3, r2
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2200      	movs	r2, #0
 800faaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2200      	movs	r2, #0
 800fab2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d101      	bne.n	800fac4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fac0:	2302      	movs	r3, #2
 800fac2:	e018      	b.n	800faf6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	7c1b      	ldrb	r3, [r3, #16]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10a      	bne.n	800fae2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800facc:	4b0d      	ldr	r3, [pc, #52]	@ (800fb04 <USBD_CDC_Init+0x1e8>)
 800face:	7819      	ldrb	r1, [r3, #0]
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f002 fbb0 	bl	8012240 <USBD_LL_PrepareReceive>
 800fae0:	e008      	b.n	800faf4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fae2:	4b08      	ldr	r3, [pc, #32]	@ (800fb04 <USBD_CDC_Init+0x1e8>)
 800fae4:	7819      	ldrb	r1, [r3, #0]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800faec:	2340      	movs	r3, #64	@ 0x40
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f002 fba6 	bl	8012240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800faf4:	2300      	movs	r3, #0
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	2000009f 	.word	0x2000009f
 800fb04:	200000a0 	.word	0x200000a0
 800fb08:	200000a1 	.word	0x200000a1

0800fb0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	460b      	mov	r3, r1
 800fb16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fb18:	4b3a      	ldr	r3, [pc, #232]	@ (800fc04 <USBD_CDC_DeInit+0xf8>)
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f002 fac5 	bl	80120ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fb24:	4b37      	ldr	r3, [pc, #220]	@ (800fc04 <USBD_CDC_DeInit+0xf8>)
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	f003 020f 	and.w	r2, r3, #15
 800fb2c:	6879      	ldr	r1, [r7, #4]
 800fb2e:	4613      	mov	r3, r2
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	4413      	add	r3, r2
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	440b      	add	r3, r1
 800fb38:	3323      	adds	r3, #35	@ 0x23
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fb3e:	4b32      	ldr	r3, [pc, #200]	@ (800fc08 <USBD_CDC_DeInit+0xfc>)
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	4619      	mov	r1, r3
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f002 fab2 	bl	80120ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fb4a:	4b2f      	ldr	r3, [pc, #188]	@ (800fc08 <USBD_CDC_DeInit+0xfc>)
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	f003 020f 	and.w	r2, r3, #15
 800fb52:	6879      	ldr	r1, [r7, #4]
 800fb54:	4613      	mov	r3, r2
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	4413      	add	r3, r2
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	440b      	add	r3, r1
 800fb5e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800fb62:	2200      	movs	r2, #0
 800fb64:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fb66:	4b29      	ldr	r3, [pc, #164]	@ (800fc0c <USBD_CDC_DeInit+0x100>)
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f002 fa9e 	bl	80120ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fb72:	4b26      	ldr	r3, [pc, #152]	@ (800fc0c <USBD_CDC_DeInit+0x100>)
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	f003 020f 	and.w	r2, r3, #15
 800fb7a:	6879      	ldr	r1, [r7, #4]
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	4413      	add	r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	440b      	add	r3, r1
 800fb86:	3323      	adds	r3, #35	@ 0x23
 800fb88:	2200      	movs	r2, #0
 800fb8a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fb8c:	4b1f      	ldr	r3, [pc, #124]	@ (800fc0c <USBD_CDC_DeInit+0x100>)
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	f003 020f 	and.w	r2, r3, #15
 800fb94:	6879      	ldr	r1, [r7, #4]
 800fb96:	4613      	mov	r3, r2
 800fb98:	009b      	lsls	r3, r3, #2
 800fb9a:	4413      	add	r3, r2
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	440b      	add	r3, r1
 800fba0:	331c      	adds	r3, #28
 800fba2:	2200      	movs	r2, #0
 800fba4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	32b0      	adds	r2, #176	@ 0xb0
 800fbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d01f      	beq.n	800fbf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	33b0      	adds	r3, #176	@ 0xb0
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	4413      	add	r3, r2
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	32b0      	adds	r2, #176	@ 0xb0
 800fbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f002 fb72 	bl	80122c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	32b0      	adds	r2, #176	@ 0xb0
 800fbea:	2100      	movs	r1, #0
 800fbec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	2000009f 	.word	0x2000009f
 800fc08:	200000a0 	.word	0x200000a0
 800fc0c:	200000a1 	.word	0x200000a1

0800fc10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	32b0      	adds	r2, #176	@ 0xb0
 800fc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc32:	2300      	movs	r3, #0
 800fc34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d101      	bne.n	800fc40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800fc3c:	2303      	movs	r3, #3
 800fc3e:	e0bf      	b.n	800fdc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d050      	beq.n	800fcee <USBD_CDC_Setup+0xde>
 800fc4c:	2b20      	cmp	r3, #32
 800fc4e:	f040 80af 	bne.w	800fdb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	88db      	ldrh	r3, [r3, #6]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d03a      	beq.n	800fcd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	b25b      	sxtb	r3, r3
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	da1b      	bge.n	800fc9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	33b0      	adds	r3, #176	@ 0xb0
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	4413      	add	r3, r2
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	689b      	ldr	r3, [r3, #8]
 800fc76:	683a      	ldr	r2, [r7, #0]
 800fc78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fc7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fc7c:	683a      	ldr	r2, [r7, #0]
 800fc7e:	88d2      	ldrh	r2, [r2, #6]
 800fc80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	88db      	ldrh	r3, [r3, #6]
 800fc86:	2b07      	cmp	r3, #7
 800fc88:	bf28      	it	cs
 800fc8a:	2307      	movcs	r3, #7
 800fc8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	89fa      	ldrh	r2, [r7, #14]
 800fc92:	4619      	mov	r1, r3
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f001 fda9 	bl	80117ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fc9a:	e090      	b.n	800fdbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	785a      	ldrb	r2, [r3, #1]
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	88db      	ldrh	r3, [r3, #6]
 800fcaa:	2b3f      	cmp	r3, #63	@ 0x3f
 800fcac:	d803      	bhi.n	800fcb6 <USBD_CDC_Setup+0xa6>
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	88db      	ldrh	r3, [r3, #6]
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	e000      	b.n	800fcb8 <USBD_CDC_Setup+0xa8>
 800fcb6:	2240      	movs	r2, #64	@ 0x40
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fcbe:	6939      	ldr	r1, [r7, #16]
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f001 fdbe 	bl	801184a <USBD_CtlPrepareRx>
      break;
 800fcce:	e076      	b.n	800fdbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	33b0      	adds	r3, #176	@ 0xb0
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	4413      	add	r3, r2
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	689b      	ldr	r3, [r3, #8]
 800fce2:	683a      	ldr	r2, [r7, #0]
 800fce4:	7850      	ldrb	r0, [r2, #1]
 800fce6:	2200      	movs	r2, #0
 800fce8:	6839      	ldr	r1, [r7, #0]
 800fcea:	4798      	blx	r3
      break;
 800fcec:	e067      	b.n	800fdbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	785b      	ldrb	r3, [r3, #1]
 800fcf2:	2b0b      	cmp	r3, #11
 800fcf4:	d851      	bhi.n	800fd9a <USBD_CDC_Setup+0x18a>
 800fcf6:	a201      	add	r2, pc, #4	@ (adr r2, 800fcfc <USBD_CDC_Setup+0xec>)
 800fcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcfc:	0800fd2d 	.word	0x0800fd2d
 800fd00:	0800fda9 	.word	0x0800fda9
 800fd04:	0800fd9b 	.word	0x0800fd9b
 800fd08:	0800fd9b 	.word	0x0800fd9b
 800fd0c:	0800fd9b 	.word	0x0800fd9b
 800fd10:	0800fd9b 	.word	0x0800fd9b
 800fd14:	0800fd9b 	.word	0x0800fd9b
 800fd18:	0800fd9b 	.word	0x0800fd9b
 800fd1c:	0800fd9b 	.word	0x0800fd9b
 800fd20:	0800fd9b 	.word	0x0800fd9b
 800fd24:	0800fd57 	.word	0x0800fd57
 800fd28:	0800fd81 	.word	0x0800fd81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	2b03      	cmp	r3, #3
 800fd36:	d107      	bne.n	800fd48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fd38:	f107 030a 	add.w	r3, r7, #10
 800fd3c:	2202      	movs	r2, #2
 800fd3e:	4619      	mov	r1, r3
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f001 fd53 	bl	80117ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fd46:	e032      	b.n	800fdae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fd48:	6839      	ldr	r1, [r7, #0]
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f001 fcd1 	bl	80116f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800fd50:	2303      	movs	r3, #3
 800fd52:	75fb      	strb	r3, [r7, #23]
          break;
 800fd54:	e02b      	b.n	800fdae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	2b03      	cmp	r3, #3
 800fd60:	d107      	bne.n	800fd72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fd62:	f107 030d 	add.w	r3, r7, #13
 800fd66:	2201      	movs	r2, #1
 800fd68:	4619      	mov	r1, r3
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f001 fd3e 	bl	80117ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fd70:	e01d      	b.n	800fdae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fd72:	6839      	ldr	r1, [r7, #0]
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f001 fcbc 	bl	80116f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800fd7a:	2303      	movs	r3, #3
 800fd7c:	75fb      	strb	r3, [r7, #23]
          break;
 800fd7e:	e016      	b.n	800fdae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	2b03      	cmp	r3, #3
 800fd8a:	d00f      	beq.n	800fdac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800fd8c:	6839      	ldr	r1, [r7, #0]
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f001 fcaf 	bl	80116f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800fd94:	2303      	movs	r3, #3
 800fd96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fd98:	e008      	b.n	800fdac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fd9a:	6839      	ldr	r1, [r7, #0]
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f001 fca8 	bl	80116f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800fda2:	2303      	movs	r3, #3
 800fda4:	75fb      	strb	r3, [r7, #23]
          break;
 800fda6:	e002      	b.n	800fdae <USBD_CDC_Setup+0x19e>
          break;
 800fda8:	bf00      	nop
 800fdaa:	e008      	b.n	800fdbe <USBD_CDC_Setup+0x1ae>
          break;
 800fdac:	bf00      	nop
      }
      break;
 800fdae:	e006      	b.n	800fdbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fdb0:	6839      	ldr	r1, [r7, #0]
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f001 fc9d 	bl	80116f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800fdb8:	2303      	movs	r3, #3
 800fdba:	75fb      	strb	r3, [r7, #23]
      break;
 800fdbc:	bf00      	nop
  }

  return (uint8_t)ret;
 800fdbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3718      	adds	r7, #24
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fdda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	32b0      	adds	r2, #176	@ 0xb0
 800fde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d101      	bne.n	800fdf2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fdee:	2303      	movs	r3, #3
 800fdf0:	e065      	b.n	800febe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	32b0      	adds	r2, #176	@ 0xb0
 800fdfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fe02:	78fb      	ldrb	r3, [r7, #3]
 800fe04:	f003 020f 	and.w	r2, r3, #15
 800fe08:	6879      	ldr	r1, [r7, #4]
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	4413      	add	r3, r2
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	440b      	add	r3, r1
 800fe14:	3314      	adds	r3, #20
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d02f      	beq.n	800fe7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fe1c:	78fb      	ldrb	r3, [r7, #3]
 800fe1e:	f003 020f 	and.w	r2, r3, #15
 800fe22:	6879      	ldr	r1, [r7, #4]
 800fe24:	4613      	mov	r3, r2
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	4413      	add	r3, r2
 800fe2a:	009b      	lsls	r3, r3, #2
 800fe2c:	440b      	add	r3, r1
 800fe2e:	3314      	adds	r3, #20
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	78fb      	ldrb	r3, [r7, #3]
 800fe34:	f003 010f 	and.w	r1, r3, #15
 800fe38:	68f8      	ldr	r0, [r7, #12]
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	00db      	lsls	r3, r3, #3
 800fe3e:	440b      	add	r3, r1
 800fe40:	009b      	lsls	r3, r3, #2
 800fe42:	4403      	add	r3, r0
 800fe44:	331c      	adds	r3, #28
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	fbb2 f1f3 	udiv	r1, r2, r3
 800fe4c:	fb01 f303 	mul.w	r3, r1, r3
 800fe50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d112      	bne.n	800fe7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fe56:	78fb      	ldrb	r3, [r7, #3]
 800fe58:	f003 020f 	and.w	r2, r3, #15
 800fe5c:	6879      	ldr	r1, [r7, #4]
 800fe5e:	4613      	mov	r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	4413      	add	r3, r2
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	440b      	add	r3, r1
 800fe68:	3314      	adds	r3, #20
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fe6e:	78f9      	ldrb	r1, [r7, #3]
 800fe70:	2300      	movs	r3, #0
 800fe72:	2200      	movs	r2, #0
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f002 f9c2 	bl	80121fe <USBD_LL_Transmit>
 800fe7a:	e01f      	b.n	800febc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	33b0      	adds	r3, #176	@ 0xb0
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4413      	add	r3, r2
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	691b      	ldr	r3, [r3, #16]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d010      	beq.n	800febc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	33b0      	adds	r3, #176	@ 0xb0
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	4413      	add	r3, r2
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	691b      	ldr	r3, [r3, #16]
 800feac:	68ba      	ldr	r2, [r7, #8]
 800feae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800feb2:	68ba      	ldr	r2, [r7, #8]
 800feb4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800feb8:	78fa      	ldrb	r2, [r7, #3]
 800feba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800febc:	2300      	movs	r3, #0
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3710      	adds	r7, #16
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b084      	sub	sp, #16
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	460b      	mov	r3, r1
 800fed0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	32b0      	adds	r2, #176	@ 0xb0
 800fedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fee0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	32b0      	adds	r2, #176	@ 0xb0
 800feec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d101      	bne.n	800fef8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fef4:	2303      	movs	r3, #3
 800fef6:	e01a      	b.n	800ff2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fef8:	78fb      	ldrb	r3, [r7, #3]
 800fefa:	4619      	mov	r1, r3
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f002 f9c0 	bl	8012282 <USBD_LL_GetRxDataSize>
 800ff02:	4602      	mov	r2, r0
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	33b0      	adds	r3, #176	@ 0xb0
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	4413      	add	r3, r2
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	68fa      	ldr	r2, [r7, #12]
 800ff1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ff22:	68fa      	ldr	r2, [r7, #12]
 800ff24:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ff28:	4611      	mov	r1, r2
 800ff2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ff2c:	2300      	movs	r3, #0
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b084      	sub	sp, #16
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	32b0      	adds	r2, #176	@ 0xb0
 800ff48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d101      	bne.n	800ff58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ff54:	2303      	movs	r3, #3
 800ff56:	e024      	b.n	800ffa2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	33b0      	adds	r3, #176	@ 0xb0
 800ff62:	009b      	lsls	r3, r3, #2
 800ff64:	4413      	add	r3, r2
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d019      	beq.n	800ffa0 <USBD_CDC_EP0_RxReady+0x6a>
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ff72:	2bff      	cmp	r3, #255	@ 0xff
 800ff74:	d014      	beq.n	800ffa0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	33b0      	adds	r3, #176	@ 0xb0
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	4413      	add	r3, r2
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	689b      	ldr	r3, [r3, #8]
 800ff88:	68fa      	ldr	r2, [r7, #12]
 800ff8a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ff8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ff90:	68fa      	ldr	r2, [r7, #12]
 800ff92:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ff96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	22ff      	movs	r2, #255	@ 0xff
 800ff9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ffa0:	2300      	movs	r3, #0
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
	...

0800ffac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b086      	sub	sp, #24
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ffb4:	2182      	movs	r1, #130	@ 0x82
 800ffb6:	4818      	ldr	r0, [pc, #96]	@ (8010018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ffb8:	f000 fd62 	bl	8010a80 <USBD_GetEpDesc>
 800ffbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ffbe:	2101      	movs	r1, #1
 800ffc0:	4815      	ldr	r0, [pc, #84]	@ (8010018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ffc2:	f000 fd5d 	bl	8010a80 <USBD_GetEpDesc>
 800ffc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ffc8:	2181      	movs	r1, #129	@ 0x81
 800ffca:	4813      	ldr	r0, [pc, #76]	@ (8010018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ffcc:	f000 fd58 	bl	8010a80 <USBD_GetEpDesc>
 800ffd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d002      	beq.n	800ffde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	2210      	movs	r2, #16
 800ffdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d006      	beq.n	800fff2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ffec:	711a      	strb	r2, [r3, #4]
 800ffee:	2200      	movs	r2, #0
 800fff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d006      	beq.n	8010006 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2200      	movs	r2, #0
 800fffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010000:	711a      	strb	r2, [r3, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2243      	movs	r2, #67	@ 0x43
 801000a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801000c:	4b02      	ldr	r3, [pc, #8]	@ (8010018 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801000e:	4618      	mov	r0, r3
 8010010:	3718      	adds	r7, #24
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	2000005c 	.word	0x2000005c

0801001c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b086      	sub	sp, #24
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010024:	2182      	movs	r1, #130	@ 0x82
 8010026:	4818      	ldr	r0, [pc, #96]	@ (8010088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010028:	f000 fd2a 	bl	8010a80 <USBD_GetEpDesc>
 801002c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801002e:	2101      	movs	r1, #1
 8010030:	4815      	ldr	r0, [pc, #84]	@ (8010088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010032:	f000 fd25 	bl	8010a80 <USBD_GetEpDesc>
 8010036:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010038:	2181      	movs	r1, #129	@ 0x81
 801003a:	4813      	ldr	r0, [pc, #76]	@ (8010088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801003c:	f000 fd20 	bl	8010a80 <USBD_GetEpDesc>
 8010040:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d002      	beq.n	801004e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	2210      	movs	r2, #16
 801004c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d006      	beq.n	8010062 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	2200      	movs	r2, #0
 8010058:	711a      	strb	r2, [r3, #4]
 801005a:	2200      	movs	r2, #0
 801005c:	f042 0202 	orr.w	r2, r2, #2
 8010060:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d006      	beq.n	8010076 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	711a      	strb	r2, [r3, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	f042 0202 	orr.w	r2, r2, #2
 8010074:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2243      	movs	r2, #67	@ 0x43
 801007a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801007c:	4b02      	ldr	r3, [pc, #8]	@ (8010088 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801007e:	4618      	mov	r0, r3
 8010080:	3718      	adds	r7, #24
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	2000005c 	.word	0x2000005c

0801008c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010094:	2182      	movs	r1, #130	@ 0x82
 8010096:	4818      	ldr	r0, [pc, #96]	@ (80100f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010098:	f000 fcf2 	bl	8010a80 <USBD_GetEpDesc>
 801009c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801009e:	2101      	movs	r1, #1
 80100a0:	4815      	ldr	r0, [pc, #84]	@ (80100f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80100a2:	f000 fced 	bl	8010a80 <USBD_GetEpDesc>
 80100a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80100a8:	2181      	movs	r1, #129	@ 0x81
 80100aa:	4813      	ldr	r0, [pc, #76]	@ (80100f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80100ac:	f000 fce8 	bl	8010a80 <USBD_GetEpDesc>
 80100b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	2210      	movs	r2, #16
 80100bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d006      	beq.n	80100d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	2200      	movs	r2, #0
 80100c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80100cc:	711a      	strb	r2, [r3, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d006      	beq.n	80100e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2200      	movs	r2, #0
 80100dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80100e0:	711a      	strb	r2, [r3, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2243      	movs	r2, #67	@ 0x43
 80100ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80100ec:	4b02      	ldr	r3, [pc, #8]	@ (80100f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3718      	adds	r7, #24
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	2000005c 	.word	0x2000005c

080100fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	220a      	movs	r2, #10
 8010108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801010a:	4b03      	ldr	r3, [pc, #12]	@ (8010118 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801010c:	4618      	mov	r0, r3
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr
 8010118:	20000018 	.word	0x20000018

0801011c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d101      	bne.n	8010130 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801012c:	2303      	movs	r3, #3
 801012e:	e009      	b.n	8010144 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	33b0      	adds	r3, #176	@ 0xb0
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	370c      	adds	r7, #12
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr

08010150 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010150:	b480      	push	{r7}
 8010152:	b087      	sub	sp, #28
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	32b0      	adds	r2, #176	@ 0xb0
 8010166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801016a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d101      	bne.n	8010176 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010172:	2303      	movs	r3, #3
 8010174:	e008      	b.n	8010188 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010186:	2300      	movs	r3, #0
}
 8010188:	4618      	mov	r0, r3
 801018a:	371c      	adds	r7, #28
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr

08010194 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010194:	b480      	push	{r7}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	32b0      	adds	r2, #176	@ 0xb0
 80101a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d101      	bne.n	80101b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80101b4:	2303      	movs	r3, #3
 80101b6:	e004      	b.n	80101c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80101c0:	2300      	movs	r3, #0
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3714      	adds	r7, #20
 80101c6:	46bd      	mov	sp, r7
 80101c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101cc:	4770      	bx	lr
	...

080101d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	32b0      	adds	r2, #176	@ 0xb0
 80101e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80101e8:	2301      	movs	r3, #1
 80101ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d101      	bne.n	80101f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80101f2:	2303      	movs	r3, #3
 80101f4:	e025      	b.n	8010242 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d11f      	bne.n	8010240 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	2201      	movs	r2, #1
 8010204:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010208:	4b10      	ldr	r3, [pc, #64]	@ (801024c <USBD_CDC_TransmitPacket+0x7c>)
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	f003 020f 	and.w	r2, r3, #15
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	4613      	mov	r3, r2
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4413      	add	r3, r2
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	4403      	add	r3, r0
 8010222:	3314      	adds	r3, #20
 8010224:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010226:	4b09      	ldr	r3, [pc, #36]	@ (801024c <USBD_CDC_TransmitPacket+0x7c>)
 8010228:	7819      	ldrb	r1, [r3, #0]
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f001 ffe1 	bl	80121fe <USBD_LL_Transmit>

    ret = USBD_OK;
 801023c:	2300      	movs	r3, #0
 801023e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010240:	7bfb      	ldrb	r3, [r7, #15]
}
 8010242:	4618      	mov	r0, r3
 8010244:	3710      	adds	r7, #16
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	2000009f 	.word	0x2000009f

08010250 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	32b0      	adds	r2, #176	@ 0xb0
 8010262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010266:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	32b0      	adds	r2, #176	@ 0xb0
 8010272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d101      	bne.n	801027e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801027a:	2303      	movs	r3, #3
 801027c:	e018      	b.n	80102b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	7c1b      	ldrb	r3, [r3, #16]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d10a      	bne.n	801029c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010286:	4b0c      	ldr	r3, [pc, #48]	@ (80102b8 <USBD_CDC_ReceivePacket+0x68>)
 8010288:	7819      	ldrb	r1, [r3, #0]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f001 ffd3 	bl	8012240 <USBD_LL_PrepareReceive>
 801029a:	e008      	b.n	80102ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801029c:	4b06      	ldr	r3, [pc, #24]	@ (80102b8 <USBD_CDC_ReceivePacket+0x68>)
 801029e:	7819      	ldrb	r1, [r3, #0]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80102a6:	2340      	movs	r3, #64	@ 0x40
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f001 ffc9 	bl	8012240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80102ae:	2300      	movs	r3, #0
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3710      	adds	r7, #16
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	200000a0 	.word	0x200000a0

080102bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	4613      	mov	r3, r2
 80102c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d101      	bne.n	80102d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80102d0:	2303      	movs	r3, #3
 80102d2:	e01f      	b.n	8010314 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2200      	movs	r2, #0
 80102e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d003      	beq.n	80102fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	68ba      	ldr	r2, [r7, #8]
 80102f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2201      	movs	r2, #1
 80102fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	79fa      	ldrb	r2, [r7, #7]
 8010306:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f001 fe43 	bl	8011f94 <USBD_LL_Init>
 801030e:	4603      	mov	r3, r0
 8010310:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010312:	7dfb      	ldrb	r3, [r7, #23]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3718      	adds	r7, #24
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b084      	sub	sp, #16
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010326:	2300      	movs	r3, #0
 8010328:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d101      	bne.n	8010334 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010330:	2303      	movs	r3, #3
 8010332:	e025      	b.n	8010380 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	683a      	ldr	r2, [r7, #0]
 8010338:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	32ae      	adds	r2, #174	@ 0xae
 8010346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801034a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00f      	beq.n	8010370 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	32ae      	adds	r2, #174	@ 0xae
 801035a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801035e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010360:	f107 020e 	add.w	r2, r7, #14
 8010364:	4610      	mov	r0, r2
 8010366:	4798      	blx	r3
 8010368:	4602      	mov	r2, r0
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010376:	1c5a      	adds	r2, r3, #1
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801037e:	2300      	movs	r3, #0
}
 8010380:	4618      	mov	r0, r3
 8010382:	3710      	adds	r7, #16
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f001 fe4b 	bl	801202c <USBD_LL_Start>
 8010396:	4603      	mov	r3, r0
}
 8010398:	4618      	mov	r0, r3
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80103a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	370c      	adds	r7, #12
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr

080103b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b084      	sub	sp, #16
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	460b      	mov	r3, r1
 80103c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80103c2:	2300      	movs	r3, #0
 80103c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d009      	beq.n	80103e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	78fa      	ldrb	r2, [r7, #3]
 80103da:	4611      	mov	r1, r2
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	4798      	blx	r3
 80103e0:	4603      	mov	r3, r0
 80103e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80103e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}

080103ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80103ee:	b580      	push	{r7, lr}
 80103f0:	b084      	sub	sp, #16
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	6078      	str	r0, [r7, #4]
 80103f6:	460b      	mov	r3, r1
 80103f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80103fa:	2300      	movs	r3, #0
 80103fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	78fa      	ldrb	r2, [r7, #3]
 8010408:	4611      	mov	r1, r2
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	4798      	blx	r3
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010414:	2303      	movs	r3, #3
 8010416:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010418:	7bfb      	ldrb	r3, [r7, #15]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010422:	b580      	push	{r7, lr}
 8010424:	b084      	sub	sp, #16
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
 801042a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010432:	6839      	ldr	r1, [r7, #0]
 8010434:	4618      	mov	r0, r3
 8010436:	f001 f922 	bl	801167e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2201      	movs	r2, #1
 801043e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010448:	461a      	mov	r2, r3
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010456:	f003 031f 	and.w	r3, r3, #31
 801045a:	2b02      	cmp	r3, #2
 801045c:	d01a      	beq.n	8010494 <USBD_LL_SetupStage+0x72>
 801045e:	2b02      	cmp	r3, #2
 8010460:	d822      	bhi.n	80104a8 <USBD_LL_SetupStage+0x86>
 8010462:	2b00      	cmp	r3, #0
 8010464:	d002      	beq.n	801046c <USBD_LL_SetupStage+0x4a>
 8010466:	2b01      	cmp	r3, #1
 8010468:	d00a      	beq.n	8010480 <USBD_LL_SetupStage+0x5e>
 801046a:	e01d      	b.n	80104a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010472:	4619      	mov	r1, r3
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fb77 	bl	8010b68 <USBD_StdDevReq>
 801047a:	4603      	mov	r3, r0
 801047c:	73fb      	strb	r3, [r7, #15]
      break;
 801047e:	e020      	b.n	80104c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010486:	4619      	mov	r1, r3
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 fbdf 	bl	8010c4c <USBD_StdItfReq>
 801048e:	4603      	mov	r3, r0
 8010490:	73fb      	strb	r3, [r7, #15]
      break;
 8010492:	e016      	b.n	80104c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801049a:	4619      	mov	r1, r3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 fc41 	bl	8010d24 <USBD_StdEPReq>
 80104a2:	4603      	mov	r3, r0
 80104a4:	73fb      	strb	r3, [r7, #15]
      break;
 80104a6:	e00c      	b.n	80104c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80104ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80104b2:	b2db      	uxtb	r3, r3
 80104b4:	4619      	mov	r1, r3
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f001 fe18 	bl	80120ec <USBD_LL_StallEP>
 80104bc:	4603      	mov	r3, r0
 80104be:	73fb      	strb	r3, [r7, #15]
      break;
 80104c0:	bf00      	nop
  }

  return ret;
 80104c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3710      	adds	r7, #16
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b086      	sub	sp, #24
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	460b      	mov	r3, r1
 80104d6:	607a      	str	r2, [r7, #4]
 80104d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80104da:	2300      	movs	r3, #0
 80104dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80104de:	7afb      	ldrb	r3, [r7, #11]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d177      	bne.n	80105d4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80104ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80104f2:	2b03      	cmp	r3, #3
 80104f4:	f040 80a1 	bne.w	801063a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	693a      	ldr	r2, [r7, #16]
 80104fe:	8992      	ldrh	r2, [r2, #12]
 8010500:	4293      	cmp	r3, r2
 8010502:	d91c      	bls.n	801053e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	693a      	ldr	r2, [r7, #16]
 801050a:	8992      	ldrh	r2, [r2, #12]
 801050c:	1a9a      	subs	r2, r3, r2
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	691b      	ldr	r3, [r3, #16]
 8010516:	693a      	ldr	r2, [r7, #16]
 8010518:	8992      	ldrh	r2, [r2, #12]
 801051a:	441a      	add	r2, r3
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	6919      	ldr	r1, [r3, #16]
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	899b      	ldrh	r3, [r3, #12]
 8010528:	461a      	mov	r2, r3
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	4293      	cmp	r3, r2
 8010530:	bf38      	it	cc
 8010532:	4613      	movcc	r3, r2
 8010534:	461a      	mov	r2, r3
 8010536:	68f8      	ldr	r0, [r7, #12]
 8010538:	f001 f9a8 	bl	801188c <USBD_CtlContinueRx>
 801053c:	e07d      	b.n	801063a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010544:	f003 031f 	and.w	r3, r3, #31
 8010548:	2b02      	cmp	r3, #2
 801054a:	d014      	beq.n	8010576 <USBD_LL_DataOutStage+0xaa>
 801054c:	2b02      	cmp	r3, #2
 801054e:	d81d      	bhi.n	801058c <USBD_LL_DataOutStage+0xc0>
 8010550:	2b00      	cmp	r3, #0
 8010552:	d002      	beq.n	801055a <USBD_LL_DataOutStage+0x8e>
 8010554:	2b01      	cmp	r3, #1
 8010556:	d003      	beq.n	8010560 <USBD_LL_DataOutStage+0x94>
 8010558:	e018      	b.n	801058c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801055a:	2300      	movs	r3, #0
 801055c:	75bb      	strb	r3, [r7, #22]
            break;
 801055e:	e018      	b.n	8010592 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010566:	b2db      	uxtb	r3, r3
 8010568:	4619      	mov	r1, r3
 801056a:	68f8      	ldr	r0, [r7, #12]
 801056c:	f000 fa6e 	bl	8010a4c <USBD_CoreFindIF>
 8010570:	4603      	mov	r3, r0
 8010572:	75bb      	strb	r3, [r7, #22]
            break;
 8010574:	e00d      	b.n	8010592 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801057c:	b2db      	uxtb	r3, r3
 801057e:	4619      	mov	r1, r3
 8010580:	68f8      	ldr	r0, [r7, #12]
 8010582:	f000 fa70 	bl	8010a66 <USBD_CoreFindEP>
 8010586:	4603      	mov	r3, r0
 8010588:	75bb      	strb	r3, [r7, #22]
            break;
 801058a:	e002      	b.n	8010592 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801058c:	2300      	movs	r3, #0
 801058e:	75bb      	strb	r3, [r7, #22]
            break;
 8010590:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010592:	7dbb      	ldrb	r3, [r7, #22]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d119      	bne.n	80105cc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d113      	bne.n	80105cc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80105a4:	7dba      	ldrb	r2, [r7, #22]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	32ae      	adds	r2, #174	@ 0xae
 80105aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ae:	691b      	ldr	r3, [r3, #16]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00b      	beq.n	80105cc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80105b4:	7dba      	ldrb	r2, [r7, #22]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80105bc:	7dba      	ldrb	r2, [r7, #22]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	32ae      	adds	r2, #174	@ 0xae
 80105c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105c6:	691b      	ldr	r3, [r3, #16]
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f001 f96e 	bl	80118ae <USBD_CtlSendStatus>
 80105d2:	e032      	b.n	801063a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80105d4:	7afb      	ldrb	r3, [r7, #11]
 80105d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	4619      	mov	r1, r3
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f000 fa41 	bl	8010a66 <USBD_CoreFindEP>
 80105e4:	4603      	mov	r3, r0
 80105e6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80105e8:	7dbb      	ldrb	r3, [r7, #22]
 80105ea:	2bff      	cmp	r3, #255	@ 0xff
 80105ec:	d025      	beq.n	801063a <USBD_LL_DataOutStage+0x16e>
 80105ee:	7dbb      	ldrb	r3, [r7, #22]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d122      	bne.n	801063a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	2b03      	cmp	r3, #3
 80105fe:	d117      	bne.n	8010630 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010600:	7dba      	ldrb	r2, [r7, #22]
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	32ae      	adds	r2, #174	@ 0xae
 8010606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801060a:	699b      	ldr	r3, [r3, #24]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d00f      	beq.n	8010630 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8010610:	7dba      	ldrb	r2, [r7, #22]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010618:	7dba      	ldrb	r2, [r7, #22]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	32ae      	adds	r2, #174	@ 0xae
 801061e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010622:	699b      	ldr	r3, [r3, #24]
 8010624:	7afa      	ldrb	r2, [r7, #11]
 8010626:	4611      	mov	r1, r2
 8010628:	68f8      	ldr	r0, [r7, #12]
 801062a:	4798      	blx	r3
 801062c:	4603      	mov	r3, r0
 801062e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010630:	7dfb      	ldrb	r3, [r7, #23]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d001      	beq.n	801063a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8010636:	7dfb      	ldrb	r3, [r7, #23]
 8010638:	e000      	b.n	801063c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 801063a:	2300      	movs	r3, #0
}
 801063c:	4618      	mov	r0, r3
 801063e:	3718      	adds	r7, #24
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	460b      	mov	r3, r1
 801064e:	607a      	str	r2, [r7, #4]
 8010650:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8010652:	7afb      	ldrb	r3, [r7, #11]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d178      	bne.n	801074a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	3314      	adds	r3, #20
 801065c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010664:	2b02      	cmp	r3, #2
 8010666:	d163      	bne.n	8010730 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	693a      	ldr	r2, [r7, #16]
 801066e:	8992      	ldrh	r2, [r2, #12]
 8010670:	4293      	cmp	r3, r2
 8010672:	d91c      	bls.n	80106ae <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	693a      	ldr	r2, [r7, #16]
 801067a:	8992      	ldrh	r2, [r2, #12]
 801067c:	1a9a      	subs	r2, r3, r2
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	693a      	ldr	r2, [r7, #16]
 8010688:	8992      	ldrh	r2, [r2, #12]
 801068a:	441a      	add	r2, r3
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	6919      	ldr	r1, [r3, #16]
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	461a      	mov	r2, r3
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	f001 f8c4 	bl	8011828 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106a0:	2300      	movs	r3, #0
 80106a2:	2200      	movs	r2, #0
 80106a4:	2100      	movs	r1, #0
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f001 fdca 	bl	8012240 <USBD_LL_PrepareReceive>
 80106ac:	e040      	b.n	8010730 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	899b      	ldrh	r3, [r3, #12]
 80106b2:	461a      	mov	r2, r3
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d11c      	bne.n	80106f6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	693a      	ldr	r2, [r7, #16]
 80106c2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d316      	bcc.n	80106f6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d20f      	bcs.n	80106f6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80106d6:	2200      	movs	r2, #0
 80106d8:	2100      	movs	r1, #0
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f001 f8a4 	bl	8011828 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2200      	movs	r2, #0
 80106e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106e8:	2300      	movs	r3, #0
 80106ea:	2200      	movs	r2, #0
 80106ec:	2100      	movs	r1, #0
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f001 fda6 	bl	8012240 <USBD_LL_PrepareReceive>
 80106f4:	e01c      	b.n	8010730 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	2b03      	cmp	r3, #3
 8010700:	d10f      	bne.n	8010722 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010708:	68db      	ldr	r3, [r3, #12]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d009      	beq.n	8010722 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2200      	movs	r2, #0
 8010712:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801071c:	68db      	ldr	r3, [r3, #12]
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010722:	2180      	movs	r1, #128	@ 0x80
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	f001 fce1 	bl	80120ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801072a:	68f8      	ldr	r0, [r7, #12]
 801072c:	f001 f8d2 	bl	80118d4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d03a      	beq.n	80107b0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f7ff fe30 	bl	80103a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2200      	movs	r2, #0
 8010744:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010748:	e032      	b.n	80107b0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801074a:	7afb      	ldrb	r3, [r7, #11]
 801074c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010750:	b2db      	uxtb	r3, r3
 8010752:	4619      	mov	r1, r3
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f000 f986 	bl	8010a66 <USBD_CoreFindEP>
 801075a:	4603      	mov	r3, r0
 801075c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801075e:	7dfb      	ldrb	r3, [r7, #23]
 8010760:	2bff      	cmp	r3, #255	@ 0xff
 8010762:	d025      	beq.n	80107b0 <USBD_LL_DataInStage+0x16c>
 8010764:	7dfb      	ldrb	r3, [r7, #23]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d122      	bne.n	80107b0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010770:	b2db      	uxtb	r3, r3
 8010772:	2b03      	cmp	r3, #3
 8010774:	d11c      	bne.n	80107b0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010776:	7dfa      	ldrb	r2, [r7, #23]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	32ae      	adds	r2, #174	@ 0xae
 801077c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010780:	695b      	ldr	r3, [r3, #20]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d014      	beq.n	80107b0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8010786:	7dfa      	ldrb	r2, [r7, #23]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801078e:	7dfa      	ldrb	r2, [r7, #23]
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	32ae      	adds	r2, #174	@ 0xae
 8010794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010798:	695b      	ldr	r3, [r3, #20]
 801079a:	7afa      	ldrb	r2, [r7, #11]
 801079c:	4611      	mov	r1, r2
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	4798      	blx	r3
 80107a2:	4603      	mov	r3, r0
 80107a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80107a6:	7dbb      	ldrb	r3, [r7, #22]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d001      	beq.n	80107b0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80107ac:	7dbb      	ldrb	r3, [r7, #22]
 80107ae:	e000      	b.n	80107b2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3718      	adds	r7, #24
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b084      	sub	sp, #16
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2201      	movs	r2, #1
 80107ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2200      	movs	r2, #0
 80107e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d014      	beq.n	8010820 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00e      	beq.n	8010820 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	6852      	ldr	r2, [r2, #4]
 801080e:	b2d2      	uxtb	r2, r2
 8010810:	4611      	mov	r1, r2
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	4798      	blx	r3
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d001      	beq.n	8010820 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801081c:	2303      	movs	r3, #3
 801081e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010820:	2340      	movs	r3, #64	@ 0x40
 8010822:	2200      	movs	r2, #0
 8010824:	2100      	movs	r1, #0
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f001 fc1b 	bl	8012062 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2201      	movs	r2, #1
 8010830:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2240      	movs	r2, #64	@ 0x40
 8010838:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801083c:	2340      	movs	r3, #64	@ 0x40
 801083e:	2200      	movs	r2, #0
 8010840:	2180      	movs	r1, #128	@ 0x80
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f001 fc0d 	bl	8012062 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2201      	movs	r2, #1
 801084c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2240      	movs	r2, #64	@ 0x40
 8010854:	841a      	strh	r2, [r3, #32]

  return ret;
 8010856:	7bfb      	ldrb	r3, [r7, #15]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	78fa      	ldrb	r2, [r7, #3]
 8010870:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801088e:	b2db      	uxtb	r3, r3
 8010890:	2b04      	cmp	r3, #4
 8010892:	d006      	beq.n	80108a2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801089a:	b2da      	uxtb	r2, r3
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2204      	movs	r2, #4
 80108a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80108aa:	2300      	movs	r3, #0
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	370c      	adds	r7, #12
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr

080108b8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	2b04      	cmp	r3, #4
 80108ca:	d106      	bne.n	80108da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80108d2:	b2da      	uxtb	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80108da:	2300      	movs	r3, #0
}
 80108dc:	4618      	mov	r0, r3
 80108de:	370c      	adds	r7, #12
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr

080108e8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	2b03      	cmp	r3, #3
 80108fa:	d110      	bne.n	801091e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00b      	beq.n	801091e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801090c:	69db      	ldr	r3, [r3, #28]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d005      	beq.n	801091e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010918:	69db      	ldr	r3, [r3, #28]
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801091e:	2300      	movs	r3, #0
}
 8010920:	4618      	mov	r0, r3
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	460b      	mov	r3, r1
 8010932:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	32ae      	adds	r2, #174	@ 0xae
 801093e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d101      	bne.n	801094a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010946:	2303      	movs	r3, #3
 8010948:	e01c      	b.n	8010984 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010950:	b2db      	uxtb	r3, r3
 8010952:	2b03      	cmp	r3, #3
 8010954:	d115      	bne.n	8010982 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	32ae      	adds	r2, #174	@ 0xae
 8010960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010964:	6a1b      	ldr	r3, [r3, #32]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d00b      	beq.n	8010982 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	32ae      	adds	r2, #174	@ 0xae
 8010974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010978:	6a1b      	ldr	r3, [r3, #32]
 801097a:	78fa      	ldrb	r2, [r7, #3]
 801097c:	4611      	mov	r1, r2
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010982:	2300      	movs	r3, #0
}
 8010984:	4618      	mov	r0, r3
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	460b      	mov	r3, r1
 8010996:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	32ae      	adds	r2, #174	@ 0xae
 80109a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d101      	bne.n	80109ae <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80109aa:	2303      	movs	r3, #3
 80109ac:	e01c      	b.n	80109e8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	2b03      	cmp	r3, #3
 80109b8:	d115      	bne.n	80109e6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	32ae      	adds	r2, #174	@ 0xae
 80109c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d00b      	beq.n	80109e6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	32ae      	adds	r2, #174	@ 0xae
 80109d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109de:	78fa      	ldrb	r2, [r7, #3]
 80109e0:	4611      	mov	r1, r2
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80109e6:	2300      	movs	r3, #0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3708      	adds	r7, #8
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b083      	sub	sp, #12
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80109f8:	2300      	movs	r3, #0
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr

08010a06 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b084      	sub	sp, #16
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2201      	movs	r2, #1
 8010a16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d00e      	beq.n	8010a42 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	6852      	ldr	r2, [r2, #4]
 8010a30:	b2d2      	uxtb	r2, r2
 8010a32:	4611      	mov	r1, r2
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	4798      	blx	r3
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d001      	beq.n	8010a42 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3710      	adds	r7, #16
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b083      	sub	sp, #12
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	460b      	mov	r3, r1
 8010a56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010a58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	370c      	adds	r7, #12
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr

08010a66 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010a66:	b480      	push	{r7}
 8010a68:	b083      	sub	sp, #12
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
 8010a6e:	460b      	mov	r3, r1
 8010a70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010a72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b086      	sub	sp, #24
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010a94:	2300      	movs	r3, #0
 8010a96:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	885b      	ldrh	r3, [r3, #2]
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	68fa      	ldr	r2, [r7, #12]
 8010aa0:	7812      	ldrb	r2, [r2, #0]
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d91f      	bls.n	8010ae6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010aac:	e013      	b.n	8010ad6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010aae:	f107 030a 	add.w	r3, r7, #10
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	6978      	ldr	r0, [r7, #20]
 8010ab6:	f000 f81b 	bl	8010af0 <USBD_GetNextDesc>
 8010aba:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	785b      	ldrb	r3, [r3, #1]
 8010ac0:	2b05      	cmp	r3, #5
 8010ac2:	d108      	bne.n	8010ad6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	789b      	ldrb	r3, [r3, #2]
 8010acc:	78fa      	ldrb	r2, [r7, #3]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d008      	beq.n	8010ae4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	885b      	ldrh	r3, [r3, #2]
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	897b      	ldrh	r3, [r7, #10]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d8e5      	bhi.n	8010aae <USBD_GetEpDesc+0x2e>
 8010ae2:	e000      	b.n	8010ae6 <USBD_GetEpDesc+0x66>
          break;
 8010ae4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010ae6:	693b      	ldr	r3, [r7, #16]
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b085      	sub	sp, #20
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	7812      	ldrb	r2, [r2, #0]
 8010b06:	4413      	add	r3, r2
 8010b08:	b29a      	uxth	r2, r3
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	461a      	mov	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	4413      	add	r3, r2
 8010b18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010b1a:	68fb      	ldr	r3, [r7, #12]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3714      	adds	r7, #20
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr

08010b28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b087      	sub	sp, #28
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010b46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010b4a:	021b      	lsls	r3, r3, #8
 8010b4c:	b21a      	sxth	r2, r3
 8010b4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b52:	4313      	orrs	r3, r2
 8010b54:	b21b      	sxth	r3, r3
 8010b56:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010b58:	89fb      	ldrh	r3, [r7, #14]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	371c      	adds	r7, #28
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr
	...

08010b68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b72:	2300      	movs	r3, #0
 8010b74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010b7e:	2b40      	cmp	r3, #64	@ 0x40
 8010b80:	d005      	beq.n	8010b8e <USBD_StdDevReq+0x26>
 8010b82:	2b40      	cmp	r3, #64	@ 0x40
 8010b84:	d857      	bhi.n	8010c36 <USBD_StdDevReq+0xce>
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00f      	beq.n	8010baa <USBD_StdDevReq+0x42>
 8010b8a:	2b20      	cmp	r3, #32
 8010b8c:	d153      	bne.n	8010c36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	32ae      	adds	r2, #174	@ 0xae
 8010b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b9c:	689b      	ldr	r3, [r3, #8]
 8010b9e:	6839      	ldr	r1, [r7, #0]
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	4798      	blx	r3
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8010ba8:	e04a      	b.n	8010c40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	785b      	ldrb	r3, [r3, #1]
 8010bae:	2b09      	cmp	r3, #9
 8010bb0:	d83b      	bhi.n	8010c2a <USBD_StdDevReq+0xc2>
 8010bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8010bb8 <USBD_StdDevReq+0x50>)
 8010bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bb8:	08010c0d 	.word	0x08010c0d
 8010bbc:	08010c21 	.word	0x08010c21
 8010bc0:	08010c2b 	.word	0x08010c2b
 8010bc4:	08010c17 	.word	0x08010c17
 8010bc8:	08010c2b 	.word	0x08010c2b
 8010bcc:	08010beb 	.word	0x08010beb
 8010bd0:	08010be1 	.word	0x08010be1
 8010bd4:	08010c2b 	.word	0x08010c2b
 8010bd8:	08010c03 	.word	0x08010c03
 8010bdc:	08010bf5 	.word	0x08010bf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010be0:	6839      	ldr	r1, [r7, #0]
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 fa3e 	bl	8011064 <USBD_GetDescriptor>
          break;
 8010be8:	e024      	b.n	8010c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010bea:	6839      	ldr	r1, [r7, #0]
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 fba3 	bl	8011338 <USBD_SetAddress>
          break;
 8010bf2:	e01f      	b.n	8010c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010bf4:	6839      	ldr	r1, [r7, #0]
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 fbe2 	bl	80113c0 <USBD_SetConfig>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	73fb      	strb	r3, [r7, #15]
          break;
 8010c00:	e018      	b.n	8010c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010c02:	6839      	ldr	r1, [r7, #0]
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f000 fc85 	bl	8011514 <USBD_GetConfig>
          break;
 8010c0a:	e013      	b.n	8010c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010c0c:	6839      	ldr	r1, [r7, #0]
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 fcb6 	bl	8011580 <USBD_GetStatus>
          break;
 8010c14:	e00e      	b.n	8010c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010c16:	6839      	ldr	r1, [r7, #0]
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 fce5 	bl	80115e8 <USBD_SetFeature>
          break;
 8010c1e:	e009      	b.n	8010c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010c20:	6839      	ldr	r1, [r7, #0]
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 fd09 	bl	801163a <USBD_ClrFeature>
          break;
 8010c28:	e004      	b.n	8010c34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010c2a:	6839      	ldr	r1, [r7, #0]
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f000 fd60 	bl	80116f2 <USBD_CtlError>
          break;
 8010c32:	bf00      	nop
      }
      break;
 8010c34:	e004      	b.n	8010c40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010c36:	6839      	ldr	r1, [r7, #0]
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f000 fd5a 	bl	80116f2 <USBD_CtlError>
      break;
 8010c3e:	bf00      	nop
  }

  return ret;
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop

08010c4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b084      	sub	sp, #16
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c56:	2300      	movs	r3, #0
 8010c58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010c62:	2b40      	cmp	r3, #64	@ 0x40
 8010c64:	d005      	beq.n	8010c72 <USBD_StdItfReq+0x26>
 8010c66:	2b40      	cmp	r3, #64	@ 0x40
 8010c68:	d852      	bhi.n	8010d10 <USBD_StdItfReq+0xc4>
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <USBD_StdItfReq+0x26>
 8010c6e:	2b20      	cmp	r3, #32
 8010c70:	d14e      	bne.n	8010d10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	3b01      	subs	r3, #1
 8010c7c:	2b02      	cmp	r3, #2
 8010c7e:	d840      	bhi.n	8010d02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	889b      	ldrh	r3, [r3, #4]
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d836      	bhi.n	8010cf8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	889b      	ldrh	r3, [r3, #4]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	4619      	mov	r1, r3
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f7ff feda 	bl	8010a4c <USBD_CoreFindIF>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010c9c:	7bbb      	ldrb	r3, [r7, #14]
 8010c9e:	2bff      	cmp	r3, #255	@ 0xff
 8010ca0:	d01d      	beq.n	8010cde <USBD_StdItfReq+0x92>
 8010ca2:	7bbb      	ldrb	r3, [r7, #14]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d11a      	bne.n	8010cde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010ca8:	7bba      	ldrb	r2, [r7, #14]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	32ae      	adds	r2, #174	@ 0xae
 8010cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cb2:	689b      	ldr	r3, [r3, #8]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d00f      	beq.n	8010cd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010cb8:	7bba      	ldrb	r2, [r7, #14]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010cc0:	7bba      	ldrb	r2, [r7, #14]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	32ae      	adds	r2, #174	@ 0xae
 8010cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cca:	689b      	ldr	r3, [r3, #8]
 8010ccc:	6839      	ldr	r1, [r7, #0]
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	4798      	blx	r3
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010cd6:	e004      	b.n	8010ce2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010cd8:	2303      	movs	r3, #3
 8010cda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010cdc:	e001      	b.n	8010ce2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010cde:	2303      	movs	r3, #3
 8010ce0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	88db      	ldrh	r3, [r3, #6]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d110      	bne.n	8010d0c <USBD_StdItfReq+0xc0>
 8010cea:	7bfb      	ldrb	r3, [r7, #15]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d10d      	bne.n	8010d0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 fddc 	bl	80118ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010cf6:	e009      	b.n	8010d0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010cf8:	6839      	ldr	r1, [r7, #0]
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f000 fcf9 	bl	80116f2 <USBD_CtlError>
          break;
 8010d00:	e004      	b.n	8010d0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010d02:	6839      	ldr	r1, [r7, #0]
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f000 fcf4 	bl	80116f2 <USBD_CtlError>
          break;
 8010d0a:	e000      	b.n	8010d0e <USBD_StdItfReq+0xc2>
          break;
 8010d0c:	bf00      	nop
      }
      break;
 8010d0e:	e004      	b.n	8010d1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010d10:	6839      	ldr	r1, [r7, #0]
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 fced 	bl	80116f2 <USBD_CtlError>
      break;
 8010d18:	bf00      	nop
  }

  return ret;
 8010d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	889b      	ldrh	r3, [r3, #4]
 8010d36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010d40:	2b40      	cmp	r3, #64	@ 0x40
 8010d42:	d007      	beq.n	8010d54 <USBD_StdEPReq+0x30>
 8010d44:	2b40      	cmp	r3, #64	@ 0x40
 8010d46:	f200 8181 	bhi.w	801104c <USBD_StdEPReq+0x328>
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d02a      	beq.n	8010da4 <USBD_StdEPReq+0x80>
 8010d4e:	2b20      	cmp	r3, #32
 8010d50:	f040 817c 	bne.w	801104c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010d54:	7bbb      	ldrb	r3, [r7, #14]
 8010d56:	4619      	mov	r1, r3
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f7ff fe84 	bl	8010a66 <USBD_CoreFindEP>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010d62:	7b7b      	ldrb	r3, [r7, #13]
 8010d64:	2bff      	cmp	r3, #255	@ 0xff
 8010d66:	f000 8176 	beq.w	8011056 <USBD_StdEPReq+0x332>
 8010d6a:	7b7b      	ldrb	r3, [r7, #13]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f040 8172 	bne.w	8011056 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8010d72:	7b7a      	ldrb	r2, [r7, #13]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010d7a:	7b7a      	ldrb	r2, [r7, #13]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	32ae      	adds	r2, #174	@ 0xae
 8010d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d84:	689b      	ldr	r3, [r3, #8]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	f000 8165 	beq.w	8011056 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010d8c:	7b7a      	ldrb	r2, [r7, #13]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	32ae      	adds	r2, #174	@ 0xae
 8010d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d96:	689b      	ldr	r3, [r3, #8]
 8010d98:	6839      	ldr	r1, [r7, #0]
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	4798      	blx	r3
 8010d9e:	4603      	mov	r3, r0
 8010da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010da2:	e158      	b.n	8011056 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	785b      	ldrb	r3, [r3, #1]
 8010da8:	2b03      	cmp	r3, #3
 8010daa:	d008      	beq.n	8010dbe <USBD_StdEPReq+0x9a>
 8010dac:	2b03      	cmp	r3, #3
 8010dae:	f300 8147 	bgt.w	8011040 <USBD_StdEPReq+0x31c>
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f000 809b 	beq.w	8010eee <USBD_StdEPReq+0x1ca>
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d03c      	beq.n	8010e36 <USBD_StdEPReq+0x112>
 8010dbc:	e140      	b.n	8011040 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	2b02      	cmp	r3, #2
 8010dc8:	d002      	beq.n	8010dd0 <USBD_StdEPReq+0xac>
 8010dca:	2b03      	cmp	r3, #3
 8010dcc:	d016      	beq.n	8010dfc <USBD_StdEPReq+0xd8>
 8010dce:	e02c      	b.n	8010e2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010dd0:	7bbb      	ldrb	r3, [r7, #14]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d00d      	beq.n	8010df2 <USBD_StdEPReq+0xce>
 8010dd6:	7bbb      	ldrb	r3, [r7, #14]
 8010dd8:	2b80      	cmp	r3, #128	@ 0x80
 8010dda:	d00a      	beq.n	8010df2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010ddc:	7bbb      	ldrb	r3, [r7, #14]
 8010dde:	4619      	mov	r1, r3
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f001 f983 	bl	80120ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010de6:	2180      	movs	r1, #128	@ 0x80
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f001 f97f 	bl	80120ec <USBD_LL_StallEP>
 8010dee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010df0:	e020      	b.n	8010e34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010df2:	6839      	ldr	r1, [r7, #0]
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f000 fc7c 	bl	80116f2 <USBD_CtlError>
              break;
 8010dfa:	e01b      	b.n	8010e34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	885b      	ldrh	r3, [r3, #2]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d10e      	bne.n	8010e22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00b      	beq.n	8010e22 <USBD_StdEPReq+0xfe>
 8010e0a:	7bbb      	ldrb	r3, [r7, #14]
 8010e0c:	2b80      	cmp	r3, #128	@ 0x80
 8010e0e:	d008      	beq.n	8010e22 <USBD_StdEPReq+0xfe>
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	88db      	ldrh	r3, [r3, #6]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d104      	bne.n	8010e22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e18:	7bbb      	ldrb	r3, [r7, #14]
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f001 f965 	bl	80120ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fd43 	bl	80118ae <USBD_CtlSendStatus>

              break;
 8010e28:	e004      	b.n	8010e34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010e2a:	6839      	ldr	r1, [r7, #0]
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fc60 	bl	80116f2 <USBD_CtlError>
              break;
 8010e32:	bf00      	nop
          }
          break;
 8010e34:	e109      	b.n	801104a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	2b02      	cmp	r3, #2
 8010e40:	d002      	beq.n	8010e48 <USBD_StdEPReq+0x124>
 8010e42:	2b03      	cmp	r3, #3
 8010e44:	d016      	beq.n	8010e74 <USBD_StdEPReq+0x150>
 8010e46:	e04b      	b.n	8010ee0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010e48:	7bbb      	ldrb	r3, [r7, #14]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00d      	beq.n	8010e6a <USBD_StdEPReq+0x146>
 8010e4e:	7bbb      	ldrb	r3, [r7, #14]
 8010e50:	2b80      	cmp	r3, #128	@ 0x80
 8010e52:	d00a      	beq.n	8010e6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e54:	7bbb      	ldrb	r3, [r7, #14]
 8010e56:	4619      	mov	r1, r3
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f001 f947 	bl	80120ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e5e:	2180      	movs	r1, #128	@ 0x80
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f001 f943 	bl	80120ec <USBD_LL_StallEP>
 8010e66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010e68:	e040      	b.n	8010eec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010e6a:	6839      	ldr	r1, [r7, #0]
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 fc40 	bl	80116f2 <USBD_CtlError>
              break;
 8010e72:	e03b      	b.n	8010eec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	885b      	ldrh	r3, [r3, #2]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d136      	bne.n	8010eea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010e7c:	7bbb      	ldrb	r3, [r7, #14]
 8010e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d004      	beq.n	8010e90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010e86:	7bbb      	ldrb	r3, [r7, #14]
 8010e88:	4619      	mov	r1, r3
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f001 f94d 	bl	801212a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 fd0c 	bl	80118ae <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010e96:	7bbb      	ldrb	r3, [r7, #14]
 8010e98:	4619      	mov	r1, r3
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f7ff fde3 	bl	8010a66 <USBD_CoreFindEP>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ea4:	7b7b      	ldrb	r3, [r7, #13]
 8010ea6:	2bff      	cmp	r3, #255	@ 0xff
 8010ea8:	d01f      	beq.n	8010eea <USBD_StdEPReq+0x1c6>
 8010eaa:	7b7b      	ldrb	r3, [r7, #13]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d11c      	bne.n	8010eea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010eb0:	7b7a      	ldrb	r2, [r7, #13]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010eb8:	7b7a      	ldrb	r2, [r7, #13]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	32ae      	adds	r2, #174	@ 0xae
 8010ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec2:	689b      	ldr	r3, [r3, #8]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d010      	beq.n	8010eea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010ec8:	7b7a      	ldrb	r2, [r7, #13]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	32ae      	adds	r2, #174	@ 0xae
 8010ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ed2:	689b      	ldr	r3, [r3, #8]
 8010ed4:	6839      	ldr	r1, [r7, #0]
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	4798      	blx	r3
 8010eda:	4603      	mov	r3, r0
 8010edc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010ede:	e004      	b.n	8010eea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010ee0:	6839      	ldr	r1, [r7, #0]
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 fc05 	bl	80116f2 <USBD_CtlError>
              break;
 8010ee8:	e000      	b.n	8010eec <USBD_StdEPReq+0x1c8>
              break;
 8010eea:	bf00      	nop
          }
          break;
 8010eec:	e0ad      	b.n	801104a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	2b02      	cmp	r3, #2
 8010ef8:	d002      	beq.n	8010f00 <USBD_StdEPReq+0x1dc>
 8010efa:	2b03      	cmp	r3, #3
 8010efc:	d033      	beq.n	8010f66 <USBD_StdEPReq+0x242>
 8010efe:	e099      	b.n	8011034 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010f00:	7bbb      	ldrb	r3, [r7, #14]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d007      	beq.n	8010f16 <USBD_StdEPReq+0x1f2>
 8010f06:	7bbb      	ldrb	r3, [r7, #14]
 8010f08:	2b80      	cmp	r3, #128	@ 0x80
 8010f0a:	d004      	beq.n	8010f16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010f0c:	6839      	ldr	r1, [r7, #0]
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 fbef 	bl	80116f2 <USBD_CtlError>
                break;
 8010f14:	e093      	b.n	801103e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	da0b      	bge.n	8010f36 <USBD_StdEPReq+0x212>
 8010f1e:	7bbb      	ldrb	r3, [r7, #14]
 8010f20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010f24:	4613      	mov	r3, r2
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	4413      	add	r3, r2
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	3310      	adds	r3, #16
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	4413      	add	r3, r2
 8010f32:	3304      	adds	r3, #4
 8010f34:	e00b      	b.n	8010f4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010f36:	7bbb      	ldrb	r3, [r7, #14]
 8010f38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4413      	add	r3, r2
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	2200      	movs	r2, #0
 8010f54:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	330e      	adds	r3, #14
 8010f5a:	2202      	movs	r2, #2
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 fc44 	bl	80117ec <USBD_CtlSendData>
              break;
 8010f64:	e06b      	b.n	801103e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010f66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	da11      	bge.n	8010f92 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010f6e:	7bbb      	ldrb	r3, [r7, #14]
 8010f70:	f003 020f 	and.w	r2, r3, #15
 8010f74:	6879      	ldr	r1, [r7, #4]
 8010f76:	4613      	mov	r3, r2
 8010f78:	009b      	lsls	r3, r3, #2
 8010f7a:	4413      	add	r3, r2
 8010f7c:	009b      	lsls	r3, r3, #2
 8010f7e:	440b      	add	r3, r1
 8010f80:	3323      	adds	r3, #35	@ 0x23
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d117      	bne.n	8010fb8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8010f88:	6839      	ldr	r1, [r7, #0]
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 fbb1 	bl	80116f2 <USBD_CtlError>
                  break;
 8010f90:	e055      	b.n	801103e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010f92:	7bbb      	ldrb	r3, [r7, #14]
 8010f94:	f003 020f 	and.w	r2, r3, #15
 8010f98:	6879      	ldr	r1, [r7, #4]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	4413      	add	r3, r2
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	440b      	add	r3, r1
 8010fa4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d104      	bne.n	8010fb8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8010fae:	6839      	ldr	r1, [r7, #0]
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f000 fb9e 	bl	80116f2 <USBD_CtlError>
                  break;
 8010fb6:	e042      	b.n	801103e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	da0b      	bge.n	8010fd8 <USBD_StdEPReq+0x2b4>
 8010fc0:	7bbb      	ldrb	r3, [r7, #14]
 8010fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010fc6:	4613      	mov	r3, r2
 8010fc8:	009b      	lsls	r3, r3, #2
 8010fca:	4413      	add	r3, r2
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	3310      	adds	r3, #16
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	4413      	add	r3, r2
 8010fd4:	3304      	adds	r3, #4
 8010fd6:	e00b      	b.n	8010ff0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010fd8:	7bbb      	ldrb	r3, [r7, #14]
 8010fda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010fde:	4613      	mov	r3, r2
 8010fe0:	009b      	lsls	r3, r3, #2
 8010fe2:	4413      	add	r3, r2
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010fea:	687a      	ldr	r2, [r7, #4]
 8010fec:	4413      	add	r3, r2
 8010fee:	3304      	adds	r3, #4
 8010ff0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010ff2:	7bbb      	ldrb	r3, [r7, #14]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d002      	beq.n	8010ffe <USBD_StdEPReq+0x2da>
 8010ff8:	7bbb      	ldrb	r3, [r7, #14]
 8010ffa:	2b80      	cmp	r3, #128	@ 0x80
 8010ffc:	d103      	bne.n	8011006 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	2200      	movs	r2, #0
 8011002:	739a      	strb	r2, [r3, #14]
 8011004:	e00e      	b.n	8011024 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011006:	7bbb      	ldrb	r3, [r7, #14]
 8011008:	4619      	mov	r1, r3
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f001 f8ac 	bl	8012168 <USBD_LL_IsStallEP>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d003      	beq.n	801101e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	2201      	movs	r2, #1
 801101a:	739a      	strb	r2, [r3, #14]
 801101c:	e002      	b.n	8011024 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	2200      	movs	r2, #0
 8011022:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	330e      	adds	r3, #14
 8011028:	2202      	movs	r2, #2
 801102a:	4619      	mov	r1, r3
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 fbdd 	bl	80117ec <USBD_CtlSendData>
              break;
 8011032:	e004      	b.n	801103e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8011034:	6839      	ldr	r1, [r7, #0]
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 fb5b 	bl	80116f2 <USBD_CtlError>
              break;
 801103c:	bf00      	nop
          }
          break;
 801103e:	e004      	b.n	801104a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8011040:	6839      	ldr	r1, [r7, #0]
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 fb55 	bl	80116f2 <USBD_CtlError>
          break;
 8011048:	bf00      	nop
      }
      break;
 801104a:	e005      	b.n	8011058 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 801104c:	6839      	ldr	r1, [r7, #0]
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 fb4f 	bl	80116f2 <USBD_CtlError>
      break;
 8011054:	e000      	b.n	8011058 <USBD_StdEPReq+0x334>
      break;
 8011056:	bf00      	nop
  }

  return ret;
 8011058:	7bfb      	ldrb	r3, [r7, #15]
}
 801105a:	4618      	mov	r0, r3
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
	...

08011064 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801106e:	2300      	movs	r3, #0
 8011070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011072:	2300      	movs	r3, #0
 8011074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011076:	2300      	movs	r3, #0
 8011078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	885b      	ldrh	r3, [r3, #2]
 801107e:	0a1b      	lsrs	r3, r3, #8
 8011080:	b29b      	uxth	r3, r3
 8011082:	3b01      	subs	r3, #1
 8011084:	2b06      	cmp	r3, #6
 8011086:	f200 8128 	bhi.w	80112da <USBD_GetDescriptor+0x276>
 801108a:	a201      	add	r2, pc, #4	@ (adr r2, 8011090 <USBD_GetDescriptor+0x2c>)
 801108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011090:	080110ad 	.word	0x080110ad
 8011094:	080110c5 	.word	0x080110c5
 8011098:	08011105 	.word	0x08011105
 801109c:	080112db 	.word	0x080112db
 80110a0:	080112db 	.word	0x080112db
 80110a4:	0801127b 	.word	0x0801127b
 80110a8:	080112a7 	.word	0x080112a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	7c12      	ldrb	r2, [r2, #16]
 80110b8:	f107 0108 	add.w	r1, r7, #8
 80110bc:	4610      	mov	r0, r2
 80110be:	4798      	blx	r3
 80110c0:	60f8      	str	r0, [r7, #12]
      break;
 80110c2:	e112      	b.n	80112ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	7c1b      	ldrb	r3, [r3, #16]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d10d      	bne.n	80110e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110d4:	f107 0208 	add.w	r2, r7, #8
 80110d8:	4610      	mov	r0, r2
 80110da:	4798      	blx	r3
 80110dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	3301      	adds	r3, #1
 80110e2:	2202      	movs	r2, #2
 80110e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80110e6:	e100      	b.n	80112ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110f0:	f107 0208 	add.w	r2, r7, #8
 80110f4:	4610      	mov	r0, r2
 80110f6:	4798      	blx	r3
 80110f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3301      	adds	r3, #1
 80110fe:	2202      	movs	r2, #2
 8011100:	701a      	strb	r2, [r3, #0]
      break;
 8011102:	e0f2      	b.n	80112ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	885b      	ldrh	r3, [r3, #2]
 8011108:	b2db      	uxtb	r3, r3
 801110a:	2b05      	cmp	r3, #5
 801110c:	f200 80ac 	bhi.w	8011268 <USBD_GetDescriptor+0x204>
 8011110:	a201      	add	r2, pc, #4	@ (adr r2, 8011118 <USBD_GetDescriptor+0xb4>)
 8011112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011116:	bf00      	nop
 8011118:	08011131 	.word	0x08011131
 801111c:	08011165 	.word	0x08011165
 8011120:	08011199 	.word	0x08011199
 8011124:	080111cd 	.word	0x080111cd
 8011128:	08011201 	.word	0x08011201
 801112c:	08011235 	.word	0x08011235
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011136:	685b      	ldr	r3, [r3, #4]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d00b      	beq.n	8011154 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011142:	685b      	ldr	r3, [r3, #4]
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	7c12      	ldrb	r2, [r2, #16]
 8011148:	f107 0108 	add.w	r1, r7, #8
 801114c:	4610      	mov	r0, r2
 801114e:	4798      	blx	r3
 8011150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011152:	e091      	b.n	8011278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011154:	6839      	ldr	r1, [r7, #0]
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f000 facb 	bl	80116f2 <USBD_CtlError>
            err++;
 801115c:	7afb      	ldrb	r3, [r7, #11]
 801115e:	3301      	adds	r3, #1
 8011160:	72fb      	strb	r3, [r7, #11]
          break;
 8011162:	e089      	b.n	8011278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801116a:	689b      	ldr	r3, [r3, #8]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d00b      	beq.n	8011188 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	7c12      	ldrb	r2, [r2, #16]
 801117c:	f107 0108 	add.w	r1, r7, #8
 8011180:	4610      	mov	r0, r2
 8011182:	4798      	blx	r3
 8011184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011186:	e077      	b.n	8011278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011188:	6839      	ldr	r1, [r7, #0]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 fab1 	bl	80116f2 <USBD_CtlError>
            err++;
 8011190:	7afb      	ldrb	r3, [r7, #11]
 8011192:	3301      	adds	r3, #1
 8011194:	72fb      	strb	r3, [r7, #11]
          break;
 8011196:	e06f      	b.n	8011278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d00b      	beq.n	80111bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	7c12      	ldrb	r2, [r2, #16]
 80111b0:	f107 0108 	add.w	r1, r7, #8
 80111b4:	4610      	mov	r0, r2
 80111b6:	4798      	blx	r3
 80111b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111ba:	e05d      	b.n	8011278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80111bc:	6839      	ldr	r1, [r7, #0]
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 fa97 	bl	80116f2 <USBD_CtlError>
            err++;
 80111c4:	7afb      	ldrb	r3, [r7, #11]
 80111c6:	3301      	adds	r3, #1
 80111c8:	72fb      	strb	r3, [r7, #11]
          break;
 80111ca:	e055      	b.n	8011278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111d2:	691b      	ldr	r3, [r3, #16]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d00b      	beq.n	80111f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111de:	691b      	ldr	r3, [r3, #16]
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	7c12      	ldrb	r2, [r2, #16]
 80111e4:	f107 0108 	add.w	r1, r7, #8
 80111e8:	4610      	mov	r0, r2
 80111ea:	4798      	blx	r3
 80111ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111ee:	e043      	b.n	8011278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80111f0:	6839      	ldr	r1, [r7, #0]
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f000 fa7d 	bl	80116f2 <USBD_CtlError>
            err++;
 80111f8:	7afb      	ldrb	r3, [r7, #11]
 80111fa:	3301      	adds	r3, #1
 80111fc:	72fb      	strb	r3, [r7, #11]
          break;
 80111fe:	e03b      	b.n	8011278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011206:	695b      	ldr	r3, [r3, #20]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d00b      	beq.n	8011224 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011212:	695b      	ldr	r3, [r3, #20]
 8011214:	687a      	ldr	r2, [r7, #4]
 8011216:	7c12      	ldrb	r2, [r2, #16]
 8011218:	f107 0108 	add.w	r1, r7, #8
 801121c:	4610      	mov	r0, r2
 801121e:	4798      	blx	r3
 8011220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011222:	e029      	b.n	8011278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011224:	6839      	ldr	r1, [r7, #0]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 fa63 	bl	80116f2 <USBD_CtlError>
            err++;
 801122c:	7afb      	ldrb	r3, [r7, #11]
 801122e:	3301      	adds	r3, #1
 8011230:	72fb      	strb	r3, [r7, #11]
          break;
 8011232:	e021      	b.n	8011278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801123a:	699b      	ldr	r3, [r3, #24]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00b      	beq.n	8011258 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011246:	699b      	ldr	r3, [r3, #24]
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	7c12      	ldrb	r2, [r2, #16]
 801124c:	f107 0108 	add.w	r1, r7, #8
 8011250:	4610      	mov	r0, r2
 8011252:	4798      	blx	r3
 8011254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011256:	e00f      	b.n	8011278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011258:	6839      	ldr	r1, [r7, #0]
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 fa49 	bl	80116f2 <USBD_CtlError>
            err++;
 8011260:	7afb      	ldrb	r3, [r7, #11]
 8011262:	3301      	adds	r3, #1
 8011264:	72fb      	strb	r3, [r7, #11]
          break;
 8011266:	e007      	b.n	8011278 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011268:	6839      	ldr	r1, [r7, #0]
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 fa41 	bl	80116f2 <USBD_CtlError>
          err++;
 8011270:	7afb      	ldrb	r3, [r7, #11]
 8011272:	3301      	adds	r3, #1
 8011274:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011276:	bf00      	nop
      }
      break;
 8011278:	e037      	b.n	80112ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	7c1b      	ldrb	r3, [r3, #16]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d109      	bne.n	8011296 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801128a:	f107 0208 	add.w	r2, r7, #8
 801128e:	4610      	mov	r0, r2
 8011290:	4798      	blx	r3
 8011292:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011294:	e029      	b.n	80112ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011296:	6839      	ldr	r1, [r7, #0]
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f000 fa2a 	bl	80116f2 <USBD_CtlError>
        err++;
 801129e:	7afb      	ldrb	r3, [r7, #11]
 80112a0:	3301      	adds	r3, #1
 80112a2:	72fb      	strb	r3, [r7, #11]
      break;
 80112a4:	e021      	b.n	80112ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	7c1b      	ldrb	r3, [r3, #16]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d10d      	bne.n	80112ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112b6:	f107 0208 	add.w	r2, r7, #8
 80112ba:	4610      	mov	r0, r2
 80112bc:	4798      	blx	r3
 80112be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	3301      	adds	r3, #1
 80112c4:	2207      	movs	r2, #7
 80112c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80112c8:	e00f      	b.n	80112ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80112ca:	6839      	ldr	r1, [r7, #0]
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f000 fa10 	bl	80116f2 <USBD_CtlError>
        err++;
 80112d2:	7afb      	ldrb	r3, [r7, #11]
 80112d4:	3301      	adds	r3, #1
 80112d6:	72fb      	strb	r3, [r7, #11]
      break;
 80112d8:	e007      	b.n	80112ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80112da:	6839      	ldr	r1, [r7, #0]
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 fa08 	bl	80116f2 <USBD_CtlError>
      err++;
 80112e2:	7afb      	ldrb	r3, [r7, #11]
 80112e4:	3301      	adds	r3, #1
 80112e6:	72fb      	strb	r3, [r7, #11]
      break;
 80112e8:	bf00      	nop
  }

  if (err != 0U)
 80112ea:	7afb      	ldrb	r3, [r7, #11]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d11e      	bne.n	801132e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	88db      	ldrh	r3, [r3, #6]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d016      	beq.n	8011326 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80112f8:	893b      	ldrh	r3, [r7, #8]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d00e      	beq.n	801131c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	88da      	ldrh	r2, [r3, #6]
 8011302:	893b      	ldrh	r3, [r7, #8]
 8011304:	4293      	cmp	r3, r2
 8011306:	bf28      	it	cs
 8011308:	4613      	movcs	r3, r2
 801130a:	b29b      	uxth	r3, r3
 801130c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801130e:	893b      	ldrh	r3, [r7, #8]
 8011310:	461a      	mov	r2, r3
 8011312:	68f9      	ldr	r1, [r7, #12]
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f000 fa69 	bl	80117ec <USBD_CtlSendData>
 801131a:	e009      	b.n	8011330 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801131c:	6839      	ldr	r1, [r7, #0]
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f000 f9e7 	bl	80116f2 <USBD_CtlError>
 8011324:	e004      	b.n	8011330 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 fac1 	bl	80118ae <USBD_CtlSendStatus>
 801132c:	e000      	b.n	8011330 <USBD_GetDescriptor+0x2cc>
    return;
 801132e:	bf00      	nop
  }
}
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop

08011338 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	889b      	ldrh	r3, [r3, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d131      	bne.n	80113ae <USBD_SetAddress+0x76>
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	88db      	ldrh	r3, [r3, #6]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d12d      	bne.n	80113ae <USBD_SetAddress+0x76>
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	885b      	ldrh	r3, [r3, #2]
 8011356:	2b7f      	cmp	r3, #127	@ 0x7f
 8011358:	d829      	bhi.n	80113ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	885b      	ldrh	r3, [r3, #2]
 801135e:	b2db      	uxtb	r3, r3
 8011360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011364:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801136c:	b2db      	uxtb	r3, r3
 801136e:	2b03      	cmp	r3, #3
 8011370:	d104      	bne.n	801137c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011372:	6839      	ldr	r1, [r7, #0]
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f000 f9bc 	bl	80116f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801137a:	e01d      	b.n	80113b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	7bfa      	ldrb	r2, [r7, #15]
 8011380:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011384:	7bfb      	ldrb	r3, [r7, #15]
 8011386:	4619      	mov	r1, r3
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f000 ff19 	bl	80121c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f000 fa8d 	bl	80118ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011394:	7bfb      	ldrb	r3, [r7, #15]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d004      	beq.n	80113a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2202      	movs	r2, #2
 801139e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113a2:	e009      	b.n	80113b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2201      	movs	r2, #1
 80113a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113ac:	e004      	b.n	80113b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80113ae:	6839      	ldr	r1, [r7, #0]
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 f99e 	bl	80116f2 <USBD_CtlError>
  }
}
 80113b6:	bf00      	nop
 80113b8:	bf00      	nop
 80113ba:	3710      	adds	r7, #16
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	885b      	ldrh	r3, [r3, #2]
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	4b4e      	ldr	r3, [pc, #312]	@ (8011510 <USBD_SetConfig+0x150>)
 80113d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80113d8:	4b4d      	ldr	r3, [pc, #308]	@ (8011510 <USBD_SetConfig+0x150>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d905      	bls.n	80113ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f000 f985 	bl	80116f2 <USBD_CtlError>
    return USBD_FAIL;
 80113e8:	2303      	movs	r3, #3
 80113ea:	e08c      	b.n	8011506 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	2b02      	cmp	r3, #2
 80113f6:	d002      	beq.n	80113fe <USBD_SetConfig+0x3e>
 80113f8:	2b03      	cmp	r3, #3
 80113fa:	d029      	beq.n	8011450 <USBD_SetConfig+0x90>
 80113fc:	e075      	b.n	80114ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80113fe:	4b44      	ldr	r3, [pc, #272]	@ (8011510 <USBD_SetConfig+0x150>)
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d020      	beq.n	8011448 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011406:	4b42      	ldr	r3, [pc, #264]	@ (8011510 <USBD_SetConfig+0x150>)
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	461a      	mov	r2, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011410:	4b3f      	ldr	r3, [pc, #252]	@ (8011510 <USBD_SetConfig+0x150>)
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	4619      	mov	r1, r3
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f7fe ffcd 	bl	80103b6 <USBD_SetClassConfig>
 801141c:	4603      	mov	r3, r0
 801141e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011420:	7bfb      	ldrb	r3, [r7, #15]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d008      	beq.n	8011438 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011426:	6839      	ldr	r1, [r7, #0]
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 f962 	bl	80116f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2202      	movs	r2, #2
 8011432:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011436:	e065      	b.n	8011504 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 fa38 	bl	80118ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2203      	movs	r2, #3
 8011442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011446:	e05d      	b.n	8011504 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 fa30 	bl	80118ae <USBD_CtlSendStatus>
      break;
 801144e:	e059      	b.n	8011504 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011450:	4b2f      	ldr	r3, [pc, #188]	@ (8011510 <USBD_SetConfig+0x150>)
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d112      	bne.n	801147e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2202      	movs	r2, #2
 801145c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011460:	4b2b      	ldr	r3, [pc, #172]	@ (8011510 <USBD_SetConfig+0x150>)
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	461a      	mov	r2, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801146a:	4b29      	ldr	r3, [pc, #164]	@ (8011510 <USBD_SetConfig+0x150>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	4619      	mov	r1, r3
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7fe ffbc 	bl	80103ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f000 fa19 	bl	80118ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801147c:	e042      	b.n	8011504 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801147e:	4b24      	ldr	r3, [pc, #144]	@ (8011510 <USBD_SetConfig+0x150>)
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	461a      	mov	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	429a      	cmp	r2, r3
 801148a:	d02a      	beq.n	80114e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	b2db      	uxtb	r3, r3
 8011492:	4619      	mov	r1, r3
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f7fe ffaa 	bl	80103ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801149a:	4b1d      	ldr	r3, [pc, #116]	@ (8011510 <USBD_SetConfig+0x150>)
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	461a      	mov	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80114a4:	4b1a      	ldr	r3, [pc, #104]	@ (8011510 <USBD_SetConfig+0x150>)
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	4619      	mov	r1, r3
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f7fe ff83 	bl	80103b6 <USBD_SetClassConfig>
 80114b0:	4603      	mov	r3, r0
 80114b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80114b4:	7bfb      	ldrb	r3, [r7, #15]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00f      	beq.n	80114da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80114ba:	6839      	ldr	r1, [r7, #0]
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f000 f918 	bl	80116f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	4619      	mov	r1, r3
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7fe ff8f 	bl	80103ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2202      	movs	r2, #2
 80114d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80114d8:	e014      	b.n	8011504 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 f9e7 	bl	80118ae <USBD_CtlSendStatus>
      break;
 80114e0:	e010      	b.n	8011504 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f9e3 	bl	80118ae <USBD_CtlSendStatus>
      break;
 80114e8:	e00c      	b.n	8011504 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80114ea:	6839      	ldr	r1, [r7, #0]
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 f900 	bl	80116f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80114f2:	4b07      	ldr	r3, [pc, #28]	@ (8011510 <USBD_SetConfig+0x150>)
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	4619      	mov	r1, r3
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7fe ff78 	bl	80103ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80114fe:	2303      	movs	r3, #3
 8011500:	73fb      	strb	r3, [r7, #15]
      break;
 8011502:	bf00      	nop
  }

  return ret;
 8011504:	7bfb      	ldrb	r3, [r7, #15]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3710      	adds	r7, #16
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	2001cd20 	.word	0x2001cd20

08011514 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	88db      	ldrh	r3, [r3, #6]
 8011522:	2b01      	cmp	r3, #1
 8011524:	d004      	beq.n	8011530 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011526:	6839      	ldr	r1, [r7, #0]
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f000 f8e2 	bl	80116f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801152e:	e023      	b.n	8011578 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011536:	b2db      	uxtb	r3, r3
 8011538:	2b02      	cmp	r3, #2
 801153a:	dc02      	bgt.n	8011542 <USBD_GetConfig+0x2e>
 801153c:	2b00      	cmp	r3, #0
 801153e:	dc03      	bgt.n	8011548 <USBD_GetConfig+0x34>
 8011540:	e015      	b.n	801156e <USBD_GetConfig+0x5a>
 8011542:	2b03      	cmp	r3, #3
 8011544:	d00b      	beq.n	801155e <USBD_GetConfig+0x4a>
 8011546:	e012      	b.n	801156e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2200      	movs	r2, #0
 801154c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	3308      	adds	r3, #8
 8011552:	2201      	movs	r2, #1
 8011554:	4619      	mov	r1, r3
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 f948 	bl	80117ec <USBD_CtlSendData>
        break;
 801155c:	e00c      	b.n	8011578 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	3304      	adds	r3, #4
 8011562:	2201      	movs	r2, #1
 8011564:	4619      	mov	r1, r3
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 f940 	bl	80117ec <USBD_CtlSendData>
        break;
 801156c:	e004      	b.n	8011578 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801156e:	6839      	ldr	r1, [r7, #0]
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f000 f8be 	bl	80116f2 <USBD_CtlError>
        break;
 8011576:	bf00      	nop
}
 8011578:	bf00      	nop
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011590:	b2db      	uxtb	r3, r3
 8011592:	3b01      	subs	r3, #1
 8011594:	2b02      	cmp	r3, #2
 8011596:	d81e      	bhi.n	80115d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	88db      	ldrh	r3, [r3, #6]
 801159c:	2b02      	cmp	r3, #2
 801159e:	d004      	beq.n	80115aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80115a0:	6839      	ldr	r1, [r7, #0]
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 f8a5 	bl	80116f2 <USBD_CtlError>
        break;
 80115a8:	e01a      	b.n	80115e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2201      	movs	r2, #1
 80115ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d005      	beq.n	80115c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	f043 0202 	orr.w	r2, r3, #2
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	330c      	adds	r3, #12
 80115ca:	2202      	movs	r2, #2
 80115cc:	4619      	mov	r1, r3
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 f90c 	bl	80117ec <USBD_CtlSendData>
      break;
 80115d4:	e004      	b.n	80115e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80115d6:	6839      	ldr	r1, [r7, #0]
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f000 f88a 	bl	80116f2 <USBD_CtlError>
      break;
 80115de:	bf00      	nop
  }
}
 80115e0:	bf00      	nop
 80115e2:	3708      	adds	r7, #8
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	885b      	ldrh	r3, [r3, #2]
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d107      	bne.n	801160a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2201      	movs	r2, #1
 80115fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f953 	bl	80118ae <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011608:	e013      	b.n	8011632 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	885b      	ldrh	r3, [r3, #2]
 801160e:	2b02      	cmp	r3, #2
 8011610:	d10b      	bne.n	801162a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	889b      	ldrh	r3, [r3, #4]
 8011616:	0a1b      	lsrs	r3, r3, #8
 8011618:	b29b      	uxth	r3, r3
 801161a:	b2da      	uxtb	r2, r3
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 f943 	bl	80118ae <USBD_CtlSendStatus>
}
 8011628:	e003      	b.n	8011632 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801162a:	6839      	ldr	r1, [r7, #0]
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 f860 	bl	80116f2 <USBD_CtlError>
}
 8011632:	bf00      	nop
 8011634:	3708      	adds	r7, #8
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}

0801163a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801163a:	b580      	push	{r7, lr}
 801163c:	b082      	sub	sp, #8
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
 8011642:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801164a:	b2db      	uxtb	r3, r3
 801164c:	3b01      	subs	r3, #1
 801164e:	2b02      	cmp	r3, #2
 8011650:	d80b      	bhi.n	801166a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	885b      	ldrh	r3, [r3, #2]
 8011656:	2b01      	cmp	r3, #1
 8011658:	d10c      	bne.n	8011674 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2200      	movs	r2, #0
 801165e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f000 f923 	bl	80118ae <USBD_CtlSendStatus>
      }
      break;
 8011668:	e004      	b.n	8011674 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f000 f840 	bl	80116f2 <USBD_CtlError>
      break;
 8011672:	e000      	b.n	8011676 <USBD_ClrFeature+0x3c>
      break;
 8011674:	bf00      	nop
  }
}
 8011676:	bf00      	nop
 8011678:	3708      	adds	r7, #8
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}

0801167e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801167e:	b580      	push	{r7, lr}
 8011680:	b084      	sub	sp, #16
 8011682:	af00      	add	r7, sp, #0
 8011684:	6078      	str	r0, [r7, #4]
 8011686:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	781a      	ldrb	r2, [r3, #0]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	3301      	adds	r3, #1
 8011698:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	781a      	ldrb	r2, [r3, #0]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	3301      	adds	r3, #1
 80116a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f7ff fa3d 	bl	8010b28 <SWAPBYTE>
 80116ae:	4603      	mov	r3, r0
 80116b0:	461a      	mov	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	3301      	adds	r3, #1
 80116ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	3301      	adds	r3, #1
 80116c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80116c2:	68f8      	ldr	r0, [r7, #12]
 80116c4:	f7ff fa30 	bl	8010b28 <SWAPBYTE>
 80116c8:	4603      	mov	r3, r0
 80116ca:	461a      	mov	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	3301      	adds	r3, #1
 80116d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	3301      	adds	r3, #1
 80116da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f7ff fa23 	bl	8010b28 <SWAPBYTE>
 80116e2:	4603      	mov	r3, r0
 80116e4:	461a      	mov	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	80da      	strh	r2, [r3, #6]
}
 80116ea:	bf00      	nop
 80116ec:	3710      	adds	r7, #16
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116f2:	b580      	push	{r7, lr}
 80116f4:	b082      	sub	sp, #8
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80116fc:	2180      	movs	r1, #128	@ 0x80
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 fcf4 	bl	80120ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011704:	2100      	movs	r1, #0
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f000 fcf0 	bl	80120ec <USBD_LL_StallEP>
}
 801170c:	bf00      	nop
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b086      	sub	sp, #24
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011720:	2300      	movs	r3, #0
 8011722:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d042      	beq.n	80117b0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801172e:	6938      	ldr	r0, [r7, #16]
 8011730:	f000 f842 	bl	80117b8 <USBD_GetLen>
 8011734:	4603      	mov	r3, r0
 8011736:	3301      	adds	r3, #1
 8011738:	005b      	lsls	r3, r3, #1
 801173a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801173e:	d808      	bhi.n	8011752 <USBD_GetString+0x3e>
 8011740:	6938      	ldr	r0, [r7, #16]
 8011742:	f000 f839 	bl	80117b8 <USBD_GetLen>
 8011746:	4603      	mov	r3, r0
 8011748:	3301      	adds	r3, #1
 801174a:	b29b      	uxth	r3, r3
 801174c:	005b      	lsls	r3, r3, #1
 801174e:	b29a      	uxth	r2, r3
 8011750:	e001      	b.n	8011756 <USBD_GetString+0x42>
 8011752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801175a:	7dfb      	ldrb	r3, [r7, #23]
 801175c:	68ba      	ldr	r2, [r7, #8]
 801175e:	4413      	add	r3, r2
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	7812      	ldrb	r2, [r2, #0]
 8011764:	701a      	strb	r2, [r3, #0]
  idx++;
 8011766:	7dfb      	ldrb	r3, [r7, #23]
 8011768:	3301      	adds	r3, #1
 801176a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801176c:	7dfb      	ldrb	r3, [r7, #23]
 801176e:	68ba      	ldr	r2, [r7, #8]
 8011770:	4413      	add	r3, r2
 8011772:	2203      	movs	r2, #3
 8011774:	701a      	strb	r2, [r3, #0]
  idx++;
 8011776:	7dfb      	ldrb	r3, [r7, #23]
 8011778:	3301      	adds	r3, #1
 801177a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801177c:	e013      	b.n	80117a6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801177e:	7dfb      	ldrb	r3, [r7, #23]
 8011780:	68ba      	ldr	r2, [r7, #8]
 8011782:	4413      	add	r3, r2
 8011784:	693a      	ldr	r2, [r7, #16]
 8011786:	7812      	ldrb	r2, [r2, #0]
 8011788:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	3301      	adds	r3, #1
 801178e:	613b      	str	r3, [r7, #16]
    idx++;
 8011790:	7dfb      	ldrb	r3, [r7, #23]
 8011792:	3301      	adds	r3, #1
 8011794:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011796:	7dfb      	ldrb	r3, [r7, #23]
 8011798:	68ba      	ldr	r2, [r7, #8]
 801179a:	4413      	add	r3, r2
 801179c:	2200      	movs	r2, #0
 801179e:	701a      	strb	r2, [r3, #0]
    idx++;
 80117a0:	7dfb      	ldrb	r3, [r7, #23]
 80117a2:	3301      	adds	r3, #1
 80117a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1e7      	bne.n	801177e <USBD_GetString+0x6a>
 80117ae:	e000      	b.n	80117b2 <USBD_GetString+0x9e>
    return;
 80117b0:	bf00      	nop
  }
}
 80117b2:	3718      	adds	r7, #24
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}

080117b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80117c0:	2300      	movs	r3, #0
 80117c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80117c8:	e005      	b.n	80117d6 <USBD_GetLen+0x1e>
  {
    len++;
 80117ca:	7bfb      	ldrb	r3, [r7, #15]
 80117cc:	3301      	adds	r3, #1
 80117ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	3301      	adds	r3, #1
 80117d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d1f5      	bne.n	80117ca <USBD_GetLen+0x12>
  }

  return len;
 80117de:	7bfb      	ldrb	r3, [r7, #15]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3714      	adds	r7, #20
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr

080117ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	2202      	movs	r2, #2
 80117fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	68ba      	ldr	r2, [r7, #8]
 801180a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	68ba      	ldr	r2, [r7, #8]
 8011816:	2100      	movs	r1, #0
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f000 fcf0 	bl	80121fe <USBD_LL_Transmit>

  return USBD_OK;
 801181e:	2300      	movs	r3, #0
}
 8011820:	4618      	mov	r0, r3
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b084      	sub	sp, #16
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	60b9      	str	r1, [r7, #8]
 8011832:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	68ba      	ldr	r2, [r7, #8]
 8011838:	2100      	movs	r1, #0
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f000 fcdf 	bl	80121fe <USBD_LL_Transmit>

  return USBD_OK;
 8011840:	2300      	movs	r3, #0
}
 8011842:	4618      	mov	r0, r3
 8011844:	3710      	adds	r7, #16
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801184a:	b580      	push	{r7, lr}
 801184c:	b084      	sub	sp, #16
 801184e:	af00      	add	r7, sp, #0
 8011850:	60f8      	str	r0, [r7, #12]
 8011852:	60b9      	str	r1, [r7, #8]
 8011854:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2203      	movs	r2, #3
 801185a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	687a      	ldr	r2, [r7, #4]
 8011862:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	68ba      	ldr	r2, [r7, #8]
 801186a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	68ba      	ldr	r2, [r7, #8]
 801187a:	2100      	movs	r1, #0
 801187c:	68f8      	ldr	r0, [r7, #12]
 801187e:	f000 fcdf 	bl	8012240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011882:	2300      	movs	r3, #0
}
 8011884:	4618      	mov	r0, r3
 8011886:	3710      	adds	r7, #16
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	2100      	movs	r1, #0
 801189e:	68f8      	ldr	r0, [r7, #12]
 80118a0:	f000 fcce 	bl	8012240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118a4:	2300      	movs	r3, #0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}

080118ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80118ae:	b580      	push	{r7, lr}
 80118b0:	b082      	sub	sp, #8
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2204      	movs	r2, #4
 80118ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80118be:	2300      	movs	r3, #0
 80118c0:	2200      	movs	r2, #0
 80118c2:	2100      	movs	r1, #0
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f000 fc9a 	bl	80121fe <USBD_LL_Transmit>

  return USBD_OK;
 80118ca:	2300      	movs	r3, #0
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3708      	adds	r7, #8
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2205      	movs	r2, #5
 80118e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80118e4:	2300      	movs	r3, #0
 80118e6:	2200      	movs	r2, #0
 80118e8:	2100      	movs	r1, #0
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f000 fca8 	bl	8012240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118f0:	2300      	movs	r3, #0
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3708      	adds	r7, #8
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
	...

080118fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011900:	2200      	movs	r2, #0
 8011902:	4912      	ldr	r1, [pc, #72]	@ (801194c <MX_USB_DEVICE_Init+0x50>)
 8011904:	4812      	ldr	r0, [pc, #72]	@ (8011950 <MX_USB_DEVICE_Init+0x54>)
 8011906:	f7fe fcd9 	bl	80102bc <USBD_Init>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d001      	beq.n	8011914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011910:	f7f0 fb86 	bl	8002020 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011914:	490f      	ldr	r1, [pc, #60]	@ (8011954 <MX_USB_DEVICE_Init+0x58>)
 8011916:	480e      	ldr	r0, [pc, #56]	@ (8011950 <MX_USB_DEVICE_Init+0x54>)
 8011918:	f7fe fd00 	bl	801031c <USBD_RegisterClass>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d001      	beq.n	8011926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011922:	f7f0 fb7d 	bl	8002020 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011926:	490c      	ldr	r1, [pc, #48]	@ (8011958 <MX_USB_DEVICE_Init+0x5c>)
 8011928:	4809      	ldr	r0, [pc, #36]	@ (8011950 <MX_USB_DEVICE_Init+0x54>)
 801192a:	f7fe fbf7 	bl	801011c <USBD_CDC_RegisterInterface>
 801192e:	4603      	mov	r3, r0
 8011930:	2b00      	cmp	r3, #0
 8011932:	d001      	beq.n	8011938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011934:	f7f0 fb74 	bl	8002020 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011938:	4805      	ldr	r0, [pc, #20]	@ (8011950 <MX_USB_DEVICE_Init+0x54>)
 801193a:	f7fe fd25 	bl	8010388 <USBD_Start>
 801193e:	4603      	mov	r3, r0
 8011940:	2b00      	cmp	r3, #0
 8011942:	d001      	beq.n	8011948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011944:	f7f0 fb6c 	bl	8002020 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011948:	bf00      	nop
 801194a:	bd80      	pop	{r7, pc}
 801194c:	200000b8 	.word	0x200000b8
 8011950:	2001cd24 	.word	0x2001cd24
 8011954:	20000024 	.word	0x20000024
 8011958:	200000a4 	.word	0x200000a4

0801195c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011960:	2200      	movs	r2, #0
 8011962:	4905      	ldr	r1, [pc, #20]	@ (8011978 <CDC_Init_FS+0x1c>)
 8011964:	4805      	ldr	r0, [pc, #20]	@ (801197c <CDC_Init_FS+0x20>)
 8011966:	f7fe fbf3 	bl	8010150 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801196a:	4905      	ldr	r1, [pc, #20]	@ (8011980 <CDC_Init_FS+0x24>)
 801196c:	4803      	ldr	r0, [pc, #12]	@ (801197c <CDC_Init_FS+0x20>)
 801196e:	f7fe fc11 	bl	8010194 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011974:	4618      	mov	r0, r3
 8011976:	bd80      	pop	{r7, pc}
 8011978:	2001d800 	.word	0x2001d800
 801197c:	2001cd24 	.word	0x2001cd24
 8011980:	2001d000 	.word	0x2001d000

08011984 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011984:	b480      	push	{r7}
 8011986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011988:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801198a:	4618      	mov	r0, r3
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	4603      	mov	r3, r0
 801199c:	6039      	str	r1, [r7, #0]
 801199e:	71fb      	strb	r3, [r7, #7]
 80119a0:	4613      	mov	r3, r2
 80119a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80119a4:	79fb      	ldrb	r3, [r7, #7]
 80119a6:	2b23      	cmp	r3, #35	@ 0x23
 80119a8:	d84a      	bhi.n	8011a40 <CDC_Control_FS+0xac>
 80119aa:	a201      	add	r2, pc, #4	@ (adr r2, 80119b0 <CDC_Control_FS+0x1c>)
 80119ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b0:	08011a41 	.word	0x08011a41
 80119b4:	08011a41 	.word	0x08011a41
 80119b8:	08011a41 	.word	0x08011a41
 80119bc:	08011a41 	.word	0x08011a41
 80119c0:	08011a41 	.word	0x08011a41
 80119c4:	08011a41 	.word	0x08011a41
 80119c8:	08011a41 	.word	0x08011a41
 80119cc:	08011a41 	.word	0x08011a41
 80119d0:	08011a41 	.word	0x08011a41
 80119d4:	08011a41 	.word	0x08011a41
 80119d8:	08011a41 	.word	0x08011a41
 80119dc:	08011a41 	.word	0x08011a41
 80119e0:	08011a41 	.word	0x08011a41
 80119e4:	08011a41 	.word	0x08011a41
 80119e8:	08011a41 	.word	0x08011a41
 80119ec:	08011a41 	.word	0x08011a41
 80119f0:	08011a41 	.word	0x08011a41
 80119f4:	08011a41 	.word	0x08011a41
 80119f8:	08011a41 	.word	0x08011a41
 80119fc:	08011a41 	.word	0x08011a41
 8011a00:	08011a41 	.word	0x08011a41
 8011a04:	08011a41 	.word	0x08011a41
 8011a08:	08011a41 	.word	0x08011a41
 8011a0c:	08011a41 	.word	0x08011a41
 8011a10:	08011a41 	.word	0x08011a41
 8011a14:	08011a41 	.word	0x08011a41
 8011a18:	08011a41 	.word	0x08011a41
 8011a1c:	08011a41 	.word	0x08011a41
 8011a20:	08011a41 	.word	0x08011a41
 8011a24:	08011a41 	.word	0x08011a41
 8011a28:	08011a41 	.word	0x08011a41
 8011a2c:	08011a41 	.word	0x08011a41
 8011a30:	08011a41 	.word	0x08011a41
 8011a34:	08011a41 	.word	0x08011a41
 8011a38:	08011a41 	.word	0x08011a41
 8011a3c:	08011a41 	.word	0x08011a41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011a40:	bf00      	nop
  }

  return (USBD_OK);
 8011a42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	370c      	adds	r7, #12
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011a5a:	6879      	ldr	r1, [r7, #4]
 8011a5c:	4805      	ldr	r0, [pc, #20]	@ (8011a74 <CDC_Receive_FS+0x24>)
 8011a5e:	f7fe fb99 	bl	8010194 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011a62:	4804      	ldr	r0, [pc, #16]	@ (8011a74 <CDC_Receive_FS+0x24>)
 8011a64:	f7fe fbf4 	bl	8010250 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011a68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3708      	adds	r7, #8
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
 8011a72:	bf00      	nop
 8011a74:	2001cd24 	.word	0x2001cd24

08011a78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	460b      	mov	r3, r1
 8011a82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011a84:	2300      	movs	r3, #0
 8011a86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011a88:	4b0d      	ldr	r3, [pc, #52]	@ (8011ac0 <CDC_Transmit_FS+0x48>)
 8011a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011a8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d001      	beq.n	8011a9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e00b      	b.n	8011ab6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011a9e:	887b      	ldrh	r3, [r7, #2]
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	6879      	ldr	r1, [r7, #4]
 8011aa4:	4806      	ldr	r0, [pc, #24]	@ (8011ac0 <CDC_Transmit_FS+0x48>)
 8011aa6:	f7fe fb53 	bl	8010150 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011aaa:	4805      	ldr	r0, [pc, #20]	@ (8011ac0 <CDC_Transmit_FS+0x48>)
 8011aac:	f7fe fb90 	bl	80101d0 <USBD_CDC_TransmitPacket>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3710      	adds	r7, #16
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	2001cd24 	.word	0x2001cd24

08011ac4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b087      	sub	sp, #28
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	4613      	mov	r3, r2
 8011ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	371c      	adds	r7, #28
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr
	...

08011ae8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b083      	sub	sp, #12
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	4603      	mov	r3, r0
 8011af0:	6039      	str	r1, [r7, #0]
 8011af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	2212      	movs	r2, #18
 8011af8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011afa:	4b03      	ldr	r3, [pc, #12]	@ (8011b08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr
 8011b08:	200000d4 	.word	0x200000d4

08011b0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	4603      	mov	r3, r0
 8011b14:	6039      	str	r1, [r7, #0]
 8011b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	2204      	movs	r2, #4
 8011b1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011b1e:	4b03      	ldr	r3, [pc, #12]	@ (8011b2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	370c      	adds	r7, #12
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	200000e8 	.word	0x200000e8

08011b30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	4603      	mov	r3, r0
 8011b38:	6039      	str	r1, [r7, #0]
 8011b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011b3c:	79fb      	ldrb	r3, [r7, #7]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d105      	bne.n	8011b4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b42:	683a      	ldr	r2, [r7, #0]
 8011b44:	4907      	ldr	r1, [pc, #28]	@ (8011b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b46:	4808      	ldr	r0, [pc, #32]	@ (8011b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8011b48:	f7ff fde4 	bl	8011714 <USBD_GetString>
 8011b4c:	e004      	b.n	8011b58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	4904      	ldr	r1, [pc, #16]	@ (8011b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b52:	4805      	ldr	r0, [pc, #20]	@ (8011b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8011b54:	f7ff fdde 	bl	8011714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b58:	4b02      	ldr	r3, [pc, #8]	@ (8011b64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3708      	adds	r7, #8
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	2001e000 	.word	0x2001e000
 8011b68:	080154e4 	.word	0x080154e4

08011b6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	4603      	mov	r3, r0
 8011b74:	6039      	str	r1, [r7, #0]
 8011b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011b78:	683a      	ldr	r2, [r7, #0]
 8011b7a:	4904      	ldr	r1, [pc, #16]	@ (8011b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011b7c:	4804      	ldr	r0, [pc, #16]	@ (8011b90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011b7e:	f7ff fdc9 	bl	8011714 <USBD_GetString>
  return USBD_StrDesc;
 8011b82:	4b02      	ldr	r3, [pc, #8]	@ (8011b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3708      	adds	r7, #8
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	2001e000 	.word	0x2001e000
 8011b90:	080154fc 	.word	0x080154fc

08011b94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	6039      	str	r1, [r7, #0]
 8011b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	221a      	movs	r2, #26
 8011ba4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011ba6:	f000 f843 	bl	8011c30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011baa:	4b02      	ldr	r3, [pc, #8]	@ (8011bb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	200000ec 	.word	0x200000ec

08011bb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	6039      	str	r1, [r7, #0]
 8011bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011bc4:	79fb      	ldrb	r3, [r7, #7]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d105      	bne.n	8011bd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011bca:	683a      	ldr	r2, [r7, #0]
 8011bcc:	4907      	ldr	r1, [pc, #28]	@ (8011bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8011bce:	4808      	ldr	r0, [pc, #32]	@ (8011bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011bd0:	f7ff fda0 	bl	8011714 <USBD_GetString>
 8011bd4:	e004      	b.n	8011be0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011bd6:	683a      	ldr	r2, [r7, #0]
 8011bd8:	4904      	ldr	r1, [pc, #16]	@ (8011bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8011bda:	4805      	ldr	r0, [pc, #20]	@ (8011bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011bdc:	f7ff fd9a 	bl	8011714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011be0:	4b02      	ldr	r3, [pc, #8]	@ (8011bec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	2001e000 	.word	0x2001e000
 8011bf0:	08015510 	.word	0x08015510

08011bf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	6039      	str	r1, [r7, #0]
 8011bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011c00:	79fb      	ldrb	r3, [r7, #7]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d105      	bne.n	8011c12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c06:	683a      	ldr	r2, [r7, #0]
 8011c08:	4907      	ldr	r1, [pc, #28]	@ (8011c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c0a:	4808      	ldr	r0, [pc, #32]	@ (8011c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c0c:	f7ff fd82 	bl	8011714 <USBD_GetString>
 8011c10:	e004      	b.n	8011c1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c12:	683a      	ldr	r2, [r7, #0]
 8011c14:	4904      	ldr	r1, [pc, #16]	@ (8011c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c16:	4805      	ldr	r0, [pc, #20]	@ (8011c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c18:	f7ff fd7c 	bl	8011714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011c1c:	4b02      	ldr	r3, [pc, #8]	@ (8011c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3708      	adds	r7, #8
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	2001e000 	.word	0x2001e000
 8011c2c:	0801551c 	.word	0x0801551c

08011c30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011c36:	4b0f      	ldr	r3, [pc, #60]	@ (8011c74 <Get_SerialNum+0x44>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8011c78 <Get_SerialNum+0x48>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011c42:	4b0e      	ldr	r3, [pc, #56]	@ (8011c7c <Get_SerialNum+0x4c>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	4413      	add	r3, r2
 8011c4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d009      	beq.n	8011c6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011c56:	2208      	movs	r2, #8
 8011c58:	4909      	ldr	r1, [pc, #36]	@ (8011c80 <Get_SerialNum+0x50>)
 8011c5a:	68f8      	ldr	r0, [r7, #12]
 8011c5c:	f000 f814 	bl	8011c88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011c60:	2204      	movs	r2, #4
 8011c62:	4908      	ldr	r1, [pc, #32]	@ (8011c84 <Get_SerialNum+0x54>)
 8011c64:	68b8      	ldr	r0, [r7, #8]
 8011c66:	f000 f80f 	bl	8011c88 <IntToUnicode>
  }
}
 8011c6a:	bf00      	nop
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	1fff7a10 	.word	0x1fff7a10
 8011c78:	1fff7a14 	.word	0x1fff7a14
 8011c7c:	1fff7a18 	.word	0x1fff7a18
 8011c80:	200000ee 	.word	0x200000ee
 8011c84:	200000fe 	.word	0x200000fe

08011c88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b087      	sub	sp, #28
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	4613      	mov	r3, r2
 8011c94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011c96:	2300      	movs	r3, #0
 8011c98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	75fb      	strb	r3, [r7, #23]
 8011c9e:	e027      	b.n	8011cf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	0f1b      	lsrs	r3, r3, #28
 8011ca4:	2b09      	cmp	r3, #9
 8011ca6:	d80b      	bhi.n	8011cc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	0f1b      	lsrs	r3, r3, #28
 8011cac:	b2da      	uxtb	r2, r3
 8011cae:	7dfb      	ldrb	r3, [r7, #23]
 8011cb0:	005b      	lsls	r3, r3, #1
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	440b      	add	r3, r1
 8011cb8:	3230      	adds	r2, #48	@ 0x30
 8011cba:	b2d2      	uxtb	r2, r2
 8011cbc:	701a      	strb	r2, [r3, #0]
 8011cbe:	e00a      	b.n	8011cd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	0f1b      	lsrs	r3, r3, #28
 8011cc4:	b2da      	uxtb	r2, r3
 8011cc6:	7dfb      	ldrb	r3, [r7, #23]
 8011cc8:	005b      	lsls	r3, r3, #1
 8011cca:	4619      	mov	r1, r3
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	440b      	add	r3, r1
 8011cd0:	3237      	adds	r2, #55	@ 0x37
 8011cd2:	b2d2      	uxtb	r2, r2
 8011cd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	011b      	lsls	r3, r3, #4
 8011cda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011cdc:	7dfb      	ldrb	r3, [r7, #23]
 8011cde:	005b      	lsls	r3, r3, #1
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	68ba      	ldr	r2, [r7, #8]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011cea:	7dfb      	ldrb	r3, [r7, #23]
 8011cec:	3301      	adds	r3, #1
 8011cee:	75fb      	strb	r3, [r7, #23]
 8011cf0:	7dfa      	ldrb	r2, [r7, #23]
 8011cf2:	79fb      	ldrb	r3, [r7, #7]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d3d3      	bcc.n	8011ca0 <IntToUnicode+0x18>
  }
}
 8011cf8:	bf00      	nop
 8011cfa:	bf00      	nop
 8011cfc:	371c      	adds	r7, #28
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr
	...

08011d08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b08a      	sub	sp, #40	@ 0x28
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d10:	f107 0314 	add.w	r3, r7, #20
 8011d14:	2200      	movs	r2, #0
 8011d16:	601a      	str	r2, [r3, #0]
 8011d18:	605a      	str	r2, [r3, #4]
 8011d1a:	609a      	str	r2, [r3, #8]
 8011d1c:	60da      	str	r2, [r3, #12]
 8011d1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011d28:	d13a      	bne.n	8011da0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	613b      	str	r3, [r7, #16]
 8011d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8011da8 <HAL_PCD_MspInit+0xa0>)
 8011d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d32:	4a1d      	ldr	r2, [pc, #116]	@ (8011da8 <HAL_PCD_MspInit+0xa0>)
 8011d34:	f043 0301 	orr.w	r3, r3, #1
 8011d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8011d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8011da8 <HAL_PCD_MspInit+0xa0>)
 8011d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d3e:	f003 0301 	and.w	r3, r3, #1
 8011d42:	613b      	str	r3, [r7, #16]
 8011d44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011d46:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d4c:	2302      	movs	r3, #2
 8011d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d50:	2300      	movs	r3, #0
 8011d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d54:	2303      	movs	r3, #3
 8011d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011d58:	230a      	movs	r3, #10
 8011d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d5c:	f107 0314 	add.w	r3, r7, #20
 8011d60:	4619      	mov	r1, r3
 8011d62:	4812      	ldr	r0, [pc, #72]	@ (8011dac <HAL_PCD_MspInit+0xa4>)
 8011d64:	f7f2 ffdc 	bl	8004d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011d68:	4b0f      	ldr	r3, [pc, #60]	@ (8011da8 <HAL_PCD_MspInit+0xa0>)
 8011d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8011da8 <HAL_PCD_MspInit+0xa0>)
 8011d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d72:	6353      	str	r3, [r2, #52]	@ 0x34
 8011d74:	2300      	movs	r3, #0
 8011d76:	60fb      	str	r3, [r7, #12]
 8011d78:	4b0b      	ldr	r3, [pc, #44]	@ (8011da8 <HAL_PCD_MspInit+0xa0>)
 8011d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8011da8 <HAL_PCD_MspInit+0xa0>)
 8011d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011d82:	6453      	str	r3, [r2, #68]	@ 0x44
 8011d84:	4b08      	ldr	r3, [pc, #32]	@ (8011da8 <HAL_PCD_MspInit+0xa0>)
 8011d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011d8c:	60fb      	str	r3, [r7, #12]
 8011d8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011d90:	2200      	movs	r2, #0
 8011d92:	2105      	movs	r1, #5
 8011d94:	2043      	movs	r0, #67	@ 0x43
 8011d96:	f7f0 ff08 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011d9a:	2043      	movs	r0, #67	@ 0x43
 8011d9c:	f7f0 ff21 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011da0:	bf00      	nop
 8011da2:	3728      	adds	r7, #40	@ 0x28
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	40023800 	.word	0x40023800
 8011dac:	40020000 	.word	0x40020000

08011db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	4610      	mov	r0, r2
 8011dc8:	f7fe fb2b 	bl	8010422 <USBD_LL_SetupStage>
}
 8011dcc:	bf00      	nop
 8011dce:	3708      	adds	r7, #8
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	460b      	mov	r3, r1
 8011dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011de6:	78fa      	ldrb	r2, [r7, #3]
 8011de8:	6879      	ldr	r1, [r7, #4]
 8011dea:	4613      	mov	r3, r2
 8011dec:	00db      	lsls	r3, r3, #3
 8011dee:	4413      	add	r3, r2
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	440b      	add	r3, r1
 8011df4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	78fb      	ldrb	r3, [r7, #3]
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	f7fe fb65 	bl	80104cc <USBD_LL_DataOutStage>
}
 8011e02:	bf00      	nop
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b082      	sub	sp, #8
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
 8011e12:	460b      	mov	r3, r1
 8011e14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011e1c:	78fa      	ldrb	r2, [r7, #3]
 8011e1e:	6879      	ldr	r1, [r7, #4]
 8011e20:	4613      	mov	r3, r2
 8011e22:	00db      	lsls	r3, r3, #3
 8011e24:	4413      	add	r3, r2
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	440b      	add	r3, r1
 8011e2a:	3320      	adds	r3, #32
 8011e2c:	681a      	ldr	r2, [r3, #0]
 8011e2e:	78fb      	ldrb	r3, [r7, #3]
 8011e30:	4619      	mov	r1, r3
 8011e32:	f7fe fc07 	bl	8010644 <USBD_LL_DataInStage>
}
 8011e36:	bf00      	nop
 8011e38:	3708      	adds	r7, #8
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}

08011e3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e3e:	b580      	push	{r7, lr}
 8011e40:	b082      	sub	sp, #8
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7fe fd4b 	bl	80108e8 <USBD_LL_SOF>
}
 8011e52:	bf00      	nop
 8011e54:	3708      	adds	r7, #8
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}

08011e5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b084      	sub	sp, #16
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011e62:	2301      	movs	r3, #1
 8011e64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	79db      	ldrb	r3, [r3, #7]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	73fb      	strb	r3, [r7, #15]
 8011e72:	e008      	b.n	8011e86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	79db      	ldrb	r3, [r3, #7]
 8011e78:	2b02      	cmp	r3, #2
 8011e7a:	d102      	bne.n	8011e82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	73fb      	strb	r3, [r7, #15]
 8011e80:	e001      	b.n	8011e86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011e82:	f7f0 f8cd 	bl	8002020 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011e8c:	7bfa      	ldrb	r2, [r7, #15]
 8011e8e:	4611      	mov	r1, r2
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7fe fce5 	bl	8010860 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7fe fc8c 	bl	80107ba <USBD_LL_Reset>
}
 8011ea2:	bf00      	nop
 8011ea4:	3710      	adds	r7, #16
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
	...

08011eac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fe fce0 	bl	8010880 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	6812      	ldr	r2, [r2, #0]
 8011ece:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011ed2:	f043 0301 	orr.w	r3, r3, #1
 8011ed6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	7adb      	ldrb	r3, [r3, #11]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d005      	beq.n	8011eec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ee0:	4b04      	ldr	r3, [pc, #16]	@ (8011ef4 <HAL_PCD_SuspendCallback+0x48>)
 8011ee2:	691b      	ldr	r3, [r3, #16]
 8011ee4:	4a03      	ldr	r2, [pc, #12]	@ (8011ef4 <HAL_PCD_SuspendCallback+0x48>)
 8011ee6:	f043 0306 	orr.w	r3, r3, #6
 8011eea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011eec:	bf00      	nop
 8011eee:	3708      	adds	r7, #8
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	e000ed00 	.word	0xe000ed00

08011ef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fe fcd6 	bl	80108b8 <USBD_LL_Resume>
}
 8011f0c:	bf00      	nop
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f26:	78fa      	ldrb	r2, [r7, #3]
 8011f28:	4611      	mov	r1, r2
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7fe fd2e 	bl	801098c <USBD_LL_IsoOUTIncomplete>
}
 8011f30:	bf00      	nop
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	460b      	mov	r3, r1
 8011f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f4a:	78fa      	ldrb	r2, [r7, #3]
 8011f4c:	4611      	mov	r1, r2
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7fe fcea 	bl	8010928 <USBD_LL_IsoINIncomplete>
}
 8011f54:	bf00      	nop
 8011f56:	3708      	adds	r7, #8
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}

08011f5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fe fd40 	bl	80109f0 <USBD_LL_DevConnected>
}
 8011f70:	bf00      	nop
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7fe fd3d 	bl	8010a06 <USBD_LL_DevDisconnected>
}
 8011f8c:	bf00      	nop
 8011f8e:	3708      	adds	r7, #8
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d13c      	bne.n	801201e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011fa4:	4a20      	ldr	r2, [pc, #128]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	4a1e      	ldr	r2, [pc, #120]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fb0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011fba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fbe:	2204      	movs	r2, #4
 8011fc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011fc2:	4b19      	ldr	r3, [pc, #100]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fc4:	2202      	movs	r2, #2
 8011fc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011fc8:	4b17      	ldr	r3, [pc, #92]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011fce:	4b16      	ldr	r3, [pc, #88]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fd0:	2202      	movs	r2, #2
 8011fd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011fd4:	4b14      	ldr	r3, [pc, #80]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011fda:	4b13      	ldr	r3, [pc, #76]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fdc:	2200      	movs	r2, #0
 8011fde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011fe0:	4b11      	ldr	r3, [pc, #68]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011fe6:	4b10      	ldr	r3, [pc, #64]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011fec:	4b0e      	ldr	r3, [pc, #56]	@ (8012028 <USBD_LL_Init+0x94>)
 8011fee:	2200      	movs	r2, #0
 8011ff0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011ff2:	480d      	ldr	r0, [pc, #52]	@ (8012028 <USBD_LL_Init+0x94>)
 8011ff4:	f7f3 fb4e 	bl	8005694 <HAL_PCD_Init>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d001      	beq.n	8012002 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011ffe:	f7f0 f80f 	bl	8002020 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012002:	2180      	movs	r1, #128	@ 0x80
 8012004:	4808      	ldr	r0, [pc, #32]	@ (8012028 <USBD_LL_Init+0x94>)
 8012006:	f7f4 fd7a 	bl	8006afe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801200a:	2240      	movs	r2, #64	@ 0x40
 801200c:	2100      	movs	r1, #0
 801200e:	4806      	ldr	r0, [pc, #24]	@ (8012028 <USBD_LL_Init+0x94>)
 8012010:	f7f4 fd2e 	bl	8006a70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012014:	2280      	movs	r2, #128	@ 0x80
 8012016:	2101      	movs	r1, #1
 8012018:	4803      	ldr	r0, [pc, #12]	@ (8012028 <USBD_LL_Init+0x94>)
 801201a:	f7f4 fd29 	bl	8006a70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801201e:	2300      	movs	r3, #0
}
 8012020:	4618      	mov	r0, r3
 8012022:	3708      	adds	r7, #8
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	2001e200 	.word	0x2001e200

0801202c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b084      	sub	sp, #16
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012034:	2300      	movs	r3, #0
 8012036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012038:	2300      	movs	r3, #0
 801203a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012042:	4618      	mov	r0, r3
 8012044:	f7f3 fc35 	bl	80058b2 <HAL_PCD_Start>
 8012048:	4603      	mov	r3, r0
 801204a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801204c:	7bfb      	ldrb	r3, [r7, #15]
 801204e:	4618      	mov	r0, r3
 8012050:	f000 f942 	bl	80122d8 <USBD_Get_USB_Status>
 8012054:	4603      	mov	r3, r0
 8012056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012058:	7bbb      	ldrb	r3, [r7, #14]
}
 801205a:	4618      	mov	r0, r3
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}

08012062 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012062:	b580      	push	{r7, lr}
 8012064:	b084      	sub	sp, #16
 8012066:	af00      	add	r7, sp, #0
 8012068:	6078      	str	r0, [r7, #4]
 801206a:	4608      	mov	r0, r1
 801206c:	4611      	mov	r1, r2
 801206e:	461a      	mov	r2, r3
 8012070:	4603      	mov	r3, r0
 8012072:	70fb      	strb	r3, [r7, #3]
 8012074:	460b      	mov	r3, r1
 8012076:	70bb      	strb	r3, [r7, #2]
 8012078:	4613      	mov	r3, r2
 801207a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801207c:	2300      	movs	r3, #0
 801207e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012080:	2300      	movs	r3, #0
 8012082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801208a:	78bb      	ldrb	r3, [r7, #2]
 801208c:	883a      	ldrh	r2, [r7, #0]
 801208e:	78f9      	ldrb	r1, [r7, #3]
 8012090:	f7f4 f909 	bl	80062a6 <HAL_PCD_EP_Open>
 8012094:	4603      	mov	r3, r0
 8012096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012098:	7bfb      	ldrb	r3, [r7, #15]
 801209a:	4618      	mov	r0, r3
 801209c:	f000 f91c 	bl	80122d8 <USBD_Get_USB_Status>
 80120a0:	4603      	mov	r3, r0
 80120a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}

080120ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b084      	sub	sp, #16
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
 80120b6:	460b      	mov	r3, r1
 80120b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120ba:	2300      	movs	r3, #0
 80120bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120be:	2300      	movs	r3, #0
 80120c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80120c8:	78fa      	ldrb	r2, [r7, #3]
 80120ca:	4611      	mov	r1, r2
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7f4 f954 	bl	800637a <HAL_PCD_EP_Close>
 80120d2:	4603      	mov	r3, r0
 80120d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120d6:	7bfb      	ldrb	r3, [r7, #15]
 80120d8:	4618      	mov	r0, r3
 80120da:	f000 f8fd 	bl	80122d8 <USBD_Get_USB_Status>
 80120de:	4603      	mov	r3, r0
 80120e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
 80120f4:	460b      	mov	r3, r1
 80120f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120f8:	2300      	movs	r3, #0
 80120fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120fc:	2300      	movs	r3, #0
 80120fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012106:	78fa      	ldrb	r2, [r7, #3]
 8012108:	4611      	mov	r1, r2
 801210a:	4618      	mov	r0, r3
 801210c:	f7f4 fa0c 	bl	8006528 <HAL_PCD_EP_SetStall>
 8012110:	4603      	mov	r3, r0
 8012112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012114:	7bfb      	ldrb	r3, [r7, #15]
 8012116:	4618      	mov	r0, r3
 8012118:	f000 f8de 	bl	80122d8 <USBD_Get_USB_Status>
 801211c:	4603      	mov	r3, r0
 801211e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012120:	7bbb      	ldrb	r3, [r7, #14]
}
 8012122:	4618      	mov	r0, r3
 8012124:	3710      	adds	r7, #16
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}

0801212a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801212a:	b580      	push	{r7, lr}
 801212c:	b084      	sub	sp, #16
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
 8012132:	460b      	mov	r3, r1
 8012134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012136:	2300      	movs	r3, #0
 8012138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801213a:	2300      	movs	r3, #0
 801213c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012144:	78fa      	ldrb	r2, [r7, #3]
 8012146:	4611      	mov	r1, r2
 8012148:	4618      	mov	r0, r3
 801214a:	f7f4 fa50 	bl	80065ee <HAL_PCD_EP_ClrStall>
 801214e:	4603      	mov	r3, r0
 8012150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012152:	7bfb      	ldrb	r3, [r7, #15]
 8012154:	4618      	mov	r0, r3
 8012156:	f000 f8bf 	bl	80122d8 <USBD_Get_USB_Status>
 801215a:	4603      	mov	r3, r0
 801215c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801215e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012160:	4618      	mov	r0, r3
 8012162:	3710      	adds	r7, #16
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012168:	b480      	push	{r7}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	460b      	mov	r3, r1
 8012172:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801217a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801217c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012180:	2b00      	cmp	r3, #0
 8012182:	da0b      	bge.n	801219c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012184:	78fb      	ldrb	r3, [r7, #3]
 8012186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801218a:	68f9      	ldr	r1, [r7, #12]
 801218c:	4613      	mov	r3, r2
 801218e:	00db      	lsls	r3, r3, #3
 8012190:	4413      	add	r3, r2
 8012192:	009b      	lsls	r3, r3, #2
 8012194:	440b      	add	r3, r1
 8012196:	3316      	adds	r3, #22
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	e00b      	b.n	80121b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801219c:	78fb      	ldrb	r3, [r7, #3]
 801219e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80121a2:	68f9      	ldr	r1, [r7, #12]
 80121a4:	4613      	mov	r3, r2
 80121a6:	00db      	lsls	r3, r3, #3
 80121a8:	4413      	add	r3, r2
 80121aa:	009b      	lsls	r3, r3, #2
 80121ac:	440b      	add	r3, r1
 80121ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80121b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	3714      	adds	r7, #20
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr

080121c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	460b      	mov	r3, r1
 80121ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121cc:	2300      	movs	r3, #0
 80121ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121d0:	2300      	movs	r3, #0
 80121d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121da:	78fa      	ldrb	r2, [r7, #3]
 80121dc:	4611      	mov	r1, r2
 80121de:	4618      	mov	r0, r3
 80121e0:	f7f4 f83d 	bl	800625e <HAL_PCD_SetAddress>
 80121e4:	4603      	mov	r3, r0
 80121e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121e8:	7bfb      	ldrb	r3, [r7, #15]
 80121ea:	4618      	mov	r0, r3
 80121ec:	f000 f874 	bl	80122d8 <USBD_Get_USB_Status>
 80121f0:	4603      	mov	r3, r0
 80121f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3710      	adds	r7, #16
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b086      	sub	sp, #24
 8012202:	af00      	add	r7, sp, #0
 8012204:	60f8      	str	r0, [r7, #12]
 8012206:	607a      	str	r2, [r7, #4]
 8012208:	603b      	str	r3, [r7, #0]
 801220a:	460b      	mov	r3, r1
 801220c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801220e:	2300      	movs	r3, #0
 8012210:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012212:	2300      	movs	r3, #0
 8012214:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801221c:	7af9      	ldrb	r1, [r7, #11]
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	f7f4 f947 	bl	80064b4 <HAL_PCD_EP_Transmit>
 8012226:	4603      	mov	r3, r0
 8012228:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801222a:	7dfb      	ldrb	r3, [r7, #23]
 801222c:	4618      	mov	r0, r3
 801222e:	f000 f853 	bl	80122d8 <USBD_Get_USB_Status>
 8012232:	4603      	mov	r3, r0
 8012234:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012236:	7dbb      	ldrb	r3, [r7, #22]
}
 8012238:	4618      	mov	r0, r3
 801223a:	3718      	adds	r7, #24
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	607a      	str	r2, [r7, #4]
 801224a:	603b      	str	r3, [r7, #0]
 801224c:	460b      	mov	r3, r1
 801224e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012250:	2300      	movs	r3, #0
 8012252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012254:	2300      	movs	r3, #0
 8012256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801225e:	7af9      	ldrb	r1, [r7, #11]
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	f7f4 f8d3 	bl	800640e <HAL_PCD_EP_Receive>
 8012268:	4603      	mov	r3, r0
 801226a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801226c:	7dfb      	ldrb	r3, [r7, #23]
 801226e:	4618      	mov	r0, r3
 8012270:	f000 f832 	bl	80122d8 <USBD_Get_USB_Status>
 8012274:	4603      	mov	r3, r0
 8012276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012278:	7dbb      	ldrb	r3, [r7, #22]
}
 801227a:	4618      	mov	r0, r3
 801227c:	3718      	adds	r7, #24
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}

08012282 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012282:	b580      	push	{r7, lr}
 8012284:	b082      	sub	sp, #8
 8012286:	af00      	add	r7, sp, #0
 8012288:	6078      	str	r0, [r7, #4]
 801228a:	460b      	mov	r3, r1
 801228c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012294:	78fa      	ldrb	r2, [r7, #3]
 8012296:	4611      	mov	r1, r2
 8012298:	4618      	mov	r0, r3
 801229a:	f7f4 f8f3 	bl	8006484 <HAL_PCD_EP_GetRxCount>
 801229e:	4603      	mov	r3, r0
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3708      	adds	r7, #8
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b083      	sub	sp, #12
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80122b0:	4b03      	ldr	r3, [pc, #12]	@ (80122c0 <USBD_static_malloc+0x18>)
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	370c      	adds	r7, #12
 80122b6:	46bd      	mov	sp, r7
 80122b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122bc:	4770      	bx	lr
 80122be:	bf00      	nop
 80122c0:	2001e6e4 	.word	0x2001e6e4

080122c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80122c4:	b480      	push	{r7}
 80122c6:	b083      	sub	sp, #12
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]

}
 80122cc:	bf00      	nop
 80122ce:	370c      	adds	r7, #12
 80122d0:	46bd      	mov	sp, r7
 80122d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d6:	4770      	bx	lr

080122d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80122d8:	b480      	push	{r7}
 80122da:	b085      	sub	sp, #20
 80122dc:	af00      	add	r7, sp, #0
 80122de:	4603      	mov	r3, r0
 80122e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122e2:	2300      	movs	r3, #0
 80122e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80122e6:	79fb      	ldrb	r3, [r7, #7]
 80122e8:	2b03      	cmp	r3, #3
 80122ea:	d817      	bhi.n	801231c <USBD_Get_USB_Status+0x44>
 80122ec:	a201      	add	r2, pc, #4	@ (adr r2, 80122f4 <USBD_Get_USB_Status+0x1c>)
 80122ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122f2:	bf00      	nop
 80122f4:	08012305 	.word	0x08012305
 80122f8:	0801230b 	.word	0x0801230b
 80122fc:	08012311 	.word	0x08012311
 8012300:	08012317 	.word	0x08012317
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012304:	2300      	movs	r3, #0
 8012306:	73fb      	strb	r3, [r7, #15]
    break;
 8012308:	e00b      	b.n	8012322 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801230a:	2303      	movs	r3, #3
 801230c:	73fb      	strb	r3, [r7, #15]
    break;
 801230e:	e008      	b.n	8012322 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012310:	2301      	movs	r3, #1
 8012312:	73fb      	strb	r3, [r7, #15]
    break;
 8012314:	e005      	b.n	8012322 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012316:	2303      	movs	r3, #3
 8012318:	73fb      	strb	r3, [r7, #15]
    break;
 801231a:	e002      	b.n	8012322 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801231c:	2303      	movs	r3, #3
 801231e:	73fb      	strb	r3, [r7, #15]
    break;
 8012320:	bf00      	nop
  }
  return usb_status;
 8012322:	7bfb      	ldrb	r3, [r7, #15]
}
 8012324:	4618      	mov	r0, r3
 8012326:	3714      	adds	r7, #20
 8012328:	46bd      	mov	sp, r7
 801232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232e:	4770      	bx	lr

08012330 <__cvt>:
 8012330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012334:	ec57 6b10 	vmov	r6, r7, d0
 8012338:	2f00      	cmp	r7, #0
 801233a:	460c      	mov	r4, r1
 801233c:	4619      	mov	r1, r3
 801233e:	463b      	mov	r3, r7
 8012340:	bfbb      	ittet	lt
 8012342:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012346:	461f      	movlt	r7, r3
 8012348:	2300      	movge	r3, #0
 801234a:	232d      	movlt	r3, #45	@ 0x2d
 801234c:	700b      	strb	r3, [r1, #0]
 801234e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012350:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012354:	4691      	mov	r9, r2
 8012356:	f023 0820 	bic.w	r8, r3, #32
 801235a:	bfbc      	itt	lt
 801235c:	4632      	movlt	r2, r6
 801235e:	4616      	movlt	r6, r2
 8012360:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012364:	d005      	beq.n	8012372 <__cvt+0x42>
 8012366:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801236a:	d100      	bne.n	801236e <__cvt+0x3e>
 801236c:	3401      	adds	r4, #1
 801236e:	2102      	movs	r1, #2
 8012370:	e000      	b.n	8012374 <__cvt+0x44>
 8012372:	2103      	movs	r1, #3
 8012374:	ab03      	add	r3, sp, #12
 8012376:	9301      	str	r3, [sp, #4]
 8012378:	ab02      	add	r3, sp, #8
 801237a:	9300      	str	r3, [sp, #0]
 801237c:	ec47 6b10 	vmov	d0, r6, r7
 8012380:	4653      	mov	r3, sl
 8012382:	4622      	mov	r2, r4
 8012384:	f000 ff4c 	bl	8013220 <_dtoa_r>
 8012388:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801238c:	4605      	mov	r5, r0
 801238e:	d119      	bne.n	80123c4 <__cvt+0x94>
 8012390:	f019 0f01 	tst.w	r9, #1
 8012394:	d00e      	beq.n	80123b4 <__cvt+0x84>
 8012396:	eb00 0904 	add.w	r9, r0, r4
 801239a:	2200      	movs	r2, #0
 801239c:	2300      	movs	r3, #0
 801239e:	4630      	mov	r0, r6
 80123a0:	4639      	mov	r1, r7
 80123a2:	f7ee fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 80123a6:	b108      	cbz	r0, 80123ac <__cvt+0x7c>
 80123a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80123ac:	2230      	movs	r2, #48	@ 0x30
 80123ae:	9b03      	ldr	r3, [sp, #12]
 80123b0:	454b      	cmp	r3, r9
 80123b2:	d31e      	bcc.n	80123f2 <__cvt+0xc2>
 80123b4:	9b03      	ldr	r3, [sp, #12]
 80123b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123b8:	1b5b      	subs	r3, r3, r5
 80123ba:	4628      	mov	r0, r5
 80123bc:	6013      	str	r3, [r2, #0]
 80123be:	b004      	add	sp, #16
 80123c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80123c8:	eb00 0904 	add.w	r9, r0, r4
 80123cc:	d1e5      	bne.n	801239a <__cvt+0x6a>
 80123ce:	7803      	ldrb	r3, [r0, #0]
 80123d0:	2b30      	cmp	r3, #48	@ 0x30
 80123d2:	d10a      	bne.n	80123ea <__cvt+0xba>
 80123d4:	2200      	movs	r2, #0
 80123d6:	2300      	movs	r3, #0
 80123d8:	4630      	mov	r0, r6
 80123da:	4639      	mov	r1, r7
 80123dc:	f7ee fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 80123e0:	b918      	cbnz	r0, 80123ea <__cvt+0xba>
 80123e2:	f1c4 0401 	rsb	r4, r4, #1
 80123e6:	f8ca 4000 	str.w	r4, [sl]
 80123ea:	f8da 3000 	ldr.w	r3, [sl]
 80123ee:	4499      	add	r9, r3
 80123f0:	e7d3      	b.n	801239a <__cvt+0x6a>
 80123f2:	1c59      	adds	r1, r3, #1
 80123f4:	9103      	str	r1, [sp, #12]
 80123f6:	701a      	strb	r2, [r3, #0]
 80123f8:	e7d9      	b.n	80123ae <__cvt+0x7e>

080123fa <__exponent>:
 80123fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123fc:	2900      	cmp	r1, #0
 80123fe:	bfba      	itte	lt
 8012400:	4249      	neglt	r1, r1
 8012402:	232d      	movlt	r3, #45	@ 0x2d
 8012404:	232b      	movge	r3, #43	@ 0x2b
 8012406:	2909      	cmp	r1, #9
 8012408:	7002      	strb	r2, [r0, #0]
 801240a:	7043      	strb	r3, [r0, #1]
 801240c:	dd29      	ble.n	8012462 <__exponent+0x68>
 801240e:	f10d 0307 	add.w	r3, sp, #7
 8012412:	461d      	mov	r5, r3
 8012414:	270a      	movs	r7, #10
 8012416:	461a      	mov	r2, r3
 8012418:	fbb1 f6f7 	udiv	r6, r1, r7
 801241c:	fb07 1416 	mls	r4, r7, r6, r1
 8012420:	3430      	adds	r4, #48	@ 0x30
 8012422:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012426:	460c      	mov	r4, r1
 8012428:	2c63      	cmp	r4, #99	@ 0x63
 801242a:	f103 33ff 	add.w	r3, r3, #4294967295
 801242e:	4631      	mov	r1, r6
 8012430:	dcf1      	bgt.n	8012416 <__exponent+0x1c>
 8012432:	3130      	adds	r1, #48	@ 0x30
 8012434:	1e94      	subs	r4, r2, #2
 8012436:	f803 1c01 	strb.w	r1, [r3, #-1]
 801243a:	1c41      	adds	r1, r0, #1
 801243c:	4623      	mov	r3, r4
 801243e:	42ab      	cmp	r3, r5
 8012440:	d30a      	bcc.n	8012458 <__exponent+0x5e>
 8012442:	f10d 0309 	add.w	r3, sp, #9
 8012446:	1a9b      	subs	r3, r3, r2
 8012448:	42ac      	cmp	r4, r5
 801244a:	bf88      	it	hi
 801244c:	2300      	movhi	r3, #0
 801244e:	3302      	adds	r3, #2
 8012450:	4403      	add	r3, r0
 8012452:	1a18      	subs	r0, r3, r0
 8012454:	b003      	add	sp, #12
 8012456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012458:	f813 6b01 	ldrb.w	r6, [r3], #1
 801245c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012460:	e7ed      	b.n	801243e <__exponent+0x44>
 8012462:	2330      	movs	r3, #48	@ 0x30
 8012464:	3130      	adds	r1, #48	@ 0x30
 8012466:	7083      	strb	r3, [r0, #2]
 8012468:	70c1      	strb	r1, [r0, #3]
 801246a:	1d03      	adds	r3, r0, #4
 801246c:	e7f1      	b.n	8012452 <__exponent+0x58>
	...

08012470 <_printf_float>:
 8012470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012474:	b08d      	sub	sp, #52	@ 0x34
 8012476:	460c      	mov	r4, r1
 8012478:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801247c:	4616      	mov	r6, r2
 801247e:	461f      	mov	r7, r3
 8012480:	4605      	mov	r5, r0
 8012482:	f000 fdbd 	bl	8013000 <_localeconv_r>
 8012486:	6803      	ldr	r3, [r0, #0]
 8012488:	9304      	str	r3, [sp, #16]
 801248a:	4618      	mov	r0, r3
 801248c:	f7ed fef0 	bl	8000270 <strlen>
 8012490:	2300      	movs	r3, #0
 8012492:	930a      	str	r3, [sp, #40]	@ 0x28
 8012494:	f8d8 3000 	ldr.w	r3, [r8]
 8012498:	9005      	str	r0, [sp, #20]
 801249a:	3307      	adds	r3, #7
 801249c:	f023 0307 	bic.w	r3, r3, #7
 80124a0:	f103 0208 	add.w	r2, r3, #8
 80124a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80124a8:	f8d4 b000 	ldr.w	fp, [r4]
 80124ac:	f8c8 2000 	str.w	r2, [r8]
 80124b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80124b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80124b8:	9307      	str	r3, [sp, #28]
 80124ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80124be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80124c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80124c6:	4b9c      	ldr	r3, [pc, #624]	@ (8012738 <_printf_float+0x2c8>)
 80124c8:	f04f 32ff 	mov.w	r2, #4294967295
 80124cc:	f7ee fb2e 	bl	8000b2c <__aeabi_dcmpun>
 80124d0:	bb70      	cbnz	r0, 8012530 <_printf_float+0xc0>
 80124d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80124d6:	4b98      	ldr	r3, [pc, #608]	@ (8012738 <_printf_float+0x2c8>)
 80124d8:	f04f 32ff 	mov.w	r2, #4294967295
 80124dc:	f7ee fb08 	bl	8000af0 <__aeabi_dcmple>
 80124e0:	bb30      	cbnz	r0, 8012530 <_printf_float+0xc0>
 80124e2:	2200      	movs	r2, #0
 80124e4:	2300      	movs	r3, #0
 80124e6:	4640      	mov	r0, r8
 80124e8:	4649      	mov	r1, r9
 80124ea:	f7ee faf7 	bl	8000adc <__aeabi_dcmplt>
 80124ee:	b110      	cbz	r0, 80124f6 <_printf_float+0x86>
 80124f0:	232d      	movs	r3, #45	@ 0x2d
 80124f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80124f6:	4a91      	ldr	r2, [pc, #580]	@ (801273c <_printf_float+0x2cc>)
 80124f8:	4b91      	ldr	r3, [pc, #580]	@ (8012740 <_printf_float+0x2d0>)
 80124fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80124fe:	bf8c      	ite	hi
 8012500:	4690      	movhi	r8, r2
 8012502:	4698      	movls	r8, r3
 8012504:	2303      	movs	r3, #3
 8012506:	6123      	str	r3, [r4, #16]
 8012508:	f02b 0304 	bic.w	r3, fp, #4
 801250c:	6023      	str	r3, [r4, #0]
 801250e:	f04f 0900 	mov.w	r9, #0
 8012512:	9700      	str	r7, [sp, #0]
 8012514:	4633      	mov	r3, r6
 8012516:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012518:	4621      	mov	r1, r4
 801251a:	4628      	mov	r0, r5
 801251c:	f000 f9d2 	bl	80128c4 <_printf_common>
 8012520:	3001      	adds	r0, #1
 8012522:	f040 808d 	bne.w	8012640 <_printf_float+0x1d0>
 8012526:	f04f 30ff 	mov.w	r0, #4294967295
 801252a:	b00d      	add	sp, #52	@ 0x34
 801252c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012530:	4642      	mov	r2, r8
 8012532:	464b      	mov	r3, r9
 8012534:	4640      	mov	r0, r8
 8012536:	4649      	mov	r1, r9
 8012538:	f7ee faf8 	bl	8000b2c <__aeabi_dcmpun>
 801253c:	b140      	cbz	r0, 8012550 <_printf_float+0xe0>
 801253e:	464b      	mov	r3, r9
 8012540:	2b00      	cmp	r3, #0
 8012542:	bfbc      	itt	lt
 8012544:	232d      	movlt	r3, #45	@ 0x2d
 8012546:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801254a:	4a7e      	ldr	r2, [pc, #504]	@ (8012744 <_printf_float+0x2d4>)
 801254c:	4b7e      	ldr	r3, [pc, #504]	@ (8012748 <_printf_float+0x2d8>)
 801254e:	e7d4      	b.n	80124fa <_printf_float+0x8a>
 8012550:	6863      	ldr	r3, [r4, #4]
 8012552:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012556:	9206      	str	r2, [sp, #24]
 8012558:	1c5a      	adds	r2, r3, #1
 801255a:	d13b      	bne.n	80125d4 <_printf_float+0x164>
 801255c:	2306      	movs	r3, #6
 801255e:	6063      	str	r3, [r4, #4]
 8012560:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012564:	2300      	movs	r3, #0
 8012566:	6022      	str	r2, [r4, #0]
 8012568:	9303      	str	r3, [sp, #12]
 801256a:	ab0a      	add	r3, sp, #40	@ 0x28
 801256c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012570:	ab09      	add	r3, sp, #36	@ 0x24
 8012572:	9300      	str	r3, [sp, #0]
 8012574:	6861      	ldr	r1, [r4, #4]
 8012576:	ec49 8b10 	vmov	d0, r8, r9
 801257a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801257e:	4628      	mov	r0, r5
 8012580:	f7ff fed6 	bl	8012330 <__cvt>
 8012584:	9b06      	ldr	r3, [sp, #24]
 8012586:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012588:	2b47      	cmp	r3, #71	@ 0x47
 801258a:	4680      	mov	r8, r0
 801258c:	d129      	bne.n	80125e2 <_printf_float+0x172>
 801258e:	1cc8      	adds	r0, r1, #3
 8012590:	db02      	blt.n	8012598 <_printf_float+0x128>
 8012592:	6863      	ldr	r3, [r4, #4]
 8012594:	4299      	cmp	r1, r3
 8012596:	dd41      	ble.n	801261c <_printf_float+0x1ac>
 8012598:	f1aa 0a02 	sub.w	sl, sl, #2
 801259c:	fa5f fa8a 	uxtb.w	sl, sl
 80125a0:	3901      	subs	r1, #1
 80125a2:	4652      	mov	r2, sl
 80125a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80125a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80125aa:	f7ff ff26 	bl	80123fa <__exponent>
 80125ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80125b0:	1813      	adds	r3, r2, r0
 80125b2:	2a01      	cmp	r2, #1
 80125b4:	4681      	mov	r9, r0
 80125b6:	6123      	str	r3, [r4, #16]
 80125b8:	dc02      	bgt.n	80125c0 <_printf_float+0x150>
 80125ba:	6822      	ldr	r2, [r4, #0]
 80125bc:	07d2      	lsls	r2, r2, #31
 80125be:	d501      	bpl.n	80125c4 <_printf_float+0x154>
 80125c0:	3301      	adds	r3, #1
 80125c2:	6123      	str	r3, [r4, #16]
 80125c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d0a2      	beq.n	8012512 <_printf_float+0xa2>
 80125cc:	232d      	movs	r3, #45	@ 0x2d
 80125ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125d2:	e79e      	b.n	8012512 <_printf_float+0xa2>
 80125d4:	9a06      	ldr	r2, [sp, #24]
 80125d6:	2a47      	cmp	r2, #71	@ 0x47
 80125d8:	d1c2      	bne.n	8012560 <_printf_float+0xf0>
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d1c0      	bne.n	8012560 <_printf_float+0xf0>
 80125de:	2301      	movs	r3, #1
 80125e0:	e7bd      	b.n	801255e <_printf_float+0xee>
 80125e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80125e6:	d9db      	bls.n	80125a0 <_printf_float+0x130>
 80125e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80125ec:	d118      	bne.n	8012620 <_printf_float+0x1b0>
 80125ee:	2900      	cmp	r1, #0
 80125f0:	6863      	ldr	r3, [r4, #4]
 80125f2:	dd0b      	ble.n	801260c <_printf_float+0x19c>
 80125f4:	6121      	str	r1, [r4, #16]
 80125f6:	b913      	cbnz	r3, 80125fe <_printf_float+0x18e>
 80125f8:	6822      	ldr	r2, [r4, #0]
 80125fa:	07d0      	lsls	r0, r2, #31
 80125fc:	d502      	bpl.n	8012604 <_printf_float+0x194>
 80125fe:	3301      	adds	r3, #1
 8012600:	440b      	add	r3, r1
 8012602:	6123      	str	r3, [r4, #16]
 8012604:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012606:	f04f 0900 	mov.w	r9, #0
 801260a:	e7db      	b.n	80125c4 <_printf_float+0x154>
 801260c:	b913      	cbnz	r3, 8012614 <_printf_float+0x1a4>
 801260e:	6822      	ldr	r2, [r4, #0]
 8012610:	07d2      	lsls	r2, r2, #31
 8012612:	d501      	bpl.n	8012618 <_printf_float+0x1a8>
 8012614:	3302      	adds	r3, #2
 8012616:	e7f4      	b.n	8012602 <_printf_float+0x192>
 8012618:	2301      	movs	r3, #1
 801261a:	e7f2      	b.n	8012602 <_printf_float+0x192>
 801261c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012622:	4299      	cmp	r1, r3
 8012624:	db05      	blt.n	8012632 <_printf_float+0x1c2>
 8012626:	6823      	ldr	r3, [r4, #0]
 8012628:	6121      	str	r1, [r4, #16]
 801262a:	07d8      	lsls	r0, r3, #31
 801262c:	d5ea      	bpl.n	8012604 <_printf_float+0x194>
 801262e:	1c4b      	adds	r3, r1, #1
 8012630:	e7e7      	b.n	8012602 <_printf_float+0x192>
 8012632:	2900      	cmp	r1, #0
 8012634:	bfd4      	ite	le
 8012636:	f1c1 0202 	rsble	r2, r1, #2
 801263a:	2201      	movgt	r2, #1
 801263c:	4413      	add	r3, r2
 801263e:	e7e0      	b.n	8012602 <_printf_float+0x192>
 8012640:	6823      	ldr	r3, [r4, #0]
 8012642:	055a      	lsls	r2, r3, #21
 8012644:	d407      	bmi.n	8012656 <_printf_float+0x1e6>
 8012646:	6923      	ldr	r3, [r4, #16]
 8012648:	4642      	mov	r2, r8
 801264a:	4631      	mov	r1, r6
 801264c:	4628      	mov	r0, r5
 801264e:	47b8      	blx	r7
 8012650:	3001      	adds	r0, #1
 8012652:	d12b      	bne.n	80126ac <_printf_float+0x23c>
 8012654:	e767      	b.n	8012526 <_printf_float+0xb6>
 8012656:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801265a:	f240 80dd 	bls.w	8012818 <_printf_float+0x3a8>
 801265e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012662:	2200      	movs	r2, #0
 8012664:	2300      	movs	r3, #0
 8012666:	f7ee fa2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801266a:	2800      	cmp	r0, #0
 801266c:	d033      	beq.n	80126d6 <_printf_float+0x266>
 801266e:	4a37      	ldr	r2, [pc, #220]	@ (801274c <_printf_float+0x2dc>)
 8012670:	2301      	movs	r3, #1
 8012672:	4631      	mov	r1, r6
 8012674:	4628      	mov	r0, r5
 8012676:	47b8      	blx	r7
 8012678:	3001      	adds	r0, #1
 801267a:	f43f af54 	beq.w	8012526 <_printf_float+0xb6>
 801267e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012682:	4543      	cmp	r3, r8
 8012684:	db02      	blt.n	801268c <_printf_float+0x21c>
 8012686:	6823      	ldr	r3, [r4, #0]
 8012688:	07d8      	lsls	r0, r3, #31
 801268a:	d50f      	bpl.n	80126ac <_printf_float+0x23c>
 801268c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012690:	4631      	mov	r1, r6
 8012692:	4628      	mov	r0, r5
 8012694:	47b8      	blx	r7
 8012696:	3001      	adds	r0, #1
 8012698:	f43f af45 	beq.w	8012526 <_printf_float+0xb6>
 801269c:	f04f 0900 	mov.w	r9, #0
 80126a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80126a4:	f104 0a1a 	add.w	sl, r4, #26
 80126a8:	45c8      	cmp	r8, r9
 80126aa:	dc09      	bgt.n	80126c0 <_printf_float+0x250>
 80126ac:	6823      	ldr	r3, [r4, #0]
 80126ae:	079b      	lsls	r3, r3, #30
 80126b0:	f100 8103 	bmi.w	80128ba <_printf_float+0x44a>
 80126b4:	68e0      	ldr	r0, [r4, #12]
 80126b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126b8:	4298      	cmp	r0, r3
 80126ba:	bfb8      	it	lt
 80126bc:	4618      	movlt	r0, r3
 80126be:	e734      	b.n	801252a <_printf_float+0xba>
 80126c0:	2301      	movs	r3, #1
 80126c2:	4652      	mov	r2, sl
 80126c4:	4631      	mov	r1, r6
 80126c6:	4628      	mov	r0, r5
 80126c8:	47b8      	blx	r7
 80126ca:	3001      	adds	r0, #1
 80126cc:	f43f af2b 	beq.w	8012526 <_printf_float+0xb6>
 80126d0:	f109 0901 	add.w	r9, r9, #1
 80126d4:	e7e8      	b.n	80126a8 <_printf_float+0x238>
 80126d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126d8:	2b00      	cmp	r3, #0
 80126da:	dc39      	bgt.n	8012750 <_printf_float+0x2e0>
 80126dc:	4a1b      	ldr	r2, [pc, #108]	@ (801274c <_printf_float+0x2dc>)
 80126de:	2301      	movs	r3, #1
 80126e0:	4631      	mov	r1, r6
 80126e2:	4628      	mov	r0, r5
 80126e4:	47b8      	blx	r7
 80126e6:	3001      	adds	r0, #1
 80126e8:	f43f af1d 	beq.w	8012526 <_printf_float+0xb6>
 80126ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80126f0:	ea59 0303 	orrs.w	r3, r9, r3
 80126f4:	d102      	bne.n	80126fc <_printf_float+0x28c>
 80126f6:	6823      	ldr	r3, [r4, #0]
 80126f8:	07d9      	lsls	r1, r3, #31
 80126fa:	d5d7      	bpl.n	80126ac <_printf_float+0x23c>
 80126fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012700:	4631      	mov	r1, r6
 8012702:	4628      	mov	r0, r5
 8012704:	47b8      	blx	r7
 8012706:	3001      	adds	r0, #1
 8012708:	f43f af0d 	beq.w	8012526 <_printf_float+0xb6>
 801270c:	f04f 0a00 	mov.w	sl, #0
 8012710:	f104 0b1a 	add.w	fp, r4, #26
 8012714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012716:	425b      	negs	r3, r3
 8012718:	4553      	cmp	r3, sl
 801271a:	dc01      	bgt.n	8012720 <_printf_float+0x2b0>
 801271c:	464b      	mov	r3, r9
 801271e:	e793      	b.n	8012648 <_printf_float+0x1d8>
 8012720:	2301      	movs	r3, #1
 8012722:	465a      	mov	r2, fp
 8012724:	4631      	mov	r1, r6
 8012726:	4628      	mov	r0, r5
 8012728:	47b8      	blx	r7
 801272a:	3001      	adds	r0, #1
 801272c:	f43f aefb 	beq.w	8012526 <_printf_float+0xb6>
 8012730:	f10a 0a01 	add.w	sl, sl, #1
 8012734:	e7ee      	b.n	8012714 <_printf_float+0x2a4>
 8012736:	bf00      	nop
 8012738:	7fefffff 	.word	0x7fefffff
 801273c:	08015618 	.word	0x08015618
 8012740:	08015614 	.word	0x08015614
 8012744:	08015620 	.word	0x08015620
 8012748:	0801561c 	.word	0x0801561c
 801274c:	08015624 	.word	0x08015624
 8012750:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012752:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012756:	4553      	cmp	r3, sl
 8012758:	bfa8      	it	ge
 801275a:	4653      	movge	r3, sl
 801275c:	2b00      	cmp	r3, #0
 801275e:	4699      	mov	r9, r3
 8012760:	dc36      	bgt.n	80127d0 <_printf_float+0x360>
 8012762:	f04f 0b00 	mov.w	fp, #0
 8012766:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801276a:	f104 021a 	add.w	r2, r4, #26
 801276e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012770:	9306      	str	r3, [sp, #24]
 8012772:	eba3 0309 	sub.w	r3, r3, r9
 8012776:	455b      	cmp	r3, fp
 8012778:	dc31      	bgt.n	80127de <_printf_float+0x36e>
 801277a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801277c:	459a      	cmp	sl, r3
 801277e:	dc3a      	bgt.n	80127f6 <_printf_float+0x386>
 8012780:	6823      	ldr	r3, [r4, #0]
 8012782:	07da      	lsls	r2, r3, #31
 8012784:	d437      	bmi.n	80127f6 <_printf_float+0x386>
 8012786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012788:	ebaa 0903 	sub.w	r9, sl, r3
 801278c:	9b06      	ldr	r3, [sp, #24]
 801278e:	ebaa 0303 	sub.w	r3, sl, r3
 8012792:	4599      	cmp	r9, r3
 8012794:	bfa8      	it	ge
 8012796:	4699      	movge	r9, r3
 8012798:	f1b9 0f00 	cmp.w	r9, #0
 801279c:	dc33      	bgt.n	8012806 <_printf_float+0x396>
 801279e:	f04f 0800 	mov.w	r8, #0
 80127a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80127a6:	f104 0b1a 	add.w	fp, r4, #26
 80127aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127ac:	ebaa 0303 	sub.w	r3, sl, r3
 80127b0:	eba3 0309 	sub.w	r3, r3, r9
 80127b4:	4543      	cmp	r3, r8
 80127b6:	f77f af79 	ble.w	80126ac <_printf_float+0x23c>
 80127ba:	2301      	movs	r3, #1
 80127bc:	465a      	mov	r2, fp
 80127be:	4631      	mov	r1, r6
 80127c0:	4628      	mov	r0, r5
 80127c2:	47b8      	blx	r7
 80127c4:	3001      	adds	r0, #1
 80127c6:	f43f aeae 	beq.w	8012526 <_printf_float+0xb6>
 80127ca:	f108 0801 	add.w	r8, r8, #1
 80127ce:	e7ec      	b.n	80127aa <_printf_float+0x33a>
 80127d0:	4642      	mov	r2, r8
 80127d2:	4631      	mov	r1, r6
 80127d4:	4628      	mov	r0, r5
 80127d6:	47b8      	blx	r7
 80127d8:	3001      	adds	r0, #1
 80127da:	d1c2      	bne.n	8012762 <_printf_float+0x2f2>
 80127dc:	e6a3      	b.n	8012526 <_printf_float+0xb6>
 80127de:	2301      	movs	r3, #1
 80127e0:	4631      	mov	r1, r6
 80127e2:	4628      	mov	r0, r5
 80127e4:	9206      	str	r2, [sp, #24]
 80127e6:	47b8      	blx	r7
 80127e8:	3001      	adds	r0, #1
 80127ea:	f43f ae9c 	beq.w	8012526 <_printf_float+0xb6>
 80127ee:	9a06      	ldr	r2, [sp, #24]
 80127f0:	f10b 0b01 	add.w	fp, fp, #1
 80127f4:	e7bb      	b.n	801276e <_printf_float+0x2fe>
 80127f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127fa:	4631      	mov	r1, r6
 80127fc:	4628      	mov	r0, r5
 80127fe:	47b8      	blx	r7
 8012800:	3001      	adds	r0, #1
 8012802:	d1c0      	bne.n	8012786 <_printf_float+0x316>
 8012804:	e68f      	b.n	8012526 <_printf_float+0xb6>
 8012806:	9a06      	ldr	r2, [sp, #24]
 8012808:	464b      	mov	r3, r9
 801280a:	4442      	add	r2, r8
 801280c:	4631      	mov	r1, r6
 801280e:	4628      	mov	r0, r5
 8012810:	47b8      	blx	r7
 8012812:	3001      	adds	r0, #1
 8012814:	d1c3      	bne.n	801279e <_printf_float+0x32e>
 8012816:	e686      	b.n	8012526 <_printf_float+0xb6>
 8012818:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801281c:	f1ba 0f01 	cmp.w	sl, #1
 8012820:	dc01      	bgt.n	8012826 <_printf_float+0x3b6>
 8012822:	07db      	lsls	r3, r3, #31
 8012824:	d536      	bpl.n	8012894 <_printf_float+0x424>
 8012826:	2301      	movs	r3, #1
 8012828:	4642      	mov	r2, r8
 801282a:	4631      	mov	r1, r6
 801282c:	4628      	mov	r0, r5
 801282e:	47b8      	blx	r7
 8012830:	3001      	adds	r0, #1
 8012832:	f43f ae78 	beq.w	8012526 <_printf_float+0xb6>
 8012836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801283a:	4631      	mov	r1, r6
 801283c:	4628      	mov	r0, r5
 801283e:	47b8      	blx	r7
 8012840:	3001      	adds	r0, #1
 8012842:	f43f ae70 	beq.w	8012526 <_printf_float+0xb6>
 8012846:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801284a:	2200      	movs	r2, #0
 801284c:	2300      	movs	r3, #0
 801284e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012852:	f7ee f939 	bl	8000ac8 <__aeabi_dcmpeq>
 8012856:	b9c0      	cbnz	r0, 801288a <_printf_float+0x41a>
 8012858:	4653      	mov	r3, sl
 801285a:	f108 0201 	add.w	r2, r8, #1
 801285e:	4631      	mov	r1, r6
 8012860:	4628      	mov	r0, r5
 8012862:	47b8      	blx	r7
 8012864:	3001      	adds	r0, #1
 8012866:	d10c      	bne.n	8012882 <_printf_float+0x412>
 8012868:	e65d      	b.n	8012526 <_printf_float+0xb6>
 801286a:	2301      	movs	r3, #1
 801286c:	465a      	mov	r2, fp
 801286e:	4631      	mov	r1, r6
 8012870:	4628      	mov	r0, r5
 8012872:	47b8      	blx	r7
 8012874:	3001      	adds	r0, #1
 8012876:	f43f ae56 	beq.w	8012526 <_printf_float+0xb6>
 801287a:	f108 0801 	add.w	r8, r8, #1
 801287e:	45d0      	cmp	r8, sl
 8012880:	dbf3      	blt.n	801286a <_printf_float+0x3fa>
 8012882:	464b      	mov	r3, r9
 8012884:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012888:	e6df      	b.n	801264a <_printf_float+0x1da>
 801288a:	f04f 0800 	mov.w	r8, #0
 801288e:	f104 0b1a 	add.w	fp, r4, #26
 8012892:	e7f4      	b.n	801287e <_printf_float+0x40e>
 8012894:	2301      	movs	r3, #1
 8012896:	4642      	mov	r2, r8
 8012898:	e7e1      	b.n	801285e <_printf_float+0x3ee>
 801289a:	2301      	movs	r3, #1
 801289c:	464a      	mov	r2, r9
 801289e:	4631      	mov	r1, r6
 80128a0:	4628      	mov	r0, r5
 80128a2:	47b8      	blx	r7
 80128a4:	3001      	adds	r0, #1
 80128a6:	f43f ae3e 	beq.w	8012526 <_printf_float+0xb6>
 80128aa:	f108 0801 	add.w	r8, r8, #1
 80128ae:	68e3      	ldr	r3, [r4, #12]
 80128b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80128b2:	1a5b      	subs	r3, r3, r1
 80128b4:	4543      	cmp	r3, r8
 80128b6:	dcf0      	bgt.n	801289a <_printf_float+0x42a>
 80128b8:	e6fc      	b.n	80126b4 <_printf_float+0x244>
 80128ba:	f04f 0800 	mov.w	r8, #0
 80128be:	f104 0919 	add.w	r9, r4, #25
 80128c2:	e7f4      	b.n	80128ae <_printf_float+0x43e>

080128c4 <_printf_common>:
 80128c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128c8:	4616      	mov	r6, r2
 80128ca:	4698      	mov	r8, r3
 80128cc:	688a      	ldr	r2, [r1, #8]
 80128ce:	690b      	ldr	r3, [r1, #16]
 80128d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80128d4:	4293      	cmp	r3, r2
 80128d6:	bfb8      	it	lt
 80128d8:	4613      	movlt	r3, r2
 80128da:	6033      	str	r3, [r6, #0]
 80128dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80128e0:	4607      	mov	r7, r0
 80128e2:	460c      	mov	r4, r1
 80128e4:	b10a      	cbz	r2, 80128ea <_printf_common+0x26>
 80128e6:	3301      	adds	r3, #1
 80128e8:	6033      	str	r3, [r6, #0]
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	0699      	lsls	r1, r3, #26
 80128ee:	bf42      	ittt	mi
 80128f0:	6833      	ldrmi	r3, [r6, #0]
 80128f2:	3302      	addmi	r3, #2
 80128f4:	6033      	strmi	r3, [r6, #0]
 80128f6:	6825      	ldr	r5, [r4, #0]
 80128f8:	f015 0506 	ands.w	r5, r5, #6
 80128fc:	d106      	bne.n	801290c <_printf_common+0x48>
 80128fe:	f104 0a19 	add.w	sl, r4, #25
 8012902:	68e3      	ldr	r3, [r4, #12]
 8012904:	6832      	ldr	r2, [r6, #0]
 8012906:	1a9b      	subs	r3, r3, r2
 8012908:	42ab      	cmp	r3, r5
 801290a:	dc26      	bgt.n	801295a <_printf_common+0x96>
 801290c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012910:	6822      	ldr	r2, [r4, #0]
 8012912:	3b00      	subs	r3, #0
 8012914:	bf18      	it	ne
 8012916:	2301      	movne	r3, #1
 8012918:	0692      	lsls	r2, r2, #26
 801291a:	d42b      	bmi.n	8012974 <_printf_common+0xb0>
 801291c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012920:	4641      	mov	r1, r8
 8012922:	4638      	mov	r0, r7
 8012924:	47c8      	blx	r9
 8012926:	3001      	adds	r0, #1
 8012928:	d01e      	beq.n	8012968 <_printf_common+0xa4>
 801292a:	6823      	ldr	r3, [r4, #0]
 801292c:	6922      	ldr	r2, [r4, #16]
 801292e:	f003 0306 	and.w	r3, r3, #6
 8012932:	2b04      	cmp	r3, #4
 8012934:	bf02      	ittt	eq
 8012936:	68e5      	ldreq	r5, [r4, #12]
 8012938:	6833      	ldreq	r3, [r6, #0]
 801293a:	1aed      	subeq	r5, r5, r3
 801293c:	68a3      	ldr	r3, [r4, #8]
 801293e:	bf0c      	ite	eq
 8012940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012944:	2500      	movne	r5, #0
 8012946:	4293      	cmp	r3, r2
 8012948:	bfc4      	itt	gt
 801294a:	1a9b      	subgt	r3, r3, r2
 801294c:	18ed      	addgt	r5, r5, r3
 801294e:	2600      	movs	r6, #0
 8012950:	341a      	adds	r4, #26
 8012952:	42b5      	cmp	r5, r6
 8012954:	d11a      	bne.n	801298c <_printf_common+0xc8>
 8012956:	2000      	movs	r0, #0
 8012958:	e008      	b.n	801296c <_printf_common+0xa8>
 801295a:	2301      	movs	r3, #1
 801295c:	4652      	mov	r2, sl
 801295e:	4641      	mov	r1, r8
 8012960:	4638      	mov	r0, r7
 8012962:	47c8      	blx	r9
 8012964:	3001      	adds	r0, #1
 8012966:	d103      	bne.n	8012970 <_printf_common+0xac>
 8012968:	f04f 30ff 	mov.w	r0, #4294967295
 801296c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012970:	3501      	adds	r5, #1
 8012972:	e7c6      	b.n	8012902 <_printf_common+0x3e>
 8012974:	18e1      	adds	r1, r4, r3
 8012976:	1c5a      	adds	r2, r3, #1
 8012978:	2030      	movs	r0, #48	@ 0x30
 801297a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801297e:	4422      	add	r2, r4
 8012980:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012984:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012988:	3302      	adds	r3, #2
 801298a:	e7c7      	b.n	801291c <_printf_common+0x58>
 801298c:	2301      	movs	r3, #1
 801298e:	4622      	mov	r2, r4
 8012990:	4641      	mov	r1, r8
 8012992:	4638      	mov	r0, r7
 8012994:	47c8      	blx	r9
 8012996:	3001      	adds	r0, #1
 8012998:	d0e6      	beq.n	8012968 <_printf_common+0xa4>
 801299a:	3601      	adds	r6, #1
 801299c:	e7d9      	b.n	8012952 <_printf_common+0x8e>
	...

080129a0 <_printf_i>:
 80129a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80129a4:	7e0f      	ldrb	r7, [r1, #24]
 80129a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80129a8:	2f78      	cmp	r7, #120	@ 0x78
 80129aa:	4691      	mov	r9, r2
 80129ac:	4680      	mov	r8, r0
 80129ae:	460c      	mov	r4, r1
 80129b0:	469a      	mov	sl, r3
 80129b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80129b6:	d807      	bhi.n	80129c8 <_printf_i+0x28>
 80129b8:	2f62      	cmp	r7, #98	@ 0x62
 80129ba:	d80a      	bhi.n	80129d2 <_printf_i+0x32>
 80129bc:	2f00      	cmp	r7, #0
 80129be:	f000 80d1 	beq.w	8012b64 <_printf_i+0x1c4>
 80129c2:	2f58      	cmp	r7, #88	@ 0x58
 80129c4:	f000 80b8 	beq.w	8012b38 <_printf_i+0x198>
 80129c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80129cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80129d0:	e03a      	b.n	8012a48 <_printf_i+0xa8>
 80129d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80129d6:	2b15      	cmp	r3, #21
 80129d8:	d8f6      	bhi.n	80129c8 <_printf_i+0x28>
 80129da:	a101      	add	r1, pc, #4	@ (adr r1, 80129e0 <_printf_i+0x40>)
 80129dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80129e0:	08012a39 	.word	0x08012a39
 80129e4:	08012a4d 	.word	0x08012a4d
 80129e8:	080129c9 	.word	0x080129c9
 80129ec:	080129c9 	.word	0x080129c9
 80129f0:	080129c9 	.word	0x080129c9
 80129f4:	080129c9 	.word	0x080129c9
 80129f8:	08012a4d 	.word	0x08012a4d
 80129fc:	080129c9 	.word	0x080129c9
 8012a00:	080129c9 	.word	0x080129c9
 8012a04:	080129c9 	.word	0x080129c9
 8012a08:	080129c9 	.word	0x080129c9
 8012a0c:	08012b4b 	.word	0x08012b4b
 8012a10:	08012a77 	.word	0x08012a77
 8012a14:	08012b05 	.word	0x08012b05
 8012a18:	080129c9 	.word	0x080129c9
 8012a1c:	080129c9 	.word	0x080129c9
 8012a20:	08012b6d 	.word	0x08012b6d
 8012a24:	080129c9 	.word	0x080129c9
 8012a28:	08012a77 	.word	0x08012a77
 8012a2c:	080129c9 	.word	0x080129c9
 8012a30:	080129c9 	.word	0x080129c9
 8012a34:	08012b0d 	.word	0x08012b0d
 8012a38:	6833      	ldr	r3, [r6, #0]
 8012a3a:	1d1a      	adds	r2, r3, #4
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	6032      	str	r2, [r6, #0]
 8012a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012a48:	2301      	movs	r3, #1
 8012a4a:	e09c      	b.n	8012b86 <_printf_i+0x1e6>
 8012a4c:	6833      	ldr	r3, [r6, #0]
 8012a4e:	6820      	ldr	r0, [r4, #0]
 8012a50:	1d19      	adds	r1, r3, #4
 8012a52:	6031      	str	r1, [r6, #0]
 8012a54:	0606      	lsls	r6, r0, #24
 8012a56:	d501      	bpl.n	8012a5c <_printf_i+0xbc>
 8012a58:	681d      	ldr	r5, [r3, #0]
 8012a5a:	e003      	b.n	8012a64 <_printf_i+0xc4>
 8012a5c:	0645      	lsls	r5, r0, #25
 8012a5e:	d5fb      	bpl.n	8012a58 <_printf_i+0xb8>
 8012a60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012a64:	2d00      	cmp	r5, #0
 8012a66:	da03      	bge.n	8012a70 <_printf_i+0xd0>
 8012a68:	232d      	movs	r3, #45	@ 0x2d
 8012a6a:	426d      	negs	r5, r5
 8012a6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a70:	4858      	ldr	r0, [pc, #352]	@ (8012bd4 <_printf_i+0x234>)
 8012a72:	230a      	movs	r3, #10
 8012a74:	e011      	b.n	8012a9a <_printf_i+0xfa>
 8012a76:	6821      	ldr	r1, [r4, #0]
 8012a78:	6833      	ldr	r3, [r6, #0]
 8012a7a:	0608      	lsls	r0, r1, #24
 8012a7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012a80:	d402      	bmi.n	8012a88 <_printf_i+0xe8>
 8012a82:	0649      	lsls	r1, r1, #25
 8012a84:	bf48      	it	mi
 8012a86:	b2ad      	uxthmi	r5, r5
 8012a88:	2f6f      	cmp	r7, #111	@ 0x6f
 8012a8a:	4852      	ldr	r0, [pc, #328]	@ (8012bd4 <_printf_i+0x234>)
 8012a8c:	6033      	str	r3, [r6, #0]
 8012a8e:	bf14      	ite	ne
 8012a90:	230a      	movne	r3, #10
 8012a92:	2308      	moveq	r3, #8
 8012a94:	2100      	movs	r1, #0
 8012a96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012a9a:	6866      	ldr	r6, [r4, #4]
 8012a9c:	60a6      	str	r6, [r4, #8]
 8012a9e:	2e00      	cmp	r6, #0
 8012aa0:	db05      	blt.n	8012aae <_printf_i+0x10e>
 8012aa2:	6821      	ldr	r1, [r4, #0]
 8012aa4:	432e      	orrs	r6, r5
 8012aa6:	f021 0104 	bic.w	r1, r1, #4
 8012aaa:	6021      	str	r1, [r4, #0]
 8012aac:	d04b      	beq.n	8012b46 <_printf_i+0x1a6>
 8012aae:	4616      	mov	r6, r2
 8012ab0:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ab4:	fb03 5711 	mls	r7, r3, r1, r5
 8012ab8:	5dc7      	ldrb	r7, [r0, r7]
 8012aba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012abe:	462f      	mov	r7, r5
 8012ac0:	42bb      	cmp	r3, r7
 8012ac2:	460d      	mov	r5, r1
 8012ac4:	d9f4      	bls.n	8012ab0 <_printf_i+0x110>
 8012ac6:	2b08      	cmp	r3, #8
 8012ac8:	d10b      	bne.n	8012ae2 <_printf_i+0x142>
 8012aca:	6823      	ldr	r3, [r4, #0]
 8012acc:	07df      	lsls	r7, r3, #31
 8012ace:	d508      	bpl.n	8012ae2 <_printf_i+0x142>
 8012ad0:	6923      	ldr	r3, [r4, #16]
 8012ad2:	6861      	ldr	r1, [r4, #4]
 8012ad4:	4299      	cmp	r1, r3
 8012ad6:	bfde      	ittt	le
 8012ad8:	2330      	movle	r3, #48	@ 0x30
 8012ada:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012ade:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012ae2:	1b92      	subs	r2, r2, r6
 8012ae4:	6122      	str	r2, [r4, #16]
 8012ae6:	f8cd a000 	str.w	sl, [sp]
 8012aea:	464b      	mov	r3, r9
 8012aec:	aa03      	add	r2, sp, #12
 8012aee:	4621      	mov	r1, r4
 8012af0:	4640      	mov	r0, r8
 8012af2:	f7ff fee7 	bl	80128c4 <_printf_common>
 8012af6:	3001      	adds	r0, #1
 8012af8:	d14a      	bne.n	8012b90 <_printf_i+0x1f0>
 8012afa:	f04f 30ff 	mov.w	r0, #4294967295
 8012afe:	b004      	add	sp, #16
 8012b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b04:	6823      	ldr	r3, [r4, #0]
 8012b06:	f043 0320 	orr.w	r3, r3, #32
 8012b0a:	6023      	str	r3, [r4, #0]
 8012b0c:	4832      	ldr	r0, [pc, #200]	@ (8012bd8 <_printf_i+0x238>)
 8012b0e:	2778      	movs	r7, #120	@ 0x78
 8012b10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012b14:	6823      	ldr	r3, [r4, #0]
 8012b16:	6831      	ldr	r1, [r6, #0]
 8012b18:	061f      	lsls	r7, r3, #24
 8012b1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8012b1e:	d402      	bmi.n	8012b26 <_printf_i+0x186>
 8012b20:	065f      	lsls	r7, r3, #25
 8012b22:	bf48      	it	mi
 8012b24:	b2ad      	uxthmi	r5, r5
 8012b26:	6031      	str	r1, [r6, #0]
 8012b28:	07d9      	lsls	r1, r3, #31
 8012b2a:	bf44      	itt	mi
 8012b2c:	f043 0320 	orrmi.w	r3, r3, #32
 8012b30:	6023      	strmi	r3, [r4, #0]
 8012b32:	b11d      	cbz	r5, 8012b3c <_printf_i+0x19c>
 8012b34:	2310      	movs	r3, #16
 8012b36:	e7ad      	b.n	8012a94 <_printf_i+0xf4>
 8012b38:	4826      	ldr	r0, [pc, #152]	@ (8012bd4 <_printf_i+0x234>)
 8012b3a:	e7e9      	b.n	8012b10 <_printf_i+0x170>
 8012b3c:	6823      	ldr	r3, [r4, #0]
 8012b3e:	f023 0320 	bic.w	r3, r3, #32
 8012b42:	6023      	str	r3, [r4, #0]
 8012b44:	e7f6      	b.n	8012b34 <_printf_i+0x194>
 8012b46:	4616      	mov	r6, r2
 8012b48:	e7bd      	b.n	8012ac6 <_printf_i+0x126>
 8012b4a:	6833      	ldr	r3, [r6, #0]
 8012b4c:	6825      	ldr	r5, [r4, #0]
 8012b4e:	6961      	ldr	r1, [r4, #20]
 8012b50:	1d18      	adds	r0, r3, #4
 8012b52:	6030      	str	r0, [r6, #0]
 8012b54:	062e      	lsls	r6, r5, #24
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	d501      	bpl.n	8012b5e <_printf_i+0x1be>
 8012b5a:	6019      	str	r1, [r3, #0]
 8012b5c:	e002      	b.n	8012b64 <_printf_i+0x1c4>
 8012b5e:	0668      	lsls	r0, r5, #25
 8012b60:	d5fb      	bpl.n	8012b5a <_printf_i+0x1ba>
 8012b62:	8019      	strh	r1, [r3, #0]
 8012b64:	2300      	movs	r3, #0
 8012b66:	6123      	str	r3, [r4, #16]
 8012b68:	4616      	mov	r6, r2
 8012b6a:	e7bc      	b.n	8012ae6 <_printf_i+0x146>
 8012b6c:	6833      	ldr	r3, [r6, #0]
 8012b6e:	1d1a      	adds	r2, r3, #4
 8012b70:	6032      	str	r2, [r6, #0]
 8012b72:	681e      	ldr	r6, [r3, #0]
 8012b74:	6862      	ldr	r2, [r4, #4]
 8012b76:	2100      	movs	r1, #0
 8012b78:	4630      	mov	r0, r6
 8012b7a:	f7ed fb29 	bl	80001d0 <memchr>
 8012b7e:	b108      	cbz	r0, 8012b84 <_printf_i+0x1e4>
 8012b80:	1b80      	subs	r0, r0, r6
 8012b82:	6060      	str	r0, [r4, #4]
 8012b84:	6863      	ldr	r3, [r4, #4]
 8012b86:	6123      	str	r3, [r4, #16]
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b8e:	e7aa      	b.n	8012ae6 <_printf_i+0x146>
 8012b90:	6923      	ldr	r3, [r4, #16]
 8012b92:	4632      	mov	r2, r6
 8012b94:	4649      	mov	r1, r9
 8012b96:	4640      	mov	r0, r8
 8012b98:	47d0      	blx	sl
 8012b9a:	3001      	adds	r0, #1
 8012b9c:	d0ad      	beq.n	8012afa <_printf_i+0x15a>
 8012b9e:	6823      	ldr	r3, [r4, #0]
 8012ba0:	079b      	lsls	r3, r3, #30
 8012ba2:	d413      	bmi.n	8012bcc <_printf_i+0x22c>
 8012ba4:	68e0      	ldr	r0, [r4, #12]
 8012ba6:	9b03      	ldr	r3, [sp, #12]
 8012ba8:	4298      	cmp	r0, r3
 8012baa:	bfb8      	it	lt
 8012bac:	4618      	movlt	r0, r3
 8012bae:	e7a6      	b.n	8012afe <_printf_i+0x15e>
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	4632      	mov	r2, r6
 8012bb4:	4649      	mov	r1, r9
 8012bb6:	4640      	mov	r0, r8
 8012bb8:	47d0      	blx	sl
 8012bba:	3001      	adds	r0, #1
 8012bbc:	d09d      	beq.n	8012afa <_printf_i+0x15a>
 8012bbe:	3501      	adds	r5, #1
 8012bc0:	68e3      	ldr	r3, [r4, #12]
 8012bc2:	9903      	ldr	r1, [sp, #12]
 8012bc4:	1a5b      	subs	r3, r3, r1
 8012bc6:	42ab      	cmp	r3, r5
 8012bc8:	dcf2      	bgt.n	8012bb0 <_printf_i+0x210>
 8012bca:	e7eb      	b.n	8012ba4 <_printf_i+0x204>
 8012bcc:	2500      	movs	r5, #0
 8012bce:	f104 0619 	add.w	r6, r4, #25
 8012bd2:	e7f5      	b.n	8012bc0 <_printf_i+0x220>
 8012bd4:	08015626 	.word	0x08015626
 8012bd8:	08015637 	.word	0x08015637

08012bdc <std>:
 8012bdc:	2300      	movs	r3, #0
 8012bde:	b510      	push	{r4, lr}
 8012be0:	4604      	mov	r4, r0
 8012be2:	e9c0 3300 	strd	r3, r3, [r0]
 8012be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012bea:	6083      	str	r3, [r0, #8]
 8012bec:	8181      	strh	r1, [r0, #12]
 8012bee:	6643      	str	r3, [r0, #100]	@ 0x64
 8012bf0:	81c2      	strh	r2, [r0, #14]
 8012bf2:	6183      	str	r3, [r0, #24]
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	2208      	movs	r2, #8
 8012bf8:	305c      	adds	r0, #92	@ 0x5c
 8012bfa:	f000 f9f9 	bl	8012ff0 <memset>
 8012bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8012c34 <std+0x58>)
 8012c00:	6263      	str	r3, [r4, #36]	@ 0x24
 8012c02:	4b0d      	ldr	r3, [pc, #52]	@ (8012c38 <std+0x5c>)
 8012c04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012c06:	4b0d      	ldr	r3, [pc, #52]	@ (8012c3c <std+0x60>)
 8012c08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c40 <std+0x64>)
 8012c0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8012c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8012c44 <std+0x68>)
 8012c10:	6224      	str	r4, [r4, #32]
 8012c12:	429c      	cmp	r4, r3
 8012c14:	d006      	beq.n	8012c24 <std+0x48>
 8012c16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012c1a:	4294      	cmp	r4, r2
 8012c1c:	d002      	beq.n	8012c24 <std+0x48>
 8012c1e:	33d0      	adds	r3, #208	@ 0xd0
 8012c20:	429c      	cmp	r4, r3
 8012c22:	d105      	bne.n	8012c30 <std+0x54>
 8012c24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c2c:	f000 ba5c 	b.w	80130e8 <__retarget_lock_init_recursive>
 8012c30:	bd10      	pop	{r4, pc}
 8012c32:	bf00      	nop
 8012c34:	08012e41 	.word	0x08012e41
 8012c38:	08012e63 	.word	0x08012e63
 8012c3c:	08012e9b 	.word	0x08012e9b
 8012c40:	08012ebf 	.word	0x08012ebf
 8012c44:	2001e904 	.word	0x2001e904

08012c48 <stdio_exit_handler>:
 8012c48:	4a02      	ldr	r2, [pc, #8]	@ (8012c54 <stdio_exit_handler+0xc>)
 8012c4a:	4903      	ldr	r1, [pc, #12]	@ (8012c58 <stdio_exit_handler+0x10>)
 8012c4c:	4803      	ldr	r0, [pc, #12]	@ (8012c5c <stdio_exit_handler+0x14>)
 8012c4e:	f000 b869 	b.w	8012d24 <_fwalk_sglue>
 8012c52:	bf00      	nop
 8012c54:	20000108 	.word	0x20000108
 8012c58:	08014a41 	.word	0x08014a41
 8012c5c:	20000118 	.word	0x20000118

08012c60 <cleanup_stdio>:
 8012c60:	6841      	ldr	r1, [r0, #4]
 8012c62:	4b0c      	ldr	r3, [pc, #48]	@ (8012c94 <cleanup_stdio+0x34>)
 8012c64:	4299      	cmp	r1, r3
 8012c66:	b510      	push	{r4, lr}
 8012c68:	4604      	mov	r4, r0
 8012c6a:	d001      	beq.n	8012c70 <cleanup_stdio+0x10>
 8012c6c:	f001 fee8 	bl	8014a40 <_fflush_r>
 8012c70:	68a1      	ldr	r1, [r4, #8]
 8012c72:	4b09      	ldr	r3, [pc, #36]	@ (8012c98 <cleanup_stdio+0x38>)
 8012c74:	4299      	cmp	r1, r3
 8012c76:	d002      	beq.n	8012c7e <cleanup_stdio+0x1e>
 8012c78:	4620      	mov	r0, r4
 8012c7a:	f001 fee1 	bl	8014a40 <_fflush_r>
 8012c7e:	68e1      	ldr	r1, [r4, #12]
 8012c80:	4b06      	ldr	r3, [pc, #24]	@ (8012c9c <cleanup_stdio+0x3c>)
 8012c82:	4299      	cmp	r1, r3
 8012c84:	d004      	beq.n	8012c90 <cleanup_stdio+0x30>
 8012c86:	4620      	mov	r0, r4
 8012c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c8c:	f001 bed8 	b.w	8014a40 <_fflush_r>
 8012c90:	bd10      	pop	{r4, pc}
 8012c92:	bf00      	nop
 8012c94:	2001e904 	.word	0x2001e904
 8012c98:	2001e96c 	.word	0x2001e96c
 8012c9c:	2001e9d4 	.word	0x2001e9d4

08012ca0 <global_stdio_init.part.0>:
 8012ca0:	b510      	push	{r4, lr}
 8012ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8012cd0 <global_stdio_init.part.0+0x30>)
 8012ca4:	4c0b      	ldr	r4, [pc, #44]	@ (8012cd4 <global_stdio_init.part.0+0x34>)
 8012ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8012cd8 <global_stdio_init.part.0+0x38>)
 8012ca8:	601a      	str	r2, [r3, #0]
 8012caa:	4620      	mov	r0, r4
 8012cac:	2200      	movs	r2, #0
 8012cae:	2104      	movs	r1, #4
 8012cb0:	f7ff ff94 	bl	8012bdc <std>
 8012cb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012cb8:	2201      	movs	r2, #1
 8012cba:	2109      	movs	r1, #9
 8012cbc:	f7ff ff8e 	bl	8012bdc <std>
 8012cc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012cc4:	2202      	movs	r2, #2
 8012cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cca:	2112      	movs	r1, #18
 8012ccc:	f7ff bf86 	b.w	8012bdc <std>
 8012cd0:	2001ea3c 	.word	0x2001ea3c
 8012cd4:	2001e904 	.word	0x2001e904
 8012cd8:	08012c49 	.word	0x08012c49

08012cdc <__sfp_lock_acquire>:
 8012cdc:	4801      	ldr	r0, [pc, #4]	@ (8012ce4 <__sfp_lock_acquire+0x8>)
 8012cde:	f000 ba04 	b.w	80130ea <__retarget_lock_acquire_recursive>
 8012ce2:	bf00      	nop
 8012ce4:	2001ea45 	.word	0x2001ea45

08012ce8 <__sfp_lock_release>:
 8012ce8:	4801      	ldr	r0, [pc, #4]	@ (8012cf0 <__sfp_lock_release+0x8>)
 8012cea:	f000 b9ff 	b.w	80130ec <__retarget_lock_release_recursive>
 8012cee:	bf00      	nop
 8012cf0:	2001ea45 	.word	0x2001ea45

08012cf4 <__sinit>:
 8012cf4:	b510      	push	{r4, lr}
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	f7ff fff0 	bl	8012cdc <__sfp_lock_acquire>
 8012cfc:	6a23      	ldr	r3, [r4, #32]
 8012cfe:	b11b      	cbz	r3, 8012d08 <__sinit+0x14>
 8012d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d04:	f7ff bff0 	b.w	8012ce8 <__sfp_lock_release>
 8012d08:	4b04      	ldr	r3, [pc, #16]	@ (8012d1c <__sinit+0x28>)
 8012d0a:	6223      	str	r3, [r4, #32]
 8012d0c:	4b04      	ldr	r3, [pc, #16]	@ (8012d20 <__sinit+0x2c>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d1f5      	bne.n	8012d00 <__sinit+0xc>
 8012d14:	f7ff ffc4 	bl	8012ca0 <global_stdio_init.part.0>
 8012d18:	e7f2      	b.n	8012d00 <__sinit+0xc>
 8012d1a:	bf00      	nop
 8012d1c:	08012c61 	.word	0x08012c61
 8012d20:	2001ea3c 	.word	0x2001ea3c

08012d24 <_fwalk_sglue>:
 8012d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d28:	4607      	mov	r7, r0
 8012d2a:	4688      	mov	r8, r1
 8012d2c:	4614      	mov	r4, r2
 8012d2e:	2600      	movs	r6, #0
 8012d30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d34:	f1b9 0901 	subs.w	r9, r9, #1
 8012d38:	d505      	bpl.n	8012d46 <_fwalk_sglue+0x22>
 8012d3a:	6824      	ldr	r4, [r4, #0]
 8012d3c:	2c00      	cmp	r4, #0
 8012d3e:	d1f7      	bne.n	8012d30 <_fwalk_sglue+0xc>
 8012d40:	4630      	mov	r0, r6
 8012d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d46:	89ab      	ldrh	r3, [r5, #12]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d907      	bls.n	8012d5c <_fwalk_sglue+0x38>
 8012d4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d50:	3301      	adds	r3, #1
 8012d52:	d003      	beq.n	8012d5c <_fwalk_sglue+0x38>
 8012d54:	4629      	mov	r1, r5
 8012d56:	4638      	mov	r0, r7
 8012d58:	47c0      	blx	r8
 8012d5a:	4306      	orrs	r6, r0
 8012d5c:	3568      	adds	r5, #104	@ 0x68
 8012d5e:	e7e9      	b.n	8012d34 <_fwalk_sglue+0x10>

08012d60 <iprintf>:
 8012d60:	b40f      	push	{r0, r1, r2, r3}
 8012d62:	b507      	push	{r0, r1, r2, lr}
 8012d64:	4906      	ldr	r1, [pc, #24]	@ (8012d80 <iprintf+0x20>)
 8012d66:	ab04      	add	r3, sp, #16
 8012d68:	6808      	ldr	r0, [r1, #0]
 8012d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d6e:	6881      	ldr	r1, [r0, #8]
 8012d70:	9301      	str	r3, [sp, #4]
 8012d72:	f001 fcc9 	bl	8014708 <_vfiprintf_r>
 8012d76:	b003      	add	sp, #12
 8012d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d7c:	b004      	add	sp, #16
 8012d7e:	4770      	bx	lr
 8012d80:	20000114 	.word	0x20000114

08012d84 <_puts_r>:
 8012d84:	6a03      	ldr	r3, [r0, #32]
 8012d86:	b570      	push	{r4, r5, r6, lr}
 8012d88:	6884      	ldr	r4, [r0, #8]
 8012d8a:	4605      	mov	r5, r0
 8012d8c:	460e      	mov	r6, r1
 8012d8e:	b90b      	cbnz	r3, 8012d94 <_puts_r+0x10>
 8012d90:	f7ff ffb0 	bl	8012cf4 <__sinit>
 8012d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d96:	07db      	lsls	r3, r3, #31
 8012d98:	d405      	bmi.n	8012da6 <_puts_r+0x22>
 8012d9a:	89a3      	ldrh	r3, [r4, #12]
 8012d9c:	0598      	lsls	r0, r3, #22
 8012d9e:	d402      	bmi.n	8012da6 <_puts_r+0x22>
 8012da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012da2:	f000 f9a2 	bl	80130ea <__retarget_lock_acquire_recursive>
 8012da6:	89a3      	ldrh	r3, [r4, #12]
 8012da8:	0719      	lsls	r1, r3, #28
 8012daa:	d502      	bpl.n	8012db2 <_puts_r+0x2e>
 8012dac:	6923      	ldr	r3, [r4, #16]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d135      	bne.n	8012e1e <_puts_r+0x9a>
 8012db2:	4621      	mov	r1, r4
 8012db4:	4628      	mov	r0, r5
 8012db6:	f000 f8c5 	bl	8012f44 <__swsetup_r>
 8012dba:	b380      	cbz	r0, 8012e1e <_puts_r+0x9a>
 8012dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8012dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012dc2:	07da      	lsls	r2, r3, #31
 8012dc4:	d405      	bmi.n	8012dd2 <_puts_r+0x4e>
 8012dc6:	89a3      	ldrh	r3, [r4, #12]
 8012dc8:	059b      	lsls	r3, r3, #22
 8012dca:	d402      	bmi.n	8012dd2 <_puts_r+0x4e>
 8012dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012dce:	f000 f98d 	bl	80130ec <__retarget_lock_release_recursive>
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	bd70      	pop	{r4, r5, r6, pc}
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	da04      	bge.n	8012de4 <_puts_r+0x60>
 8012dda:	69a2      	ldr	r2, [r4, #24]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	dc17      	bgt.n	8012e10 <_puts_r+0x8c>
 8012de0:	290a      	cmp	r1, #10
 8012de2:	d015      	beq.n	8012e10 <_puts_r+0x8c>
 8012de4:	6823      	ldr	r3, [r4, #0]
 8012de6:	1c5a      	adds	r2, r3, #1
 8012de8:	6022      	str	r2, [r4, #0]
 8012dea:	7019      	strb	r1, [r3, #0]
 8012dec:	68a3      	ldr	r3, [r4, #8]
 8012dee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012df2:	3b01      	subs	r3, #1
 8012df4:	60a3      	str	r3, [r4, #8]
 8012df6:	2900      	cmp	r1, #0
 8012df8:	d1ed      	bne.n	8012dd6 <_puts_r+0x52>
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	da11      	bge.n	8012e22 <_puts_r+0x9e>
 8012dfe:	4622      	mov	r2, r4
 8012e00:	210a      	movs	r1, #10
 8012e02:	4628      	mov	r0, r5
 8012e04:	f000 f85f 	bl	8012ec6 <__swbuf_r>
 8012e08:	3001      	adds	r0, #1
 8012e0a:	d0d7      	beq.n	8012dbc <_puts_r+0x38>
 8012e0c:	250a      	movs	r5, #10
 8012e0e:	e7d7      	b.n	8012dc0 <_puts_r+0x3c>
 8012e10:	4622      	mov	r2, r4
 8012e12:	4628      	mov	r0, r5
 8012e14:	f000 f857 	bl	8012ec6 <__swbuf_r>
 8012e18:	3001      	adds	r0, #1
 8012e1a:	d1e7      	bne.n	8012dec <_puts_r+0x68>
 8012e1c:	e7ce      	b.n	8012dbc <_puts_r+0x38>
 8012e1e:	3e01      	subs	r6, #1
 8012e20:	e7e4      	b.n	8012dec <_puts_r+0x68>
 8012e22:	6823      	ldr	r3, [r4, #0]
 8012e24:	1c5a      	adds	r2, r3, #1
 8012e26:	6022      	str	r2, [r4, #0]
 8012e28:	220a      	movs	r2, #10
 8012e2a:	701a      	strb	r2, [r3, #0]
 8012e2c:	e7ee      	b.n	8012e0c <_puts_r+0x88>
	...

08012e30 <puts>:
 8012e30:	4b02      	ldr	r3, [pc, #8]	@ (8012e3c <puts+0xc>)
 8012e32:	4601      	mov	r1, r0
 8012e34:	6818      	ldr	r0, [r3, #0]
 8012e36:	f7ff bfa5 	b.w	8012d84 <_puts_r>
 8012e3a:	bf00      	nop
 8012e3c:	20000114 	.word	0x20000114

08012e40 <__sread>:
 8012e40:	b510      	push	{r4, lr}
 8012e42:	460c      	mov	r4, r1
 8012e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e48:	f000 f900 	bl	801304c <_read_r>
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	bfab      	itete	ge
 8012e50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012e52:	89a3      	ldrhlt	r3, [r4, #12]
 8012e54:	181b      	addge	r3, r3, r0
 8012e56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012e5a:	bfac      	ite	ge
 8012e5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012e5e:	81a3      	strhlt	r3, [r4, #12]
 8012e60:	bd10      	pop	{r4, pc}

08012e62 <__swrite>:
 8012e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e66:	461f      	mov	r7, r3
 8012e68:	898b      	ldrh	r3, [r1, #12]
 8012e6a:	05db      	lsls	r3, r3, #23
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	460c      	mov	r4, r1
 8012e70:	4616      	mov	r6, r2
 8012e72:	d505      	bpl.n	8012e80 <__swrite+0x1e>
 8012e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e78:	2302      	movs	r3, #2
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	f000 f8d4 	bl	8013028 <_lseek_r>
 8012e80:	89a3      	ldrh	r3, [r4, #12]
 8012e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012e8a:	81a3      	strh	r3, [r4, #12]
 8012e8c:	4632      	mov	r2, r6
 8012e8e:	463b      	mov	r3, r7
 8012e90:	4628      	mov	r0, r5
 8012e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e96:	f000 b8eb 	b.w	8013070 <_write_r>

08012e9a <__sseek>:
 8012e9a:	b510      	push	{r4, lr}
 8012e9c:	460c      	mov	r4, r1
 8012e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ea2:	f000 f8c1 	bl	8013028 <_lseek_r>
 8012ea6:	1c43      	adds	r3, r0, #1
 8012ea8:	89a3      	ldrh	r3, [r4, #12]
 8012eaa:	bf15      	itete	ne
 8012eac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012eae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012eb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012eb6:	81a3      	strheq	r3, [r4, #12]
 8012eb8:	bf18      	it	ne
 8012eba:	81a3      	strhne	r3, [r4, #12]
 8012ebc:	bd10      	pop	{r4, pc}

08012ebe <__sclose>:
 8012ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ec2:	f000 b8a1 	b.w	8013008 <_close_r>

08012ec6 <__swbuf_r>:
 8012ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ec8:	460e      	mov	r6, r1
 8012eca:	4614      	mov	r4, r2
 8012ecc:	4605      	mov	r5, r0
 8012ece:	b118      	cbz	r0, 8012ed8 <__swbuf_r+0x12>
 8012ed0:	6a03      	ldr	r3, [r0, #32]
 8012ed2:	b90b      	cbnz	r3, 8012ed8 <__swbuf_r+0x12>
 8012ed4:	f7ff ff0e 	bl	8012cf4 <__sinit>
 8012ed8:	69a3      	ldr	r3, [r4, #24]
 8012eda:	60a3      	str	r3, [r4, #8]
 8012edc:	89a3      	ldrh	r3, [r4, #12]
 8012ede:	071a      	lsls	r2, r3, #28
 8012ee0:	d501      	bpl.n	8012ee6 <__swbuf_r+0x20>
 8012ee2:	6923      	ldr	r3, [r4, #16]
 8012ee4:	b943      	cbnz	r3, 8012ef8 <__swbuf_r+0x32>
 8012ee6:	4621      	mov	r1, r4
 8012ee8:	4628      	mov	r0, r5
 8012eea:	f000 f82b 	bl	8012f44 <__swsetup_r>
 8012eee:	b118      	cbz	r0, 8012ef8 <__swbuf_r+0x32>
 8012ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8012ef4:	4638      	mov	r0, r7
 8012ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ef8:	6823      	ldr	r3, [r4, #0]
 8012efa:	6922      	ldr	r2, [r4, #16]
 8012efc:	1a98      	subs	r0, r3, r2
 8012efe:	6963      	ldr	r3, [r4, #20]
 8012f00:	b2f6      	uxtb	r6, r6
 8012f02:	4283      	cmp	r3, r0
 8012f04:	4637      	mov	r7, r6
 8012f06:	dc05      	bgt.n	8012f14 <__swbuf_r+0x4e>
 8012f08:	4621      	mov	r1, r4
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f001 fd98 	bl	8014a40 <_fflush_r>
 8012f10:	2800      	cmp	r0, #0
 8012f12:	d1ed      	bne.n	8012ef0 <__swbuf_r+0x2a>
 8012f14:	68a3      	ldr	r3, [r4, #8]
 8012f16:	3b01      	subs	r3, #1
 8012f18:	60a3      	str	r3, [r4, #8]
 8012f1a:	6823      	ldr	r3, [r4, #0]
 8012f1c:	1c5a      	adds	r2, r3, #1
 8012f1e:	6022      	str	r2, [r4, #0]
 8012f20:	701e      	strb	r6, [r3, #0]
 8012f22:	6962      	ldr	r2, [r4, #20]
 8012f24:	1c43      	adds	r3, r0, #1
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d004      	beq.n	8012f34 <__swbuf_r+0x6e>
 8012f2a:	89a3      	ldrh	r3, [r4, #12]
 8012f2c:	07db      	lsls	r3, r3, #31
 8012f2e:	d5e1      	bpl.n	8012ef4 <__swbuf_r+0x2e>
 8012f30:	2e0a      	cmp	r6, #10
 8012f32:	d1df      	bne.n	8012ef4 <__swbuf_r+0x2e>
 8012f34:	4621      	mov	r1, r4
 8012f36:	4628      	mov	r0, r5
 8012f38:	f001 fd82 	bl	8014a40 <_fflush_r>
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	d0d9      	beq.n	8012ef4 <__swbuf_r+0x2e>
 8012f40:	e7d6      	b.n	8012ef0 <__swbuf_r+0x2a>
	...

08012f44 <__swsetup_r>:
 8012f44:	b538      	push	{r3, r4, r5, lr}
 8012f46:	4b29      	ldr	r3, [pc, #164]	@ (8012fec <__swsetup_r+0xa8>)
 8012f48:	4605      	mov	r5, r0
 8012f4a:	6818      	ldr	r0, [r3, #0]
 8012f4c:	460c      	mov	r4, r1
 8012f4e:	b118      	cbz	r0, 8012f58 <__swsetup_r+0x14>
 8012f50:	6a03      	ldr	r3, [r0, #32]
 8012f52:	b90b      	cbnz	r3, 8012f58 <__swsetup_r+0x14>
 8012f54:	f7ff fece 	bl	8012cf4 <__sinit>
 8012f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f5c:	0719      	lsls	r1, r3, #28
 8012f5e:	d422      	bmi.n	8012fa6 <__swsetup_r+0x62>
 8012f60:	06da      	lsls	r2, r3, #27
 8012f62:	d407      	bmi.n	8012f74 <__swsetup_r+0x30>
 8012f64:	2209      	movs	r2, #9
 8012f66:	602a      	str	r2, [r5, #0]
 8012f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f6c:	81a3      	strh	r3, [r4, #12]
 8012f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f72:	e033      	b.n	8012fdc <__swsetup_r+0x98>
 8012f74:	0758      	lsls	r0, r3, #29
 8012f76:	d512      	bpl.n	8012f9e <__swsetup_r+0x5a>
 8012f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f7a:	b141      	cbz	r1, 8012f8e <__swsetup_r+0x4a>
 8012f7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f80:	4299      	cmp	r1, r3
 8012f82:	d002      	beq.n	8012f8a <__swsetup_r+0x46>
 8012f84:	4628      	mov	r0, r5
 8012f86:	f000 ff1b 	bl	8013dc0 <_free_r>
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f8e:	89a3      	ldrh	r3, [r4, #12]
 8012f90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f94:	81a3      	strh	r3, [r4, #12]
 8012f96:	2300      	movs	r3, #0
 8012f98:	6063      	str	r3, [r4, #4]
 8012f9a:	6923      	ldr	r3, [r4, #16]
 8012f9c:	6023      	str	r3, [r4, #0]
 8012f9e:	89a3      	ldrh	r3, [r4, #12]
 8012fa0:	f043 0308 	orr.w	r3, r3, #8
 8012fa4:	81a3      	strh	r3, [r4, #12]
 8012fa6:	6923      	ldr	r3, [r4, #16]
 8012fa8:	b94b      	cbnz	r3, 8012fbe <__swsetup_r+0x7a>
 8012faa:	89a3      	ldrh	r3, [r4, #12]
 8012fac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012fb4:	d003      	beq.n	8012fbe <__swsetup_r+0x7a>
 8012fb6:	4621      	mov	r1, r4
 8012fb8:	4628      	mov	r0, r5
 8012fba:	f001 fd8f 	bl	8014adc <__smakebuf_r>
 8012fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fc2:	f013 0201 	ands.w	r2, r3, #1
 8012fc6:	d00a      	beq.n	8012fde <__swsetup_r+0x9a>
 8012fc8:	2200      	movs	r2, #0
 8012fca:	60a2      	str	r2, [r4, #8]
 8012fcc:	6962      	ldr	r2, [r4, #20]
 8012fce:	4252      	negs	r2, r2
 8012fd0:	61a2      	str	r2, [r4, #24]
 8012fd2:	6922      	ldr	r2, [r4, #16]
 8012fd4:	b942      	cbnz	r2, 8012fe8 <__swsetup_r+0xa4>
 8012fd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012fda:	d1c5      	bne.n	8012f68 <__swsetup_r+0x24>
 8012fdc:	bd38      	pop	{r3, r4, r5, pc}
 8012fde:	0799      	lsls	r1, r3, #30
 8012fe0:	bf58      	it	pl
 8012fe2:	6962      	ldrpl	r2, [r4, #20]
 8012fe4:	60a2      	str	r2, [r4, #8]
 8012fe6:	e7f4      	b.n	8012fd2 <__swsetup_r+0x8e>
 8012fe8:	2000      	movs	r0, #0
 8012fea:	e7f7      	b.n	8012fdc <__swsetup_r+0x98>
 8012fec:	20000114 	.word	0x20000114

08012ff0 <memset>:
 8012ff0:	4402      	add	r2, r0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	4293      	cmp	r3, r2
 8012ff6:	d100      	bne.n	8012ffa <memset+0xa>
 8012ff8:	4770      	bx	lr
 8012ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8012ffe:	e7f9      	b.n	8012ff4 <memset+0x4>

08013000 <_localeconv_r>:
 8013000:	4800      	ldr	r0, [pc, #0]	@ (8013004 <_localeconv_r+0x4>)
 8013002:	4770      	bx	lr
 8013004:	20000254 	.word	0x20000254

08013008 <_close_r>:
 8013008:	b538      	push	{r3, r4, r5, lr}
 801300a:	4d06      	ldr	r5, [pc, #24]	@ (8013024 <_close_r+0x1c>)
 801300c:	2300      	movs	r3, #0
 801300e:	4604      	mov	r4, r0
 8013010:	4608      	mov	r0, r1
 8013012:	602b      	str	r3, [r5, #0]
 8013014:	f7ef fbb2 	bl	800277c <_close>
 8013018:	1c43      	adds	r3, r0, #1
 801301a:	d102      	bne.n	8013022 <_close_r+0x1a>
 801301c:	682b      	ldr	r3, [r5, #0]
 801301e:	b103      	cbz	r3, 8013022 <_close_r+0x1a>
 8013020:	6023      	str	r3, [r4, #0]
 8013022:	bd38      	pop	{r3, r4, r5, pc}
 8013024:	2001ea40 	.word	0x2001ea40

08013028 <_lseek_r>:
 8013028:	b538      	push	{r3, r4, r5, lr}
 801302a:	4d07      	ldr	r5, [pc, #28]	@ (8013048 <_lseek_r+0x20>)
 801302c:	4604      	mov	r4, r0
 801302e:	4608      	mov	r0, r1
 8013030:	4611      	mov	r1, r2
 8013032:	2200      	movs	r2, #0
 8013034:	602a      	str	r2, [r5, #0]
 8013036:	461a      	mov	r2, r3
 8013038:	f7ef fbc7 	bl	80027ca <_lseek>
 801303c:	1c43      	adds	r3, r0, #1
 801303e:	d102      	bne.n	8013046 <_lseek_r+0x1e>
 8013040:	682b      	ldr	r3, [r5, #0]
 8013042:	b103      	cbz	r3, 8013046 <_lseek_r+0x1e>
 8013044:	6023      	str	r3, [r4, #0]
 8013046:	bd38      	pop	{r3, r4, r5, pc}
 8013048:	2001ea40 	.word	0x2001ea40

0801304c <_read_r>:
 801304c:	b538      	push	{r3, r4, r5, lr}
 801304e:	4d07      	ldr	r5, [pc, #28]	@ (801306c <_read_r+0x20>)
 8013050:	4604      	mov	r4, r0
 8013052:	4608      	mov	r0, r1
 8013054:	4611      	mov	r1, r2
 8013056:	2200      	movs	r2, #0
 8013058:	602a      	str	r2, [r5, #0]
 801305a:	461a      	mov	r2, r3
 801305c:	f7ef fb55 	bl	800270a <_read>
 8013060:	1c43      	adds	r3, r0, #1
 8013062:	d102      	bne.n	801306a <_read_r+0x1e>
 8013064:	682b      	ldr	r3, [r5, #0]
 8013066:	b103      	cbz	r3, 801306a <_read_r+0x1e>
 8013068:	6023      	str	r3, [r4, #0]
 801306a:	bd38      	pop	{r3, r4, r5, pc}
 801306c:	2001ea40 	.word	0x2001ea40

08013070 <_write_r>:
 8013070:	b538      	push	{r3, r4, r5, lr}
 8013072:	4d07      	ldr	r5, [pc, #28]	@ (8013090 <_write_r+0x20>)
 8013074:	4604      	mov	r4, r0
 8013076:	4608      	mov	r0, r1
 8013078:	4611      	mov	r1, r2
 801307a:	2200      	movs	r2, #0
 801307c:	602a      	str	r2, [r5, #0]
 801307e:	461a      	mov	r2, r3
 8013080:	f7ef fb60 	bl	8002744 <_write>
 8013084:	1c43      	adds	r3, r0, #1
 8013086:	d102      	bne.n	801308e <_write_r+0x1e>
 8013088:	682b      	ldr	r3, [r5, #0]
 801308a:	b103      	cbz	r3, 801308e <_write_r+0x1e>
 801308c:	6023      	str	r3, [r4, #0]
 801308e:	bd38      	pop	{r3, r4, r5, pc}
 8013090:	2001ea40 	.word	0x2001ea40

08013094 <__errno>:
 8013094:	4b01      	ldr	r3, [pc, #4]	@ (801309c <__errno+0x8>)
 8013096:	6818      	ldr	r0, [r3, #0]
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	20000114 	.word	0x20000114

080130a0 <__libc_init_array>:
 80130a0:	b570      	push	{r4, r5, r6, lr}
 80130a2:	4d0d      	ldr	r5, [pc, #52]	@ (80130d8 <__libc_init_array+0x38>)
 80130a4:	4c0d      	ldr	r4, [pc, #52]	@ (80130dc <__libc_init_array+0x3c>)
 80130a6:	1b64      	subs	r4, r4, r5
 80130a8:	10a4      	asrs	r4, r4, #2
 80130aa:	2600      	movs	r6, #0
 80130ac:	42a6      	cmp	r6, r4
 80130ae:	d109      	bne.n	80130c4 <__libc_init_array+0x24>
 80130b0:	4d0b      	ldr	r5, [pc, #44]	@ (80130e0 <__libc_init_array+0x40>)
 80130b2:	4c0c      	ldr	r4, [pc, #48]	@ (80130e4 <__libc_init_array+0x44>)
 80130b4:	f001 fe30 	bl	8014d18 <_init>
 80130b8:	1b64      	subs	r4, r4, r5
 80130ba:	10a4      	asrs	r4, r4, #2
 80130bc:	2600      	movs	r6, #0
 80130be:	42a6      	cmp	r6, r4
 80130c0:	d105      	bne.n	80130ce <__libc_init_array+0x2e>
 80130c2:	bd70      	pop	{r4, r5, r6, pc}
 80130c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80130c8:	4798      	blx	r3
 80130ca:	3601      	adds	r6, #1
 80130cc:	e7ee      	b.n	80130ac <__libc_init_array+0xc>
 80130ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80130d2:	4798      	blx	r3
 80130d4:	3601      	adds	r6, #1
 80130d6:	e7f2      	b.n	80130be <__libc_init_array+0x1e>
 80130d8:	08015994 	.word	0x08015994
 80130dc:	08015994 	.word	0x08015994
 80130e0:	08015994 	.word	0x08015994
 80130e4:	08015998 	.word	0x08015998

080130e8 <__retarget_lock_init_recursive>:
 80130e8:	4770      	bx	lr

080130ea <__retarget_lock_acquire_recursive>:
 80130ea:	4770      	bx	lr

080130ec <__retarget_lock_release_recursive>:
 80130ec:	4770      	bx	lr

080130ee <memcpy>:
 80130ee:	440a      	add	r2, r1
 80130f0:	4291      	cmp	r1, r2
 80130f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80130f6:	d100      	bne.n	80130fa <memcpy+0xc>
 80130f8:	4770      	bx	lr
 80130fa:	b510      	push	{r4, lr}
 80130fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013104:	4291      	cmp	r1, r2
 8013106:	d1f9      	bne.n	80130fc <memcpy+0xe>
 8013108:	bd10      	pop	{r4, pc}

0801310a <quorem>:
 801310a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801310e:	6903      	ldr	r3, [r0, #16]
 8013110:	690c      	ldr	r4, [r1, #16]
 8013112:	42a3      	cmp	r3, r4
 8013114:	4607      	mov	r7, r0
 8013116:	db7e      	blt.n	8013216 <quorem+0x10c>
 8013118:	3c01      	subs	r4, #1
 801311a:	f101 0814 	add.w	r8, r1, #20
 801311e:	00a3      	lsls	r3, r4, #2
 8013120:	f100 0514 	add.w	r5, r0, #20
 8013124:	9300      	str	r3, [sp, #0]
 8013126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801312a:	9301      	str	r3, [sp, #4]
 801312c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013134:	3301      	adds	r3, #1
 8013136:	429a      	cmp	r2, r3
 8013138:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801313c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013140:	d32e      	bcc.n	80131a0 <quorem+0x96>
 8013142:	f04f 0a00 	mov.w	sl, #0
 8013146:	46c4      	mov	ip, r8
 8013148:	46ae      	mov	lr, r5
 801314a:	46d3      	mov	fp, sl
 801314c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013150:	b298      	uxth	r0, r3
 8013152:	fb06 a000 	mla	r0, r6, r0, sl
 8013156:	0c02      	lsrs	r2, r0, #16
 8013158:	0c1b      	lsrs	r3, r3, #16
 801315a:	fb06 2303 	mla	r3, r6, r3, r2
 801315e:	f8de 2000 	ldr.w	r2, [lr]
 8013162:	b280      	uxth	r0, r0
 8013164:	b292      	uxth	r2, r2
 8013166:	1a12      	subs	r2, r2, r0
 8013168:	445a      	add	r2, fp
 801316a:	f8de 0000 	ldr.w	r0, [lr]
 801316e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013172:	b29b      	uxth	r3, r3
 8013174:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013178:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801317c:	b292      	uxth	r2, r2
 801317e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013182:	45e1      	cmp	r9, ip
 8013184:	f84e 2b04 	str.w	r2, [lr], #4
 8013188:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801318c:	d2de      	bcs.n	801314c <quorem+0x42>
 801318e:	9b00      	ldr	r3, [sp, #0]
 8013190:	58eb      	ldr	r3, [r5, r3]
 8013192:	b92b      	cbnz	r3, 80131a0 <quorem+0x96>
 8013194:	9b01      	ldr	r3, [sp, #4]
 8013196:	3b04      	subs	r3, #4
 8013198:	429d      	cmp	r5, r3
 801319a:	461a      	mov	r2, r3
 801319c:	d32f      	bcc.n	80131fe <quorem+0xf4>
 801319e:	613c      	str	r4, [r7, #16]
 80131a0:	4638      	mov	r0, r7
 80131a2:	f001 f97f 	bl	80144a4 <__mcmp>
 80131a6:	2800      	cmp	r0, #0
 80131a8:	db25      	blt.n	80131f6 <quorem+0xec>
 80131aa:	4629      	mov	r1, r5
 80131ac:	2000      	movs	r0, #0
 80131ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80131b2:	f8d1 c000 	ldr.w	ip, [r1]
 80131b6:	fa1f fe82 	uxth.w	lr, r2
 80131ba:	fa1f f38c 	uxth.w	r3, ip
 80131be:	eba3 030e 	sub.w	r3, r3, lr
 80131c2:	4403      	add	r3, r0
 80131c4:	0c12      	lsrs	r2, r2, #16
 80131c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80131ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80131ce:	b29b      	uxth	r3, r3
 80131d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131d4:	45c1      	cmp	r9, r8
 80131d6:	f841 3b04 	str.w	r3, [r1], #4
 80131da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80131de:	d2e6      	bcs.n	80131ae <quorem+0xa4>
 80131e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80131e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80131e8:	b922      	cbnz	r2, 80131f4 <quorem+0xea>
 80131ea:	3b04      	subs	r3, #4
 80131ec:	429d      	cmp	r5, r3
 80131ee:	461a      	mov	r2, r3
 80131f0:	d30b      	bcc.n	801320a <quorem+0x100>
 80131f2:	613c      	str	r4, [r7, #16]
 80131f4:	3601      	adds	r6, #1
 80131f6:	4630      	mov	r0, r6
 80131f8:	b003      	add	sp, #12
 80131fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fe:	6812      	ldr	r2, [r2, #0]
 8013200:	3b04      	subs	r3, #4
 8013202:	2a00      	cmp	r2, #0
 8013204:	d1cb      	bne.n	801319e <quorem+0x94>
 8013206:	3c01      	subs	r4, #1
 8013208:	e7c6      	b.n	8013198 <quorem+0x8e>
 801320a:	6812      	ldr	r2, [r2, #0]
 801320c:	3b04      	subs	r3, #4
 801320e:	2a00      	cmp	r2, #0
 8013210:	d1ef      	bne.n	80131f2 <quorem+0xe8>
 8013212:	3c01      	subs	r4, #1
 8013214:	e7ea      	b.n	80131ec <quorem+0xe2>
 8013216:	2000      	movs	r0, #0
 8013218:	e7ee      	b.n	80131f8 <quorem+0xee>
 801321a:	0000      	movs	r0, r0
 801321c:	0000      	movs	r0, r0
	...

08013220 <_dtoa_r>:
 8013220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013224:	69c7      	ldr	r7, [r0, #28]
 8013226:	b097      	sub	sp, #92	@ 0x5c
 8013228:	ed8d 0b04 	vstr	d0, [sp, #16]
 801322c:	ec55 4b10 	vmov	r4, r5, d0
 8013230:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8013232:	9107      	str	r1, [sp, #28]
 8013234:	4681      	mov	r9, r0
 8013236:	920c      	str	r2, [sp, #48]	@ 0x30
 8013238:	9311      	str	r3, [sp, #68]	@ 0x44
 801323a:	b97f      	cbnz	r7, 801325c <_dtoa_r+0x3c>
 801323c:	2010      	movs	r0, #16
 801323e:	f000 fe09 	bl	8013e54 <malloc>
 8013242:	4602      	mov	r2, r0
 8013244:	f8c9 001c 	str.w	r0, [r9, #28]
 8013248:	b920      	cbnz	r0, 8013254 <_dtoa_r+0x34>
 801324a:	4ba9      	ldr	r3, [pc, #676]	@ (80134f0 <_dtoa_r+0x2d0>)
 801324c:	21ef      	movs	r1, #239	@ 0xef
 801324e:	48a9      	ldr	r0, [pc, #676]	@ (80134f4 <_dtoa_r+0x2d4>)
 8013250:	f001 fcb2 	bl	8014bb8 <__assert_func>
 8013254:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013258:	6007      	str	r7, [r0, #0]
 801325a:	60c7      	str	r7, [r0, #12]
 801325c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013260:	6819      	ldr	r1, [r3, #0]
 8013262:	b159      	cbz	r1, 801327c <_dtoa_r+0x5c>
 8013264:	685a      	ldr	r2, [r3, #4]
 8013266:	604a      	str	r2, [r1, #4]
 8013268:	2301      	movs	r3, #1
 801326a:	4093      	lsls	r3, r2
 801326c:	608b      	str	r3, [r1, #8]
 801326e:	4648      	mov	r0, r9
 8013270:	f000 fee6 	bl	8014040 <_Bfree>
 8013274:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013278:	2200      	movs	r2, #0
 801327a:	601a      	str	r2, [r3, #0]
 801327c:	1e2b      	subs	r3, r5, #0
 801327e:	bfb9      	ittee	lt
 8013280:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013284:	9305      	strlt	r3, [sp, #20]
 8013286:	2300      	movge	r3, #0
 8013288:	6033      	strge	r3, [r6, #0]
 801328a:	9f05      	ldr	r7, [sp, #20]
 801328c:	4b9a      	ldr	r3, [pc, #616]	@ (80134f8 <_dtoa_r+0x2d8>)
 801328e:	bfbc      	itt	lt
 8013290:	2201      	movlt	r2, #1
 8013292:	6032      	strlt	r2, [r6, #0]
 8013294:	43bb      	bics	r3, r7
 8013296:	d112      	bne.n	80132be <_dtoa_r+0x9e>
 8013298:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801329a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801329e:	6013      	str	r3, [r2, #0]
 80132a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80132a4:	4323      	orrs	r3, r4
 80132a6:	f000 855a 	beq.w	8013d5e <_dtoa_r+0xb3e>
 80132aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80132ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801350c <_dtoa_r+0x2ec>
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	f000 855c 	beq.w	8013d6e <_dtoa_r+0xb4e>
 80132b6:	f10a 0303 	add.w	r3, sl, #3
 80132ba:	f000 bd56 	b.w	8013d6a <_dtoa_r+0xb4a>
 80132be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80132c2:	2200      	movs	r2, #0
 80132c4:	ec51 0b17 	vmov	r0, r1, d7
 80132c8:	2300      	movs	r3, #0
 80132ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80132ce:	f7ed fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80132d2:	4680      	mov	r8, r0
 80132d4:	b158      	cbz	r0, 80132ee <_dtoa_r+0xce>
 80132d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80132d8:	2301      	movs	r3, #1
 80132da:	6013      	str	r3, [r2, #0]
 80132dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80132de:	b113      	cbz	r3, 80132e6 <_dtoa_r+0xc6>
 80132e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80132e2:	4b86      	ldr	r3, [pc, #536]	@ (80134fc <_dtoa_r+0x2dc>)
 80132e4:	6013      	str	r3, [r2, #0]
 80132e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013510 <_dtoa_r+0x2f0>
 80132ea:	f000 bd40 	b.w	8013d6e <_dtoa_r+0xb4e>
 80132ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80132f2:	aa14      	add	r2, sp, #80	@ 0x50
 80132f4:	a915      	add	r1, sp, #84	@ 0x54
 80132f6:	4648      	mov	r0, r9
 80132f8:	f001 f984 	bl	8014604 <__d2b>
 80132fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013300:	9002      	str	r0, [sp, #8]
 8013302:	2e00      	cmp	r6, #0
 8013304:	d078      	beq.n	80133f8 <_dtoa_r+0x1d8>
 8013306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013308:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801330c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013310:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013314:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013318:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801331c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013320:	4619      	mov	r1, r3
 8013322:	2200      	movs	r2, #0
 8013324:	4b76      	ldr	r3, [pc, #472]	@ (8013500 <_dtoa_r+0x2e0>)
 8013326:	f7ec ffaf 	bl	8000288 <__aeabi_dsub>
 801332a:	a36b      	add	r3, pc, #428	@ (adr r3, 80134d8 <_dtoa_r+0x2b8>)
 801332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013330:	f7ed f962 	bl	80005f8 <__aeabi_dmul>
 8013334:	a36a      	add	r3, pc, #424	@ (adr r3, 80134e0 <_dtoa_r+0x2c0>)
 8013336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333a:	f7ec ffa7 	bl	800028c <__adddf3>
 801333e:	4604      	mov	r4, r0
 8013340:	4630      	mov	r0, r6
 8013342:	460d      	mov	r5, r1
 8013344:	f7ed f8ee 	bl	8000524 <__aeabi_i2d>
 8013348:	a367      	add	r3, pc, #412	@ (adr r3, 80134e8 <_dtoa_r+0x2c8>)
 801334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334e:	f7ed f953 	bl	80005f8 <__aeabi_dmul>
 8013352:	4602      	mov	r2, r0
 8013354:	460b      	mov	r3, r1
 8013356:	4620      	mov	r0, r4
 8013358:	4629      	mov	r1, r5
 801335a:	f7ec ff97 	bl	800028c <__adddf3>
 801335e:	4604      	mov	r4, r0
 8013360:	460d      	mov	r5, r1
 8013362:	f7ed fbf9 	bl	8000b58 <__aeabi_d2iz>
 8013366:	2200      	movs	r2, #0
 8013368:	4607      	mov	r7, r0
 801336a:	2300      	movs	r3, #0
 801336c:	4620      	mov	r0, r4
 801336e:	4629      	mov	r1, r5
 8013370:	f7ed fbb4 	bl	8000adc <__aeabi_dcmplt>
 8013374:	b140      	cbz	r0, 8013388 <_dtoa_r+0x168>
 8013376:	4638      	mov	r0, r7
 8013378:	f7ed f8d4 	bl	8000524 <__aeabi_i2d>
 801337c:	4622      	mov	r2, r4
 801337e:	462b      	mov	r3, r5
 8013380:	f7ed fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8013384:	b900      	cbnz	r0, 8013388 <_dtoa_r+0x168>
 8013386:	3f01      	subs	r7, #1
 8013388:	2f16      	cmp	r7, #22
 801338a:	d852      	bhi.n	8013432 <_dtoa_r+0x212>
 801338c:	4b5d      	ldr	r3, [pc, #372]	@ (8013504 <_dtoa_r+0x2e4>)
 801338e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801339a:	f7ed fb9f 	bl	8000adc <__aeabi_dcmplt>
 801339e:	2800      	cmp	r0, #0
 80133a0:	d049      	beq.n	8013436 <_dtoa_r+0x216>
 80133a2:	3f01      	subs	r7, #1
 80133a4:	2300      	movs	r3, #0
 80133a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80133a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80133aa:	1b9b      	subs	r3, r3, r6
 80133ac:	1e5a      	subs	r2, r3, #1
 80133ae:	bf45      	ittet	mi
 80133b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80133b4:	9300      	strmi	r3, [sp, #0]
 80133b6:	2300      	movpl	r3, #0
 80133b8:	2300      	movmi	r3, #0
 80133ba:	9206      	str	r2, [sp, #24]
 80133bc:	bf54      	ite	pl
 80133be:	9300      	strpl	r3, [sp, #0]
 80133c0:	9306      	strmi	r3, [sp, #24]
 80133c2:	2f00      	cmp	r7, #0
 80133c4:	db39      	blt.n	801343a <_dtoa_r+0x21a>
 80133c6:	9b06      	ldr	r3, [sp, #24]
 80133c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80133ca:	443b      	add	r3, r7
 80133cc:	9306      	str	r3, [sp, #24]
 80133ce:	2300      	movs	r3, #0
 80133d0:	9308      	str	r3, [sp, #32]
 80133d2:	9b07      	ldr	r3, [sp, #28]
 80133d4:	2b09      	cmp	r3, #9
 80133d6:	d863      	bhi.n	80134a0 <_dtoa_r+0x280>
 80133d8:	2b05      	cmp	r3, #5
 80133da:	bfc4      	itt	gt
 80133dc:	3b04      	subgt	r3, #4
 80133de:	9307      	strgt	r3, [sp, #28]
 80133e0:	9b07      	ldr	r3, [sp, #28]
 80133e2:	f1a3 0302 	sub.w	r3, r3, #2
 80133e6:	bfcc      	ite	gt
 80133e8:	2400      	movgt	r4, #0
 80133ea:	2401      	movle	r4, #1
 80133ec:	2b03      	cmp	r3, #3
 80133ee:	d863      	bhi.n	80134b8 <_dtoa_r+0x298>
 80133f0:	e8df f003 	tbb	[pc, r3]
 80133f4:	2b375452 	.word	0x2b375452
 80133f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80133fc:	441e      	add	r6, r3
 80133fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013402:	2b20      	cmp	r3, #32
 8013404:	bfc1      	itttt	gt
 8013406:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801340a:	409f      	lslgt	r7, r3
 801340c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013410:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013414:	bfd6      	itet	le
 8013416:	f1c3 0320 	rsble	r3, r3, #32
 801341a:	ea47 0003 	orrgt.w	r0, r7, r3
 801341e:	fa04 f003 	lslle.w	r0, r4, r3
 8013422:	f7ed f86f 	bl	8000504 <__aeabi_ui2d>
 8013426:	2201      	movs	r2, #1
 8013428:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801342c:	3e01      	subs	r6, #1
 801342e:	9212      	str	r2, [sp, #72]	@ 0x48
 8013430:	e776      	b.n	8013320 <_dtoa_r+0x100>
 8013432:	2301      	movs	r3, #1
 8013434:	e7b7      	b.n	80133a6 <_dtoa_r+0x186>
 8013436:	9010      	str	r0, [sp, #64]	@ 0x40
 8013438:	e7b6      	b.n	80133a8 <_dtoa_r+0x188>
 801343a:	9b00      	ldr	r3, [sp, #0]
 801343c:	1bdb      	subs	r3, r3, r7
 801343e:	9300      	str	r3, [sp, #0]
 8013440:	427b      	negs	r3, r7
 8013442:	9308      	str	r3, [sp, #32]
 8013444:	2300      	movs	r3, #0
 8013446:	930d      	str	r3, [sp, #52]	@ 0x34
 8013448:	e7c3      	b.n	80133d2 <_dtoa_r+0x1b2>
 801344a:	2301      	movs	r3, #1
 801344c:	9309      	str	r3, [sp, #36]	@ 0x24
 801344e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013450:	eb07 0b03 	add.w	fp, r7, r3
 8013454:	f10b 0301 	add.w	r3, fp, #1
 8013458:	2b01      	cmp	r3, #1
 801345a:	9303      	str	r3, [sp, #12]
 801345c:	bfb8      	it	lt
 801345e:	2301      	movlt	r3, #1
 8013460:	e006      	b.n	8013470 <_dtoa_r+0x250>
 8013462:	2301      	movs	r3, #1
 8013464:	9309      	str	r3, [sp, #36]	@ 0x24
 8013466:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013468:	2b00      	cmp	r3, #0
 801346a:	dd28      	ble.n	80134be <_dtoa_r+0x29e>
 801346c:	469b      	mov	fp, r3
 801346e:	9303      	str	r3, [sp, #12]
 8013470:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8013474:	2100      	movs	r1, #0
 8013476:	2204      	movs	r2, #4
 8013478:	f102 0514 	add.w	r5, r2, #20
 801347c:	429d      	cmp	r5, r3
 801347e:	d926      	bls.n	80134ce <_dtoa_r+0x2ae>
 8013480:	6041      	str	r1, [r0, #4]
 8013482:	4648      	mov	r0, r9
 8013484:	f000 fd9c 	bl	8013fc0 <_Balloc>
 8013488:	4682      	mov	sl, r0
 801348a:	2800      	cmp	r0, #0
 801348c:	d142      	bne.n	8013514 <_dtoa_r+0x2f4>
 801348e:	4b1e      	ldr	r3, [pc, #120]	@ (8013508 <_dtoa_r+0x2e8>)
 8013490:	4602      	mov	r2, r0
 8013492:	f240 11af 	movw	r1, #431	@ 0x1af
 8013496:	e6da      	b.n	801324e <_dtoa_r+0x2e>
 8013498:	2300      	movs	r3, #0
 801349a:	e7e3      	b.n	8013464 <_dtoa_r+0x244>
 801349c:	2300      	movs	r3, #0
 801349e:	e7d5      	b.n	801344c <_dtoa_r+0x22c>
 80134a0:	2401      	movs	r4, #1
 80134a2:	2300      	movs	r3, #0
 80134a4:	9307      	str	r3, [sp, #28]
 80134a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80134a8:	f04f 3bff 	mov.w	fp, #4294967295
 80134ac:	2200      	movs	r2, #0
 80134ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80134b2:	2312      	movs	r3, #18
 80134b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80134b6:	e7db      	b.n	8013470 <_dtoa_r+0x250>
 80134b8:	2301      	movs	r3, #1
 80134ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80134bc:	e7f4      	b.n	80134a8 <_dtoa_r+0x288>
 80134be:	f04f 0b01 	mov.w	fp, #1
 80134c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80134c6:	465b      	mov	r3, fp
 80134c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80134cc:	e7d0      	b.n	8013470 <_dtoa_r+0x250>
 80134ce:	3101      	adds	r1, #1
 80134d0:	0052      	lsls	r2, r2, #1
 80134d2:	e7d1      	b.n	8013478 <_dtoa_r+0x258>
 80134d4:	f3af 8000 	nop.w
 80134d8:	636f4361 	.word	0x636f4361
 80134dc:	3fd287a7 	.word	0x3fd287a7
 80134e0:	8b60c8b3 	.word	0x8b60c8b3
 80134e4:	3fc68a28 	.word	0x3fc68a28
 80134e8:	509f79fb 	.word	0x509f79fb
 80134ec:	3fd34413 	.word	0x3fd34413
 80134f0:	08015655 	.word	0x08015655
 80134f4:	0801566c 	.word	0x0801566c
 80134f8:	7ff00000 	.word	0x7ff00000
 80134fc:	08015625 	.word	0x08015625
 8013500:	3ff80000 	.word	0x3ff80000
 8013504:	080157c0 	.word	0x080157c0
 8013508:	080156c4 	.word	0x080156c4
 801350c:	08015651 	.word	0x08015651
 8013510:	08015624 	.word	0x08015624
 8013514:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013518:	6018      	str	r0, [r3, #0]
 801351a:	9b03      	ldr	r3, [sp, #12]
 801351c:	2b0e      	cmp	r3, #14
 801351e:	f200 80a1 	bhi.w	8013664 <_dtoa_r+0x444>
 8013522:	2c00      	cmp	r4, #0
 8013524:	f000 809e 	beq.w	8013664 <_dtoa_r+0x444>
 8013528:	2f00      	cmp	r7, #0
 801352a:	dd33      	ble.n	8013594 <_dtoa_r+0x374>
 801352c:	4b9c      	ldr	r3, [pc, #624]	@ (80137a0 <_dtoa_r+0x580>)
 801352e:	f007 020f 	and.w	r2, r7, #15
 8013532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013536:	ed93 7b00 	vldr	d7, [r3]
 801353a:	05f8      	lsls	r0, r7, #23
 801353c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8013540:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013544:	d516      	bpl.n	8013574 <_dtoa_r+0x354>
 8013546:	4b97      	ldr	r3, [pc, #604]	@ (80137a4 <_dtoa_r+0x584>)
 8013548:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801354c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013550:	f7ed f97c 	bl	800084c <__aeabi_ddiv>
 8013554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013558:	f004 040f 	and.w	r4, r4, #15
 801355c:	2603      	movs	r6, #3
 801355e:	4d91      	ldr	r5, [pc, #580]	@ (80137a4 <_dtoa_r+0x584>)
 8013560:	b954      	cbnz	r4, 8013578 <_dtoa_r+0x358>
 8013562:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801356a:	f7ed f96f 	bl	800084c <__aeabi_ddiv>
 801356e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013572:	e028      	b.n	80135c6 <_dtoa_r+0x3a6>
 8013574:	2602      	movs	r6, #2
 8013576:	e7f2      	b.n	801355e <_dtoa_r+0x33e>
 8013578:	07e1      	lsls	r1, r4, #31
 801357a:	d508      	bpl.n	801358e <_dtoa_r+0x36e>
 801357c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013580:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013584:	f7ed f838 	bl	80005f8 <__aeabi_dmul>
 8013588:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801358c:	3601      	adds	r6, #1
 801358e:	1064      	asrs	r4, r4, #1
 8013590:	3508      	adds	r5, #8
 8013592:	e7e5      	b.n	8013560 <_dtoa_r+0x340>
 8013594:	f000 80af 	beq.w	80136f6 <_dtoa_r+0x4d6>
 8013598:	427c      	negs	r4, r7
 801359a:	4b81      	ldr	r3, [pc, #516]	@ (80137a0 <_dtoa_r+0x580>)
 801359c:	4d81      	ldr	r5, [pc, #516]	@ (80137a4 <_dtoa_r+0x584>)
 801359e:	f004 020f 	and.w	r2, r4, #15
 80135a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80135ae:	f7ed f823 	bl	80005f8 <__aeabi_dmul>
 80135b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80135b6:	1124      	asrs	r4, r4, #4
 80135b8:	2300      	movs	r3, #0
 80135ba:	2602      	movs	r6, #2
 80135bc:	2c00      	cmp	r4, #0
 80135be:	f040 808f 	bne.w	80136e0 <_dtoa_r+0x4c0>
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d1d3      	bne.n	801356e <_dtoa_r+0x34e>
 80135c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80135c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	f000 8094 	beq.w	80136fa <_dtoa_r+0x4da>
 80135d2:	4b75      	ldr	r3, [pc, #468]	@ (80137a8 <_dtoa_r+0x588>)
 80135d4:	2200      	movs	r2, #0
 80135d6:	4620      	mov	r0, r4
 80135d8:	4629      	mov	r1, r5
 80135da:	f7ed fa7f 	bl	8000adc <__aeabi_dcmplt>
 80135de:	2800      	cmp	r0, #0
 80135e0:	f000 808b 	beq.w	80136fa <_dtoa_r+0x4da>
 80135e4:	9b03      	ldr	r3, [sp, #12]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	f000 8087 	beq.w	80136fa <_dtoa_r+0x4da>
 80135ec:	f1bb 0f00 	cmp.w	fp, #0
 80135f0:	dd34      	ble.n	801365c <_dtoa_r+0x43c>
 80135f2:	4620      	mov	r0, r4
 80135f4:	4b6d      	ldr	r3, [pc, #436]	@ (80137ac <_dtoa_r+0x58c>)
 80135f6:	2200      	movs	r2, #0
 80135f8:	4629      	mov	r1, r5
 80135fa:	f7ec fffd 	bl	80005f8 <__aeabi_dmul>
 80135fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013602:	f107 38ff 	add.w	r8, r7, #4294967295
 8013606:	3601      	adds	r6, #1
 8013608:	465c      	mov	r4, fp
 801360a:	4630      	mov	r0, r6
 801360c:	f7ec ff8a 	bl	8000524 <__aeabi_i2d>
 8013610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013614:	f7ec fff0 	bl	80005f8 <__aeabi_dmul>
 8013618:	4b65      	ldr	r3, [pc, #404]	@ (80137b0 <_dtoa_r+0x590>)
 801361a:	2200      	movs	r2, #0
 801361c:	f7ec fe36 	bl	800028c <__adddf3>
 8013620:	4605      	mov	r5, r0
 8013622:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013626:	2c00      	cmp	r4, #0
 8013628:	d16a      	bne.n	8013700 <_dtoa_r+0x4e0>
 801362a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801362e:	4b61      	ldr	r3, [pc, #388]	@ (80137b4 <_dtoa_r+0x594>)
 8013630:	2200      	movs	r2, #0
 8013632:	f7ec fe29 	bl	8000288 <__aeabi_dsub>
 8013636:	4602      	mov	r2, r0
 8013638:	460b      	mov	r3, r1
 801363a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801363e:	462a      	mov	r2, r5
 8013640:	4633      	mov	r3, r6
 8013642:	f7ed fa69 	bl	8000b18 <__aeabi_dcmpgt>
 8013646:	2800      	cmp	r0, #0
 8013648:	f040 8298 	bne.w	8013b7c <_dtoa_r+0x95c>
 801364c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013650:	462a      	mov	r2, r5
 8013652:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013656:	f7ed fa41 	bl	8000adc <__aeabi_dcmplt>
 801365a:	bb38      	cbnz	r0, 80136ac <_dtoa_r+0x48c>
 801365c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8013660:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013664:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013666:	2b00      	cmp	r3, #0
 8013668:	f2c0 8157 	blt.w	801391a <_dtoa_r+0x6fa>
 801366c:	2f0e      	cmp	r7, #14
 801366e:	f300 8154 	bgt.w	801391a <_dtoa_r+0x6fa>
 8013672:	4b4b      	ldr	r3, [pc, #300]	@ (80137a0 <_dtoa_r+0x580>)
 8013674:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013678:	ed93 7b00 	vldr	d7, [r3]
 801367c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801367e:	2b00      	cmp	r3, #0
 8013680:	ed8d 7b00 	vstr	d7, [sp]
 8013684:	f280 80e5 	bge.w	8013852 <_dtoa_r+0x632>
 8013688:	9b03      	ldr	r3, [sp, #12]
 801368a:	2b00      	cmp	r3, #0
 801368c:	f300 80e1 	bgt.w	8013852 <_dtoa_r+0x632>
 8013690:	d10c      	bne.n	80136ac <_dtoa_r+0x48c>
 8013692:	4b48      	ldr	r3, [pc, #288]	@ (80137b4 <_dtoa_r+0x594>)
 8013694:	2200      	movs	r2, #0
 8013696:	ec51 0b17 	vmov	r0, r1, d7
 801369a:	f7ec ffad 	bl	80005f8 <__aeabi_dmul>
 801369e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80136a2:	f7ed fa2f 	bl	8000b04 <__aeabi_dcmpge>
 80136a6:	2800      	cmp	r0, #0
 80136a8:	f000 8266 	beq.w	8013b78 <_dtoa_r+0x958>
 80136ac:	2400      	movs	r4, #0
 80136ae:	4625      	mov	r5, r4
 80136b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80136b2:	4656      	mov	r6, sl
 80136b4:	ea6f 0803 	mvn.w	r8, r3
 80136b8:	2700      	movs	r7, #0
 80136ba:	4621      	mov	r1, r4
 80136bc:	4648      	mov	r0, r9
 80136be:	f000 fcbf 	bl	8014040 <_Bfree>
 80136c2:	2d00      	cmp	r5, #0
 80136c4:	f000 80bd 	beq.w	8013842 <_dtoa_r+0x622>
 80136c8:	b12f      	cbz	r7, 80136d6 <_dtoa_r+0x4b6>
 80136ca:	42af      	cmp	r7, r5
 80136cc:	d003      	beq.n	80136d6 <_dtoa_r+0x4b6>
 80136ce:	4639      	mov	r1, r7
 80136d0:	4648      	mov	r0, r9
 80136d2:	f000 fcb5 	bl	8014040 <_Bfree>
 80136d6:	4629      	mov	r1, r5
 80136d8:	4648      	mov	r0, r9
 80136da:	f000 fcb1 	bl	8014040 <_Bfree>
 80136de:	e0b0      	b.n	8013842 <_dtoa_r+0x622>
 80136e0:	07e2      	lsls	r2, r4, #31
 80136e2:	d505      	bpl.n	80136f0 <_dtoa_r+0x4d0>
 80136e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80136e8:	f7ec ff86 	bl	80005f8 <__aeabi_dmul>
 80136ec:	3601      	adds	r6, #1
 80136ee:	2301      	movs	r3, #1
 80136f0:	1064      	asrs	r4, r4, #1
 80136f2:	3508      	adds	r5, #8
 80136f4:	e762      	b.n	80135bc <_dtoa_r+0x39c>
 80136f6:	2602      	movs	r6, #2
 80136f8:	e765      	b.n	80135c6 <_dtoa_r+0x3a6>
 80136fa:	9c03      	ldr	r4, [sp, #12]
 80136fc:	46b8      	mov	r8, r7
 80136fe:	e784      	b.n	801360a <_dtoa_r+0x3ea>
 8013700:	4b27      	ldr	r3, [pc, #156]	@ (80137a0 <_dtoa_r+0x580>)
 8013702:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013704:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013708:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801370c:	4454      	add	r4, sl
 801370e:	2900      	cmp	r1, #0
 8013710:	d054      	beq.n	80137bc <_dtoa_r+0x59c>
 8013712:	4929      	ldr	r1, [pc, #164]	@ (80137b8 <_dtoa_r+0x598>)
 8013714:	2000      	movs	r0, #0
 8013716:	f7ed f899 	bl	800084c <__aeabi_ddiv>
 801371a:	4633      	mov	r3, r6
 801371c:	462a      	mov	r2, r5
 801371e:	f7ec fdb3 	bl	8000288 <__aeabi_dsub>
 8013722:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013726:	4656      	mov	r6, sl
 8013728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801372c:	f7ed fa14 	bl	8000b58 <__aeabi_d2iz>
 8013730:	4605      	mov	r5, r0
 8013732:	f7ec fef7 	bl	8000524 <__aeabi_i2d>
 8013736:	4602      	mov	r2, r0
 8013738:	460b      	mov	r3, r1
 801373a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801373e:	f7ec fda3 	bl	8000288 <__aeabi_dsub>
 8013742:	3530      	adds	r5, #48	@ 0x30
 8013744:	4602      	mov	r2, r0
 8013746:	460b      	mov	r3, r1
 8013748:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801374c:	f806 5b01 	strb.w	r5, [r6], #1
 8013750:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013754:	f7ed f9c2 	bl	8000adc <__aeabi_dcmplt>
 8013758:	2800      	cmp	r0, #0
 801375a:	d172      	bne.n	8013842 <_dtoa_r+0x622>
 801375c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013760:	4911      	ldr	r1, [pc, #68]	@ (80137a8 <_dtoa_r+0x588>)
 8013762:	2000      	movs	r0, #0
 8013764:	f7ec fd90 	bl	8000288 <__aeabi_dsub>
 8013768:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801376c:	f7ed f9b6 	bl	8000adc <__aeabi_dcmplt>
 8013770:	2800      	cmp	r0, #0
 8013772:	f040 80b4 	bne.w	80138de <_dtoa_r+0x6be>
 8013776:	42a6      	cmp	r6, r4
 8013778:	f43f af70 	beq.w	801365c <_dtoa_r+0x43c>
 801377c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013780:	4b0a      	ldr	r3, [pc, #40]	@ (80137ac <_dtoa_r+0x58c>)
 8013782:	2200      	movs	r2, #0
 8013784:	f7ec ff38 	bl	80005f8 <__aeabi_dmul>
 8013788:	4b08      	ldr	r3, [pc, #32]	@ (80137ac <_dtoa_r+0x58c>)
 801378a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801378e:	2200      	movs	r2, #0
 8013790:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013794:	f7ec ff30 	bl	80005f8 <__aeabi_dmul>
 8013798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801379c:	e7c4      	b.n	8013728 <_dtoa_r+0x508>
 801379e:	bf00      	nop
 80137a0:	080157c0 	.word	0x080157c0
 80137a4:	08015798 	.word	0x08015798
 80137a8:	3ff00000 	.word	0x3ff00000
 80137ac:	40240000 	.word	0x40240000
 80137b0:	401c0000 	.word	0x401c0000
 80137b4:	40140000 	.word	0x40140000
 80137b8:	3fe00000 	.word	0x3fe00000
 80137bc:	4631      	mov	r1, r6
 80137be:	4628      	mov	r0, r5
 80137c0:	f7ec ff1a 	bl	80005f8 <__aeabi_dmul>
 80137c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80137c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80137ca:	4656      	mov	r6, sl
 80137cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80137d0:	f7ed f9c2 	bl	8000b58 <__aeabi_d2iz>
 80137d4:	4605      	mov	r5, r0
 80137d6:	f7ec fea5 	bl	8000524 <__aeabi_i2d>
 80137da:	4602      	mov	r2, r0
 80137dc:	460b      	mov	r3, r1
 80137de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80137e2:	f7ec fd51 	bl	8000288 <__aeabi_dsub>
 80137e6:	3530      	adds	r5, #48	@ 0x30
 80137e8:	f806 5b01 	strb.w	r5, [r6], #1
 80137ec:	4602      	mov	r2, r0
 80137ee:	460b      	mov	r3, r1
 80137f0:	42a6      	cmp	r6, r4
 80137f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80137f6:	f04f 0200 	mov.w	r2, #0
 80137fa:	d124      	bne.n	8013846 <_dtoa_r+0x626>
 80137fc:	4baf      	ldr	r3, [pc, #700]	@ (8013abc <_dtoa_r+0x89c>)
 80137fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013802:	f7ec fd43 	bl	800028c <__adddf3>
 8013806:	4602      	mov	r2, r0
 8013808:	460b      	mov	r3, r1
 801380a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801380e:	f7ed f983 	bl	8000b18 <__aeabi_dcmpgt>
 8013812:	2800      	cmp	r0, #0
 8013814:	d163      	bne.n	80138de <_dtoa_r+0x6be>
 8013816:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801381a:	49a8      	ldr	r1, [pc, #672]	@ (8013abc <_dtoa_r+0x89c>)
 801381c:	2000      	movs	r0, #0
 801381e:	f7ec fd33 	bl	8000288 <__aeabi_dsub>
 8013822:	4602      	mov	r2, r0
 8013824:	460b      	mov	r3, r1
 8013826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801382a:	f7ed f957 	bl	8000adc <__aeabi_dcmplt>
 801382e:	2800      	cmp	r0, #0
 8013830:	f43f af14 	beq.w	801365c <_dtoa_r+0x43c>
 8013834:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013836:	1e73      	subs	r3, r6, #1
 8013838:	9313      	str	r3, [sp, #76]	@ 0x4c
 801383a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801383e:	2b30      	cmp	r3, #48	@ 0x30
 8013840:	d0f8      	beq.n	8013834 <_dtoa_r+0x614>
 8013842:	4647      	mov	r7, r8
 8013844:	e03b      	b.n	80138be <_dtoa_r+0x69e>
 8013846:	4b9e      	ldr	r3, [pc, #632]	@ (8013ac0 <_dtoa_r+0x8a0>)
 8013848:	f7ec fed6 	bl	80005f8 <__aeabi_dmul>
 801384c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013850:	e7bc      	b.n	80137cc <_dtoa_r+0x5ac>
 8013852:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013856:	4656      	mov	r6, sl
 8013858:	e9dd 2300 	ldrd	r2, r3, [sp]
 801385c:	4620      	mov	r0, r4
 801385e:	4629      	mov	r1, r5
 8013860:	f7ec fff4 	bl	800084c <__aeabi_ddiv>
 8013864:	f7ed f978 	bl	8000b58 <__aeabi_d2iz>
 8013868:	4680      	mov	r8, r0
 801386a:	f7ec fe5b 	bl	8000524 <__aeabi_i2d>
 801386e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013872:	f7ec fec1 	bl	80005f8 <__aeabi_dmul>
 8013876:	4602      	mov	r2, r0
 8013878:	460b      	mov	r3, r1
 801387a:	4620      	mov	r0, r4
 801387c:	4629      	mov	r1, r5
 801387e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013882:	f7ec fd01 	bl	8000288 <__aeabi_dsub>
 8013886:	f806 4b01 	strb.w	r4, [r6], #1
 801388a:	9d03      	ldr	r5, [sp, #12]
 801388c:	eba6 040a 	sub.w	r4, r6, sl
 8013890:	42a5      	cmp	r5, r4
 8013892:	4602      	mov	r2, r0
 8013894:	460b      	mov	r3, r1
 8013896:	d133      	bne.n	8013900 <_dtoa_r+0x6e0>
 8013898:	f7ec fcf8 	bl	800028c <__adddf3>
 801389c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80138a0:	4604      	mov	r4, r0
 80138a2:	460d      	mov	r5, r1
 80138a4:	f7ed f938 	bl	8000b18 <__aeabi_dcmpgt>
 80138a8:	b9c0      	cbnz	r0, 80138dc <_dtoa_r+0x6bc>
 80138aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80138ae:	4620      	mov	r0, r4
 80138b0:	4629      	mov	r1, r5
 80138b2:	f7ed f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80138b6:	b110      	cbz	r0, 80138be <_dtoa_r+0x69e>
 80138b8:	f018 0f01 	tst.w	r8, #1
 80138bc:	d10e      	bne.n	80138dc <_dtoa_r+0x6bc>
 80138be:	9902      	ldr	r1, [sp, #8]
 80138c0:	4648      	mov	r0, r9
 80138c2:	f000 fbbd 	bl	8014040 <_Bfree>
 80138c6:	2300      	movs	r3, #0
 80138c8:	7033      	strb	r3, [r6, #0]
 80138ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80138cc:	3701      	adds	r7, #1
 80138ce:	601f      	str	r7, [r3, #0]
 80138d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f000 824b 	beq.w	8013d6e <_dtoa_r+0xb4e>
 80138d8:	601e      	str	r6, [r3, #0]
 80138da:	e248      	b.n	8013d6e <_dtoa_r+0xb4e>
 80138dc:	46b8      	mov	r8, r7
 80138de:	4633      	mov	r3, r6
 80138e0:	461e      	mov	r6, r3
 80138e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80138e6:	2a39      	cmp	r2, #57	@ 0x39
 80138e8:	d106      	bne.n	80138f8 <_dtoa_r+0x6d8>
 80138ea:	459a      	cmp	sl, r3
 80138ec:	d1f8      	bne.n	80138e0 <_dtoa_r+0x6c0>
 80138ee:	2230      	movs	r2, #48	@ 0x30
 80138f0:	f108 0801 	add.w	r8, r8, #1
 80138f4:	f88a 2000 	strb.w	r2, [sl]
 80138f8:	781a      	ldrb	r2, [r3, #0]
 80138fa:	3201      	adds	r2, #1
 80138fc:	701a      	strb	r2, [r3, #0]
 80138fe:	e7a0      	b.n	8013842 <_dtoa_r+0x622>
 8013900:	4b6f      	ldr	r3, [pc, #444]	@ (8013ac0 <_dtoa_r+0x8a0>)
 8013902:	2200      	movs	r2, #0
 8013904:	f7ec fe78 	bl	80005f8 <__aeabi_dmul>
 8013908:	2200      	movs	r2, #0
 801390a:	2300      	movs	r3, #0
 801390c:	4604      	mov	r4, r0
 801390e:	460d      	mov	r5, r1
 8013910:	f7ed f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 8013914:	2800      	cmp	r0, #0
 8013916:	d09f      	beq.n	8013858 <_dtoa_r+0x638>
 8013918:	e7d1      	b.n	80138be <_dtoa_r+0x69e>
 801391a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801391c:	2a00      	cmp	r2, #0
 801391e:	f000 80ea 	beq.w	8013af6 <_dtoa_r+0x8d6>
 8013922:	9a07      	ldr	r2, [sp, #28]
 8013924:	2a01      	cmp	r2, #1
 8013926:	f300 80cd 	bgt.w	8013ac4 <_dtoa_r+0x8a4>
 801392a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801392c:	2a00      	cmp	r2, #0
 801392e:	f000 80c1 	beq.w	8013ab4 <_dtoa_r+0x894>
 8013932:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013936:	9c08      	ldr	r4, [sp, #32]
 8013938:	9e00      	ldr	r6, [sp, #0]
 801393a:	9a00      	ldr	r2, [sp, #0]
 801393c:	441a      	add	r2, r3
 801393e:	9200      	str	r2, [sp, #0]
 8013940:	9a06      	ldr	r2, [sp, #24]
 8013942:	2101      	movs	r1, #1
 8013944:	441a      	add	r2, r3
 8013946:	4648      	mov	r0, r9
 8013948:	9206      	str	r2, [sp, #24]
 801394a:	f000 fc2d 	bl	80141a8 <__i2b>
 801394e:	4605      	mov	r5, r0
 8013950:	b166      	cbz	r6, 801396c <_dtoa_r+0x74c>
 8013952:	9b06      	ldr	r3, [sp, #24]
 8013954:	2b00      	cmp	r3, #0
 8013956:	dd09      	ble.n	801396c <_dtoa_r+0x74c>
 8013958:	42b3      	cmp	r3, r6
 801395a:	9a00      	ldr	r2, [sp, #0]
 801395c:	bfa8      	it	ge
 801395e:	4633      	movge	r3, r6
 8013960:	1ad2      	subs	r2, r2, r3
 8013962:	9200      	str	r2, [sp, #0]
 8013964:	9a06      	ldr	r2, [sp, #24]
 8013966:	1af6      	subs	r6, r6, r3
 8013968:	1ad3      	subs	r3, r2, r3
 801396a:	9306      	str	r3, [sp, #24]
 801396c:	9b08      	ldr	r3, [sp, #32]
 801396e:	b30b      	cbz	r3, 80139b4 <_dtoa_r+0x794>
 8013970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013972:	2b00      	cmp	r3, #0
 8013974:	f000 80c6 	beq.w	8013b04 <_dtoa_r+0x8e4>
 8013978:	2c00      	cmp	r4, #0
 801397a:	f000 80c0 	beq.w	8013afe <_dtoa_r+0x8de>
 801397e:	4629      	mov	r1, r5
 8013980:	4622      	mov	r2, r4
 8013982:	4648      	mov	r0, r9
 8013984:	f000 fcc8 	bl	8014318 <__pow5mult>
 8013988:	9a02      	ldr	r2, [sp, #8]
 801398a:	4601      	mov	r1, r0
 801398c:	4605      	mov	r5, r0
 801398e:	4648      	mov	r0, r9
 8013990:	f000 fc20 	bl	80141d4 <__multiply>
 8013994:	9902      	ldr	r1, [sp, #8]
 8013996:	4680      	mov	r8, r0
 8013998:	4648      	mov	r0, r9
 801399a:	f000 fb51 	bl	8014040 <_Bfree>
 801399e:	9b08      	ldr	r3, [sp, #32]
 80139a0:	1b1b      	subs	r3, r3, r4
 80139a2:	9308      	str	r3, [sp, #32]
 80139a4:	f000 80b1 	beq.w	8013b0a <_dtoa_r+0x8ea>
 80139a8:	9a08      	ldr	r2, [sp, #32]
 80139aa:	4641      	mov	r1, r8
 80139ac:	4648      	mov	r0, r9
 80139ae:	f000 fcb3 	bl	8014318 <__pow5mult>
 80139b2:	9002      	str	r0, [sp, #8]
 80139b4:	2101      	movs	r1, #1
 80139b6:	4648      	mov	r0, r9
 80139b8:	f000 fbf6 	bl	80141a8 <__i2b>
 80139bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80139be:	4604      	mov	r4, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	f000 81d8 	beq.w	8013d76 <_dtoa_r+0xb56>
 80139c6:	461a      	mov	r2, r3
 80139c8:	4601      	mov	r1, r0
 80139ca:	4648      	mov	r0, r9
 80139cc:	f000 fca4 	bl	8014318 <__pow5mult>
 80139d0:	9b07      	ldr	r3, [sp, #28]
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	4604      	mov	r4, r0
 80139d6:	f300 809f 	bgt.w	8013b18 <_dtoa_r+0x8f8>
 80139da:	9b04      	ldr	r3, [sp, #16]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	f040 8097 	bne.w	8013b10 <_dtoa_r+0x8f0>
 80139e2:	9b05      	ldr	r3, [sp, #20]
 80139e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	f040 8093 	bne.w	8013b14 <_dtoa_r+0x8f4>
 80139ee:	9b05      	ldr	r3, [sp, #20]
 80139f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80139f4:	0d1b      	lsrs	r3, r3, #20
 80139f6:	051b      	lsls	r3, r3, #20
 80139f8:	b133      	cbz	r3, 8013a08 <_dtoa_r+0x7e8>
 80139fa:	9b00      	ldr	r3, [sp, #0]
 80139fc:	3301      	adds	r3, #1
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	9b06      	ldr	r3, [sp, #24]
 8013a02:	3301      	adds	r3, #1
 8013a04:	9306      	str	r3, [sp, #24]
 8013a06:	2301      	movs	r3, #1
 8013a08:	9308      	str	r3, [sp, #32]
 8013a0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	f000 81b8 	beq.w	8013d82 <_dtoa_r+0xb62>
 8013a12:	6923      	ldr	r3, [r4, #16]
 8013a14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013a18:	6918      	ldr	r0, [r3, #16]
 8013a1a:	f000 fb79 	bl	8014110 <__hi0bits>
 8013a1e:	f1c0 0020 	rsb	r0, r0, #32
 8013a22:	9b06      	ldr	r3, [sp, #24]
 8013a24:	4418      	add	r0, r3
 8013a26:	f010 001f 	ands.w	r0, r0, #31
 8013a2a:	f000 8082 	beq.w	8013b32 <_dtoa_r+0x912>
 8013a2e:	f1c0 0320 	rsb	r3, r0, #32
 8013a32:	2b04      	cmp	r3, #4
 8013a34:	dd73      	ble.n	8013b1e <_dtoa_r+0x8fe>
 8013a36:	9b00      	ldr	r3, [sp, #0]
 8013a38:	f1c0 001c 	rsb	r0, r0, #28
 8013a3c:	4403      	add	r3, r0
 8013a3e:	9300      	str	r3, [sp, #0]
 8013a40:	9b06      	ldr	r3, [sp, #24]
 8013a42:	4403      	add	r3, r0
 8013a44:	4406      	add	r6, r0
 8013a46:	9306      	str	r3, [sp, #24]
 8013a48:	9b00      	ldr	r3, [sp, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	dd05      	ble.n	8013a5a <_dtoa_r+0x83a>
 8013a4e:	9902      	ldr	r1, [sp, #8]
 8013a50:	461a      	mov	r2, r3
 8013a52:	4648      	mov	r0, r9
 8013a54:	f000 fcba 	bl	80143cc <__lshift>
 8013a58:	9002      	str	r0, [sp, #8]
 8013a5a:	9b06      	ldr	r3, [sp, #24]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	dd05      	ble.n	8013a6c <_dtoa_r+0x84c>
 8013a60:	4621      	mov	r1, r4
 8013a62:	461a      	mov	r2, r3
 8013a64:	4648      	mov	r0, r9
 8013a66:	f000 fcb1 	bl	80143cc <__lshift>
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d061      	beq.n	8013b36 <_dtoa_r+0x916>
 8013a72:	9802      	ldr	r0, [sp, #8]
 8013a74:	4621      	mov	r1, r4
 8013a76:	f000 fd15 	bl	80144a4 <__mcmp>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	da5b      	bge.n	8013b36 <_dtoa_r+0x916>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	9902      	ldr	r1, [sp, #8]
 8013a82:	220a      	movs	r2, #10
 8013a84:	4648      	mov	r0, r9
 8013a86:	f000 fafd 	bl	8014084 <__multadd>
 8013a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a8c:	9002      	str	r0, [sp, #8]
 8013a8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	f000 8177 	beq.w	8013d86 <_dtoa_r+0xb66>
 8013a98:	4629      	mov	r1, r5
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	220a      	movs	r2, #10
 8013a9e:	4648      	mov	r0, r9
 8013aa0:	f000 faf0 	bl	8014084 <__multadd>
 8013aa4:	f1bb 0f00 	cmp.w	fp, #0
 8013aa8:	4605      	mov	r5, r0
 8013aaa:	dc6f      	bgt.n	8013b8c <_dtoa_r+0x96c>
 8013aac:	9b07      	ldr	r3, [sp, #28]
 8013aae:	2b02      	cmp	r3, #2
 8013ab0:	dc49      	bgt.n	8013b46 <_dtoa_r+0x926>
 8013ab2:	e06b      	b.n	8013b8c <_dtoa_r+0x96c>
 8013ab4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013ab6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013aba:	e73c      	b.n	8013936 <_dtoa_r+0x716>
 8013abc:	3fe00000 	.word	0x3fe00000
 8013ac0:	40240000 	.word	0x40240000
 8013ac4:	9b03      	ldr	r3, [sp, #12]
 8013ac6:	1e5c      	subs	r4, r3, #1
 8013ac8:	9b08      	ldr	r3, [sp, #32]
 8013aca:	42a3      	cmp	r3, r4
 8013acc:	db09      	blt.n	8013ae2 <_dtoa_r+0x8c2>
 8013ace:	1b1c      	subs	r4, r3, r4
 8013ad0:	9b03      	ldr	r3, [sp, #12]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	f6bf af30 	bge.w	8013938 <_dtoa_r+0x718>
 8013ad8:	9b00      	ldr	r3, [sp, #0]
 8013ada:	9a03      	ldr	r2, [sp, #12]
 8013adc:	1a9e      	subs	r6, r3, r2
 8013ade:	2300      	movs	r3, #0
 8013ae0:	e72b      	b.n	801393a <_dtoa_r+0x71a>
 8013ae2:	9b08      	ldr	r3, [sp, #32]
 8013ae4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ae6:	9408      	str	r4, [sp, #32]
 8013ae8:	1ae3      	subs	r3, r4, r3
 8013aea:	441a      	add	r2, r3
 8013aec:	9e00      	ldr	r6, [sp, #0]
 8013aee:	9b03      	ldr	r3, [sp, #12]
 8013af0:	920d      	str	r2, [sp, #52]	@ 0x34
 8013af2:	2400      	movs	r4, #0
 8013af4:	e721      	b.n	801393a <_dtoa_r+0x71a>
 8013af6:	9c08      	ldr	r4, [sp, #32]
 8013af8:	9e00      	ldr	r6, [sp, #0]
 8013afa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013afc:	e728      	b.n	8013950 <_dtoa_r+0x730>
 8013afe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013b02:	e751      	b.n	80139a8 <_dtoa_r+0x788>
 8013b04:	9a08      	ldr	r2, [sp, #32]
 8013b06:	9902      	ldr	r1, [sp, #8]
 8013b08:	e750      	b.n	80139ac <_dtoa_r+0x78c>
 8013b0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8013b0e:	e751      	b.n	80139b4 <_dtoa_r+0x794>
 8013b10:	2300      	movs	r3, #0
 8013b12:	e779      	b.n	8013a08 <_dtoa_r+0x7e8>
 8013b14:	9b04      	ldr	r3, [sp, #16]
 8013b16:	e777      	b.n	8013a08 <_dtoa_r+0x7e8>
 8013b18:	2300      	movs	r3, #0
 8013b1a:	9308      	str	r3, [sp, #32]
 8013b1c:	e779      	b.n	8013a12 <_dtoa_r+0x7f2>
 8013b1e:	d093      	beq.n	8013a48 <_dtoa_r+0x828>
 8013b20:	9a00      	ldr	r2, [sp, #0]
 8013b22:	331c      	adds	r3, #28
 8013b24:	441a      	add	r2, r3
 8013b26:	9200      	str	r2, [sp, #0]
 8013b28:	9a06      	ldr	r2, [sp, #24]
 8013b2a:	441a      	add	r2, r3
 8013b2c:	441e      	add	r6, r3
 8013b2e:	9206      	str	r2, [sp, #24]
 8013b30:	e78a      	b.n	8013a48 <_dtoa_r+0x828>
 8013b32:	4603      	mov	r3, r0
 8013b34:	e7f4      	b.n	8013b20 <_dtoa_r+0x900>
 8013b36:	9b03      	ldr	r3, [sp, #12]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	46b8      	mov	r8, r7
 8013b3c:	dc20      	bgt.n	8013b80 <_dtoa_r+0x960>
 8013b3e:	469b      	mov	fp, r3
 8013b40:	9b07      	ldr	r3, [sp, #28]
 8013b42:	2b02      	cmp	r3, #2
 8013b44:	dd1e      	ble.n	8013b84 <_dtoa_r+0x964>
 8013b46:	f1bb 0f00 	cmp.w	fp, #0
 8013b4a:	f47f adb1 	bne.w	80136b0 <_dtoa_r+0x490>
 8013b4e:	4621      	mov	r1, r4
 8013b50:	465b      	mov	r3, fp
 8013b52:	2205      	movs	r2, #5
 8013b54:	4648      	mov	r0, r9
 8013b56:	f000 fa95 	bl	8014084 <__multadd>
 8013b5a:	4601      	mov	r1, r0
 8013b5c:	4604      	mov	r4, r0
 8013b5e:	9802      	ldr	r0, [sp, #8]
 8013b60:	f000 fca0 	bl	80144a4 <__mcmp>
 8013b64:	2800      	cmp	r0, #0
 8013b66:	f77f ada3 	ble.w	80136b0 <_dtoa_r+0x490>
 8013b6a:	4656      	mov	r6, sl
 8013b6c:	2331      	movs	r3, #49	@ 0x31
 8013b6e:	f806 3b01 	strb.w	r3, [r6], #1
 8013b72:	f108 0801 	add.w	r8, r8, #1
 8013b76:	e59f      	b.n	80136b8 <_dtoa_r+0x498>
 8013b78:	9c03      	ldr	r4, [sp, #12]
 8013b7a:	46b8      	mov	r8, r7
 8013b7c:	4625      	mov	r5, r4
 8013b7e:	e7f4      	b.n	8013b6a <_dtoa_r+0x94a>
 8013b80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f000 8101 	beq.w	8013d8e <_dtoa_r+0xb6e>
 8013b8c:	2e00      	cmp	r6, #0
 8013b8e:	dd05      	ble.n	8013b9c <_dtoa_r+0x97c>
 8013b90:	4629      	mov	r1, r5
 8013b92:	4632      	mov	r2, r6
 8013b94:	4648      	mov	r0, r9
 8013b96:	f000 fc19 	bl	80143cc <__lshift>
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	9b08      	ldr	r3, [sp, #32]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d05c      	beq.n	8013c5c <_dtoa_r+0xa3c>
 8013ba2:	6869      	ldr	r1, [r5, #4]
 8013ba4:	4648      	mov	r0, r9
 8013ba6:	f000 fa0b 	bl	8013fc0 <_Balloc>
 8013baa:	4606      	mov	r6, r0
 8013bac:	b928      	cbnz	r0, 8013bba <_dtoa_r+0x99a>
 8013bae:	4b82      	ldr	r3, [pc, #520]	@ (8013db8 <_dtoa_r+0xb98>)
 8013bb0:	4602      	mov	r2, r0
 8013bb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013bb6:	f7ff bb4a 	b.w	801324e <_dtoa_r+0x2e>
 8013bba:	692a      	ldr	r2, [r5, #16]
 8013bbc:	3202      	adds	r2, #2
 8013bbe:	0092      	lsls	r2, r2, #2
 8013bc0:	f105 010c 	add.w	r1, r5, #12
 8013bc4:	300c      	adds	r0, #12
 8013bc6:	f7ff fa92 	bl	80130ee <memcpy>
 8013bca:	2201      	movs	r2, #1
 8013bcc:	4631      	mov	r1, r6
 8013bce:	4648      	mov	r0, r9
 8013bd0:	f000 fbfc 	bl	80143cc <__lshift>
 8013bd4:	f10a 0301 	add.w	r3, sl, #1
 8013bd8:	9300      	str	r3, [sp, #0]
 8013bda:	eb0a 030b 	add.w	r3, sl, fp
 8013bde:	9308      	str	r3, [sp, #32]
 8013be0:	9b04      	ldr	r3, [sp, #16]
 8013be2:	f003 0301 	and.w	r3, r3, #1
 8013be6:	462f      	mov	r7, r5
 8013be8:	9306      	str	r3, [sp, #24]
 8013bea:	4605      	mov	r5, r0
 8013bec:	9b00      	ldr	r3, [sp, #0]
 8013bee:	9802      	ldr	r0, [sp, #8]
 8013bf0:	4621      	mov	r1, r4
 8013bf2:	f103 3bff 	add.w	fp, r3, #4294967295
 8013bf6:	f7ff fa88 	bl	801310a <quorem>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	3330      	adds	r3, #48	@ 0x30
 8013bfe:	9003      	str	r0, [sp, #12]
 8013c00:	4639      	mov	r1, r7
 8013c02:	9802      	ldr	r0, [sp, #8]
 8013c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c06:	f000 fc4d 	bl	80144a4 <__mcmp>
 8013c0a:	462a      	mov	r2, r5
 8013c0c:	9004      	str	r0, [sp, #16]
 8013c0e:	4621      	mov	r1, r4
 8013c10:	4648      	mov	r0, r9
 8013c12:	f000 fc63 	bl	80144dc <__mdiff>
 8013c16:	68c2      	ldr	r2, [r0, #12]
 8013c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c1a:	4606      	mov	r6, r0
 8013c1c:	bb02      	cbnz	r2, 8013c60 <_dtoa_r+0xa40>
 8013c1e:	4601      	mov	r1, r0
 8013c20:	9802      	ldr	r0, [sp, #8]
 8013c22:	f000 fc3f 	bl	80144a4 <__mcmp>
 8013c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c28:	4602      	mov	r2, r0
 8013c2a:	4631      	mov	r1, r6
 8013c2c:	4648      	mov	r0, r9
 8013c2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c32:	f000 fa05 	bl	8014040 <_Bfree>
 8013c36:	9b07      	ldr	r3, [sp, #28]
 8013c38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013c3a:	9e00      	ldr	r6, [sp, #0]
 8013c3c:	ea42 0103 	orr.w	r1, r2, r3
 8013c40:	9b06      	ldr	r3, [sp, #24]
 8013c42:	4319      	orrs	r1, r3
 8013c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c46:	d10d      	bne.n	8013c64 <_dtoa_r+0xa44>
 8013c48:	2b39      	cmp	r3, #57	@ 0x39
 8013c4a:	d027      	beq.n	8013c9c <_dtoa_r+0xa7c>
 8013c4c:	9a04      	ldr	r2, [sp, #16]
 8013c4e:	2a00      	cmp	r2, #0
 8013c50:	dd01      	ble.n	8013c56 <_dtoa_r+0xa36>
 8013c52:	9b03      	ldr	r3, [sp, #12]
 8013c54:	3331      	adds	r3, #49	@ 0x31
 8013c56:	f88b 3000 	strb.w	r3, [fp]
 8013c5a:	e52e      	b.n	80136ba <_dtoa_r+0x49a>
 8013c5c:	4628      	mov	r0, r5
 8013c5e:	e7b9      	b.n	8013bd4 <_dtoa_r+0x9b4>
 8013c60:	2201      	movs	r2, #1
 8013c62:	e7e2      	b.n	8013c2a <_dtoa_r+0xa0a>
 8013c64:	9904      	ldr	r1, [sp, #16]
 8013c66:	2900      	cmp	r1, #0
 8013c68:	db04      	blt.n	8013c74 <_dtoa_r+0xa54>
 8013c6a:	9807      	ldr	r0, [sp, #28]
 8013c6c:	4301      	orrs	r1, r0
 8013c6e:	9806      	ldr	r0, [sp, #24]
 8013c70:	4301      	orrs	r1, r0
 8013c72:	d120      	bne.n	8013cb6 <_dtoa_r+0xa96>
 8013c74:	2a00      	cmp	r2, #0
 8013c76:	ddee      	ble.n	8013c56 <_dtoa_r+0xa36>
 8013c78:	9902      	ldr	r1, [sp, #8]
 8013c7a:	9300      	str	r3, [sp, #0]
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	4648      	mov	r0, r9
 8013c80:	f000 fba4 	bl	80143cc <__lshift>
 8013c84:	4621      	mov	r1, r4
 8013c86:	9002      	str	r0, [sp, #8]
 8013c88:	f000 fc0c 	bl	80144a4 <__mcmp>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	9b00      	ldr	r3, [sp, #0]
 8013c90:	dc02      	bgt.n	8013c98 <_dtoa_r+0xa78>
 8013c92:	d1e0      	bne.n	8013c56 <_dtoa_r+0xa36>
 8013c94:	07da      	lsls	r2, r3, #31
 8013c96:	d5de      	bpl.n	8013c56 <_dtoa_r+0xa36>
 8013c98:	2b39      	cmp	r3, #57	@ 0x39
 8013c9a:	d1da      	bne.n	8013c52 <_dtoa_r+0xa32>
 8013c9c:	2339      	movs	r3, #57	@ 0x39
 8013c9e:	f88b 3000 	strb.w	r3, [fp]
 8013ca2:	4633      	mov	r3, r6
 8013ca4:	461e      	mov	r6, r3
 8013ca6:	3b01      	subs	r3, #1
 8013ca8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013cac:	2a39      	cmp	r2, #57	@ 0x39
 8013cae:	d04e      	beq.n	8013d4e <_dtoa_r+0xb2e>
 8013cb0:	3201      	adds	r2, #1
 8013cb2:	701a      	strb	r2, [r3, #0]
 8013cb4:	e501      	b.n	80136ba <_dtoa_r+0x49a>
 8013cb6:	2a00      	cmp	r2, #0
 8013cb8:	dd03      	ble.n	8013cc2 <_dtoa_r+0xaa2>
 8013cba:	2b39      	cmp	r3, #57	@ 0x39
 8013cbc:	d0ee      	beq.n	8013c9c <_dtoa_r+0xa7c>
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	e7c9      	b.n	8013c56 <_dtoa_r+0xa36>
 8013cc2:	9a00      	ldr	r2, [sp, #0]
 8013cc4:	9908      	ldr	r1, [sp, #32]
 8013cc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013cca:	428a      	cmp	r2, r1
 8013ccc:	d028      	beq.n	8013d20 <_dtoa_r+0xb00>
 8013cce:	9902      	ldr	r1, [sp, #8]
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	220a      	movs	r2, #10
 8013cd4:	4648      	mov	r0, r9
 8013cd6:	f000 f9d5 	bl	8014084 <__multadd>
 8013cda:	42af      	cmp	r7, r5
 8013cdc:	9002      	str	r0, [sp, #8]
 8013cde:	f04f 0300 	mov.w	r3, #0
 8013ce2:	f04f 020a 	mov.w	r2, #10
 8013ce6:	4639      	mov	r1, r7
 8013ce8:	4648      	mov	r0, r9
 8013cea:	d107      	bne.n	8013cfc <_dtoa_r+0xadc>
 8013cec:	f000 f9ca 	bl	8014084 <__multadd>
 8013cf0:	4607      	mov	r7, r0
 8013cf2:	4605      	mov	r5, r0
 8013cf4:	9b00      	ldr	r3, [sp, #0]
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	9300      	str	r3, [sp, #0]
 8013cfa:	e777      	b.n	8013bec <_dtoa_r+0x9cc>
 8013cfc:	f000 f9c2 	bl	8014084 <__multadd>
 8013d00:	4629      	mov	r1, r5
 8013d02:	4607      	mov	r7, r0
 8013d04:	2300      	movs	r3, #0
 8013d06:	220a      	movs	r2, #10
 8013d08:	4648      	mov	r0, r9
 8013d0a:	f000 f9bb 	bl	8014084 <__multadd>
 8013d0e:	4605      	mov	r5, r0
 8013d10:	e7f0      	b.n	8013cf4 <_dtoa_r+0xad4>
 8013d12:	f1bb 0f00 	cmp.w	fp, #0
 8013d16:	bfcc      	ite	gt
 8013d18:	465e      	movgt	r6, fp
 8013d1a:	2601      	movle	r6, #1
 8013d1c:	4456      	add	r6, sl
 8013d1e:	2700      	movs	r7, #0
 8013d20:	9902      	ldr	r1, [sp, #8]
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	2201      	movs	r2, #1
 8013d26:	4648      	mov	r0, r9
 8013d28:	f000 fb50 	bl	80143cc <__lshift>
 8013d2c:	4621      	mov	r1, r4
 8013d2e:	9002      	str	r0, [sp, #8]
 8013d30:	f000 fbb8 	bl	80144a4 <__mcmp>
 8013d34:	2800      	cmp	r0, #0
 8013d36:	dcb4      	bgt.n	8013ca2 <_dtoa_r+0xa82>
 8013d38:	d102      	bne.n	8013d40 <_dtoa_r+0xb20>
 8013d3a:	9b00      	ldr	r3, [sp, #0]
 8013d3c:	07db      	lsls	r3, r3, #31
 8013d3e:	d4b0      	bmi.n	8013ca2 <_dtoa_r+0xa82>
 8013d40:	4633      	mov	r3, r6
 8013d42:	461e      	mov	r6, r3
 8013d44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d48:	2a30      	cmp	r2, #48	@ 0x30
 8013d4a:	d0fa      	beq.n	8013d42 <_dtoa_r+0xb22>
 8013d4c:	e4b5      	b.n	80136ba <_dtoa_r+0x49a>
 8013d4e:	459a      	cmp	sl, r3
 8013d50:	d1a8      	bne.n	8013ca4 <_dtoa_r+0xa84>
 8013d52:	2331      	movs	r3, #49	@ 0x31
 8013d54:	f108 0801 	add.w	r8, r8, #1
 8013d58:	f88a 3000 	strb.w	r3, [sl]
 8013d5c:	e4ad      	b.n	80136ba <_dtoa_r+0x49a>
 8013d5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013d60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8013dbc <_dtoa_r+0xb9c>
 8013d64:	b11b      	cbz	r3, 8013d6e <_dtoa_r+0xb4e>
 8013d66:	f10a 0308 	add.w	r3, sl, #8
 8013d6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013d6c:	6013      	str	r3, [r2, #0]
 8013d6e:	4650      	mov	r0, sl
 8013d70:	b017      	add	sp, #92	@ 0x5c
 8013d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d76:	9b07      	ldr	r3, [sp, #28]
 8013d78:	2b01      	cmp	r3, #1
 8013d7a:	f77f ae2e 	ble.w	80139da <_dtoa_r+0x7ba>
 8013d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d80:	9308      	str	r3, [sp, #32]
 8013d82:	2001      	movs	r0, #1
 8013d84:	e64d      	b.n	8013a22 <_dtoa_r+0x802>
 8013d86:	f1bb 0f00 	cmp.w	fp, #0
 8013d8a:	f77f aed9 	ble.w	8013b40 <_dtoa_r+0x920>
 8013d8e:	4656      	mov	r6, sl
 8013d90:	9802      	ldr	r0, [sp, #8]
 8013d92:	4621      	mov	r1, r4
 8013d94:	f7ff f9b9 	bl	801310a <quorem>
 8013d98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8013d9c:	f806 3b01 	strb.w	r3, [r6], #1
 8013da0:	eba6 020a 	sub.w	r2, r6, sl
 8013da4:	4593      	cmp	fp, r2
 8013da6:	ddb4      	ble.n	8013d12 <_dtoa_r+0xaf2>
 8013da8:	9902      	ldr	r1, [sp, #8]
 8013daa:	2300      	movs	r3, #0
 8013dac:	220a      	movs	r2, #10
 8013dae:	4648      	mov	r0, r9
 8013db0:	f000 f968 	bl	8014084 <__multadd>
 8013db4:	9002      	str	r0, [sp, #8]
 8013db6:	e7eb      	b.n	8013d90 <_dtoa_r+0xb70>
 8013db8:	080156c4 	.word	0x080156c4
 8013dbc:	08015648 	.word	0x08015648

08013dc0 <_free_r>:
 8013dc0:	b538      	push	{r3, r4, r5, lr}
 8013dc2:	4605      	mov	r5, r0
 8013dc4:	2900      	cmp	r1, #0
 8013dc6:	d041      	beq.n	8013e4c <_free_r+0x8c>
 8013dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dcc:	1f0c      	subs	r4, r1, #4
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	bfb8      	it	lt
 8013dd2:	18e4      	addlt	r4, r4, r3
 8013dd4:	f000 f8e8 	bl	8013fa8 <__malloc_lock>
 8013dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8013e50 <_free_r+0x90>)
 8013dda:	6813      	ldr	r3, [r2, #0]
 8013ddc:	b933      	cbnz	r3, 8013dec <_free_r+0x2c>
 8013dde:	6063      	str	r3, [r4, #4]
 8013de0:	6014      	str	r4, [r2, #0]
 8013de2:	4628      	mov	r0, r5
 8013de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013de8:	f000 b8e4 	b.w	8013fb4 <__malloc_unlock>
 8013dec:	42a3      	cmp	r3, r4
 8013dee:	d908      	bls.n	8013e02 <_free_r+0x42>
 8013df0:	6820      	ldr	r0, [r4, #0]
 8013df2:	1821      	adds	r1, r4, r0
 8013df4:	428b      	cmp	r3, r1
 8013df6:	bf01      	itttt	eq
 8013df8:	6819      	ldreq	r1, [r3, #0]
 8013dfa:	685b      	ldreq	r3, [r3, #4]
 8013dfc:	1809      	addeq	r1, r1, r0
 8013dfe:	6021      	streq	r1, [r4, #0]
 8013e00:	e7ed      	b.n	8013dde <_free_r+0x1e>
 8013e02:	461a      	mov	r2, r3
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	b10b      	cbz	r3, 8013e0c <_free_r+0x4c>
 8013e08:	42a3      	cmp	r3, r4
 8013e0a:	d9fa      	bls.n	8013e02 <_free_r+0x42>
 8013e0c:	6811      	ldr	r1, [r2, #0]
 8013e0e:	1850      	adds	r0, r2, r1
 8013e10:	42a0      	cmp	r0, r4
 8013e12:	d10b      	bne.n	8013e2c <_free_r+0x6c>
 8013e14:	6820      	ldr	r0, [r4, #0]
 8013e16:	4401      	add	r1, r0
 8013e18:	1850      	adds	r0, r2, r1
 8013e1a:	4283      	cmp	r3, r0
 8013e1c:	6011      	str	r1, [r2, #0]
 8013e1e:	d1e0      	bne.n	8013de2 <_free_r+0x22>
 8013e20:	6818      	ldr	r0, [r3, #0]
 8013e22:	685b      	ldr	r3, [r3, #4]
 8013e24:	6053      	str	r3, [r2, #4]
 8013e26:	4408      	add	r0, r1
 8013e28:	6010      	str	r0, [r2, #0]
 8013e2a:	e7da      	b.n	8013de2 <_free_r+0x22>
 8013e2c:	d902      	bls.n	8013e34 <_free_r+0x74>
 8013e2e:	230c      	movs	r3, #12
 8013e30:	602b      	str	r3, [r5, #0]
 8013e32:	e7d6      	b.n	8013de2 <_free_r+0x22>
 8013e34:	6820      	ldr	r0, [r4, #0]
 8013e36:	1821      	adds	r1, r4, r0
 8013e38:	428b      	cmp	r3, r1
 8013e3a:	bf04      	itt	eq
 8013e3c:	6819      	ldreq	r1, [r3, #0]
 8013e3e:	685b      	ldreq	r3, [r3, #4]
 8013e40:	6063      	str	r3, [r4, #4]
 8013e42:	bf04      	itt	eq
 8013e44:	1809      	addeq	r1, r1, r0
 8013e46:	6021      	streq	r1, [r4, #0]
 8013e48:	6054      	str	r4, [r2, #4]
 8013e4a:	e7ca      	b.n	8013de2 <_free_r+0x22>
 8013e4c:	bd38      	pop	{r3, r4, r5, pc}
 8013e4e:	bf00      	nop
 8013e50:	2001ea4c 	.word	0x2001ea4c

08013e54 <malloc>:
 8013e54:	4b02      	ldr	r3, [pc, #8]	@ (8013e60 <malloc+0xc>)
 8013e56:	4601      	mov	r1, r0
 8013e58:	6818      	ldr	r0, [r3, #0]
 8013e5a:	f000 b825 	b.w	8013ea8 <_malloc_r>
 8013e5e:	bf00      	nop
 8013e60:	20000114 	.word	0x20000114

08013e64 <sbrk_aligned>:
 8013e64:	b570      	push	{r4, r5, r6, lr}
 8013e66:	4e0f      	ldr	r6, [pc, #60]	@ (8013ea4 <sbrk_aligned+0x40>)
 8013e68:	460c      	mov	r4, r1
 8013e6a:	6831      	ldr	r1, [r6, #0]
 8013e6c:	4605      	mov	r5, r0
 8013e6e:	b911      	cbnz	r1, 8013e76 <sbrk_aligned+0x12>
 8013e70:	f000 fe92 	bl	8014b98 <_sbrk_r>
 8013e74:	6030      	str	r0, [r6, #0]
 8013e76:	4621      	mov	r1, r4
 8013e78:	4628      	mov	r0, r5
 8013e7a:	f000 fe8d 	bl	8014b98 <_sbrk_r>
 8013e7e:	1c43      	adds	r3, r0, #1
 8013e80:	d103      	bne.n	8013e8a <sbrk_aligned+0x26>
 8013e82:	f04f 34ff 	mov.w	r4, #4294967295
 8013e86:	4620      	mov	r0, r4
 8013e88:	bd70      	pop	{r4, r5, r6, pc}
 8013e8a:	1cc4      	adds	r4, r0, #3
 8013e8c:	f024 0403 	bic.w	r4, r4, #3
 8013e90:	42a0      	cmp	r0, r4
 8013e92:	d0f8      	beq.n	8013e86 <sbrk_aligned+0x22>
 8013e94:	1a21      	subs	r1, r4, r0
 8013e96:	4628      	mov	r0, r5
 8013e98:	f000 fe7e 	bl	8014b98 <_sbrk_r>
 8013e9c:	3001      	adds	r0, #1
 8013e9e:	d1f2      	bne.n	8013e86 <sbrk_aligned+0x22>
 8013ea0:	e7ef      	b.n	8013e82 <sbrk_aligned+0x1e>
 8013ea2:	bf00      	nop
 8013ea4:	2001ea48 	.word	0x2001ea48

08013ea8 <_malloc_r>:
 8013ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013eac:	1ccd      	adds	r5, r1, #3
 8013eae:	f025 0503 	bic.w	r5, r5, #3
 8013eb2:	3508      	adds	r5, #8
 8013eb4:	2d0c      	cmp	r5, #12
 8013eb6:	bf38      	it	cc
 8013eb8:	250c      	movcc	r5, #12
 8013eba:	2d00      	cmp	r5, #0
 8013ebc:	4606      	mov	r6, r0
 8013ebe:	db01      	blt.n	8013ec4 <_malloc_r+0x1c>
 8013ec0:	42a9      	cmp	r1, r5
 8013ec2:	d904      	bls.n	8013ece <_malloc_r+0x26>
 8013ec4:	230c      	movs	r3, #12
 8013ec6:	6033      	str	r3, [r6, #0]
 8013ec8:	2000      	movs	r0, #0
 8013eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013fa4 <_malloc_r+0xfc>
 8013ed2:	f000 f869 	bl	8013fa8 <__malloc_lock>
 8013ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8013eda:	461c      	mov	r4, r3
 8013edc:	bb44      	cbnz	r4, 8013f30 <_malloc_r+0x88>
 8013ede:	4629      	mov	r1, r5
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f7ff ffbf 	bl	8013e64 <sbrk_aligned>
 8013ee6:	1c43      	adds	r3, r0, #1
 8013ee8:	4604      	mov	r4, r0
 8013eea:	d158      	bne.n	8013f9e <_malloc_r+0xf6>
 8013eec:	f8d8 4000 	ldr.w	r4, [r8]
 8013ef0:	4627      	mov	r7, r4
 8013ef2:	2f00      	cmp	r7, #0
 8013ef4:	d143      	bne.n	8013f7e <_malloc_r+0xd6>
 8013ef6:	2c00      	cmp	r4, #0
 8013ef8:	d04b      	beq.n	8013f92 <_malloc_r+0xea>
 8013efa:	6823      	ldr	r3, [r4, #0]
 8013efc:	4639      	mov	r1, r7
 8013efe:	4630      	mov	r0, r6
 8013f00:	eb04 0903 	add.w	r9, r4, r3
 8013f04:	f000 fe48 	bl	8014b98 <_sbrk_r>
 8013f08:	4581      	cmp	r9, r0
 8013f0a:	d142      	bne.n	8013f92 <_malloc_r+0xea>
 8013f0c:	6821      	ldr	r1, [r4, #0]
 8013f0e:	1a6d      	subs	r5, r5, r1
 8013f10:	4629      	mov	r1, r5
 8013f12:	4630      	mov	r0, r6
 8013f14:	f7ff ffa6 	bl	8013e64 <sbrk_aligned>
 8013f18:	3001      	adds	r0, #1
 8013f1a:	d03a      	beq.n	8013f92 <_malloc_r+0xea>
 8013f1c:	6823      	ldr	r3, [r4, #0]
 8013f1e:	442b      	add	r3, r5
 8013f20:	6023      	str	r3, [r4, #0]
 8013f22:	f8d8 3000 	ldr.w	r3, [r8]
 8013f26:	685a      	ldr	r2, [r3, #4]
 8013f28:	bb62      	cbnz	r2, 8013f84 <_malloc_r+0xdc>
 8013f2a:	f8c8 7000 	str.w	r7, [r8]
 8013f2e:	e00f      	b.n	8013f50 <_malloc_r+0xa8>
 8013f30:	6822      	ldr	r2, [r4, #0]
 8013f32:	1b52      	subs	r2, r2, r5
 8013f34:	d420      	bmi.n	8013f78 <_malloc_r+0xd0>
 8013f36:	2a0b      	cmp	r2, #11
 8013f38:	d917      	bls.n	8013f6a <_malloc_r+0xc2>
 8013f3a:	1961      	adds	r1, r4, r5
 8013f3c:	42a3      	cmp	r3, r4
 8013f3e:	6025      	str	r5, [r4, #0]
 8013f40:	bf18      	it	ne
 8013f42:	6059      	strne	r1, [r3, #4]
 8013f44:	6863      	ldr	r3, [r4, #4]
 8013f46:	bf08      	it	eq
 8013f48:	f8c8 1000 	streq.w	r1, [r8]
 8013f4c:	5162      	str	r2, [r4, r5]
 8013f4e:	604b      	str	r3, [r1, #4]
 8013f50:	4630      	mov	r0, r6
 8013f52:	f000 f82f 	bl	8013fb4 <__malloc_unlock>
 8013f56:	f104 000b 	add.w	r0, r4, #11
 8013f5a:	1d23      	adds	r3, r4, #4
 8013f5c:	f020 0007 	bic.w	r0, r0, #7
 8013f60:	1ac2      	subs	r2, r0, r3
 8013f62:	bf1c      	itt	ne
 8013f64:	1a1b      	subne	r3, r3, r0
 8013f66:	50a3      	strne	r3, [r4, r2]
 8013f68:	e7af      	b.n	8013eca <_malloc_r+0x22>
 8013f6a:	6862      	ldr	r2, [r4, #4]
 8013f6c:	42a3      	cmp	r3, r4
 8013f6e:	bf0c      	ite	eq
 8013f70:	f8c8 2000 	streq.w	r2, [r8]
 8013f74:	605a      	strne	r2, [r3, #4]
 8013f76:	e7eb      	b.n	8013f50 <_malloc_r+0xa8>
 8013f78:	4623      	mov	r3, r4
 8013f7a:	6864      	ldr	r4, [r4, #4]
 8013f7c:	e7ae      	b.n	8013edc <_malloc_r+0x34>
 8013f7e:	463c      	mov	r4, r7
 8013f80:	687f      	ldr	r7, [r7, #4]
 8013f82:	e7b6      	b.n	8013ef2 <_malloc_r+0x4a>
 8013f84:	461a      	mov	r2, r3
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	42a3      	cmp	r3, r4
 8013f8a:	d1fb      	bne.n	8013f84 <_malloc_r+0xdc>
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	6053      	str	r3, [r2, #4]
 8013f90:	e7de      	b.n	8013f50 <_malloc_r+0xa8>
 8013f92:	230c      	movs	r3, #12
 8013f94:	6033      	str	r3, [r6, #0]
 8013f96:	4630      	mov	r0, r6
 8013f98:	f000 f80c 	bl	8013fb4 <__malloc_unlock>
 8013f9c:	e794      	b.n	8013ec8 <_malloc_r+0x20>
 8013f9e:	6005      	str	r5, [r0, #0]
 8013fa0:	e7d6      	b.n	8013f50 <_malloc_r+0xa8>
 8013fa2:	bf00      	nop
 8013fa4:	2001ea4c 	.word	0x2001ea4c

08013fa8 <__malloc_lock>:
 8013fa8:	4801      	ldr	r0, [pc, #4]	@ (8013fb0 <__malloc_lock+0x8>)
 8013faa:	f7ff b89e 	b.w	80130ea <__retarget_lock_acquire_recursive>
 8013fae:	bf00      	nop
 8013fb0:	2001ea44 	.word	0x2001ea44

08013fb4 <__malloc_unlock>:
 8013fb4:	4801      	ldr	r0, [pc, #4]	@ (8013fbc <__malloc_unlock+0x8>)
 8013fb6:	f7ff b899 	b.w	80130ec <__retarget_lock_release_recursive>
 8013fba:	bf00      	nop
 8013fbc:	2001ea44 	.word	0x2001ea44

08013fc0 <_Balloc>:
 8013fc0:	b570      	push	{r4, r5, r6, lr}
 8013fc2:	69c6      	ldr	r6, [r0, #28]
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	460d      	mov	r5, r1
 8013fc8:	b976      	cbnz	r6, 8013fe8 <_Balloc+0x28>
 8013fca:	2010      	movs	r0, #16
 8013fcc:	f7ff ff42 	bl	8013e54 <malloc>
 8013fd0:	4602      	mov	r2, r0
 8013fd2:	61e0      	str	r0, [r4, #28]
 8013fd4:	b920      	cbnz	r0, 8013fe0 <_Balloc+0x20>
 8013fd6:	4b18      	ldr	r3, [pc, #96]	@ (8014038 <_Balloc+0x78>)
 8013fd8:	4818      	ldr	r0, [pc, #96]	@ (801403c <_Balloc+0x7c>)
 8013fda:	216b      	movs	r1, #107	@ 0x6b
 8013fdc:	f000 fdec 	bl	8014bb8 <__assert_func>
 8013fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013fe4:	6006      	str	r6, [r0, #0]
 8013fe6:	60c6      	str	r6, [r0, #12]
 8013fe8:	69e6      	ldr	r6, [r4, #28]
 8013fea:	68f3      	ldr	r3, [r6, #12]
 8013fec:	b183      	cbz	r3, 8014010 <_Balloc+0x50>
 8013fee:	69e3      	ldr	r3, [r4, #28]
 8013ff0:	68db      	ldr	r3, [r3, #12]
 8013ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013ff6:	b9b8      	cbnz	r0, 8014028 <_Balloc+0x68>
 8013ff8:	2101      	movs	r1, #1
 8013ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8013ffe:	1d72      	adds	r2, r6, #5
 8014000:	0092      	lsls	r2, r2, #2
 8014002:	4620      	mov	r0, r4
 8014004:	f000 fdf6 	bl	8014bf4 <_calloc_r>
 8014008:	b160      	cbz	r0, 8014024 <_Balloc+0x64>
 801400a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801400e:	e00e      	b.n	801402e <_Balloc+0x6e>
 8014010:	2221      	movs	r2, #33	@ 0x21
 8014012:	2104      	movs	r1, #4
 8014014:	4620      	mov	r0, r4
 8014016:	f000 fded 	bl	8014bf4 <_calloc_r>
 801401a:	69e3      	ldr	r3, [r4, #28]
 801401c:	60f0      	str	r0, [r6, #12]
 801401e:	68db      	ldr	r3, [r3, #12]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d1e4      	bne.n	8013fee <_Balloc+0x2e>
 8014024:	2000      	movs	r0, #0
 8014026:	bd70      	pop	{r4, r5, r6, pc}
 8014028:	6802      	ldr	r2, [r0, #0]
 801402a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801402e:	2300      	movs	r3, #0
 8014030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014034:	e7f7      	b.n	8014026 <_Balloc+0x66>
 8014036:	bf00      	nop
 8014038:	08015655 	.word	0x08015655
 801403c:	080156d5 	.word	0x080156d5

08014040 <_Bfree>:
 8014040:	b570      	push	{r4, r5, r6, lr}
 8014042:	69c6      	ldr	r6, [r0, #28]
 8014044:	4605      	mov	r5, r0
 8014046:	460c      	mov	r4, r1
 8014048:	b976      	cbnz	r6, 8014068 <_Bfree+0x28>
 801404a:	2010      	movs	r0, #16
 801404c:	f7ff ff02 	bl	8013e54 <malloc>
 8014050:	4602      	mov	r2, r0
 8014052:	61e8      	str	r0, [r5, #28]
 8014054:	b920      	cbnz	r0, 8014060 <_Bfree+0x20>
 8014056:	4b09      	ldr	r3, [pc, #36]	@ (801407c <_Bfree+0x3c>)
 8014058:	4809      	ldr	r0, [pc, #36]	@ (8014080 <_Bfree+0x40>)
 801405a:	218f      	movs	r1, #143	@ 0x8f
 801405c:	f000 fdac 	bl	8014bb8 <__assert_func>
 8014060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014064:	6006      	str	r6, [r0, #0]
 8014066:	60c6      	str	r6, [r0, #12]
 8014068:	b13c      	cbz	r4, 801407a <_Bfree+0x3a>
 801406a:	69eb      	ldr	r3, [r5, #28]
 801406c:	6862      	ldr	r2, [r4, #4]
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014074:	6021      	str	r1, [r4, #0]
 8014076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801407a:	bd70      	pop	{r4, r5, r6, pc}
 801407c:	08015655 	.word	0x08015655
 8014080:	080156d5 	.word	0x080156d5

08014084 <__multadd>:
 8014084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014088:	690d      	ldr	r5, [r1, #16]
 801408a:	4607      	mov	r7, r0
 801408c:	460c      	mov	r4, r1
 801408e:	461e      	mov	r6, r3
 8014090:	f101 0c14 	add.w	ip, r1, #20
 8014094:	2000      	movs	r0, #0
 8014096:	f8dc 3000 	ldr.w	r3, [ip]
 801409a:	b299      	uxth	r1, r3
 801409c:	fb02 6101 	mla	r1, r2, r1, r6
 80140a0:	0c1e      	lsrs	r6, r3, #16
 80140a2:	0c0b      	lsrs	r3, r1, #16
 80140a4:	fb02 3306 	mla	r3, r2, r6, r3
 80140a8:	b289      	uxth	r1, r1
 80140aa:	3001      	adds	r0, #1
 80140ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80140b0:	4285      	cmp	r5, r0
 80140b2:	f84c 1b04 	str.w	r1, [ip], #4
 80140b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80140ba:	dcec      	bgt.n	8014096 <__multadd+0x12>
 80140bc:	b30e      	cbz	r6, 8014102 <__multadd+0x7e>
 80140be:	68a3      	ldr	r3, [r4, #8]
 80140c0:	42ab      	cmp	r3, r5
 80140c2:	dc19      	bgt.n	80140f8 <__multadd+0x74>
 80140c4:	6861      	ldr	r1, [r4, #4]
 80140c6:	4638      	mov	r0, r7
 80140c8:	3101      	adds	r1, #1
 80140ca:	f7ff ff79 	bl	8013fc0 <_Balloc>
 80140ce:	4680      	mov	r8, r0
 80140d0:	b928      	cbnz	r0, 80140de <__multadd+0x5a>
 80140d2:	4602      	mov	r2, r0
 80140d4:	4b0c      	ldr	r3, [pc, #48]	@ (8014108 <__multadd+0x84>)
 80140d6:	480d      	ldr	r0, [pc, #52]	@ (801410c <__multadd+0x88>)
 80140d8:	21ba      	movs	r1, #186	@ 0xba
 80140da:	f000 fd6d 	bl	8014bb8 <__assert_func>
 80140de:	6922      	ldr	r2, [r4, #16]
 80140e0:	3202      	adds	r2, #2
 80140e2:	f104 010c 	add.w	r1, r4, #12
 80140e6:	0092      	lsls	r2, r2, #2
 80140e8:	300c      	adds	r0, #12
 80140ea:	f7ff f800 	bl	80130ee <memcpy>
 80140ee:	4621      	mov	r1, r4
 80140f0:	4638      	mov	r0, r7
 80140f2:	f7ff ffa5 	bl	8014040 <_Bfree>
 80140f6:	4644      	mov	r4, r8
 80140f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80140fc:	3501      	adds	r5, #1
 80140fe:	615e      	str	r6, [r3, #20]
 8014100:	6125      	str	r5, [r4, #16]
 8014102:	4620      	mov	r0, r4
 8014104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014108:	080156c4 	.word	0x080156c4
 801410c:	080156d5 	.word	0x080156d5

08014110 <__hi0bits>:
 8014110:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014114:	4603      	mov	r3, r0
 8014116:	bf36      	itet	cc
 8014118:	0403      	lslcc	r3, r0, #16
 801411a:	2000      	movcs	r0, #0
 801411c:	2010      	movcc	r0, #16
 801411e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014122:	bf3c      	itt	cc
 8014124:	021b      	lslcc	r3, r3, #8
 8014126:	3008      	addcc	r0, #8
 8014128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801412c:	bf3c      	itt	cc
 801412e:	011b      	lslcc	r3, r3, #4
 8014130:	3004      	addcc	r0, #4
 8014132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014136:	bf3c      	itt	cc
 8014138:	009b      	lslcc	r3, r3, #2
 801413a:	3002      	addcc	r0, #2
 801413c:	2b00      	cmp	r3, #0
 801413e:	db05      	blt.n	801414c <__hi0bits+0x3c>
 8014140:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014144:	f100 0001 	add.w	r0, r0, #1
 8014148:	bf08      	it	eq
 801414a:	2020      	moveq	r0, #32
 801414c:	4770      	bx	lr

0801414e <__lo0bits>:
 801414e:	6803      	ldr	r3, [r0, #0]
 8014150:	4602      	mov	r2, r0
 8014152:	f013 0007 	ands.w	r0, r3, #7
 8014156:	d00b      	beq.n	8014170 <__lo0bits+0x22>
 8014158:	07d9      	lsls	r1, r3, #31
 801415a:	d421      	bmi.n	80141a0 <__lo0bits+0x52>
 801415c:	0798      	lsls	r0, r3, #30
 801415e:	bf49      	itett	mi
 8014160:	085b      	lsrmi	r3, r3, #1
 8014162:	089b      	lsrpl	r3, r3, #2
 8014164:	2001      	movmi	r0, #1
 8014166:	6013      	strmi	r3, [r2, #0]
 8014168:	bf5c      	itt	pl
 801416a:	6013      	strpl	r3, [r2, #0]
 801416c:	2002      	movpl	r0, #2
 801416e:	4770      	bx	lr
 8014170:	b299      	uxth	r1, r3
 8014172:	b909      	cbnz	r1, 8014178 <__lo0bits+0x2a>
 8014174:	0c1b      	lsrs	r3, r3, #16
 8014176:	2010      	movs	r0, #16
 8014178:	b2d9      	uxtb	r1, r3
 801417a:	b909      	cbnz	r1, 8014180 <__lo0bits+0x32>
 801417c:	3008      	adds	r0, #8
 801417e:	0a1b      	lsrs	r3, r3, #8
 8014180:	0719      	lsls	r1, r3, #28
 8014182:	bf04      	itt	eq
 8014184:	091b      	lsreq	r3, r3, #4
 8014186:	3004      	addeq	r0, #4
 8014188:	0799      	lsls	r1, r3, #30
 801418a:	bf04      	itt	eq
 801418c:	089b      	lsreq	r3, r3, #2
 801418e:	3002      	addeq	r0, #2
 8014190:	07d9      	lsls	r1, r3, #31
 8014192:	d403      	bmi.n	801419c <__lo0bits+0x4e>
 8014194:	085b      	lsrs	r3, r3, #1
 8014196:	f100 0001 	add.w	r0, r0, #1
 801419a:	d003      	beq.n	80141a4 <__lo0bits+0x56>
 801419c:	6013      	str	r3, [r2, #0]
 801419e:	4770      	bx	lr
 80141a0:	2000      	movs	r0, #0
 80141a2:	4770      	bx	lr
 80141a4:	2020      	movs	r0, #32
 80141a6:	4770      	bx	lr

080141a8 <__i2b>:
 80141a8:	b510      	push	{r4, lr}
 80141aa:	460c      	mov	r4, r1
 80141ac:	2101      	movs	r1, #1
 80141ae:	f7ff ff07 	bl	8013fc0 <_Balloc>
 80141b2:	4602      	mov	r2, r0
 80141b4:	b928      	cbnz	r0, 80141c2 <__i2b+0x1a>
 80141b6:	4b05      	ldr	r3, [pc, #20]	@ (80141cc <__i2b+0x24>)
 80141b8:	4805      	ldr	r0, [pc, #20]	@ (80141d0 <__i2b+0x28>)
 80141ba:	f240 1145 	movw	r1, #325	@ 0x145
 80141be:	f000 fcfb 	bl	8014bb8 <__assert_func>
 80141c2:	2301      	movs	r3, #1
 80141c4:	6144      	str	r4, [r0, #20]
 80141c6:	6103      	str	r3, [r0, #16]
 80141c8:	bd10      	pop	{r4, pc}
 80141ca:	bf00      	nop
 80141cc:	080156c4 	.word	0x080156c4
 80141d0:	080156d5 	.word	0x080156d5

080141d4 <__multiply>:
 80141d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d8:	4617      	mov	r7, r2
 80141da:	690a      	ldr	r2, [r1, #16]
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	429a      	cmp	r2, r3
 80141e0:	bfa8      	it	ge
 80141e2:	463b      	movge	r3, r7
 80141e4:	4689      	mov	r9, r1
 80141e6:	bfa4      	itt	ge
 80141e8:	460f      	movge	r7, r1
 80141ea:	4699      	movge	r9, r3
 80141ec:	693d      	ldr	r5, [r7, #16]
 80141ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	6879      	ldr	r1, [r7, #4]
 80141f6:	eb05 060a 	add.w	r6, r5, sl
 80141fa:	42b3      	cmp	r3, r6
 80141fc:	b085      	sub	sp, #20
 80141fe:	bfb8      	it	lt
 8014200:	3101      	addlt	r1, #1
 8014202:	f7ff fedd 	bl	8013fc0 <_Balloc>
 8014206:	b930      	cbnz	r0, 8014216 <__multiply+0x42>
 8014208:	4602      	mov	r2, r0
 801420a:	4b41      	ldr	r3, [pc, #260]	@ (8014310 <__multiply+0x13c>)
 801420c:	4841      	ldr	r0, [pc, #260]	@ (8014314 <__multiply+0x140>)
 801420e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014212:	f000 fcd1 	bl	8014bb8 <__assert_func>
 8014216:	f100 0414 	add.w	r4, r0, #20
 801421a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801421e:	4623      	mov	r3, r4
 8014220:	2200      	movs	r2, #0
 8014222:	4573      	cmp	r3, lr
 8014224:	d320      	bcc.n	8014268 <__multiply+0x94>
 8014226:	f107 0814 	add.w	r8, r7, #20
 801422a:	f109 0114 	add.w	r1, r9, #20
 801422e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014232:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014236:	9302      	str	r3, [sp, #8]
 8014238:	1beb      	subs	r3, r5, r7
 801423a:	3b15      	subs	r3, #21
 801423c:	f023 0303 	bic.w	r3, r3, #3
 8014240:	3304      	adds	r3, #4
 8014242:	3715      	adds	r7, #21
 8014244:	42bd      	cmp	r5, r7
 8014246:	bf38      	it	cc
 8014248:	2304      	movcc	r3, #4
 801424a:	9301      	str	r3, [sp, #4]
 801424c:	9b02      	ldr	r3, [sp, #8]
 801424e:	9103      	str	r1, [sp, #12]
 8014250:	428b      	cmp	r3, r1
 8014252:	d80c      	bhi.n	801426e <__multiply+0x9a>
 8014254:	2e00      	cmp	r6, #0
 8014256:	dd03      	ble.n	8014260 <__multiply+0x8c>
 8014258:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801425c:	2b00      	cmp	r3, #0
 801425e:	d055      	beq.n	801430c <__multiply+0x138>
 8014260:	6106      	str	r6, [r0, #16]
 8014262:	b005      	add	sp, #20
 8014264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014268:	f843 2b04 	str.w	r2, [r3], #4
 801426c:	e7d9      	b.n	8014222 <__multiply+0x4e>
 801426e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014272:	f1ba 0f00 	cmp.w	sl, #0
 8014276:	d01f      	beq.n	80142b8 <__multiply+0xe4>
 8014278:	46c4      	mov	ip, r8
 801427a:	46a1      	mov	r9, r4
 801427c:	2700      	movs	r7, #0
 801427e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014282:	f8d9 3000 	ldr.w	r3, [r9]
 8014286:	fa1f fb82 	uxth.w	fp, r2
 801428a:	b29b      	uxth	r3, r3
 801428c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014290:	443b      	add	r3, r7
 8014292:	f8d9 7000 	ldr.w	r7, [r9]
 8014296:	0c12      	lsrs	r2, r2, #16
 8014298:	0c3f      	lsrs	r7, r7, #16
 801429a:	fb0a 7202 	mla	r2, sl, r2, r7
 801429e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80142a8:	4565      	cmp	r5, ip
 80142aa:	f849 3b04 	str.w	r3, [r9], #4
 80142ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80142b2:	d8e4      	bhi.n	801427e <__multiply+0xaa>
 80142b4:	9b01      	ldr	r3, [sp, #4]
 80142b6:	50e7      	str	r7, [r4, r3]
 80142b8:	9b03      	ldr	r3, [sp, #12]
 80142ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80142be:	3104      	adds	r1, #4
 80142c0:	f1b9 0f00 	cmp.w	r9, #0
 80142c4:	d020      	beq.n	8014308 <__multiply+0x134>
 80142c6:	6823      	ldr	r3, [r4, #0]
 80142c8:	4647      	mov	r7, r8
 80142ca:	46a4      	mov	ip, r4
 80142cc:	f04f 0a00 	mov.w	sl, #0
 80142d0:	f8b7 b000 	ldrh.w	fp, [r7]
 80142d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80142d8:	fb09 220b 	mla	r2, r9, fp, r2
 80142dc:	4452      	add	r2, sl
 80142de:	b29b      	uxth	r3, r3
 80142e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80142e4:	f84c 3b04 	str.w	r3, [ip], #4
 80142e8:	f857 3b04 	ldr.w	r3, [r7], #4
 80142ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80142f0:	f8bc 3000 	ldrh.w	r3, [ip]
 80142f4:	fb09 330a 	mla	r3, r9, sl, r3
 80142f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80142fc:	42bd      	cmp	r5, r7
 80142fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014302:	d8e5      	bhi.n	80142d0 <__multiply+0xfc>
 8014304:	9a01      	ldr	r2, [sp, #4]
 8014306:	50a3      	str	r3, [r4, r2]
 8014308:	3404      	adds	r4, #4
 801430a:	e79f      	b.n	801424c <__multiply+0x78>
 801430c:	3e01      	subs	r6, #1
 801430e:	e7a1      	b.n	8014254 <__multiply+0x80>
 8014310:	080156c4 	.word	0x080156c4
 8014314:	080156d5 	.word	0x080156d5

08014318 <__pow5mult>:
 8014318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801431c:	4615      	mov	r5, r2
 801431e:	f012 0203 	ands.w	r2, r2, #3
 8014322:	4607      	mov	r7, r0
 8014324:	460e      	mov	r6, r1
 8014326:	d007      	beq.n	8014338 <__pow5mult+0x20>
 8014328:	4c25      	ldr	r4, [pc, #148]	@ (80143c0 <__pow5mult+0xa8>)
 801432a:	3a01      	subs	r2, #1
 801432c:	2300      	movs	r3, #0
 801432e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014332:	f7ff fea7 	bl	8014084 <__multadd>
 8014336:	4606      	mov	r6, r0
 8014338:	10ad      	asrs	r5, r5, #2
 801433a:	d03d      	beq.n	80143b8 <__pow5mult+0xa0>
 801433c:	69fc      	ldr	r4, [r7, #28]
 801433e:	b97c      	cbnz	r4, 8014360 <__pow5mult+0x48>
 8014340:	2010      	movs	r0, #16
 8014342:	f7ff fd87 	bl	8013e54 <malloc>
 8014346:	4602      	mov	r2, r0
 8014348:	61f8      	str	r0, [r7, #28]
 801434a:	b928      	cbnz	r0, 8014358 <__pow5mult+0x40>
 801434c:	4b1d      	ldr	r3, [pc, #116]	@ (80143c4 <__pow5mult+0xac>)
 801434e:	481e      	ldr	r0, [pc, #120]	@ (80143c8 <__pow5mult+0xb0>)
 8014350:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014354:	f000 fc30 	bl	8014bb8 <__assert_func>
 8014358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801435c:	6004      	str	r4, [r0, #0]
 801435e:	60c4      	str	r4, [r0, #12]
 8014360:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014368:	b94c      	cbnz	r4, 801437e <__pow5mult+0x66>
 801436a:	f240 2171 	movw	r1, #625	@ 0x271
 801436e:	4638      	mov	r0, r7
 8014370:	f7ff ff1a 	bl	80141a8 <__i2b>
 8014374:	2300      	movs	r3, #0
 8014376:	f8c8 0008 	str.w	r0, [r8, #8]
 801437a:	4604      	mov	r4, r0
 801437c:	6003      	str	r3, [r0, #0]
 801437e:	f04f 0900 	mov.w	r9, #0
 8014382:	07eb      	lsls	r3, r5, #31
 8014384:	d50a      	bpl.n	801439c <__pow5mult+0x84>
 8014386:	4631      	mov	r1, r6
 8014388:	4622      	mov	r2, r4
 801438a:	4638      	mov	r0, r7
 801438c:	f7ff ff22 	bl	80141d4 <__multiply>
 8014390:	4631      	mov	r1, r6
 8014392:	4680      	mov	r8, r0
 8014394:	4638      	mov	r0, r7
 8014396:	f7ff fe53 	bl	8014040 <_Bfree>
 801439a:	4646      	mov	r6, r8
 801439c:	106d      	asrs	r5, r5, #1
 801439e:	d00b      	beq.n	80143b8 <__pow5mult+0xa0>
 80143a0:	6820      	ldr	r0, [r4, #0]
 80143a2:	b938      	cbnz	r0, 80143b4 <__pow5mult+0x9c>
 80143a4:	4622      	mov	r2, r4
 80143a6:	4621      	mov	r1, r4
 80143a8:	4638      	mov	r0, r7
 80143aa:	f7ff ff13 	bl	80141d4 <__multiply>
 80143ae:	6020      	str	r0, [r4, #0]
 80143b0:	f8c0 9000 	str.w	r9, [r0]
 80143b4:	4604      	mov	r4, r0
 80143b6:	e7e4      	b.n	8014382 <__pow5mult+0x6a>
 80143b8:	4630      	mov	r0, r6
 80143ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143be:	bf00      	nop
 80143c0:	08015788 	.word	0x08015788
 80143c4:	08015655 	.word	0x08015655
 80143c8:	080156d5 	.word	0x080156d5

080143cc <__lshift>:
 80143cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143d0:	460c      	mov	r4, r1
 80143d2:	6849      	ldr	r1, [r1, #4]
 80143d4:	6923      	ldr	r3, [r4, #16]
 80143d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80143da:	68a3      	ldr	r3, [r4, #8]
 80143dc:	4607      	mov	r7, r0
 80143de:	4691      	mov	r9, r2
 80143e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80143e4:	f108 0601 	add.w	r6, r8, #1
 80143e8:	42b3      	cmp	r3, r6
 80143ea:	db0b      	blt.n	8014404 <__lshift+0x38>
 80143ec:	4638      	mov	r0, r7
 80143ee:	f7ff fde7 	bl	8013fc0 <_Balloc>
 80143f2:	4605      	mov	r5, r0
 80143f4:	b948      	cbnz	r0, 801440a <__lshift+0x3e>
 80143f6:	4602      	mov	r2, r0
 80143f8:	4b28      	ldr	r3, [pc, #160]	@ (801449c <__lshift+0xd0>)
 80143fa:	4829      	ldr	r0, [pc, #164]	@ (80144a0 <__lshift+0xd4>)
 80143fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014400:	f000 fbda 	bl	8014bb8 <__assert_func>
 8014404:	3101      	adds	r1, #1
 8014406:	005b      	lsls	r3, r3, #1
 8014408:	e7ee      	b.n	80143e8 <__lshift+0x1c>
 801440a:	2300      	movs	r3, #0
 801440c:	f100 0114 	add.w	r1, r0, #20
 8014410:	f100 0210 	add.w	r2, r0, #16
 8014414:	4618      	mov	r0, r3
 8014416:	4553      	cmp	r3, sl
 8014418:	db33      	blt.n	8014482 <__lshift+0xb6>
 801441a:	6920      	ldr	r0, [r4, #16]
 801441c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014420:	f104 0314 	add.w	r3, r4, #20
 8014424:	f019 091f 	ands.w	r9, r9, #31
 8014428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801442c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014430:	d02b      	beq.n	801448a <__lshift+0xbe>
 8014432:	f1c9 0e20 	rsb	lr, r9, #32
 8014436:	468a      	mov	sl, r1
 8014438:	2200      	movs	r2, #0
 801443a:	6818      	ldr	r0, [r3, #0]
 801443c:	fa00 f009 	lsl.w	r0, r0, r9
 8014440:	4310      	orrs	r0, r2
 8014442:	f84a 0b04 	str.w	r0, [sl], #4
 8014446:	f853 2b04 	ldr.w	r2, [r3], #4
 801444a:	459c      	cmp	ip, r3
 801444c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014450:	d8f3      	bhi.n	801443a <__lshift+0x6e>
 8014452:	ebac 0304 	sub.w	r3, ip, r4
 8014456:	3b15      	subs	r3, #21
 8014458:	f023 0303 	bic.w	r3, r3, #3
 801445c:	3304      	adds	r3, #4
 801445e:	f104 0015 	add.w	r0, r4, #21
 8014462:	4560      	cmp	r0, ip
 8014464:	bf88      	it	hi
 8014466:	2304      	movhi	r3, #4
 8014468:	50ca      	str	r2, [r1, r3]
 801446a:	b10a      	cbz	r2, 8014470 <__lshift+0xa4>
 801446c:	f108 0602 	add.w	r6, r8, #2
 8014470:	3e01      	subs	r6, #1
 8014472:	4638      	mov	r0, r7
 8014474:	612e      	str	r6, [r5, #16]
 8014476:	4621      	mov	r1, r4
 8014478:	f7ff fde2 	bl	8014040 <_Bfree>
 801447c:	4628      	mov	r0, r5
 801447e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014482:	f842 0f04 	str.w	r0, [r2, #4]!
 8014486:	3301      	adds	r3, #1
 8014488:	e7c5      	b.n	8014416 <__lshift+0x4a>
 801448a:	3904      	subs	r1, #4
 801448c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014490:	f841 2f04 	str.w	r2, [r1, #4]!
 8014494:	459c      	cmp	ip, r3
 8014496:	d8f9      	bhi.n	801448c <__lshift+0xc0>
 8014498:	e7ea      	b.n	8014470 <__lshift+0xa4>
 801449a:	bf00      	nop
 801449c:	080156c4 	.word	0x080156c4
 80144a0:	080156d5 	.word	0x080156d5

080144a4 <__mcmp>:
 80144a4:	690a      	ldr	r2, [r1, #16]
 80144a6:	4603      	mov	r3, r0
 80144a8:	6900      	ldr	r0, [r0, #16]
 80144aa:	1a80      	subs	r0, r0, r2
 80144ac:	b530      	push	{r4, r5, lr}
 80144ae:	d10e      	bne.n	80144ce <__mcmp+0x2a>
 80144b0:	3314      	adds	r3, #20
 80144b2:	3114      	adds	r1, #20
 80144b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80144b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80144bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80144c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80144c4:	4295      	cmp	r5, r2
 80144c6:	d003      	beq.n	80144d0 <__mcmp+0x2c>
 80144c8:	d205      	bcs.n	80144d6 <__mcmp+0x32>
 80144ca:	f04f 30ff 	mov.w	r0, #4294967295
 80144ce:	bd30      	pop	{r4, r5, pc}
 80144d0:	42a3      	cmp	r3, r4
 80144d2:	d3f3      	bcc.n	80144bc <__mcmp+0x18>
 80144d4:	e7fb      	b.n	80144ce <__mcmp+0x2a>
 80144d6:	2001      	movs	r0, #1
 80144d8:	e7f9      	b.n	80144ce <__mcmp+0x2a>
	...

080144dc <__mdiff>:
 80144dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e0:	4689      	mov	r9, r1
 80144e2:	4606      	mov	r6, r0
 80144e4:	4611      	mov	r1, r2
 80144e6:	4648      	mov	r0, r9
 80144e8:	4614      	mov	r4, r2
 80144ea:	f7ff ffdb 	bl	80144a4 <__mcmp>
 80144ee:	1e05      	subs	r5, r0, #0
 80144f0:	d112      	bne.n	8014518 <__mdiff+0x3c>
 80144f2:	4629      	mov	r1, r5
 80144f4:	4630      	mov	r0, r6
 80144f6:	f7ff fd63 	bl	8013fc0 <_Balloc>
 80144fa:	4602      	mov	r2, r0
 80144fc:	b928      	cbnz	r0, 801450a <__mdiff+0x2e>
 80144fe:	4b3f      	ldr	r3, [pc, #252]	@ (80145fc <__mdiff+0x120>)
 8014500:	f240 2137 	movw	r1, #567	@ 0x237
 8014504:	483e      	ldr	r0, [pc, #248]	@ (8014600 <__mdiff+0x124>)
 8014506:	f000 fb57 	bl	8014bb8 <__assert_func>
 801450a:	2301      	movs	r3, #1
 801450c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014510:	4610      	mov	r0, r2
 8014512:	b003      	add	sp, #12
 8014514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014518:	bfbc      	itt	lt
 801451a:	464b      	movlt	r3, r9
 801451c:	46a1      	movlt	r9, r4
 801451e:	4630      	mov	r0, r6
 8014520:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014524:	bfba      	itte	lt
 8014526:	461c      	movlt	r4, r3
 8014528:	2501      	movlt	r5, #1
 801452a:	2500      	movge	r5, #0
 801452c:	f7ff fd48 	bl	8013fc0 <_Balloc>
 8014530:	4602      	mov	r2, r0
 8014532:	b918      	cbnz	r0, 801453c <__mdiff+0x60>
 8014534:	4b31      	ldr	r3, [pc, #196]	@ (80145fc <__mdiff+0x120>)
 8014536:	f240 2145 	movw	r1, #581	@ 0x245
 801453a:	e7e3      	b.n	8014504 <__mdiff+0x28>
 801453c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014540:	6926      	ldr	r6, [r4, #16]
 8014542:	60c5      	str	r5, [r0, #12]
 8014544:	f109 0310 	add.w	r3, r9, #16
 8014548:	f109 0514 	add.w	r5, r9, #20
 801454c:	f104 0e14 	add.w	lr, r4, #20
 8014550:	f100 0b14 	add.w	fp, r0, #20
 8014554:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014558:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801455c:	9301      	str	r3, [sp, #4]
 801455e:	46d9      	mov	r9, fp
 8014560:	f04f 0c00 	mov.w	ip, #0
 8014564:	9b01      	ldr	r3, [sp, #4]
 8014566:	f85e 0b04 	ldr.w	r0, [lr], #4
 801456a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801456e:	9301      	str	r3, [sp, #4]
 8014570:	fa1f f38a 	uxth.w	r3, sl
 8014574:	4619      	mov	r1, r3
 8014576:	b283      	uxth	r3, r0
 8014578:	1acb      	subs	r3, r1, r3
 801457a:	0c00      	lsrs	r0, r0, #16
 801457c:	4463      	add	r3, ip
 801457e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014582:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014586:	b29b      	uxth	r3, r3
 8014588:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801458c:	4576      	cmp	r6, lr
 801458e:	f849 3b04 	str.w	r3, [r9], #4
 8014592:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014596:	d8e5      	bhi.n	8014564 <__mdiff+0x88>
 8014598:	1b33      	subs	r3, r6, r4
 801459a:	3b15      	subs	r3, #21
 801459c:	f023 0303 	bic.w	r3, r3, #3
 80145a0:	3415      	adds	r4, #21
 80145a2:	3304      	adds	r3, #4
 80145a4:	42a6      	cmp	r6, r4
 80145a6:	bf38      	it	cc
 80145a8:	2304      	movcc	r3, #4
 80145aa:	441d      	add	r5, r3
 80145ac:	445b      	add	r3, fp
 80145ae:	461e      	mov	r6, r3
 80145b0:	462c      	mov	r4, r5
 80145b2:	4544      	cmp	r4, r8
 80145b4:	d30e      	bcc.n	80145d4 <__mdiff+0xf8>
 80145b6:	f108 0103 	add.w	r1, r8, #3
 80145ba:	1b49      	subs	r1, r1, r5
 80145bc:	f021 0103 	bic.w	r1, r1, #3
 80145c0:	3d03      	subs	r5, #3
 80145c2:	45a8      	cmp	r8, r5
 80145c4:	bf38      	it	cc
 80145c6:	2100      	movcc	r1, #0
 80145c8:	440b      	add	r3, r1
 80145ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80145ce:	b191      	cbz	r1, 80145f6 <__mdiff+0x11a>
 80145d0:	6117      	str	r7, [r2, #16]
 80145d2:	e79d      	b.n	8014510 <__mdiff+0x34>
 80145d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80145d8:	46e6      	mov	lr, ip
 80145da:	0c08      	lsrs	r0, r1, #16
 80145dc:	fa1c fc81 	uxtah	ip, ip, r1
 80145e0:	4471      	add	r1, lr
 80145e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80145e6:	b289      	uxth	r1, r1
 80145e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80145ec:	f846 1b04 	str.w	r1, [r6], #4
 80145f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80145f4:	e7dd      	b.n	80145b2 <__mdiff+0xd6>
 80145f6:	3f01      	subs	r7, #1
 80145f8:	e7e7      	b.n	80145ca <__mdiff+0xee>
 80145fa:	bf00      	nop
 80145fc:	080156c4 	.word	0x080156c4
 8014600:	080156d5 	.word	0x080156d5

08014604 <__d2b>:
 8014604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014608:	460f      	mov	r7, r1
 801460a:	2101      	movs	r1, #1
 801460c:	ec59 8b10 	vmov	r8, r9, d0
 8014610:	4616      	mov	r6, r2
 8014612:	f7ff fcd5 	bl	8013fc0 <_Balloc>
 8014616:	4604      	mov	r4, r0
 8014618:	b930      	cbnz	r0, 8014628 <__d2b+0x24>
 801461a:	4602      	mov	r2, r0
 801461c:	4b23      	ldr	r3, [pc, #140]	@ (80146ac <__d2b+0xa8>)
 801461e:	4824      	ldr	r0, [pc, #144]	@ (80146b0 <__d2b+0xac>)
 8014620:	f240 310f 	movw	r1, #783	@ 0x30f
 8014624:	f000 fac8 	bl	8014bb8 <__assert_func>
 8014628:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801462c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014630:	b10d      	cbz	r5, 8014636 <__d2b+0x32>
 8014632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014636:	9301      	str	r3, [sp, #4]
 8014638:	f1b8 0300 	subs.w	r3, r8, #0
 801463c:	d023      	beq.n	8014686 <__d2b+0x82>
 801463e:	4668      	mov	r0, sp
 8014640:	9300      	str	r3, [sp, #0]
 8014642:	f7ff fd84 	bl	801414e <__lo0bits>
 8014646:	e9dd 1200 	ldrd	r1, r2, [sp]
 801464a:	b1d0      	cbz	r0, 8014682 <__d2b+0x7e>
 801464c:	f1c0 0320 	rsb	r3, r0, #32
 8014650:	fa02 f303 	lsl.w	r3, r2, r3
 8014654:	430b      	orrs	r3, r1
 8014656:	40c2      	lsrs	r2, r0
 8014658:	6163      	str	r3, [r4, #20]
 801465a:	9201      	str	r2, [sp, #4]
 801465c:	9b01      	ldr	r3, [sp, #4]
 801465e:	61a3      	str	r3, [r4, #24]
 8014660:	2b00      	cmp	r3, #0
 8014662:	bf0c      	ite	eq
 8014664:	2201      	moveq	r2, #1
 8014666:	2202      	movne	r2, #2
 8014668:	6122      	str	r2, [r4, #16]
 801466a:	b1a5      	cbz	r5, 8014696 <__d2b+0x92>
 801466c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014670:	4405      	add	r5, r0
 8014672:	603d      	str	r5, [r7, #0]
 8014674:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014678:	6030      	str	r0, [r6, #0]
 801467a:	4620      	mov	r0, r4
 801467c:	b003      	add	sp, #12
 801467e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014682:	6161      	str	r1, [r4, #20]
 8014684:	e7ea      	b.n	801465c <__d2b+0x58>
 8014686:	a801      	add	r0, sp, #4
 8014688:	f7ff fd61 	bl	801414e <__lo0bits>
 801468c:	9b01      	ldr	r3, [sp, #4]
 801468e:	6163      	str	r3, [r4, #20]
 8014690:	3020      	adds	r0, #32
 8014692:	2201      	movs	r2, #1
 8014694:	e7e8      	b.n	8014668 <__d2b+0x64>
 8014696:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801469a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801469e:	6038      	str	r0, [r7, #0]
 80146a0:	6918      	ldr	r0, [r3, #16]
 80146a2:	f7ff fd35 	bl	8014110 <__hi0bits>
 80146a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80146aa:	e7e5      	b.n	8014678 <__d2b+0x74>
 80146ac:	080156c4 	.word	0x080156c4
 80146b0:	080156d5 	.word	0x080156d5

080146b4 <__sfputc_r>:
 80146b4:	6893      	ldr	r3, [r2, #8]
 80146b6:	3b01      	subs	r3, #1
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	b410      	push	{r4}
 80146bc:	6093      	str	r3, [r2, #8]
 80146be:	da08      	bge.n	80146d2 <__sfputc_r+0x1e>
 80146c0:	6994      	ldr	r4, [r2, #24]
 80146c2:	42a3      	cmp	r3, r4
 80146c4:	db01      	blt.n	80146ca <__sfputc_r+0x16>
 80146c6:	290a      	cmp	r1, #10
 80146c8:	d103      	bne.n	80146d2 <__sfputc_r+0x1e>
 80146ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146ce:	f7fe bbfa 	b.w	8012ec6 <__swbuf_r>
 80146d2:	6813      	ldr	r3, [r2, #0]
 80146d4:	1c58      	adds	r0, r3, #1
 80146d6:	6010      	str	r0, [r2, #0]
 80146d8:	7019      	strb	r1, [r3, #0]
 80146da:	4608      	mov	r0, r1
 80146dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146e0:	4770      	bx	lr

080146e2 <__sfputs_r>:
 80146e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e4:	4606      	mov	r6, r0
 80146e6:	460f      	mov	r7, r1
 80146e8:	4614      	mov	r4, r2
 80146ea:	18d5      	adds	r5, r2, r3
 80146ec:	42ac      	cmp	r4, r5
 80146ee:	d101      	bne.n	80146f4 <__sfputs_r+0x12>
 80146f0:	2000      	movs	r0, #0
 80146f2:	e007      	b.n	8014704 <__sfputs_r+0x22>
 80146f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146f8:	463a      	mov	r2, r7
 80146fa:	4630      	mov	r0, r6
 80146fc:	f7ff ffda 	bl	80146b4 <__sfputc_r>
 8014700:	1c43      	adds	r3, r0, #1
 8014702:	d1f3      	bne.n	80146ec <__sfputs_r+0xa>
 8014704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014708 <_vfiprintf_r>:
 8014708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801470c:	460d      	mov	r5, r1
 801470e:	b09d      	sub	sp, #116	@ 0x74
 8014710:	4614      	mov	r4, r2
 8014712:	4698      	mov	r8, r3
 8014714:	4606      	mov	r6, r0
 8014716:	b118      	cbz	r0, 8014720 <_vfiprintf_r+0x18>
 8014718:	6a03      	ldr	r3, [r0, #32]
 801471a:	b90b      	cbnz	r3, 8014720 <_vfiprintf_r+0x18>
 801471c:	f7fe faea 	bl	8012cf4 <__sinit>
 8014720:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014722:	07d9      	lsls	r1, r3, #31
 8014724:	d405      	bmi.n	8014732 <_vfiprintf_r+0x2a>
 8014726:	89ab      	ldrh	r3, [r5, #12]
 8014728:	059a      	lsls	r2, r3, #22
 801472a:	d402      	bmi.n	8014732 <_vfiprintf_r+0x2a>
 801472c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801472e:	f7fe fcdc 	bl	80130ea <__retarget_lock_acquire_recursive>
 8014732:	89ab      	ldrh	r3, [r5, #12]
 8014734:	071b      	lsls	r3, r3, #28
 8014736:	d501      	bpl.n	801473c <_vfiprintf_r+0x34>
 8014738:	692b      	ldr	r3, [r5, #16]
 801473a:	b99b      	cbnz	r3, 8014764 <_vfiprintf_r+0x5c>
 801473c:	4629      	mov	r1, r5
 801473e:	4630      	mov	r0, r6
 8014740:	f7fe fc00 	bl	8012f44 <__swsetup_r>
 8014744:	b170      	cbz	r0, 8014764 <_vfiprintf_r+0x5c>
 8014746:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014748:	07dc      	lsls	r4, r3, #31
 801474a:	d504      	bpl.n	8014756 <_vfiprintf_r+0x4e>
 801474c:	f04f 30ff 	mov.w	r0, #4294967295
 8014750:	b01d      	add	sp, #116	@ 0x74
 8014752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014756:	89ab      	ldrh	r3, [r5, #12]
 8014758:	0598      	lsls	r0, r3, #22
 801475a:	d4f7      	bmi.n	801474c <_vfiprintf_r+0x44>
 801475c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801475e:	f7fe fcc5 	bl	80130ec <__retarget_lock_release_recursive>
 8014762:	e7f3      	b.n	801474c <_vfiprintf_r+0x44>
 8014764:	2300      	movs	r3, #0
 8014766:	9309      	str	r3, [sp, #36]	@ 0x24
 8014768:	2320      	movs	r3, #32
 801476a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801476e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014772:	2330      	movs	r3, #48	@ 0x30
 8014774:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014924 <_vfiprintf_r+0x21c>
 8014778:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801477c:	f04f 0901 	mov.w	r9, #1
 8014780:	4623      	mov	r3, r4
 8014782:	469a      	mov	sl, r3
 8014784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014788:	b10a      	cbz	r2, 801478e <_vfiprintf_r+0x86>
 801478a:	2a25      	cmp	r2, #37	@ 0x25
 801478c:	d1f9      	bne.n	8014782 <_vfiprintf_r+0x7a>
 801478e:	ebba 0b04 	subs.w	fp, sl, r4
 8014792:	d00b      	beq.n	80147ac <_vfiprintf_r+0xa4>
 8014794:	465b      	mov	r3, fp
 8014796:	4622      	mov	r2, r4
 8014798:	4629      	mov	r1, r5
 801479a:	4630      	mov	r0, r6
 801479c:	f7ff ffa1 	bl	80146e2 <__sfputs_r>
 80147a0:	3001      	adds	r0, #1
 80147a2:	f000 80a7 	beq.w	80148f4 <_vfiprintf_r+0x1ec>
 80147a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80147a8:	445a      	add	r2, fp
 80147aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80147ac:	f89a 3000 	ldrb.w	r3, [sl]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	f000 809f 	beq.w	80148f4 <_vfiprintf_r+0x1ec>
 80147b6:	2300      	movs	r3, #0
 80147b8:	f04f 32ff 	mov.w	r2, #4294967295
 80147bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147c0:	f10a 0a01 	add.w	sl, sl, #1
 80147c4:	9304      	str	r3, [sp, #16]
 80147c6:	9307      	str	r3, [sp, #28]
 80147c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80147cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80147ce:	4654      	mov	r4, sl
 80147d0:	2205      	movs	r2, #5
 80147d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147d6:	4853      	ldr	r0, [pc, #332]	@ (8014924 <_vfiprintf_r+0x21c>)
 80147d8:	f7eb fcfa 	bl	80001d0 <memchr>
 80147dc:	9a04      	ldr	r2, [sp, #16]
 80147de:	b9d8      	cbnz	r0, 8014818 <_vfiprintf_r+0x110>
 80147e0:	06d1      	lsls	r1, r2, #27
 80147e2:	bf44      	itt	mi
 80147e4:	2320      	movmi	r3, #32
 80147e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80147ea:	0713      	lsls	r3, r2, #28
 80147ec:	bf44      	itt	mi
 80147ee:	232b      	movmi	r3, #43	@ 0x2b
 80147f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80147f4:	f89a 3000 	ldrb.w	r3, [sl]
 80147f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80147fa:	d015      	beq.n	8014828 <_vfiprintf_r+0x120>
 80147fc:	9a07      	ldr	r2, [sp, #28]
 80147fe:	4654      	mov	r4, sl
 8014800:	2000      	movs	r0, #0
 8014802:	f04f 0c0a 	mov.w	ip, #10
 8014806:	4621      	mov	r1, r4
 8014808:	f811 3b01 	ldrb.w	r3, [r1], #1
 801480c:	3b30      	subs	r3, #48	@ 0x30
 801480e:	2b09      	cmp	r3, #9
 8014810:	d94b      	bls.n	80148aa <_vfiprintf_r+0x1a2>
 8014812:	b1b0      	cbz	r0, 8014842 <_vfiprintf_r+0x13a>
 8014814:	9207      	str	r2, [sp, #28]
 8014816:	e014      	b.n	8014842 <_vfiprintf_r+0x13a>
 8014818:	eba0 0308 	sub.w	r3, r0, r8
 801481c:	fa09 f303 	lsl.w	r3, r9, r3
 8014820:	4313      	orrs	r3, r2
 8014822:	9304      	str	r3, [sp, #16]
 8014824:	46a2      	mov	sl, r4
 8014826:	e7d2      	b.n	80147ce <_vfiprintf_r+0xc6>
 8014828:	9b03      	ldr	r3, [sp, #12]
 801482a:	1d19      	adds	r1, r3, #4
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	9103      	str	r1, [sp, #12]
 8014830:	2b00      	cmp	r3, #0
 8014832:	bfbb      	ittet	lt
 8014834:	425b      	neglt	r3, r3
 8014836:	f042 0202 	orrlt.w	r2, r2, #2
 801483a:	9307      	strge	r3, [sp, #28]
 801483c:	9307      	strlt	r3, [sp, #28]
 801483e:	bfb8      	it	lt
 8014840:	9204      	strlt	r2, [sp, #16]
 8014842:	7823      	ldrb	r3, [r4, #0]
 8014844:	2b2e      	cmp	r3, #46	@ 0x2e
 8014846:	d10a      	bne.n	801485e <_vfiprintf_r+0x156>
 8014848:	7863      	ldrb	r3, [r4, #1]
 801484a:	2b2a      	cmp	r3, #42	@ 0x2a
 801484c:	d132      	bne.n	80148b4 <_vfiprintf_r+0x1ac>
 801484e:	9b03      	ldr	r3, [sp, #12]
 8014850:	1d1a      	adds	r2, r3, #4
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	9203      	str	r2, [sp, #12]
 8014856:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801485a:	3402      	adds	r4, #2
 801485c:	9305      	str	r3, [sp, #20]
 801485e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014934 <_vfiprintf_r+0x22c>
 8014862:	7821      	ldrb	r1, [r4, #0]
 8014864:	2203      	movs	r2, #3
 8014866:	4650      	mov	r0, sl
 8014868:	f7eb fcb2 	bl	80001d0 <memchr>
 801486c:	b138      	cbz	r0, 801487e <_vfiprintf_r+0x176>
 801486e:	9b04      	ldr	r3, [sp, #16]
 8014870:	eba0 000a 	sub.w	r0, r0, sl
 8014874:	2240      	movs	r2, #64	@ 0x40
 8014876:	4082      	lsls	r2, r0
 8014878:	4313      	orrs	r3, r2
 801487a:	3401      	adds	r4, #1
 801487c:	9304      	str	r3, [sp, #16]
 801487e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014882:	4829      	ldr	r0, [pc, #164]	@ (8014928 <_vfiprintf_r+0x220>)
 8014884:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014888:	2206      	movs	r2, #6
 801488a:	f7eb fca1 	bl	80001d0 <memchr>
 801488e:	2800      	cmp	r0, #0
 8014890:	d03f      	beq.n	8014912 <_vfiprintf_r+0x20a>
 8014892:	4b26      	ldr	r3, [pc, #152]	@ (801492c <_vfiprintf_r+0x224>)
 8014894:	bb1b      	cbnz	r3, 80148de <_vfiprintf_r+0x1d6>
 8014896:	9b03      	ldr	r3, [sp, #12]
 8014898:	3307      	adds	r3, #7
 801489a:	f023 0307 	bic.w	r3, r3, #7
 801489e:	3308      	adds	r3, #8
 80148a0:	9303      	str	r3, [sp, #12]
 80148a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148a4:	443b      	add	r3, r7
 80148a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80148a8:	e76a      	b.n	8014780 <_vfiprintf_r+0x78>
 80148aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80148ae:	460c      	mov	r4, r1
 80148b0:	2001      	movs	r0, #1
 80148b2:	e7a8      	b.n	8014806 <_vfiprintf_r+0xfe>
 80148b4:	2300      	movs	r3, #0
 80148b6:	3401      	adds	r4, #1
 80148b8:	9305      	str	r3, [sp, #20]
 80148ba:	4619      	mov	r1, r3
 80148bc:	f04f 0c0a 	mov.w	ip, #10
 80148c0:	4620      	mov	r0, r4
 80148c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148c6:	3a30      	subs	r2, #48	@ 0x30
 80148c8:	2a09      	cmp	r2, #9
 80148ca:	d903      	bls.n	80148d4 <_vfiprintf_r+0x1cc>
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d0c6      	beq.n	801485e <_vfiprintf_r+0x156>
 80148d0:	9105      	str	r1, [sp, #20]
 80148d2:	e7c4      	b.n	801485e <_vfiprintf_r+0x156>
 80148d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80148d8:	4604      	mov	r4, r0
 80148da:	2301      	movs	r3, #1
 80148dc:	e7f0      	b.n	80148c0 <_vfiprintf_r+0x1b8>
 80148de:	ab03      	add	r3, sp, #12
 80148e0:	9300      	str	r3, [sp, #0]
 80148e2:	462a      	mov	r2, r5
 80148e4:	4b12      	ldr	r3, [pc, #72]	@ (8014930 <_vfiprintf_r+0x228>)
 80148e6:	a904      	add	r1, sp, #16
 80148e8:	4630      	mov	r0, r6
 80148ea:	f7fd fdc1 	bl	8012470 <_printf_float>
 80148ee:	4607      	mov	r7, r0
 80148f0:	1c78      	adds	r0, r7, #1
 80148f2:	d1d6      	bne.n	80148a2 <_vfiprintf_r+0x19a>
 80148f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148f6:	07d9      	lsls	r1, r3, #31
 80148f8:	d405      	bmi.n	8014906 <_vfiprintf_r+0x1fe>
 80148fa:	89ab      	ldrh	r3, [r5, #12]
 80148fc:	059a      	lsls	r2, r3, #22
 80148fe:	d402      	bmi.n	8014906 <_vfiprintf_r+0x1fe>
 8014900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014902:	f7fe fbf3 	bl	80130ec <__retarget_lock_release_recursive>
 8014906:	89ab      	ldrh	r3, [r5, #12]
 8014908:	065b      	lsls	r3, r3, #25
 801490a:	f53f af1f 	bmi.w	801474c <_vfiprintf_r+0x44>
 801490e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014910:	e71e      	b.n	8014750 <_vfiprintf_r+0x48>
 8014912:	ab03      	add	r3, sp, #12
 8014914:	9300      	str	r3, [sp, #0]
 8014916:	462a      	mov	r2, r5
 8014918:	4b05      	ldr	r3, [pc, #20]	@ (8014930 <_vfiprintf_r+0x228>)
 801491a:	a904      	add	r1, sp, #16
 801491c:	4630      	mov	r0, r6
 801491e:	f7fe f83f 	bl	80129a0 <_printf_i>
 8014922:	e7e4      	b.n	80148ee <_vfiprintf_r+0x1e6>
 8014924:	0801572e 	.word	0x0801572e
 8014928:	08015738 	.word	0x08015738
 801492c:	08012471 	.word	0x08012471
 8014930:	080146e3 	.word	0x080146e3
 8014934:	08015734 	.word	0x08015734

08014938 <__sflush_r>:
 8014938:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014940:	0716      	lsls	r6, r2, #28
 8014942:	4605      	mov	r5, r0
 8014944:	460c      	mov	r4, r1
 8014946:	d454      	bmi.n	80149f2 <__sflush_r+0xba>
 8014948:	684b      	ldr	r3, [r1, #4]
 801494a:	2b00      	cmp	r3, #0
 801494c:	dc02      	bgt.n	8014954 <__sflush_r+0x1c>
 801494e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014950:	2b00      	cmp	r3, #0
 8014952:	dd48      	ble.n	80149e6 <__sflush_r+0xae>
 8014954:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014956:	2e00      	cmp	r6, #0
 8014958:	d045      	beq.n	80149e6 <__sflush_r+0xae>
 801495a:	2300      	movs	r3, #0
 801495c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014960:	682f      	ldr	r7, [r5, #0]
 8014962:	6a21      	ldr	r1, [r4, #32]
 8014964:	602b      	str	r3, [r5, #0]
 8014966:	d030      	beq.n	80149ca <__sflush_r+0x92>
 8014968:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801496a:	89a3      	ldrh	r3, [r4, #12]
 801496c:	0759      	lsls	r1, r3, #29
 801496e:	d505      	bpl.n	801497c <__sflush_r+0x44>
 8014970:	6863      	ldr	r3, [r4, #4]
 8014972:	1ad2      	subs	r2, r2, r3
 8014974:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014976:	b10b      	cbz	r3, 801497c <__sflush_r+0x44>
 8014978:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801497a:	1ad2      	subs	r2, r2, r3
 801497c:	2300      	movs	r3, #0
 801497e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014980:	6a21      	ldr	r1, [r4, #32]
 8014982:	4628      	mov	r0, r5
 8014984:	47b0      	blx	r6
 8014986:	1c43      	adds	r3, r0, #1
 8014988:	89a3      	ldrh	r3, [r4, #12]
 801498a:	d106      	bne.n	801499a <__sflush_r+0x62>
 801498c:	6829      	ldr	r1, [r5, #0]
 801498e:	291d      	cmp	r1, #29
 8014990:	d82b      	bhi.n	80149ea <__sflush_r+0xb2>
 8014992:	4a2a      	ldr	r2, [pc, #168]	@ (8014a3c <__sflush_r+0x104>)
 8014994:	40ca      	lsrs	r2, r1
 8014996:	07d6      	lsls	r6, r2, #31
 8014998:	d527      	bpl.n	80149ea <__sflush_r+0xb2>
 801499a:	2200      	movs	r2, #0
 801499c:	6062      	str	r2, [r4, #4]
 801499e:	04d9      	lsls	r1, r3, #19
 80149a0:	6922      	ldr	r2, [r4, #16]
 80149a2:	6022      	str	r2, [r4, #0]
 80149a4:	d504      	bpl.n	80149b0 <__sflush_r+0x78>
 80149a6:	1c42      	adds	r2, r0, #1
 80149a8:	d101      	bne.n	80149ae <__sflush_r+0x76>
 80149aa:	682b      	ldr	r3, [r5, #0]
 80149ac:	b903      	cbnz	r3, 80149b0 <__sflush_r+0x78>
 80149ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80149b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80149b2:	602f      	str	r7, [r5, #0]
 80149b4:	b1b9      	cbz	r1, 80149e6 <__sflush_r+0xae>
 80149b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80149ba:	4299      	cmp	r1, r3
 80149bc:	d002      	beq.n	80149c4 <__sflush_r+0x8c>
 80149be:	4628      	mov	r0, r5
 80149c0:	f7ff f9fe 	bl	8013dc0 <_free_r>
 80149c4:	2300      	movs	r3, #0
 80149c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80149c8:	e00d      	b.n	80149e6 <__sflush_r+0xae>
 80149ca:	2301      	movs	r3, #1
 80149cc:	4628      	mov	r0, r5
 80149ce:	47b0      	blx	r6
 80149d0:	4602      	mov	r2, r0
 80149d2:	1c50      	adds	r0, r2, #1
 80149d4:	d1c9      	bne.n	801496a <__sflush_r+0x32>
 80149d6:	682b      	ldr	r3, [r5, #0]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d0c6      	beq.n	801496a <__sflush_r+0x32>
 80149dc:	2b1d      	cmp	r3, #29
 80149de:	d001      	beq.n	80149e4 <__sflush_r+0xac>
 80149e0:	2b16      	cmp	r3, #22
 80149e2:	d11e      	bne.n	8014a22 <__sflush_r+0xea>
 80149e4:	602f      	str	r7, [r5, #0]
 80149e6:	2000      	movs	r0, #0
 80149e8:	e022      	b.n	8014a30 <__sflush_r+0xf8>
 80149ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149ee:	b21b      	sxth	r3, r3
 80149f0:	e01b      	b.n	8014a2a <__sflush_r+0xf2>
 80149f2:	690f      	ldr	r7, [r1, #16]
 80149f4:	2f00      	cmp	r7, #0
 80149f6:	d0f6      	beq.n	80149e6 <__sflush_r+0xae>
 80149f8:	0793      	lsls	r3, r2, #30
 80149fa:	680e      	ldr	r6, [r1, #0]
 80149fc:	bf08      	it	eq
 80149fe:	694b      	ldreq	r3, [r1, #20]
 8014a00:	600f      	str	r7, [r1, #0]
 8014a02:	bf18      	it	ne
 8014a04:	2300      	movne	r3, #0
 8014a06:	eba6 0807 	sub.w	r8, r6, r7
 8014a0a:	608b      	str	r3, [r1, #8]
 8014a0c:	f1b8 0f00 	cmp.w	r8, #0
 8014a10:	dde9      	ble.n	80149e6 <__sflush_r+0xae>
 8014a12:	6a21      	ldr	r1, [r4, #32]
 8014a14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014a16:	4643      	mov	r3, r8
 8014a18:	463a      	mov	r2, r7
 8014a1a:	4628      	mov	r0, r5
 8014a1c:	47b0      	blx	r6
 8014a1e:	2800      	cmp	r0, #0
 8014a20:	dc08      	bgt.n	8014a34 <__sflush_r+0xfc>
 8014a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a2a:	81a3      	strh	r3, [r4, #12]
 8014a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a34:	4407      	add	r7, r0
 8014a36:	eba8 0800 	sub.w	r8, r8, r0
 8014a3a:	e7e7      	b.n	8014a0c <__sflush_r+0xd4>
 8014a3c:	20400001 	.word	0x20400001

08014a40 <_fflush_r>:
 8014a40:	b538      	push	{r3, r4, r5, lr}
 8014a42:	690b      	ldr	r3, [r1, #16]
 8014a44:	4605      	mov	r5, r0
 8014a46:	460c      	mov	r4, r1
 8014a48:	b913      	cbnz	r3, 8014a50 <_fflush_r+0x10>
 8014a4a:	2500      	movs	r5, #0
 8014a4c:	4628      	mov	r0, r5
 8014a4e:	bd38      	pop	{r3, r4, r5, pc}
 8014a50:	b118      	cbz	r0, 8014a5a <_fflush_r+0x1a>
 8014a52:	6a03      	ldr	r3, [r0, #32]
 8014a54:	b90b      	cbnz	r3, 8014a5a <_fflush_r+0x1a>
 8014a56:	f7fe f94d 	bl	8012cf4 <__sinit>
 8014a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d0f3      	beq.n	8014a4a <_fflush_r+0xa>
 8014a62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014a64:	07d0      	lsls	r0, r2, #31
 8014a66:	d404      	bmi.n	8014a72 <_fflush_r+0x32>
 8014a68:	0599      	lsls	r1, r3, #22
 8014a6a:	d402      	bmi.n	8014a72 <_fflush_r+0x32>
 8014a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a6e:	f7fe fb3c 	bl	80130ea <__retarget_lock_acquire_recursive>
 8014a72:	4628      	mov	r0, r5
 8014a74:	4621      	mov	r1, r4
 8014a76:	f7ff ff5f 	bl	8014938 <__sflush_r>
 8014a7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a7c:	07da      	lsls	r2, r3, #31
 8014a7e:	4605      	mov	r5, r0
 8014a80:	d4e4      	bmi.n	8014a4c <_fflush_r+0xc>
 8014a82:	89a3      	ldrh	r3, [r4, #12]
 8014a84:	059b      	lsls	r3, r3, #22
 8014a86:	d4e1      	bmi.n	8014a4c <_fflush_r+0xc>
 8014a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a8a:	f7fe fb2f 	bl	80130ec <__retarget_lock_release_recursive>
 8014a8e:	e7dd      	b.n	8014a4c <_fflush_r+0xc>

08014a90 <__swhatbuf_r>:
 8014a90:	b570      	push	{r4, r5, r6, lr}
 8014a92:	460c      	mov	r4, r1
 8014a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a98:	2900      	cmp	r1, #0
 8014a9a:	b096      	sub	sp, #88	@ 0x58
 8014a9c:	4615      	mov	r5, r2
 8014a9e:	461e      	mov	r6, r3
 8014aa0:	da0d      	bge.n	8014abe <__swhatbuf_r+0x2e>
 8014aa2:	89a3      	ldrh	r3, [r4, #12]
 8014aa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014aa8:	f04f 0100 	mov.w	r1, #0
 8014aac:	bf14      	ite	ne
 8014aae:	2340      	movne	r3, #64	@ 0x40
 8014ab0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014ab4:	2000      	movs	r0, #0
 8014ab6:	6031      	str	r1, [r6, #0]
 8014ab8:	602b      	str	r3, [r5, #0]
 8014aba:	b016      	add	sp, #88	@ 0x58
 8014abc:	bd70      	pop	{r4, r5, r6, pc}
 8014abe:	466a      	mov	r2, sp
 8014ac0:	f000 f848 	bl	8014b54 <_fstat_r>
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	dbec      	blt.n	8014aa2 <__swhatbuf_r+0x12>
 8014ac8:	9901      	ldr	r1, [sp, #4]
 8014aca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014ace:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014ad2:	4259      	negs	r1, r3
 8014ad4:	4159      	adcs	r1, r3
 8014ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ada:	e7eb      	b.n	8014ab4 <__swhatbuf_r+0x24>

08014adc <__smakebuf_r>:
 8014adc:	898b      	ldrh	r3, [r1, #12]
 8014ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ae0:	079d      	lsls	r5, r3, #30
 8014ae2:	4606      	mov	r6, r0
 8014ae4:	460c      	mov	r4, r1
 8014ae6:	d507      	bpl.n	8014af8 <__smakebuf_r+0x1c>
 8014ae8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014aec:	6023      	str	r3, [r4, #0]
 8014aee:	6123      	str	r3, [r4, #16]
 8014af0:	2301      	movs	r3, #1
 8014af2:	6163      	str	r3, [r4, #20]
 8014af4:	b003      	add	sp, #12
 8014af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014af8:	ab01      	add	r3, sp, #4
 8014afa:	466a      	mov	r2, sp
 8014afc:	f7ff ffc8 	bl	8014a90 <__swhatbuf_r>
 8014b00:	9f00      	ldr	r7, [sp, #0]
 8014b02:	4605      	mov	r5, r0
 8014b04:	4639      	mov	r1, r7
 8014b06:	4630      	mov	r0, r6
 8014b08:	f7ff f9ce 	bl	8013ea8 <_malloc_r>
 8014b0c:	b948      	cbnz	r0, 8014b22 <__smakebuf_r+0x46>
 8014b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b12:	059a      	lsls	r2, r3, #22
 8014b14:	d4ee      	bmi.n	8014af4 <__smakebuf_r+0x18>
 8014b16:	f023 0303 	bic.w	r3, r3, #3
 8014b1a:	f043 0302 	orr.w	r3, r3, #2
 8014b1e:	81a3      	strh	r3, [r4, #12]
 8014b20:	e7e2      	b.n	8014ae8 <__smakebuf_r+0xc>
 8014b22:	89a3      	ldrh	r3, [r4, #12]
 8014b24:	6020      	str	r0, [r4, #0]
 8014b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014b2a:	81a3      	strh	r3, [r4, #12]
 8014b2c:	9b01      	ldr	r3, [sp, #4]
 8014b2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014b32:	b15b      	cbz	r3, 8014b4c <__smakebuf_r+0x70>
 8014b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b38:	4630      	mov	r0, r6
 8014b3a:	f000 f81d 	bl	8014b78 <_isatty_r>
 8014b3e:	b128      	cbz	r0, 8014b4c <__smakebuf_r+0x70>
 8014b40:	89a3      	ldrh	r3, [r4, #12]
 8014b42:	f023 0303 	bic.w	r3, r3, #3
 8014b46:	f043 0301 	orr.w	r3, r3, #1
 8014b4a:	81a3      	strh	r3, [r4, #12]
 8014b4c:	89a3      	ldrh	r3, [r4, #12]
 8014b4e:	431d      	orrs	r5, r3
 8014b50:	81a5      	strh	r5, [r4, #12]
 8014b52:	e7cf      	b.n	8014af4 <__smakebuf_r+0x18>

08014b54 <_fstat_r>:
 8014b54:	b538      	push	{r3, r4, r5, lr}
 8014b56:	4d07      	ldr	r5, [pc, #28]	@ (8014b74 <_fstat_r+0x20>)
 8014b58:	2300      	movs	r3, #0
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	4608      	mov	r0, r1
 8014b5e:	4611      	mov	r1, r2
 8014b60:	602b      	str	r3, [r5, #0]
 8014b62:	f7ed fe17 	bl	8002794 <_fstat>
 8014b66:	1c43      	adds	r3, r0, #1
 8014b68:	d102      	bne.n	8014b70 <_fstat_r+0x1c>
 8014b6a:	682b      	ldr	r3, [r5, #0]
 8014b6c:	b103      	cbz	r3, 8014b70 <_fstat_r+0x1c>
 8014b6e:	6023      	str	r3, [r4, #0]
 8014b70:	bd38      	pop	{r3, r4, r5, pc}
 8014b72:	bf00      	nop
 8014b74:	2001ea40 	.word	0x2001ea40

08014b78 <_isatty_r>:
 8014b78:	b538      	push	{r3, r4, r5, lr}
 8014b7a:	4d06      	ldr	r5, [pc, #24]	@ (8014b94 <_isatty_r+0x1c>)
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	4604      	mov	r4, r0
 8014b80:	4608      	mov	r0, r1
 8014b82:	602b      	str	r3, [r5, #0]
 8014b84:	f7ed fe16 	bl	80027b4 <_isatty>
 8014b88:	1c43      	adds	r3, r0, #1
 8014b8a:	d102      	bne.n	8014b92 <_isatty_r+0x1a>
 8014b8c:	682b      	ldr	r3, [r5, #0]
 8014b8e:	b103      	cbz	r3, 8014b92 <_isatty_r+0x1a>
 8014b90:	6023      	str	r3, [r4, #0]
 8014b92:	bd38      	pop	{r3, r4, r5, pc}
 8014b94:	2001ea40 	.word	0x2001ea40

08014b98 <_sbrk_r>:
 8014b98:	b538      	push	{r3, r4, r5, lr}
 8014b9a:	4d06      	ldr	r5, [pc, #24]	@ (8014bb4 <_sbrk_r+0x1c>)
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	4608      	mov	r0, r1
 8014ba2:	602b      	str	r3, [r5, #0]
 8014ba4:	f7ed fe1e 	bl	80027e4 <_sbrk>
 8014ba8:	1c43      	adds	r3, r0, #1
 8014baa:	d102      	bne.n	8014bb2 <_sbrk_r+0x1a>
 8014bac:	682b      	ldr	r3, [r5, #0]
 8014bae:	b103      	cbz	r3, 8014bb2 <_sbrk_r+0x1a>
 8014bb0:	6023      	str	r3, [r4, #0]
 8014bb2:	bd38      	pop	{r3, r4, r5, pc}
 8014bb4:	2001ea40 	.word	0x2001ea40

08014bb8 <__assert_func>:
 8014bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014bba:	4614      	mov	r4, r2
 8014bbc:	461a      	mov	r2, r3
 8014bbe:	4b09      	ldr	r3, [pc, #36]	@ (8014be4 <__assert_func+0x2c>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	4605      	mov	r5, r0
 8014bc4:	68d8      	ldr	r0, [r3, #12]
 8014bc6:	b14c      	cbz	r4, 8014bdc <__assert_func+0x24>
 8014bc8:	4b07      	ldr	r3, [pc, #28]	@ (8014be8 <__assert_func+0x30>)
 8014bca:	9100      	str	r1, [sp, #0]
 8014bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014bd0:	4906      	ldr	r1, [pc, #24]	@ (8014bec <__assert_func+0x34>)
 8014bd2:	462b      	mov	r3, r5
 8014bd4:	f000 f842 	bl	8014c5c <fiprintf>
 8014bd8:	f000 f852 	bl	8014c80 <abort>
 8014bdc:	4b04      	ldr	r3, [pc, #16]	@ (8014bf0 <__assert_func+0x38>)
 8014bde:	461c      	mov	r4, r3
 8014be0:	e7f3      	b.n	8014bca <__assert_func+0x12>
 8014be2:	bf00      	nop
 8014be4:	20000114 	.word	0x20000114
 8014be8:	08015749 	.word	0x08015749
 8014bec:	08015756 	.word	0x08015756
 8014bf0:	08015784 	.word	0x08015784

08014bf4 <_calloc_r>:
 8014bf4:	b570      	push	{r4, r5, r6, lr}
 8014bf6:	fba1 5402 	umull	r5, r4, r1, r2
 8014bfa:	b934      	cbnz	r4, 8014c0a <_calloc_r+0x16>
 8014bfc:	4629      	mov	r1, r5
 8014bfe:	f7ff f953 	bl	8013ea8 <_malloc_r>
 8014c02:	4606      	mov	r6, r0
 8014c04:	b928      	cbnz	r0, 8014c12 <_calloc_r+0x1e>
 8014c06:	4630      	mov	r0, r6
 8014c08:	bd70      	pop	{r4, r5, r6, pc}
 8014c0a:	220c      	movs	r2, #12
 8014c0c:	6002      	str	r2, [r0, #0]
 8014c0e:	2600      	movs	r6, #0
 8014c10:	e7f9      	b.n	8014c06 <_calloc_r+0x12>
 8014c12:	462a      	mov	r2, r5
 8014c14:	4621      	mov	r1, r4
 8014c16:	f7fe f9eb 	bl	8012ff0 <memset>
 8014c1a:	e7f4      	b.n	8014c06 <_calloc_r+0x12>

08014c1c <__ascii_mbtowc>:
 8014c1c:	b082      	sub	sp, #8
 8014c1e:	b901      	cbnz	r1, 8014c22 <__ascii_mbtowc+0x6>
 8014c20:	a901      	add	r1, sp, #4
 8014c22:	b142      	cbz	r2, 8014c36 <__ascii_mbtowc+0x1a>
 8014c24:	b14b      	cbz	r3, 8014c3a <__ascii_mbtowc+0x1e>
 8014c26:	7813      	ldrb	r3, [r2, #0]
 8014c28:	600b      	str	r3, [r1, #0]
 8014c2a:	7812      	ldrb	r2, [r2, #0]
 8014c2c:	1e10      	subs	r0, r2, #0
 8014c2e:	bf18      	it	ne
 8014c30:	2001      	movne	r0, #1
 8014c32:	b002      	add	sp, #8
 8014c34:	4770      	bx	lr
 8014c36:	4610      	mov	r0, r2
 8014c38:	e7fb      	b.n	8014c32 <__ascii_mbtowc+0x16>
 8014c3a:	f06f 0001 	mvn.w	r0, #1
 8014c3e:	e7f8      	b.n	8014c32 <__ascii_mbtowc+0x16>

08014c40 <__ascii_wctomb>:
 8014c40:	4603      	mov	r3, r0
 8014c42:	4608      	mov	r0, r1
 8014c44:	b141      	cbz	r1, 8014c58 <__ascii_wctomb+0x18>
 8014c46:	2aff      	cmp	r2, #255	@ 0xff
 8014c48:	d904      	bls.n	8014c54 <__ascii_wctomb+0x14>
 8014c4a:	228a      	movs	r2, #138	@ 0x8a
 8014c4c:	601a      	str	r2, [r3, #0]
 8014c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c52:	4770      	bx	lr
 8014c54:	700a      	strb	r2, [r1, #0]
 8014c56:	2001      	movs	r0, #1
 8014c58:	4770      	bx	lr
	...

08014c5c <fiprintf>:
 8014c5c:	b40e      	push	{r1, r2, r3}
 8014c5e:	b503      	push	{r0, r1, lr}
 8014c60:	4601      	mov	r1, r0
 8014c62:	ab03      	add	r3, sp, #12
 8014c64:	4805      	ldr	r0, [pc, #20]	@ (8014c7c <fiprintf+0x20>)
 8014c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c6a:	6800      	ldr	r0, [r0, #0]
 8014c6c:	9301      	str	r3, [sp, #4]
 8014c6e:	f7ff fd4b 	bl	8014708 <_vfiprintf_r>
 8014c72:	b002      	add	sp, #8
 8014c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c78:	b003      	add	sp, #12
 8014c7a:	4770      	bx	lr
 8014c7c:	20000114 	.word	0x20000114

08014c80 <abort>:
 8014c80:	b508      	push	{r3, lr}
 8014c82:	2006      	movs	r0, #6
 8014c84:	f000 f82c 	bl	8014ce0 <raise>
 8014c88:	2001      	movs	r0, #1
 8014c8a:	f7ed fd33 	bl	80026f4 <_exit>

08014c8e <_raise_r>:
 8014c8e:	291f      	cmp	r1, #31
 8014c90:	b538      	push	{r3, r4, r5, lr}
 8014c92:	4605      	mov	r5, r0
 8014c94:	460c      	mov	r4, r1
 8014c96:	d904      	bls.n	8014ca2 <_raise_r+0x14>
 8014c98:	2316      	movs	r3, #22
 8014c9a:	6003      	str	r3, [r0, #0]
 8014c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca0:	bd38      	pop	{r3, r4, r5, pc}
 8014ca2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014ca4:	b112      	cbz	r2, 8014cac <_raise_r+0x1e>
 8014ca6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014caa:	b94b      	cbnz	r3, 8014cc0 <_raise_r+0x32>
 8014cac:	4628      	mov	r0, r5
 8014cae:	f000 f831 	bl	8014d14 <_getpid_r>
 8014cb2:	4622      	mov	r2, r4
 8014cb4:	4601      	mov	r1, r0
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cbc:	f000 b818 	b.w	8014cf0 <_kill_r>
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d00a      	beq.n	8014cda <_raise_r+0x4c>
 8014cc4:	1c59      	adds	r1, r3, #1
 8014cc6:	d103      	bne.n	8014cd0 <_raise_r+0x42>
 8014cc8:	2316      	movs	r3, #22
 8014cca:	6003      	str	r3, [r0, #0]
 8014ccc:	2001      	movs	r0, #1
 8014cce:	e7e7      	b.n	8014ca0 <_raise_r+0x12>
 8014cd0:	2100      	movs	r1, #0
 8014cd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	4798      	blx	r3
 8014cda:	2000      	movs	r0, #0
 8014cdc:	e7e0      	b.n	8014ca0 <_raise_r+0x12>
	...

08014ce0 <raise>:
 8014ce0:	4b02      	ldr	r3, [pc, #8]	@ (8014cec <raise+0xc>)
 8014ce2:	4601      	mov	r1, r0
 8014ce4:	6818      	ldr	r0, [r3, #0]
 8014ce6:	f7ff bfd2 	b.w	8014c8e <_raise_r>
 8014cea:	bf00      	nop
 8014cec:	20000114 	.word	0x20000114

08014cf0 <_kill_r>:
 8014cf0:	b538      	push	{r3, r4, r5, lr}
 8014cf2:	4d07      	ldr	r5, [pc, #28]	@ (8014d10 <_kill_r+0x20>)
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	4604      	mov	r4, r0
 8014cf8:	4608      	mov	r0, r1
 8014cfa:	4611      	mov	r1, r2
 8014cfc:	602b      	str	r3, [r5, #0]
 8014cfe:	f7ed fce9 	bl	80026d4 <_kill>
 8014d02:	1c43      	adds	r3, r0, #1
 8014d04:	d102      	bne.n	8014d0c <_kill_r+0x1c>
 8014d06:	682b      	ldr	r3, [r5, #0]
 8014d08:	b103      	cbz	r3, 8014d0c <_kill_r+0x1c>
 8014d0a:	6023      	str	r3, [r4, #0]
 8014d0c:	bd38      	pop	{r3, r4, r5, pc}
 8014d0e:	bf00      	nop
 8014d10:	2001ea40 	.word	0x2001ea40

08014d14 <_getpid_r>:
 8014d14:	f7ed bcd6 	b.w	80026c4 <_getpid>

08014d18 <_init>:
 8014d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d1a:	bf00      	nop
 8014d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d1e:	bc08      	pop	{r3}
 8014d20:	469e      	mov	lr, r3
 8014d22:	4770      	bx	lr

08014d24 <_fini>:
 8014d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d26:	bf00      	nop
 8014d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d2a:	bc08      	pop	{r3}
 8014d2c:	469e      	mov	lr, r3
 8014d2e:	4770      	bx	lr
