
Camera_trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013010  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  080131a0  080131a0  000141a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013974  08013974  000152c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013974  08013974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801397c  0801397c  000152c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801397c  0801397c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013980  08013980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08013984  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000152c8  2**0
                  CONTENTS
 10 .bss          0000f5b4  200002e0  200002e0  000152e0  2**5
                  ALLOC
 11 ._user_heap_stack 00000604  2000f894  2000f894  000152e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000152c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025ae3  00000000  00000000  000152f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000676d  00000000  00000000  0003addb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef0  00000000  00000000  00041548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001781  00000000  00000000  00043438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b09a  00000000  00000000  00044bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ff62  00000000  00000000  0006fc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddba5  00000000  00000000  0009fbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017d75a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e90  00000000  00000000  0017d7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00186630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013188 	.word	0x08013188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	08013188 	.word	0x08013188

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee4:	2b80      	cmp	r3, #128	@ 0x80
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf0c      	ite	eq
 8000f0e:	2301      	moveq	r3, #1
 8000f10:	2300      	movne	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	bf0c      	ite	eq
 8000f34:	2301      	moveq	r3, #1
 8000f36:	2300      	movne	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	611a      	str	r2, [r3, #16]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <OV7670_init>:
    }

    return false;  // false = success
}

bool OV7670_init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0


   uint8_t data, i = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
   bool err = false;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73bb      	strb	r3, [r7, #14]
   for(i = 0; i <sizeof(OV7670_reg) / sizeof(OV7670_reg[0]); i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e08c      	b.n	8001102 <OV7670_init+0x12e>
      data = OV7670_reg[i][1];
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	4a4a      	ldr	r2, [pc, #296]	@ (8001114 <OV7670_init+0x140>)
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	71fb      	strb	r3, [r7, #7]
      // Note the direct passing of 'data', not its address
      uint32_t timeout;

      printf("loaded data %d %d\r\n", OV7670_reg[i][0], data);
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	4a47      	ldr	r2, [pc, #284]	@ (8001114 <OV7670_init+0x140>)
 8000ff8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	461a      	mov	r2, r3
 8001002:	4845      	ldr	r0, [pc, #276]	@ (8001118 <OV7670_init+0x144>)
 8001004:	f010 f8e4 	bl	80111d0 <iprintf>

      LL_I2C_GenerateStartCondition(I2C1);
 8001008:	4844      	ldr	r0, [pc, #272]	@ (800111c <OV7670_init+0x148>)
 800100a:	f7ff ffaf 	bl	8000f6c <LL_I2C_GenerateStartCondition>

      timeout = 0xFFFF;
 800100e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001012:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_SB(I2C1)) {
 8001014:	e007      	b.n	8001026 <OV7670_init+0x52>
          if (--timeout == 0) return true;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3b01      	subs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <OV7670_init+0x52>
 8001022:	2301      	movs	r3, #1
 8001024:	e072      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_SB(I2C1)) {
 8001026:	483d      	ldr	r0, [pc, #244]	@ (800111c <OV7670_init+0x148>)
 8001028:	f7ff ff7a 	bl	8000f20 <LL_I2C_IsActiveFlag_SB>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f1      	beq.n	8001016 <OV7670_init+0x42>
      }

      LL_I2C_TransmitData8(I2C1, OV7670_I2C_ADDR << 1);  // write mode
 8001032:	2142      	movs	r1, #66	@ 0x42
 8001034:	4839      	ldr	r0, [pc, #228]	@ (800111c <OV7670_init+0x148>)
 8001036:	f7ff ffb9 	bl	8000fac <LL_I2C_TransmitData8>

      timeout = 0xFFFF;
 800103a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800103e:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 8001040:	e007      	b.n	8001052 <OV7670_init+0x7e>
          if (--timeout == 0) return true;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3b01      	subs	r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <OV7670_init+0x7e>
 800104e:	2301      	movs	r3, #1
 8001050:	e05c      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 8001052:	4832      	ldr	r0, [pc, #200]	@ (800111c <OV7670_init+0x148>)
 8001054:	f7ff ff77 	bl	8000f46 <LL_I2C_IsActiveFlag_ADDR>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f1      	beq.n	8001042 <OV7670_init+0x6e>
      }
      (void)I2C1->SR2;  // clear ADDR flag
 800105e:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <OV7670_init+0x148>)
 8001060:	699b      	ldr	r3, [r3, #24]

      LL_I2C_TransmitData8(I2C1, OV7670_reg[i][0]);
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <OV7670_init+0x140>)
 8001066:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800106a:	4619      	mov	r1, r3
 800106c:	482b      	ldr	r0, [pc, #172]	@ (800111c <OV7670_init+0x148>)
 800106e:	f7ff ff9d 	bl	8000fac <LL_I2C_TransmitData8>
      timeout = 0xFFFF;
 8001072:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001076:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 8001078:	e007      	b.n	800108a <OV7670_init+0xb6>
          if (--timeout == 0) return true;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3b01      	subs	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <OV7670_init+0xb6>
 8001086:	2301      	movs	r3, #1
 8001088:	e040      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 800108a:	4824      	ldr	r0, [pc, #144]	@ (800111c <OV7670_init+0x148>)
 800108c:	f7ff ff22 	bl	8000ed4 <LL_I2C_IsActiveFlag_TXE>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f1      	beq.n	800107a <OV7670_init+0xa6>
      }

      LL_I2C_TransmitData8(I2C1, data);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4619      	mov	r1, r3
 800109a:	4820      	ldr	r0, [pc, #128]	@ (800111c <OV7670_init+0x148>)
 800109c:	f7ff ff86 	bl	8000fac <LL_I2C_TransmitData8>
      timeout = 0xFFFF;
 80010a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a4:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 80010a6:	e007      	b.n	80010b8 <OV7670_init+0xe4>
          if (--timeout == 0) return true;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <OV7670_init+0xe4>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e029      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 80010b8:	4818      	ldr	r0, [pc, #96]	@ (800111c <OV7670_init+0x148>)
 80010ba:	f7ff ff0b 	bl	8000ed4 <LL_I2C_IsActiveFlag_TXE>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f1      	beq.n	80010a8 <OV7670_init+0xd4>
      }

      timeout = 0xFFFF;
 80010c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c8:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 80010ca:	e007      	b.n	80010dc <OV7670_init+0x108>
          if (--timeout == 0) return true;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <OV7670_init+0x108>
 80010d8:	2301      	movs	r3, #1
 80010da:	e017      	b.n	800110c <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 80010dc:	480f      	ldr	r0, [pc, #60]	@ (800111c <OV7670_init+0x148>)
 80010de:	f7ff ff0c 	bl	8000efa <LL_I2C_IsActiveFlag_BTF>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f1      	beq.n	80010cc <OV7670_init+0xf8>
      }

      LL_I2C_GenerateStopCondition(I2C1);
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <OV7670_init+0x148>)
 80010ea:	f7ff ff4f 	bl	8000f8c <LL_I2C_GenerateStopCondition>
      err=false;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73bb      	strb	r3, [r7, #14]
      printf("i: %d\r\n",i);
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	4619      	mov	r1, r3
 80010f6:	480a      	ldr	r0, [pc, #40]	@ (8001120 <OV7670_init+0x14c>)
 80010f8:	f010 f86a 	bl	80111d0 <iprintf>
   for(i = 0; i <sizeof(OV7670_reg) / sizeof(OV7670_reg[0]); i++) {
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	3301      	adds	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	2b58      	cmp	r3, #88	@ 0x58
 8001106:	f67f af6f 	bls.w	8000fe8 <OV7670_init+0x14>
   }
	/*uint8_t id;
	if (!SCCB_read_reg(0x0A, &id)) {
	    printf("MIDH: 0x%02X\r\n", id);  // Should be 0x7F for OV7670
	}*/
   return err;
 800110a:	7bbb      	ldrb	r3, [r7, #14]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	08013518 	.word	0x08013518
 8001118:	080131a0 	.word	0x080131a0
 800111c:	40005400 	.word	0x40005400
 8001120:	080131b4 	.word	0x080131b4

08001124 <BSP_SD_WriteCpltCallback>:
TaskHandle_t xSDTaskHandle;
uint8_t tx_buffer[30 * 512];
uint8_t rx_buffer[30 * 512];

void BSP_SD_WriteCpltCallback(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]

    // Notify the SD task that a write operation has completed.
    // Using bit 0 (value 0x01) to indicate a write completion.
    xTaskNotifyFromISR(xSDTaskHandle, 0x01, eSetBits, &xHigherPriorityTaskWoken);
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <BSP_SD_WriteCpltCallback+0x3c>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2201      	movs	r2, #1
 800113a:	2101      	movs	r1, #1
 800113c:	f00c fc4e 	bl	800d9dc <xTaskGenericNotifyFromISR>

    // If a higher priority task was woken, yield at the end of the ISR.
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <BSP_SD_WriteCpltCallback+0x32>
 8001146:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <BSP_SD_WriteCpltCallback+0x40>)
 8001148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	f3bf 8f4f 	dsb	sy
 8001152:	f3bf 8f6f 	isb	sy
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200002fc 	.word	0x200002fc
 8001164:	e000ed04 	.word	0xe000ed04

08001168 <BSP_SD_ReadCpltCallback>:
/**
  * @brief Read Transfer complete callback.
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]

    // Notify the SD task that a read operation has completed.
    // Using bit 1 (value 0x02) to indicate a read completion.
    xTaskNotifyFromISR(xSDTaskHandle, 0x02, eSetBits, &xHigherPriorityTaskWoken);
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <BSP_SD_ReadCpltCallback+0x3c>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	2201      	movs	r2, #1
 800117e:	2102      	movs	r1, #2
 8001180:	f00c fc2c 	bl	800d9dc <xTaskGenericNotifyFromISR>

    // Yield if a higher priority task has been woken.
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <BSP_SD_ReadCpltCallback+0x32>
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <BSP_SD_ReadCpltCallback+0x40>)
 800118c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	f3bf 8f4f 	dsb	sy
 8001196:	f3bf 8f6f 	isb	sy
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002fc 	.word	0x200002fc
 80011a8:	e000ed04 	.word	0xe000ed04

080011ac <USBFrameSendTask>:
// Assumes the global frame buffer is declared somewhere visible, e.g., in dcmi_driver.h
extern volatile uint16_t frame_buffer[];
#define FRAME_BUFFER_SIZE_BYTES (IMG_ROWS * IMG_COLUMNS * 2)

void USBFrameSendTask(void) // Can be called from your FrameProcessTask
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b08c      	sub	sp, #48	@ 0x30
 80011b0:	af02      	add	r7, sp, #8
    const uint16_t chunk_size = 64; // USB FS Max Packet Size
 80011b2:	2340      	movs	r3, #64	@ 0x40
 80011b4:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint32_t ptr = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24

    // ⏱️ Start timing
    uint32_t start = DWT->CYCCNT;
 80011ba:	4b38      	ldr	r3, [pc, #224]	@ (800129c <USBFrameSendTask+0xf0>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61fb      	str	r3, [r7, #28]
    const char* sof_marker = "START";
 80011c0:	4b37      	ldr	r3, [pc, #220]	@ (80012a0 <USBFrameSendTask+0xf4>)
 80011c2:	61bb      	str	r3, [r7, #24]
    CDC_Transmit_FS((uint8_t*)sof_marker, strlen(sof_marker));
 80011c4:	69b8      	ldr	r0, [r7, #24]
 80011c6:	f7ff f853 	bl	8000270 <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	69b8      	ldr	r0, [r7, #24]
 80011d2:	f00e fe89 	bl	800fee8 <CDC_Transmit_FS>
    while (ptr < FRAME_BUFFER_SIZE_BYTES)
 80011d6:	e023      	b.n	8001220 <USBFrameSendTask+0x74>
    {
        uint16_t remaining = FRAME_BUFFER_SIZE_BYTES - ptr;
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <USBFrameSendTask+0xf8>)
 80011de:	1a9b      	subs	r3, r3, r2
 80011e0:	817b      	strh	r3, [r7, #10]
        uint16_t size_to_send = (remaining > chunk_size) ? chunk_size : remaining;
 80011e2:	897a      	ldrh	r2, [r7, #10]
 80011e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80011e6:	4293      	cmp	r3, r2
 80011e8:	bf28      	it	cs
 80011ea:	4613      	movcs	r3, r2
 80011ec:	813b      	strh	r3, [r7, #8]

        // THE FIX IS HERE:
        // We cast the frame_buffer to a byte pointer and add the offset 'ptr'.
        uint8_t* data_source = (uint8_t*)frame_buffer + ptr;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	4a2d      	ldr	r2, [pc, #180]	@ (80012a8 <USBFrameSendTask+0xfc>)
 80011f2:	4413      	add	r3, r2
 80011f4:	607b      	str	r3, [r7, #4]

        // Keep trying to send until the USB endpoint is free
        while (CDC_Transmit_FS(data_source, size_to_send) != USBD_OK)
 80011f6:	e007      	b.n	8001208 <USBFrameSendTask+0x5c>
        {
            // Give other tasks a chance to run if the USB is busy
            taskYIELD();
 80011f8:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <USBFrameSendTask+0x100>)
 80011fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	f3bf 8f4f 	dsb	sy
 8001204:	f3bf 8f6f 	isb	sy
        while (CDC_Transmit_FS(data_source, size_to_send) != USBD_OK)
 8001208:	893b      	ldrh	r3, [r7, #8]
 800120a:	4619      	mov	r1, r3
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f00e fe6b 	bl	800fee8 <CDC_Transmit_FS>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1ef      	bne.n	80011f8 <USBFrameSendTask+0x4c>
        }

        ptr += size_to_send;
 8001218:	893b      	ldrh	r3, [r7, #8]
 800121a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121c:	4413      	add	r3, r2
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (ptr < FRAME_BUFFER_SIZE_BYTES)
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8001226:	d3d7      	bcc.n	80011d8 <USBFrameSendTask+0x2c>
    }

    // ⏱️ Stop timing
    uint32_t end = DWT->CYCCNT;
 8001228:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <USBFrameSendTask+0xf0>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	617b      	str	r3, [r7, #20]
    float time_ms = (end - start) / (SystemCoreClock / 1000.0f);
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <USBFrameSendTask+0x104>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001248:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80012b4 <USBFrameSendTask+0x108>
 800124c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001254:	edc7 7a04 	vstr	s15, [r7, #16]
    float speed_kbps = (FRAME_BUFFER_SIZE_BYTES / 1024.0f) / (time_ms / 1000.0f);
 8001258:	edd7 7a04 	vldr	s15, [r7, #16]
 800125c:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80012b4 <USBFrameSendTask+0x108>
 8001260:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001264:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80012b8 <USBFrameSendTask+0x10c>
 8001268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126c:	edc7 7a03 	vstr	s15, [r7, #12]

    printf("USB Transfer Complete. Time: %.2f ms, Speed: %.2f KB/s\r\n", time_ms, speed_kbps);
 8001270:	6938      	ldr	r0, [r7, #16]
 8001272:	f7ff f969 	bl	8000548 <__aeabi_f2d>
 8001276:	4604      	mov	r4, r0
 8001278:	460d      	mov	r5, r1
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff f964 	bl	8000548 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	e9cd 2300 	strd	r2, r3, [sp]
 8001288:	4622      	mov	r2, r4
 800128a:	462b      	mov	r3, r5
 800128c:	480b      	ldr	r0, [pc, #44]	@ (80012bc <USBFrameSendTask+0x110>)
 800128e:	f00f ff9f 	bl	80111d0 <iprintf>
}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bdb0      	pop	{r4, r5, r7, pc}
 800129a:	bf00      	nop
 800129c:	e0001000 	.word	0xe0001000
 80012a0:	080131cc 	.word	0x080131cc
 80012a4:	ffff9600 	.word	0xffff9600
 80012a8:	20000300 	.word	0x20000300
 80012ac:	e000ed04 	.word	0xe000ed04
 80012b0:	20000000 	.word	0x20000000
 80012b4:	447a0000 	.word	0x447a0000
 80012b8:	42160000 	.word	0x42160000
 80012bc:	080131d4 	.word	0x080131d4

080012c0 <My_DMA_HalfTransfer_Callback>:
  */
#include "main.h" // Or your relevant header

// This is called on DMA Half-Transfer Complete
void My_DMA_HalfTransfer_Callback(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]
	//printf("The DMA delta: %u\r\n",dmaTimestamp-DWT->CYCCNT);
	//HAL_DCMI_Stop(hdma);
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]

    // Notify bit 0 => half-frame
    vTaskNotifyGiveFromISR(xFrameTaskHandle, &xHigherPriorityTaskWoken);
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <My_DMA_HalfTransfer_Callback+0x50>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00c fc5e 	bl	800db98 <vTaskNotifyGiveFromISR>
    xTaskNotifyFromISR(xFrameTaskHandle,
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <My_DMA_HalfTransfer_Callback+0x50>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2300      	movs	r3, #0
 80012e8:	2201      	movs	r2, #1
 80012ea:	2101      	movs	r1, #1
 80012ec:	f00c fb76 	bl	800d9dc <xTaskGenericNotifyFromISR>
                       0x01,
                       eSetBits,
                       &xHigherPriorityTaskWoken);

    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <My_DMA_HalfTransfer_Callback+0x46>
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <My_DMA_HalfTransfer_Callback+0x54>)
 80012f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	f3bf 8f4f 	dsb	sy
 8001302:	f3bf 8f6f 	isb	sy
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20009b58 	.word	0x20009b58
 8001314:	e000ed04 	.word	0xe000ed04

08001318 <HAL_DCMI_VsyncEventCallback>:



void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af02      	add	r7, sp, #8
 800131e:	6078      	str	r0, [r7, #4]
    static TickType_t prev = 0;
    TickType_t now = xTaskGetTickCountFromISR();
 8001320:	f00b feea 	bl	800d0f8 <xTaskGetTickCountFromISR>
 8001324:	61f8      	str	r0, [r7, #28]
    TickType_t delta = now - prev;
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <HAL_DCMI_VsyncEventCallback+0x94>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	61bb      	str	r3, [r7, #24]
    prev = now;
 8001330:	4a1e      	ldr	r2, [pc, #120]	@ (80013ac <HAL_DCMI_VsyncEventCallback+0x94>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	6013      	str	r3, [r2, #0]

    float delta_ms = delta * portTICK_PERIOD_MS;
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001340:	edc7 7a05 	vstr	s15, [r7, #20]
    float fps = 1000.0f / delta_ms;
 8001344:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80013b0 <HAL_DCMI_VsyncEventCallback+0x98>
 8001348:	ed97 7a05 	vldr	s14, [r7, #20]
 800134c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001350:	edc7 7a04 	vstr	s15, [r7, #16]

    printf("Frame Interval: %.2f ms | FPS: %.2f\r\n", delta_ms, fps);
 8001354:	6978      	ldr	r0, [r7, #20]
 8001356:	f7ff f8f7 	bl	8000548 <__aeabi_f2d>
 800135a:	4604      	mov	r4, r0
 800135c:	460d      	mov	r5, r1
 800135e:	6938      	ldr	r0, [r7, #16]
 8001360:	f7ff f8f2 	bl	8000548 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	e9cd 2300 	strd	r2, r3, [sp]
 800136c:	4622      	mov	r2, r4
 800136e:	462b      	mov	r3, r5
 8001370:	4810      	ldr	r0, [pc, #64]	@ (80013b4 <HAL_DCMI_VsyncEventCallback+0x9c>)
 8001372:	f00f ff2d 	bl	80111d0 <iprintf>

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
   //HAL_DCMI_Stop(hdcmi);
    xTaskNotifyFromISR(xFrameTaskHandle,
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <HAL_DCMI_VsyncEventCallback+0xa0>)
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	2201      	movs	r2, #1
 8001388:	2102      	movs	r1, #2
 800138a:	f00c fb27 	bl	800d9dc <xTaskGenericNotifyFromISR>
                       0x02,
                       eSetBits,
                       &xHigherPriorityTaskWoken);

    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d007      	beq.n	80013a4 <HAL_DCMI_VsyncEventCallback+0x8c>
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_DCMI_VsyncEventCallback+0xa4>)
 8001396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	f3bf 8f6f 	isb	sy
}
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bdb0      	pop	{r4, r5, r7, pc}
 80013ac:	20009900 	.word	0x20009900
 80013b0:	447a0000 	.word	0x447a0000
 80013b4:	08013284 	.word	0x08013284
 80013b8:	20009b58 	.word	0x20009b58
 80013bc:	e000ed04 	.word	0xe000ed04

080013c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a07      	ldr	r2, [pc, #28]	@ (80013ec <vApplicationGetIdleTaskMemory+0x2c>)
 80013d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	4a06      	ldr	r2, [pc, #24]	@ (80013f0 <vApplicationGetIdleTaskMemory+0x30>)
 80013d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20009904 	.word	0x20009904
 80013f0:	20009958 	.word	0x20009958

080013f4 <FrameProcessTask>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void FrameProcessTask(void *parameters)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    uint32_t ulNotificationValue;
    const uint16_t chunk_size = 64; // USB FS MPS
 80013fc:	2340      	movs	r3, #64	@ 0x40
 80013fe:	82fb      	strh	r3, [r7, #22]
    uint32_t ptr = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
    for (;;)
    {
        // Wait for notification (blocks indefinitely)
        xTaskNotifyWait(0x00,    // Don't clear any bits on entry
 8001404:	f107 020c 	add.w	r2, r7, #12
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	2000      	movs	r0, #0
 8001412:	f00c fa89 	bl	800d928 <xTaskNotifyWait>
                        0xFFFFFFFF, // Clear all bits on exit
                        &ulNotificationValue,
                        portMAX_DELAY);

        if (ulNotificationValue & 0x01)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00a      	beq.n	8001436 <FrameProcessTask+0x42>
        {
            // Half-frame ready

        	printf("Half-frame ready\r\n");
 8001420:	480e      	ldr	r0, [pc, #56]	@ (800145c <FrameProcessTask+0x68>)
 8001422:	f00f ff3d 	bl	80112a0 <puts>
        	printf("DCMI DMA NDTR: %lu\r\n", (uint32_t)(hdma_dcmi.Instance->NDTR));
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <FrameProcessTask+0x6c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <FrameProcessTask+0x70>)
 8001430:	f00f fece 	bl	80111d0 <iprintf>
 8001434:	e7e6      	b.n	8001404 <FrameProcessTask+0x10>
            // Process &frame_buffer[0]
        }
        else if (ulNotificationValue & 0x02)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0e1      	beq.n	8001404 <FrameProcessTask+0x10>
        {
            // Full-frame ready
        	printf("DCMI DMA NDTR: %lu\r\n", (uint32_t)(hdma_dcmi.Instance->NDTR));
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <FrameProcessTask+0x6c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4619      	mov	r1, r3
 8001448:	4806      	ldr	r0, [pc, #24]	@ (8001464 <FrameProcessTask+0x70>)
 800144a:	f00f fec1 	bl	80111d0 <iprintf>
            printf("Full-frame ready\r\n");
 800144e:	4806      	ldr	r0, [pc, #24]	@ (8001468 <FrameProcessTask+0x74>)
 8001450:	f00f ff26 	bl	80112a0 <puts>
        	USBFrameSendTask();
 8001454:	f7ff feaa 	bl	80011ac <USBFrameSendTask>
        xTaskNotifyWait(0x00,    // Don't clear any bits on entry
 8001458:	e7d4      	b.n	8001404 <FrameProcessTask+0x10>
 800145a:	bf00      	nop
 800145c:	080132cc 	.word	0x080132cc
 8001460:	20009bac 	.word	0x20009bac
 8001464:	080132e0 	.word	0x080132e0
 8001468:	080132f8 	.word	0x080132f8

0800146c <DWT_Init>:
            // Process &frame_buffer[IMG_SIZE/2]
        }
    }
}
void DWT_Init(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
    // Enable the trace system (needed for DWT)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <DWT_Init+0x2c>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4a08      	ldr	r2, [pc, #32]	@ (8001498 <DWT_Init+0x2c>)
 8001476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800147a:	60d3      	str	r3, [r2, #12]

    // Reset the cycle counter
    DWT->CYCCNT = 0;
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <DWT_Init+0x30>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]

    // Enable the cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <DWT_Init+0x30>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <DWT_Init+0x30>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6013      	str	r3, [r2, #0]
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000edf0 	.word	0xe000edf0
 800149c:	e0001000 	.word	0xe0001000

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a6:	f000 ff4f 	bl	8002348 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 80014aa:	f7ff ffdf 	bl	800146c <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ae:	f000 f8c9 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b2:	f000 fa2f 	bl	8001914 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b6:	f000 f9fd 	bl	80018b4 <MX_DMA_Init>
  MX_DCMI_Init();
 80014ba:	f000 f937 	bl	800172c <MX_DCMI_Init>
  MX_I2C1_Init();
 80014be:	f000 f96d 	bl	800179c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80014c2:	f000 f9cd 	bl	8001860 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 80014c6:	f000 f997 	bl	80017f8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80014ca:	f009 fcc1 	bl	800ae50 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80014ce:	f00e fc4d 	bl	800fd6c <MX_USB_DEVICE_Init>

  printf("\r\n--- UART Test Only ---\r\n");
  printf("Clock, GPIO, and UART Initialized.\r\n");

*/
  xSystemEvents = xEventGroupCreate();
 80014d2:	f00a f8a3 	bl	800b61c <xEventGroupCreate>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a44      	ldr	r2, [pc, #272]	@ (80015ec <main+0x14c>)
 80014da:	6013      	str	r3, [r2, #0]
  xFrameChunkQueue = xQueueCreate(2, sizeof(FrameChunk_t));
 80014dc:	2200      	movs	r2, #0
 80014de:	2108      	movs	r1, #8
 80014e0:	2002      	movs	r0, #2
 80014e2:	f00a ff1a 	bl	800c31a <xQueueGenericCreate>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a41      	ldr	r2, [pc, #260]	@ (80015f0 <main+0x150>)
 80014ea:	6013      	str	r3, [r2, #0]
  xUSBCommandQueue = xQueueCreate(10, sizeof(USBCommand)); // Defined in usb_cdc_handler
 80014ec:	2200      	movs	r2, #0
 80014ee:	2103      	movs	r1, #3
 80014f0:	200a      	movs	r0, #10
 80014f2:	f00a ff12 	bl	800c31a <xQueueGenericCreate>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a3e      	ldr	r2, [pc, #248]	@ (80015f4 <main+0x154>)
 80014fa:	6013      	str	r3, [r2, #0]
  xI2CSemaphore = xSemaphoreCreateMutex();
 80014fc:	2001      	movs	r0, #1
 80014fe:	f00a ff80 	bl	800c402 <xQueueCreateMutex>
 8001502:	4603      	mov	r3, r0
 8001504:	4a3c      	ldr	r2, [pc, #240]	@ (80015f8 <main+0x158>)
 8001506:	6013      	str	r3, [r2, #0]

  if(xSystemEvents && xFrameChunkQueue && xUSBCommandQueue && xI2CSemaphore) {
 8001508:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <main+0x14c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00f      	beq.n	8001530 <main+0x90>
 8001510:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <main+0x150>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00b      	beq.n	8001530 <main+0x90>
 8001518:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <main+0x154>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <main+0x90>
 8001520:	4b35      	ldr	r3, [pc, #212]	@ (80015f8 <main+0x158>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <main+0x90>
      printf("RTOS objects created successfully.\r\n");
 8001528:	4834      	ldr	r0, [pc, #208]	@ (80015fc <main+0x15c>)
 800152a:	f00f feb9 	bl	80112a0 <puts>
 800152e:	e004      	b.n	800153a <main+0x9a>
  } else {
      printf("Error: Failed to create RTOS objects!\r\n");
 8001530:	4833      	ldr	r0, [pc, #204]	@ (8001600 <main+0x160>)
 8001532:	f00f feb5 	bl	80112a0 <puts>
      Error_Handler();
 8001536:	f000 fab5 	bl	8001aa4 <Error_Handler>
  }
	  if (HAL_I2C_IsDeviceReady(&hi2c1, OV7670_I2C_ADDR << 1, 3, 100) == HAL_OK) {
 800153a:	2364      	movs	r3, #100	@ 0x64
 800153c:	2203      	movs	r2, #3
 800153e:	2142      	movs	r1, #66	@ 0x42
 8001540:	4830      	ldr	r0, [pc, #192]	@ (8001604 <main+0x164>)
 8001542:	f003 fb63 	bl	8004c0c <HAL_I2C_IsDeviceReady>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <main+0xb4>
		  printf("OV7670 detected\r\n");
 800154c:	482e      	ldr	r0, [pc, #184]	@ (8001608 <main+0x168>)
 800154e:	f00f fea7 	bl	80112a0 <puts>
 8001552:	e002      	b.n	800155a <main+0xba>
	  } else {
		  printf("OV7670 not found\r\n");
 8001554:	482d      	ldr	r0, [pc, #180]	@ (800160c <main+0x16c>)
 8001556:	f00f fea3 	bl	80112a0 <puts>


    // --- Initialize camera ---
	//Test_OV7670_I2C_Communication();

    printf("Initializing OV7670 cameraaaa...\r\n");
 800155a:	482d      	ldr	r0, [pc, #180]	@ (8001610 <main+0x170>)
 800155c:	f00f fea0 	bl	80112a0 <puts>
    bool error = OV7670_init();
 8001560:	f7ff fd38 	bl	8000fd4 <OV7670_init>
 8001564:	4603      	mov	r3, r0
 8001566:	77fb      	strb	r3, [r7, #31]

    if(!error) {
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	f083 0301 	eor.w	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d010      	beq.n	8001596 <main+0xf6>
      printf("OV7670 Camera Initialized Successfully.\r\n");
 8001574:	4827      	ldr	r0, [pc, #156]	@ (8001614 <main+0x174>)
 8001576:	f00f fe93 	bl	80112a0 <puts>
  	  xEventGroupSetBits(xSystemEvents, CAMERA_READY);
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <main+0x14c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2102      	movs	r1, #2
 8001580:	4618      	mov	r0, r3
 8001582:	f00a f865 	bl	800b650 <xEventGroupSetBits>
        // NEW: Start DCMI DMA in circular mode. This happens only once.
        // The length is the total number of pixels, as DMA is configured for Half Word memory transfers.
  	//HAL_DCMI_RegisterCallback(&hdcmi,HAL_DCMI_FRAME_EVENT_CB_ID,My_DMA_HalfTransfer_Callback);
  	hdcmi.DMA_Handle->XferHalfCpltCallback = My_DMA_HalfTransfer_Callback;
 8001586:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <main+0x178>)
 8001588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158a:	4a24      	ldr	r2, [pc, #144]	@ (800161c <main+0x17c>)
 800158c:	641a      	str	r2, [r3, #64]	@ 0x40
  	//hdcmi.DMA_Handle->XferCpltCallback = My_DMA_FullTransfer_Callback;
  	//DCMI_Start_Capture();
        printf("DCMI DMA started in continuous mode.\r\n");
 800158e:	4824      	ldr	r0, [pc, #144]	@ (8001620 <main+0x180>)
 8001590:	f00f fe86 	bl	80112a0 <puts>
 8001594:	e004      	b.n	80015a0 <main+0x100>
    } else {
        printf("Error: OV7670 Camera Failed to Initialize!\r\n");
 8001596:	4823      	ldr	r0, [pc, #140]	@ (8001624 <main+0x184>)
 8001598:	f00f fe82 	bl	80112a0 <puts>
        Error_Handler(); // Camera failed
 800159c:	f000 fa82 	bl	8001aa4 <Error_Handler>
    }
    //sd_raw_test();
    // --- Create tasks ---
    printf("Creating RTOS tasks...\r\n");
 80015a0:	4821      	ldr	r0, [pc, #132]	@ (8001628 <main+0x188>)
 80015a2:	f00f fe7d 	bl	80112a0 <puts>

    // REMOVED: CameraTask is no longer needed with DMA circular mode.
    //xTaskCreate(USBFrameSendTask, "USB Frame TX", 512, NULL, 2, NULL);
    xTaskCreate(FrameProcessTask, "FrameProcess", 1024, NULL, 1, &xFrameTaskHandle);
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <main+0x18c>)
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	2301      	movs	r3, #1
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b4:	491e      	ldr	r1, [pc, #120]	@ (8001630 <main+0x190>)
 80015b6:	481f      	ldr	r0, [pc, #124]	@ (8001634 <main+0x194>)
 80015b8:	f00b fb12 	bl	800cbe0 <xTaskCreate>
    //xTaskCreate(sd_raw_test, "SDTest", 2048, NULL, tskIDLE_PRIORITY + 2, &xSDTaskHandle);
    // Default task for USB is created by CubeMX, we don't need to add it again.
    printf("Tasks created.\r\n");
 80015bc:	481e      	ldr	r0, [pc, #120]	@ (8001638 <main+0x198>)
 80015be:	f00f fe6f 	bl	80112a0 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80015c2:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <main+0x19c>)
 80015c4:	463c      	mov	r4, r7
 80015c6:	461d      	mov	r5, r3
 80015c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015d4:	463b      	mov	r3, r7
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f009 ff23 	bl	800b424 <osThreadCreate>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <main+0x1a0>)
 80015e2:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015e4:	f009 fefb 	bl	800b3de <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <main+0x148>
 80015ec:	20009b5c 	.word	0x20009b5c
 80015f0:	20009b60 	.word	0x20009b60
 80015f4:	20009b64 	.word	0x20009b64
 80015f8:	20009b68 	.word	0x20009b68
 80015fc:	0801330c 	.word	0x0801330c
 8001600:	08013330 	.word	0x08013330
 8001604:	20009c0c 	.word	0x20009c0c
 8001608:	08013358 	.word	0x08013358
 800160c:	0801336c 	.word	0x0801336c
 8001610:	08013380 	.word	0x08013380
 8001614:	080133a4 	.word	0x080133a4
 8001618:	20009b6c 	.word	0x20009b6c
 800161c:	080012c1 	.word	0x080012c1
 8001620:	080133d0 	.word	0x080133d0
 8001624:	080133f8 	.word	0x080133f8
 8001628:	08013424 	.word	0x08013424
 800162c:	20009b58 	.word	0x20009b58
 8001630:	0801343c 	.word	0x0801343c
 8001634:	080013f5 	.word	0x080013f5
 8001638:	0801344c 	.word	0x0801344c
 800163c:	08013468 	.word	0x08013468
 8001640:	20009dec 	.word	0x20009dec

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	@ 0x50
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	2230      	movs	r2, #48	@ 0x30
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00f ff04 	bl	8011460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <SystemClock_Config+0xe0>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	4a2c      	ldr	r2, [pc, #176]	@ (8001724 <SystemClock_Config+0xe0>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	@ 0x40
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <SystemClock_Config+0xe0>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <SystemClock_Config+0xe4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <SystemClock_Config+0xe4>)
 800168e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <SystemClock_Config+0xe4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016aa:	2301      	movs	r3, #1
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ae:	2310      	movs	r3, #16
 80016b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2302      	movs	r3, #2
 80016b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016bc:	2304      	movs	r3, #4
 80016be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016c0:	23a8      	movs	r3, #168	@ 0xa8
 80016c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016c8:	2307      	movs	r3, #7
 80016ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fe95 	bl	8006400 <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016dc:	f000 f9e2 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e0:	230f      	movs	r3, #15
 80016e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e4:	2302      	movs	r3, #2
 80016e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2105      	movs	r1, #5
 80016fe:	4618      	mov	r0, r3
 8001700:	f005 f8f6 	bl	80068f0 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800170a:	f000 f9cb 	bl	8001aa4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2000      	movs	r0, #0
 8001714:	f005 f9d2 	bl	8006abc <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001718:	f005 fa38 	bl	8006b8c <HAL_RCC_EnableCSS>
}
 800171c:	bf00      	nop
 800171e:	3750      	adds	r7, #80	@ 0x50
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000

0800172c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af02      	add	r7, sp, #8
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <MX_DCMI_Init+0x68>)
 8001734:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <MX_DCMI_Init+0x6c>)
 8001736:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <MX_DCMI_Init+0x68>)
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <MX_DCMI_Init+0x68>)
 8001740:	2220      	movs	r2, #32
 8001742:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <MX_DCMI_Init+0x68>)
 8001746:	2280      	movs	r2, #128	@ 0x80
 8001748:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_DCMI_Init+0x68>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001750:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <MX_DCMI_Init+0x68>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_DCMI_Init+0x68>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <MX_DCMI_Init+0x68>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001762:	480c      	ldr	r0, [pc, #48]	@ (8001794 <MX_DCMI_Init+0x68>)
 8001764:	f001 f9c7 	bl	8002af6 <HAL_DCMI_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_DCMI_Init+0x46>
  {
    Error_Handler();
 800176e:	f000 f999 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */
  if (HAL_DCMI_ConfigCROP(&hdcmi, 0, 0, IMG_COLUMNS*2, IMG_ROWS) != HAL_OK)
 8001772:	2378      	movs	r3, #120	@ 0x78
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <MX_DCMI_Init+0x68>)
 8001780:	f001 f8da 	bl	8002938 <HAL_DCMI_ConfigCrop>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_DCMI_Init+0x62>
  {
      Error_Handler();
 800178a:	f000 f98b 	bl	8001aa4 <Error_Handler>
  }
  //HAL_DCMI_EnableCROP(&hdcmi);
  /* USER CODE END DCMI_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20009b6c 	.word	0x20009b6c
 8001798:	50050000 	.word	0x50050000

0800179c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <MX_I2C1_Init+0x54>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017a8:	4a12      	ldr	r2, [pc, #72]	@ (80017f4 <MX_I2C1_Init+0x58>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017da:	f003 f8d3 	bl	8004984 <HAL_I2C_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017e4:	f000 f95e 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20009c0c 	.word	0x20009c0c
 80017f0:	40005400 	.word	0x40005400
 80017f4:	000186a0 	.word	0x000186a0

080017f8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 80017fe:	4a17      	ldr	r2, [pc, #92]	@ (800185c <MX_SDIO_SD_Init+0x64>)
 8001800:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8001814:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 8001816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800181a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800181c:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001822:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  if (HAL_SD_Init(&hsd) != HAL_OK) {
 800182e:	480a      	ldr	r0, [pc, #40]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 8001830:	f005 fb0d 	bl	8006e4e <HAL_SD_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_SDIO_SD_Init+0x46>
      Error_Handler();
 800183a:	f000 f933 	bl	8001aa4 <Error_Handler>
  }

  // Now we can switch to 4 bit mode
 if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 800183e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_SDIO_SD_Init+0x60>)
 8001844:	f006 f8d4 	bl	80079f0 <HAL_SD_ConfigWideBusOperation>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_SDIO_SD_Init+0x5a>
      Error_Handler();
 800184e:	f000 f929 	bl	8001aa4 <Error_Handler>
 }

  /* USER CODE END SDIO_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20009c60 	.word	0x20009c60
 800185c:	40012c00 	.word	0x40012c00

08001860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_USART2_UART_Init+0x4c>)
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <MX_USART2_UART_Init+0x50>)
 8001868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <MX_USART2_UART_Init+0x4c>)
 800186c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <MX_USART2_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <MX_USART2_UART_Init+0x4c>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <MX_USART2_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <MX_USART2_UART_Init+0x4c>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <MX_USART2_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MX_USART2_UART_Init+0x4c>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_USART2_UART_Init+0x4c>)
 8001898:	f006 fe0c 	bl	80084b4 <HAL_UART_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018a2:	f000 f8ff 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20009da4 	.word	0x20009da4
 80018b0:	40004400 	.word	0x40004400

080018b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <MX_DMA_Init+0x5c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <MX_DMA_Init+0x5c>)
 80018c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_DMA_Init+0x5c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2105      	movs	r1, #5
 80018da:	2039      	movs	r0, #57	@ 0x39
 80018dc:	f000 fea5 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80018e0:	2039      	movs	r0, #57	@ 0x39
 80018e2:	f000 febe 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2105      	movs	r1, #5
 80018ea:	203b      	movs	r0, #59	@ 0x3b
 80018ec:	f000 fe9d 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80018f0:	203b      	movs	r0, #59	@ 0x3b
 80018f2:	f000 feb6 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2105      	movs	r1, #5
 80018fa:	2045      	movs	r0, #69	@ 0x45
 80018fc:	f000 fe95 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001900:	2045      	movs	r0, #69	@ 0x45
 8001902:	f000 feae 	bl	8002662 <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	@ 0x30
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a28 <MX_GPIO_Init+0x114>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a3d      	ldr	r2, [pc, #244]	@ (8001a28 <MX_GPIO_Init+0x114>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a28 <MX_GPIO_Init+0x114>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	4b37      	ldr	r3, [pc, #220]	@ (8001a28 <MX_GPIO_Init+0x114>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a36      	ldr	r2, [pc, #216]	@ (8001a28 <MX_GPIO_Init+0x114>)
 8001950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b34      	ldr	r3, [pc, #208]	@ (8001a28 <MX_GPIO_Init+0x114>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b30      	ldr	r3, [pc, #192]	@ (8001a28 <MX_GPIO_Init+0x114>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a28 <MX_GPIO_Init+0x114>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b2d      	ldr	r3, [pc, #180]	@ (8001a28 <MX_GPIO_Init+0x114>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <MX_GPIO_Init+0x114>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a28      	ldr	r2, [pc, #160]	@ (8001a28 <MX_GPIO_Init+0x114>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b26      	ldr	r3, [pc, #152]	@ (8001a28 <MX_GPIO_Init+0x114>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b22      	ldr	r3, [pc, #136]	@ (8001a28 <MX_GPIO_Init+0x114>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <MX_GPIO_Init+0x114>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <MX_GPIO_Init+0x114>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <MX_GPIO_Init+0x114>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a1a      	ldr	r2, [pc, #104]	@ (8001a28 <MX_GPIO_Init+0x114>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <MX_GPIO_Init+0x114>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4811      	ldr	r0, [pc, #68]	@ (8001a2c <MX_GPIO_Init+0x118>)
 80019e8:	f002 fe18 	bl	800461c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	4808      	ldr	r0, [pc, #32]	@ (8001a2c <MX_GPIO_Init+0x118>)
 8001a0a:	f002 fe07 	bl	800461c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2105      	movs	r1, #5
 8001a12:	2006      	movs	r0, #6
 8001a14:	f000 fe09 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a18:	2006      	movs	r0, #6
 8001a1a:	f000 fe22 	bl	8002662 <HAL_NVIC_EnableIRQ>

  // NOTE: UART GPIO init is handled by HAL_UART_MspInit in stm32f4xx_hal_msp.c
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a1e:	bf00      	nop
 8001a20:	3730      	adds	r7, #48	@ 0x30
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000

08001a30 <EXTI0_IRQHandler>:
/* USER CODE BEGIN 4 */



void EXTI0_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  // This HAL function will clear the interrupt flag and call the user callback below
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f002 ff8d 	bl	8004954 <HAL_GPIO_EXTI_IRQHandler>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
    // Make sure it's the correct pin that triggered the interrupt
    if (GPIO_Pin == GPIO_PIN_0) // Or your camera's VSYNC pin
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d113      	bne.n	8001a78 <HAL_GPIO_EXTI_Callback+0x38>
    {
        // Only start a new capture if the DCMI is in the READY state.
        // This prevents trying to start a capture while another is in progress.
        if (hdcmi.State == HAL_DCMI_STATE_READY)
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d10d      	bne.n	8001a78 <HAL_GPIO_EXTI_Callback+0x38>
        {
            uint32_t transfer_length_in_words = (IMG_ROWS * IMG_COLUMNS)/2;
 8001a5c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001a60:	60fb      	str	r3, [r7, #12]
            // Start the DMA transfer. This is a non-blocking call.
            // The function will return immediately.
            if (HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT,frame_buffer, transfer_length_in_words) != HAL_OK)
 8001a62:	4a08      	ldr	r2, [pc, #32]	@ (8001a84 <HAL_GPIO_EXTI_Callback+0x44>)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2102      	movs	r1, #2
 8001a68:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a6a:	f000 fe15 	bl	8002698 <HAL_DCMI_Start_DMA>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_GPIO_EXTI_Callback+0x38>
            {
                // If starting fails, handle the error.
                Error_Handler();
 8001a74:	f000 f816 	bl	8001aa4 <Error_Handler>
            }
        }
    }

}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20009b6c 	.word	0x20009b6c
 8001a84:	20000300 	.word	0x20000300

08001a88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;){
	 //printf("DCMI DMA NDTR: %lu\r\n", (uint32_t)(hdma_dcmi.Instance->NDTR));
	vTaskDelay(pdMS_TO_TICKS(1000));
 8001a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a94:	f00b f9dc 	bl	800ce50 <vTaskDelay>
    osDelay(1);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f009 fd0f 	bl	800b4bc <osDelay>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8001a9e:	bf00      	nop
 8001aa0:	e7f6      	b.n	8001a90 <StartDefaultTask+0x8>
	...

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("\r\n!!! SYSTEM ERROR !!!\r\nEntering Error_Handler...\r\n");
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <Error_Handler+0x14>)
 8001aaa:	f00f fbf9 	bl	80112a0 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aae:	b672      	cpsid	i
}
 8001ab0:	bf00      	nop
  __disable_irq();
  while (1)
 8001ab2:	bf00      	nop
 8001ab4:	e7fd      	b.n	8001ab2 <Error_Handler+0xe>
 8001ab6:	bf00      	nop
 8001ab8:	08013484 	.word	0x08013484

08001abc <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001ac4:	1d39      	adds	r1, r7, #4
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	2201      	movs	r2, #1
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <__io_putchar+0x20>)
 8001ace:	f006 fd41 	bl	8008554 <HAL_UART_Transmit>
    return ch;
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20009da4 	.word	0x20009da4

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_MspInit+0x54>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <HAL_MspInit+0x54>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_MspInit+0x54>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_MspInit+0x54>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_MspInit+0x54>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b12:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_MspInit+0x54>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	210f      	movs	r1, #15
 8001b22:	f06f 0001 	mvn.w	r0, #1
 8001b26:	f000 fd80 	bl	800262a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	@ 0x30
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a77      	ldr	r2, [pc, #476]	@ (8001d34 <HAL_DCMI_MspInit+0x1fc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	f040 80e8 	bne.w	8001d2c <HAL_DCMI_MspInit+0x1f4>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
 8001b60:	4b75      	ldr	r3, [pc, #468]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b64:	4a74      	ldr	r2, [pc, #464]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b6c:	4b72      	ldr	r3, [pc, #456]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	4a6d      	ldr	r2, [pc, #436]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b88:	4b6b      	ldr	r3, [pc, #428]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	4b67      	ldr	r3, [pc, #412]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	4a66      	ldr	r2, [pc, #408]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba4:	4b64      	ldr	r3, [pc, #400]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	4b60      	ldr	r3, [pc, #384]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bdc:	4b56      	ldr	r3, [pc, #344]	@ (8001d38 <HAL_DCMI_MspInit+0x200>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001be8:	2373      	movs	r3, #115	@ 0x73
 8001bea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bf8:	230d      	movs	r3, #13
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	484e      	ldr	r0, [pc, #312]	@ (8001d3c <HAL_DCMI_MspInit+0x204>)
 8001c04:	f002 fd0a 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c08:	2310      	movs	r3, #16
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c18:	230d      	movs	r3, #13
 8001c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	4847      	ldr	r0, [pc, #284]	@ (8001d40 <HAL_DCMI_MspInit+0x208>)
 8001c24:	f002 fcfa 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c28:	2340      	movs	r3, #64	@ 0x40
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c30:	2302      	movs	r3, #2
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c38:	230d      	movs	r3, #13
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	483f      	ldr	r0, [pc, #252]	@ (8001d40 <HAL_DCMI_MspInit+0x208>)
 8001c44:	f002 fcea 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c48:	23c0      	movs	r3, #192	@ 0xc0
 8001c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c50:	2302      	movs	r3, #2
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c58:	230d      	movs	r3, #13
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4619      	mov	r1, r3
 8001c62:	4838      	ldr	r0, [pc, #224]	@ (8001d44 <HAL_DCMI_MspInit+0x20c>)
 8001c64:	f002 fcda 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c68:	2340      	movs	r3, #64	@ 0x40
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c78:	230d      	movs	r3, #13
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4831      	ldr	r0, [pc, #196]	@ (8001d48 <HAL_DCMI_MspInit+0x210>)
 8001c84:	f002 fcca 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c90:	2302      	movs	r3, #2
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c98:	230d      	movs	r3, #13
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4829      	ldr	r0, [pc, #164]	@ (8001d48 <HAL_DCMI_MspInit+0x210>)
 8001ca4:	f002 fcba 	bl	800461c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001ca8:	4b28      	ldr	r3, [pc, #160]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001caa:	4a29      	ldr	r2, [pc, #164]	@ (8001d50 <HAL_DCMI_MspInit+0x218>)
 8001cac:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001cae:	4b27      	ldr	r3, [pc, #156]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cb4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb6:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cbc:	4b23      	ldr	r3, [pc, #140]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cc8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001ccc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cd0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cd4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cd8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001ce2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ce6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cea:	2204      	movs	r2, #4
 8001cec:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001d00:	4812      	ldr	r0, [pc, #72]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001d02:	f000 ff65 	bl	8002bd0 <HAL_DMA_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_DCMI_MspInit+0x1d8>
    {
      Error_Handler();
 8001d0c:	f7ff feca 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001d14:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d16:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_DCMI_MspInit+0x214>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2105      	movs	r1, #5
 8001d20:	204e      	movs	r0, #78	@ 0x4e
 8001d22:	f000 fc82 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001d26:	204e      	movs	r0, #78	@ 0x4e
 8001d28:	f000 fc9b 	bl	8002662 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	@ 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	50050000 	.word	0x50050000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	20009bac 	.word	0x20009bac
 8001d50:	40026428 	.word	0x40026428

08001d54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_I2C_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12c      	bne.n	8001dd0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a17      	ldr	r2, [pc, #92]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d98:	2312      	movs	r3, #18
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da4:	2304      	movs	r3, #4
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <HAL_I2C_MspInit+0x8c>)
 8001db0:	f002 fc34 	bl	800461c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400

08001de4 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a71      	ldr	r2, [pc, #452]	@ (8001fc8 <HAL_SD_MspInit+0x1e4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	f040 80dc 	bne.w	8001fc0 <HAL_SD_MspInit+0x1dc>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001fcc <HAL_SD_MspInit+0x1e8>)
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e10:	4a6e      	ldr	r2, [pc, #440]	@ (8001fcc <HAL_SD_MspInit+0x1e8>)
 8001e12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e16:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e18:	4b6c      	ldr	r3, [pc, #432]	@ (8001fcc <HAL_SD_MspInit+0x1e8>)
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	4b68      	ldr	r3, [pc, #416]	@ (8001fcc <HAL_SD_MspInit+0x1e8>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	4a67      	ldr	r2, [pc, #412]	@ (8001fcc <HAL_SD_MspInit+0x1e8>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e34:	4b65      	ldr	r3, [pc, #404]	@ (8001fcc <HAL_SD_MspInit+0x1e8>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	4b61      	ldr	r3, [pc, #388]	@ (8001fcc <HAL_SD_MspInit+0x1e8>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	4a60      	ldr	r2, [pc, #384]	@ (8001fcc <HAL_SD_MspInit+0x1e8>)
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e50:	4b5e      	ldr	r3, [pc, #376]	@ (8001fcc <HAL_SD_MspInit+0x1e8>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001e5c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e6e:	230c      	movs	r3, #12
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4855      	ldr	r0, [pc, #340]	@ (8001fd0 <HAL_SD_MspInit+0x1ec>)
 8001e7a:	f002 fbcf 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e90:	230c      	movs	r3, #12
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	484d      	ldr	r0, [pc, #308]	@ (8001fd0 <HAL_SD_MspInit+0x1ec>)
 8001e9c:	f002 fbbe 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4846      	ldr	r0, [pc, #280]	@ (8001fd4 <HAL_SD_MspInit+0x1f0>)
 8001ebc:	f002 fbae 	bl	800461c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001ec0:	4b45      	ldr	r3, [pc, #276]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001ec2:	4a46      	ldr	r2, [pc, #280]	@ (8001fdc <HAL_SD_MspInit+0x1f8>)
 8001ec4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001ec6:	4b44      	ldr	r3, [pc, #272]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001ec8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ecc:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ece:	4b42      	ldr	r3, [pc, #264]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed4:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eda:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001edc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ee0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001ee4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eea:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001eec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ef0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001ef2:	4b39      	ldr	r3, [pc, #228]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ef8:	4b37      	ldr	r3, [pc, #220]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001efa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001efe:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f00:	4b35      	ldr	r3, [pc, #212]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001f02:	2204      	movs	r2, #4
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f06:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001f08:	2203      	movs	r2, #3
 8001f0a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001f0c:	4b32      	ldr	r3, [pc, #200]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001f0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f14:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001f16:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001f1c:	482e      	ldr	r0, [pc, #184]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001f1e:	f000 fe57 	bl	8002bd0 <HAL_DMA_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_SD_MspInit+0x148>
    {
      Error_Handler();
 8001f28:	f7ff fdbc 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001f30:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f32:	4a29      	ldr	r2, [pc, #164]	@ (8001fd8 <HAL_SD_MspInit+0x1f4>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001f38:	4b29      	ldr	r3, [pc, #164]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe4 <HAL_SD_MspInit+0x200>)
 8001f3c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001f3e:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f44:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f46:	4b26      	ldr	r3, [pc, #152]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f48:	2240      	movs	r2, #64	@ 0x40
 8001f4a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f52:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f58:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f60:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f62:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f68:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f72:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f76:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f7e:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f80:	2203      	movs	r2, #3
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001f84:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f8e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001f94:	4812      	ldr	r0, [pc, #72]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001f96:	f000 fe1b 	bl	8002bd0 <HAL_DMA_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_SD_MspInit+0x1c0>
    {
      Error_Handler();
 8001fa0:	f7ff fd80 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001fa8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001faa:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <HAL_SD_MspInit+0x1fc>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2105      	movs	r1, #5
 8001fb4:	2031      	movs	r0, #49	@ 0x31
 8001fb6:	f000 fb38 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001fba:	2031      	movs	r0, #49	@ 0x31
 8001fbc:	f000 fb51 	bl	8002662 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3728      	adds	r7, #40	@ 0x28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	20009ce4 	.word	0x20009ce4
 8001fdc:	40026458 	.word	0x40026458
 8001fe0:	20009d44 	.word	0x20009d44
 8001fe4:	400264a0 	.word	0x400264a0

08001fe8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_UART_MspInit+0x84>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12b      	bne.n	8002062 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_UART_MspInit+0x88>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	4a17      	ldr	r2, [pc, #92]	@ (8002070 <HAL_UART_MspInit+0x88>)
 8002014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_UART_MspInit+0x88>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_UART_MspInit+0x88>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a10      	ldr	r2, [pc, #64]	@ (8002070 <HAL_UART_MspInit+0x88>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <HAL_UART_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002042:	230c      	movs	r3, #12
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002052:	2307      	movs	r3, #7
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	@ (8002074 <HAL_UART_MspInit+0x8c>)
 800205e:	f002 fadd 	bl	800461c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	@ 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40004400 	.word	0x40004400
 8002070:	40023800 	.word	0x40023800
 8002074:	40020000 	.word	0x40020000

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800207c:	f004 fecc 	bl	8006e18 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <NMI_Handler+0x8>

08002084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <MemManage_Handler+0x4>

08002094 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <BusFault_Handler+0x4>

0800209c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <UsageFault_Handler+0x4>

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b6:	f000 f999 	bl	80023ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020ba:	f00b fb8f 	bl	800d7dc <xTaskGetSchedulerState>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d001      	beq.n	80020c8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020c4:	f009 ffb0 	bl	800c028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <SDIO_IRQHandler+0x10>)
 80020d2:	f005 f92d 	bl	8007330 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20009c60 	.word	0x20009c60

080020e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <DMA2_Stream1_IRQHandler+0x10>)
 80020e6:	f000 fe9b 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20009bac 	.word	0x20009bac

080020f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <DMA2_Stream3_IRQHandler+0x10>)
 80020fa:	f000 fe91 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20009ce4 	.word	0x20009ce4

08002108 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800210c:	4802      	ldr	r0, [pc, #8]	@ (8002118 <OTG_FS_IRQHandler+0x10>)
 800210e:	f003 f869 	bl	80051e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000f044 	.word	0x2000f044

0800211c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <DMA2_Stream6_IRQHandler+0x10>)
 8002122:	f000 fe7d 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20009d44 	.word	0x20009d44

08002130 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002134:	4802      	ldr	r0, [pc, #8]	@ (8002140 <DCMI_IRQHandler+0x10>)
 8002136:	f000 fb53 	bl	80027e0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20009b6c 	.word	0x20009b6c

08002144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return 1;
 8002148:	2301      	movs	r3, #1
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_kill>:

int _kill(int pid, int sig)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800215e:	f00f f9d1 	bl	8011504 <__errno>
 8002162:	4603      	mov	r3, r0
 8002164:	2216      	movs	r2, #22
 8002166:	601a      	str	r2, [r3, #0]
  return -1;
 8002168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_exit>:

void _exit (int status)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ffe7 	bl	8002154 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002186:	bf00      	nop
 8002188:	e7fd      	b.n	8002186 <_exit+0x12>

0800218a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e00a      	b.n	80021b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800219c:	f3af 8000 	nop.w
 80021a0:	4601      	mov	r1, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	60ba      	str	r2, [r7, #8]
 80021a8:	b2ca      	uxtb	r2, r1
 80021aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	3301      	adds	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	dbf0      	blt.n	800219c <_read+0x12>
  }

  return len;
 80021ba:	687b      	ldr	r3, [r7, #4]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	e009      	b.n	80021ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	60ba      	str	r2, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fc6c 	bl	8001abc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3301      	adds	r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	dbf1      	blt.n	80021d6 <_write+0x12>
  }
  return len;
 80021f2:	687b      	ldr	r3, [r7, #4]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_close>:

int _close(int file)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002224:	605a      	str	r2, [r3, #4]
  return 0;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_isatty>:

int _isatty(int file)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800223c:	2301      	movs	r3, #1
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800226c:	4a14      	ldr	r2, [pc, #80]	@ (80022c0 <_sbrk+0x5c>)
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <_sbrk+0x60>)
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002278:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <_sbrk+0x64>)
 8002282:	4a12      	ldr	r2, [pc, #72]	@ (80022cc <_sbrk+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <_sbrk+0x64>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	d207      	bcs.n	80022a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002294:	f00f f936 	bl	8011504 <__errno>
 8002298:	4603      	mov	r3, r0
 800229a:	220c      	movs	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	e009      	b.n	80022b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <_sbrk+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <_sbrk+0x64>)
 80022b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20020000 	.word	0x20020000
 80022c4:	00000400 	.word	0x00000400
 80022c8:	20009df0 	.word	0x20009df0
 80022cc:	2000f898 	.word	0x2000f898

080022d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <SystemInit+0x20>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	4a05      	ldr	r2, [pc, #20]	@ (80022f0 <SystemInit+0x20>)
 80022dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800232c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022f8:	f7ff ffea 	bl	80022d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022fc:	480c      	ldr	r0, [pc, #48]	@ (8002330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022fe:	490d      	ldr	r1, [pc, #52]	@ (8002334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002300:	4a0d      	ldr	r2, [pc, #52]	@ (8002338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002304:	e002      	b.n	800230c <LoopCopyDataInit>

08002306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230a:	3304      	adds	r3, #4

0800230c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800230c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002310:	d3f9      	bcc.n	8002306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002314:	4c0a      	ldr	r4, [pc, #40]	@ (8002340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002318:	e001      	b.n	800231e <LoopFillZerobss>

0800231a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800231c:	3204      	adds	r2, #4

0800231e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002320:	d3fb      	bcc.n	800231a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002322:	f00f f8f5 	bl	8011510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002326:	f7ff f8bb 	bl	80014a0 <main>
  bx  lr    
 800232a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800232c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002334:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8002338:	08013984 	.word	0x08013984
  ldr r2, =_sbss
 800233c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8002340:	2000f894 	.word	0x2000f894

08002344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002344:	e7fe      	b.n	8002344 <ADC_IRQHandler>
	...

08002348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800234c:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <HAL_Init+0x40>)
 8002352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002358:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_Init+0x40>)
 800235e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002364:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a07      	ldr	r2, [pc, #28]	@ (8002388 <HAL_Init+0x40>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002370:	2003      	movs	r0, #3
 8002372:	f000 f94f 	bl	8002614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002376:	200f      	movs	r0, #15
 8002378:	f000 f808 	bl	800238c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800237c:	f7ff fbb0 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023c00 	.word	0x40023c00

0800238c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002394:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <HAL_InitTick+0x54>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_InitTick+0x58>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f967 	bl	800267e <HAL_SYSTICK_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00e      	b.n	80023d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b0f      	cmp	r3, #15
 80023be:	d80a      	bhi.n	80023d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c0:	2200      	movs	r2, #0
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f000 f92f 	bl	800262a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023cc:	4a06      	ldr	r2, [pc, #24]	@ (80023e8 <HAL_InitTick+0x5c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000008 	.word	0x20000008
 80023e8:	20000004 	.word	0x20000004

080023ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_IncTick+0x20>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_IncTick+0x24>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <HAL_IncTick+0x24>)
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000008 	.word	0x20000008
 8002410:	20009df4 	.word	0x20009df4

08002414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return uwTick;
 8002418:	4b03      	ldr	r3, [pc, #12]	@ (8002428 <HAL_GetTick+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20009df4 	.word	0x20009df4

0800242c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff ffee 	bl	8002414 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d005      	beq.n	8002452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_Delay+0x44>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002452:	bf00      	nop
 8002454:	f7ff ffde 	bl	8002414 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d8f7      	bhi.n	8002454 <HAL_Delay+0x28>
  {
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000008 	.word	0x20000008

08002474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800249c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a6:	4a04      	ldr	r2, [pc, #16]	@ (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60d3      	str	r3, [r2, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c0:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <__NVIC_GetPriorityGrouping+0x18>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 0307 	and.w	r3, r3, #7
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db0b      	blt.n	8002502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4907      	ldr	r1, [pc, #28]	@ (8002510 <__NVIC_EnableIRQ+0x38>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2001      	movs	r0, #1
 80024fa:	fa00 f202 	lsl.w	r2, r0, r2
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e100 	.word	0xe000e100

08002514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db0a      	blt.n	800253e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	490c      	ldr	r1, [pc, #48]	@ (8002560 <__NVIC_SetPriority+0x4c>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	440b      	add	r3, r1
 8002538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800253c:	e00a      	b.n	8002554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4908      	ldr	r1, [pc, #32]	@ (8002564 <__NVIC_SetPriority+0x50>)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3b04      	subs	r3, #4
 800254c:	0112      	lsls	r2, r2, #4
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	440b      	add	r3, r1
 8002552:	761a      	strb	r2, [r3, #24]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000e100 	.word	0xe000e100
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	@ 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f1c3 0307 	rsb	r3, r3, #7
 8002582:	2b04      	cmp	r3, #4
 8002584:	bf28      	it	cs
 8002586:	2304      	movcs	r3, #4
 8002588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3304      	adds	r3, #4
 800258e:	2b06      	cmp	r3, #6
 8002590:	d902      	bls.n	8002598 <NVIC_EncodePriority+0x30>
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3b03      	subs	r3, #3
 8002596:	e000      	b.n	800259a <NVIC_EncodePriority+0x32>
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	f04f 32ff 	mov.w	r2, #4294967295
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43d9      	mvns	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	4313      	orrs	r3, r2
         );
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	@ 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e0:	d301      	bcc.n	80025e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00f      	b.n	8002606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <SysTick_Config+0x40>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ee:	210f      	movs	r1, #15
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f7ff ff8e 	bl	8002514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f8:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <SysTick_Config+0x40>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fe:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <SysTick_Config+0x40>)
 8002600:	2207      	movs	r2, #7
 8002602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff29 	bl	8002474 <__NVIC_SetPriorityGrouping>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800263c:	f7ff ff3e 	bl	80024bc <__NVIC_GetPriorityGrouping>
 8002640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	6978      	ldr	r0, [r7, #20]
 8002648:	f7ff ff8e 	bl	8002568 <NVIC_EncodePriority>
 800264c:	4602      	mov	r2, r0
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff5d 	bl	8002514 <__NVIC_SetPriority>
}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff31 	bl	80024d8 <__NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffa2 	bl	80025d0 <SysTick_Config>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_DCMI_Start_DMA+0x20>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e08a      	b.n	80027ce <HAL_DCMI_Start_DMA+0x136>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026d6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0202 	bic.w	r2, r2, #2
 80026e6:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6819      	ldr	r1, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fc:	4a36      	ldr	r2, [pc, #216]	@ (80027d8 <HAL_DCMI_Start_DMA+0x140>)
 80026fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	4a35      	ldr	r2, [pc, #212]	@ (80027dc <HAL_DCMI_Start_DMA+0x144>)
 8002706:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270c:	2200      	movs	r2, #0
 800270e:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi->XferTransferNumber = 0U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30

  if(Length <= 0xFFFFU)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002722:	d20c      	bcs.n	800273e <HAL_DCMI_Start_DMA+0xa6>
  {
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3328      	adds	r3, #40	@ 0x28
 800272e:	4619      	mov	r1, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	f000 fafa 	bl	8002d2c <HAL_DMA_Start_IT>
 8002738:	4603      	mov	r3, r0
 800273a:	75fb      	strb	r3, [r7, #23]
 800273c:	e03a      	b.n	80027b4 <HAL_DCMI_Start_DMA+0x11c>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002742:	4a25      	ldr	r2, [pc, #148]	@ (80027d8 <HAL_DCMI_Start_DMA+0x140>)
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferSize = Length;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdcmi->pBuffPtr = pData;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8002758:	e009      	b.n	800276e <HAL_DCMI_Start_DMA+0xd6>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	085a      	lsrs	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	62da      	str	r2, [r3, #44]	@ 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	005a      	lsls	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	629a      	str	r2, [r3, #40]	@ 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002776:	d2f0      	bcs.n	800275a <HAL_DCMI_Start_DMA+0xc2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	1e9a      	subs	r2, r3, #2
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	613b      	str	r3, [r7, #16]

    /* Start DMA multi buffer transfer */
    status = HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3328      	adds	r3, #40	@ 0x28
 80027a0:	4619      	mov	r1, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	f000 fdae 	bl	800330c <HAL_DMAEx_MultiBufferStart_IT>
 80027b0:	4603      	mov	r3, r0
 80027b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return status;
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	0800299f 	.word	0x0800299f
 80027dc:	08002ac9 	.word	0x08002ac9

080027e0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01e      	beq.n	8002838 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2204      	movs	r2, #4
 8002800:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002806:	f043 0202 	orr.w	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2204      	movs	r2, #4
 8002812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281a:	4a37      	ldr	r2, [pc, #220]	@ (80028f8 <HAL_DCMI_IRQHandler+0x118>)
 800281c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fada 	bl	8002ddc <HAL_DMA_Abort_IT>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f948 	bl	8002ac8 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01e      	beq.n	8002880 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2202      	movs	r2, #2
 8002848:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2204      	movs	r2, #4
 800285a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002862:	4a25      	ldr	r2, [pc, #148]	@ (80028f8 <HAL_DCMI_IRQHandler+0x118>)
 8002864:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fab6 	bl	8002ddc <HAL_DMA_Abort_IT>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f924 	bl	8002ac8 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2210      	movs	r2, #16
 8002890:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f83c 	bl	8002910 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2208      	movs	r2, #8
 80028a8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fd34 	bl	8001318 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d019      	beq.n	80028ee <HAL_DCMI_IRQHandler+0x10e>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d107      	bne.n	80028d8 <HAL_DCMI_IRQHandler+0xf8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 021e 	bic.w	r2, r2, #30
 80028d6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f81b 	bl	8002924 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08002ac9 	.word	0x08002ac9

080028fc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_DCMI_ConfigCrop>:
  * @param  XSize DCMI Pixel per line
  * @param  YSize DCMI Line number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_DCMI_ConfigCrop+0x1c>
 8002950:	2302      	movs	r3, #2
 8002952:	e01e      	b.n	8002992 <HAL_DCMI_ConfigCrop+0x5a>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_POSITION_CWSIZE_VLINE));
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	0419      	lsls	r1, r3, #16
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_POSITION_CWSTRT_VST));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0419      	lsls	r1, r3, #16
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	430a      	orrs	r2, r1
 800297e:	621a      	str	r2, [r3, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ae:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d043      	beq.n	8002a40 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c4:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <DCMI_DMAXferCplt+0x66>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	00da      	lsls	r2, r3, #3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	2200      	movs	r2, #0
 80029f2:	4619      	mov	r1, r3
 80029f4:	f001 fdd2 	bl	800459c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fc:	1e5a      	subs	r2, r3, #1
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a02:	e044      	b.n	8002a8e <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d13c      	bne.n	8002a8e <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	00da      	lsls	r2, r3, #3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f001 fdb4 	bl	800459c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a3e:	e026      	b.n	8002a8e <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	e017      	b.n	8002a8e <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a72:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a78:	0099      	lsls	r1, r3, #2
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	440a      	add	r2, r1
 8002a84:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d112      	bne.n	8002ac0 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d103      	bne.n	8002ac0 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad4:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d003      	beq.n	8002ae8 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff07 	bl	80028fc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e05f      	b.n	8002bc8 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff f80b 	bl	8001b38 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff f808 	bl	8001b38 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002b3e:	f023 0308 	bic.w	r3, r3, #8
 8002b42:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002b58:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002b64:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002b70:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d112      	bne.n	8002ba8 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7f1b      	ldrb	r3, [r3, #28]
 8002b86:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7f5b      	ldrb	r3, [r3, #29]
 8002b8c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002b8e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7f9b      	ldrb	r3, [r3, #30]
 8002b94:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002b96:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7fdb      	ldrb	r3, [r3, #31]
 8002b9e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002ba4:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002ba6:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 021e 	orr.w	r2, r2, #30
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff fc1a 	bl	8002414 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e099      	b.n	8002d20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0c:	e00f      	b.n	8002c2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0e:	f7ff fc01 	bl	8002414 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d908      	bls.n	8002c2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e078      	b.n	8002d20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e8      	bne.n	8002c0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <HAL_DMA_Init+0x158>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d107      	bne.n	8002c98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	4313      	orrs	r3, r2
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f023 0307 	bic.w	r3, r3, #7
 8002cae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d117      	bne.n	8002cf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa9d 	bl	8003214 <DMA_CheckFifoParam>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e016      	b.n	8002d20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fa54 	bl	80031a8 <DMA_CalcBaseAndBitshift>
 8002d00:	4603      	mov	r3, r0
 8002d02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d08:	223f      	movs	r2, #63	@ 0x3f
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	f010803f 	.word	0xf010803f

08002d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_DMA_Start_IT+0x26>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e040      	b.n	8002dd4 <HAL_DMA_Start_IT+0xa8>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d12f      	bne.n	8002dc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f9e6 	bl	800314c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d84:	223f      	movs	r2, #63	@ 0x3f
 8002d86:	409a      	lsls	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0216 	orr.w	r2, r2, #22
 8002d9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0208 	orr.w	r2, r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e005      	b.n	8002dd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d004      	beq.n	8002dfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00c      	b.n	8002e14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003068 <HAL_DMA_IRQHandler+0x248>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a8e      	ldr	r2, [pc, #568]	@ (800306c <HAL_DMA_IRQHandler+0x24c>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01a      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0204 	bic.w	r2, r2, #4
 8002e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e78:	2208      	movs	r2, #8
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	2210      	movs	r2, #16
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d043      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d03c      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d018      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d024      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
 8002f4e:	e01f      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e016      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0208 	bic.w	r2, r2, #8
 8002f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	2220      	movs	r2, #32
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 808f 	beq.w	80030c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8087 	beq.w	80030c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d136      	bne.n	8003038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0216 	bic.w	r2, r2, #22
 8002fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_DMA_IRQHandler+0x1da>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0208 	bic.w	r2, r2, #8
 8003008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	223f      	movs	r2, #63	@ 0x3f
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302a:	2b00      	cmp	r3, #0
 800302c:	d07e      	beq.n	800312c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
        }
        return;
 8003036:	e079      	b.n	800312c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01d      	beq.n	8003082 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10d      	bne.n	8003070 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	2b00      	cmp	r3, #0
 800305a:	d031      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	e02c      	b.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
 8003066:	bf00      	nop
 8003068:	20000000 	.word	0x20000000
 800306c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d023      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
 8003080:	e01e      	b.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10f      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0210 	bic.w	r2, r2, #16
 800309e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d032      	beq.n	800312e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d022      	beq.n	800311a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2205      	movs	r2, #5
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	3301      	adds	r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d307      	bcc.n	8003108 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f2      	bne.n	80030ec <HAL_DMA_IRQHandler+0x2cc>
 8003106:	e000      	b.n	800310a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003108:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e000      	b.n	800312e <HAL_DMA_IRQHandler+0x30e>
        return;
 800312c:	bf00      	nop
    }
  }
}
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003168:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b40      	cmp	r3, #64	@ 0x40
 8003178:	d108      	bne.n	800318c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800318a:	e007      	b.n	800319c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	3b10      	subs	r3, #16
 80031b8:	4a14      	ldr	r2, [pc, #80]	@ (800320c <DMA_CalcBaseAndBitshift+0x64>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031c2:	4a13      	ldr	r2, [pc, #76]	@ (8003210 <DMA_CalcBaseAndBitshift+0x68>)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d909      	bls.n	80031ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80031e8:	e007      	b.n	80031fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	aaaaaaab 	.word	0xaaaaaaab
 8003210:	080135e4 	.word	0x080135e4

08003214 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d11f      	bne.n	800326e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d856      	bhi.n	80032e2 <DMA_CheckFifoParam+0xce>
 8003234:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <DMA_CheckFifoParam+0x28>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	0800324d 	.word	0x0800324d
 8003240:	0800325f 	.word	0x0800325f
 8003244:	0800324d 	.word	0x0800324d
 8003248:	080032e3 	.word	0x080032e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d046      	beq.n	80032e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800325c:	e043      	b.n	80032e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003262:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003266:	d140      	bne.n	80032ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800326c:	e03d      	b.n	80032ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003276:	d121      	bne.n	80032bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d837      	bhi.n	80032ee <DMA_CheckFifoParam+0xda>
 800327e:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <DMA_CheckFifoParam+0x70>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	08003295 	.word	0x08003295
 8003288:	0800329b 	.word	0x0800329b
 800328c:	08003295 	.word	0x08003295
 8003290:	080032ad 	.word	0x080032ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e030      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d025      	beq.n	80032f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032aa:	e022      	b.n	80032f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032b4:	d11f      	bne.n	80032f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032ba:	e01c      	b.n	80032f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d903      	bls.n	80032ca <DMA_CheckFifoParam+0xb6>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d003      	beq.n	80032d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032c8:	e018      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
      break;
 80032ce:	e015      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      break;
 80032e0:	e00b      	b.n	80032fa <DMA_CheckFifoParam+0xe6>
      break;
 80032e2:	bf00      	nop
 80032e4:	e00a      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
 80032e8:	e008      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032ea:	bf00      	nop
 80032ec:	e006      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e004      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032f2:	bf00      	nop
 80032f4:	e002      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;   
 80032f6:	bf00      	nop
 80032f8:	e000      	b.n	80032fc <DMA_CheckFifoParam+0xe8>
      break;
 80032fa:	bf00      	nop
    }
  } 
  
  return status; 
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop

0800330c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b80      	cmp	r3, #128	@ 0x80
 8003324:	d106      	bne.n	8003334 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f001 b911 	b.w	8004556 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2240      	movs	r2, #64	@ 0x40
 8003350:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f001 b8ff 	b.w	8004556 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8003362:	2302      	movs	r3, #2
 8003364:	f001 b8f7 	b.w	8004556 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	f041 80e5 	bne.w	8004548 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2202      	movs	r2, #2
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800339a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f001 f910 	bl	80045d0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	4b8d      	ldr	r3, [pc, #564]	@ (80035ec <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d960      	bls.n	800347e <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a8b      	ldr	r2, [pc, #556]	@ (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d057      	beq.n	8003476 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a8a      	ldr	r2, [pc, #552]	@ (80035f4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d050      	beq.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a88      	ldr	r2, [pc, #544]	@ (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d049      	beq.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a87      	ldr	r2, [pc, #540]	@ (80035fc <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d042      	beq.n	800346a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a85      	ldr	r2, [pc, #532]	@ (8003600 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d03a      	beq.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a84      	ldr	r2, [pc, #528]	@ (8003604 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d032      	beq.n	800345e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a82      	ldr	r2, [pc, #520]	@ (8003608 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02a      	beq.n	8003458 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a81      	ldr	r2, [pc, #516]	@ (800360c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a7f      	ldr	r2, [pc, #508]	@ (8003610 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01a      	beq.n	800344c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a7e      	ldr	r2, [pc, #504]	@ (8003614 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d012      	beq.n	8003446 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a7c      	ldr	r2, [pc, #496]	@ (8003618 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00a      	beq.n	8003440 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7b      	ldr	r2, [pc, #492]	@ (800361c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d102      	bne.n	800343a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003434:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003438:	e01e      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800343a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800343e:	e01b      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003440:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003444:	e018      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003446:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800344a:	e015      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800344c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003450:	e012      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003452:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003456:	e00f      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003458:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800345c:	e00c      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800345e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003462:	e009      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003464:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003468:	e006      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800346a:	2320      	movs	r3, #32
 800346c:	e004      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800346e:	2320      	movs	r3, #32
 8003470:	e002      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003472:	2320      	movs	r3, #32
 8003474:	e000      	b.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003476:	2320      	movs	r3, #32
 8003478:	4a69      	ldr	r2, [pc, #420]	@ (8003620 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800347a:	60d3      	str	r3, [r2, #12]
 800347c:	e14f      	b.n	800371e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	4b67      	ldr	r3, [pc, #412]	@ (8003624 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003486:	429a      	cmp	r2, r3
 8003488:	d960      	bls.n	800354c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a58      	ldr	r2, [pc, #352]	@ (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d057      	beq.n	8003544 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a56      	ldr	r2, [pc, #344]	@ (80035f4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d050      	beq.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a55      	ldr	r2, [pc, #340]	@ (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d049      	beq.n	800353c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a53      	ldr	r2, [pc, #332]	@ (80035fc <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d042      	beq.n	8003538 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a52      	ldr	r2, [pc, #328]	@ (8003600 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d03a      	beq.n	8003532 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a50      	ldr	r2, [pc, #320]	@ (8003604 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d032      	beq.n	800352c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003608 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d02a      	beq.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4d      	ldr	r2, [pc, #308]	@ (800360c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d022      	beq.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4c      	ldr	r2, [pc, #304]	@ (8003610 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d01a      	beq.n	800351a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003614 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d012      	beq.n	8003514 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a49      	ldr	r2, [pc, #292]	@ (8003618 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00a      	beq.n	800350e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a47      	ldr	r2, [pc, #284]	@ (800361c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d102      	bne.n	8003508 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8003502:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003506:	e01e      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003508:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800350c:	e01b      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800350e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003512:	e018      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003514:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003518:	e015      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800351a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800351e:	e012      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003520:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003524:	e00f      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800352a:	e00c      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800352c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003530:	e009      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003532:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003536:	e006      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003538:	2320      	movs	r3, #32
 800353a:	e004      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800353c:	2320      	movs	r3, #32
 800353e:	e002      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003540:	2320      	movs	r3, #32
 8003542:	e000      	b.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003544:	2320      	movs	r3, #32
 8003546:	4a36      	ldr	r2, [pc, #216]	@ (8003620 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003548:	6093      	str	r3, [r2, #8]
 800354a:	e0e8      	b.n	800371e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b35      	ldr	r3, [pc, #212]	@ (8003628 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003554:	429a      	cmp	r2, r3
 8003556:	f240 8082 	bls.w	800365e <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a24      	ldr	r2, [pc, #144]	@ (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d078      	beq.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a22      	ldr	r2, [pc, #136]	@ (80035f4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d071      	beq.n	8003652 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a21      	ldr	r2, [pc, #132]	@ (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d06a      	beq.n	800364e <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1f      	ldr	r2, [pc, #124]	@ (80035fc <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d063      	beq.n	800364a <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1e      	ldr	r2, [pc, #120]	@ (8003600 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d05b      	beq.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1c      	ldr	r2, [pc, #112]	@ (8003604 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d053      	beq.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d04b      	beq.n	8003638 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a19      	ldr	r2, [pc, #100]	@ (800360c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d043      	beq.n	8003632 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d03b      	beq.n	800362c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a16      	ldr	r2, [pc, #88]	@ (8003614 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d012      	beq.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a15      	ldr	r2, [pc, #84]	@ (8003618 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00a      	beq.n	80035de <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a13      	ldr	r2, [pc, #76]	@ (800361c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d102      	bne.n	80035d8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80035d2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80035d6:	e03f      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035dc:	e03c      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80035e2:	e039      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80035e8:	e036      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80035ea:	bf00      	nop
 80035ec:	40026458 	.word	0x40026458
 80035f0:	40026010 	.word	0x40026010
 80035f4:	40026410 	.word	0x40026410
 80035f8:	40026070 	.word	0x40026070
 80035fc:	40026470 	.word	0x40026470
 8003600:	40026028 	.word	0x40026028
 8003604:	40026428 	.word	0x40026428
 8003608:	40026088 	.word	0x40026088
 800360c:	40026488 	.word	0x40026488
 8003610:	40026040 	.word	0x40026040
 8003614:	40026440 	.word	0x40026440
 8003618:	400260a0 	.word	0x400260a0
 800361c:	400264a0 	.word	0x400264a0
 8003620:	40026400 	.word	0x40026400
 8003624:	400260b8 	.word	0x400260b8
 8003628:	40026058 	.word	0x40026058
 800362c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003630:	e012      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003632:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003636:	e00f      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003638:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800363c:	e00c      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800363e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003642:	e009      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003644:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003648:	e006      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800364a:	2320      	movs	r3, #32
 800364c:	e004      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800364e:	2320      	movs	r3, #32
 8003650:	e002      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003652:	2320      	movs	r3, #32
 8003654:	e000      	b.n	8003658 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003656:	2320      	movs	r3, #32
 8003658:	4a8c      	ldr	r2, [pc, #560]	@ (800388c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800365a:	60d3      	str	r3, [r2, #12]
 800365c:	e05f      	b.n	800371e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a8b      	ldr	r2, [pc, #556]	@ (8003890 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d057      	beq.n	8003718 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a89      	ldr	r2, [pc, #548]	@ (8003894 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d050      	beq.n	8003714 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a88      	ldr	r2, [pc, #544]	@ (8003898 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d049      	beq.n	8003710 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a86      	ldr	r2, [pc, #536]	@ (800389c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d042      	beq.n	800370c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a85      	ldr	r2, [pc, #532]	@ (80038a0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03a      	beq.n	8003706 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a83      	ldr	r2, [pc, #524]	@ (80038a4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d032      	beq.n	8003700 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a82      	ldr	r2, [pc, #520]	@ (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d02a      	beq.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a80      	ldr	r2, [pc, #512]	@ (80038ac <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d022      	beq.n	80036f4 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7f      	ldr	r2, [pc, #508]	@ (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d01a      	beq.n	80036ee <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a7d      	ldr	r2, [pc, #500]	@ (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d012      	beq.n	80036e8 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7c      	ldr	r2, [pc, #496]	@ (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00a      	beq.n	80036e2 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a7a      	ldr	r2, [pc, #488]	@ (80038bc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d102      	bne.n	80036dc <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80036d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80036da:	e01e      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80036e0:	e01b      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80036e6:	e018      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80036ec:	e015      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80036f2:	e012      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036f8:	e00f      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80036fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036fe:	e00c      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003700:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003704:	e009      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003706:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800370a:	e006      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800370c:	2320      	movs	r3, #32
 800370e:	e004      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003710:	2320      	movs	r3, #32
 8003712:	e002      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003714:	2320      	movs	r3, #32
 8003716:	e000      	b.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003718:	2320      	movs	r3, #32
 800371a:	4a5c      	ldr	r2, [pc, #368]	@ (800388c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800371c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	4b66      	ldr	r3, [pc, #408]	@ (80038c0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003726:	429a      	cmp	r2, r3
 8003728:	d960      	bls.n	80037ec <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a58      	ldr	r2, [pc, #352]	@ (8003890 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d057      	beq.n	80037e4 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a56      	ldr	r2, [pc, #344]	@ (8003894 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d050      	beq.n	80037e0 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a55      	ldr	r2, [pc, #340]	@ (8003898 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d049      	beq.n	80037dc <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a53      	ldr	r2, [pc, #332]	@ (800389c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d042      	beq.n	80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a52      	ldr	r2, [pc, #328]	@ (80038a0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d03a      	beq.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a50      	ldr	r2, [pc, #320]	@ (80038a4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d032      	beq.n	80037cc <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a4f      	ldr	r2, [pc, #316]	@ (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d02a      	beq.n	80037c6 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4d      	ldr	r2, [pc, #308]	@ (80038ac <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d022      	beq.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4c      	ldr	r2, [pc, #304]	@ (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d01a      	beq.n	80037ba <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a4a      	ldr	r2, [pc, #296]	@ (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d012      	beq.n	80037b4 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a49      	ldr	r2, [pc, #292]	@ (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00a      	beq.n	80037ae <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a47      	ldr	r2, [pc, #284]	@ (80038bc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d102      	bne.n	80037a8 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80037a2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80037a6:	e01e      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80037ac:	e01b      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80037b2:	e018      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80037b8:	e015      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037ba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80037be:	e012      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037c4:	e00f      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037ca:	e00c      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037d0:	e009      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037d6:	e006      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037d8:	2310      	movs	r3, #16
 80037da:	e004      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037dc:	2310      	movs	r3, #16
 80037de:	e002      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037e0:	2310      	movs	r3, #16
 80037e2:	e000      	b.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80037e4:	2310      	movs	r3, #16
 80037e6:	4a37      	ldr	r2, [pc, #220]	@ (80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80037e8:	60d3      	str	r3, [r2, #12]
 80037ea:	e14f      	b.n	8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b35      	ldr	r3, [pc, #212]	@ (80038c8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80037f4:	429a      	cmp	r2, r3
 80037f6:	f240 8082 	bls.w	80038fe <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a24      	ldr	r2, [pc, #144]	@ (8003890 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d078      	beq.n	80038f6 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d071      	beq.n	80038f2 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a21      	ldr	r2, [pc, #132]	@ (8003898 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d06a      	beq.n	80038ee <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1f      	ldr	r2, [pc, #124]	@ (800389c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d063      	beq.n	80038ea <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1e      	ldr	r2, [pc, #120]	@ (80038a0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d05b      	beq.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1c      	ldr	r2, [pc, #112]	@ (80038a4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d053      	beq.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d04b      	beq.n	80038d8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a19      	ldr	r2, [pc, #100]	@ (80038ac <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d043      	beq.n	80038d2 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d03b      	beq.n	80038cc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a16      	ldr	r2, [pc, #88]	@ (80038b4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d012      	beq.n	8003884 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a15      	ldr	r2, [pc, #84]	@ (80038b8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00a      	beq.n	800387e <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a13      	ldr	r2, [pc, #76]	@ (80038bc <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d102      	bne.n	8003878 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8003872:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003876:	e03f      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003878:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800387c:	e03c      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800387e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003882:	e039      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003884:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003888:	e036      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800388a:	bf00      	nop
 800388c:	40026000 	.word	0x40026000
 8003890:	40026010 	.word	0x40026010
 8003894:	40026410 	.word	0x40026410
 8003898:	40026070 	.word	0x40026070
 800389c:	40026470 	.word	0x40026470
 80038a0:	40026028 	.word	0x40026028
 80038a4:	40026428 	.word	0x40026428
 80038a8:	40026088 	.word	0x40026088
 80038ac:	40026488 	.word	0x40026488
 80038b0:	40026040 	.word	0x40026040
 80038b4:	40026440 	.word	0x40026440
 80038b8:	400260a0 	.word	0x400260a0
 80038bc:	400264a0 	.word	0x400264a0
 80038c0:	40026458 	.word	0x40026458
 80038c4:	40026400 	.word	0x40026400
 80038c8:	400260b8 	.word	0x400260b8
 80038cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038d0:	e012      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80038d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038d6:	e00f      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80038d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038dc:	e00c      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80038de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038e2:	e009      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80038e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038e8:	e006      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80038ea:	2310      	movs	r3, #16
 80038ec:	e004      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80038ee:	2310      	movs	r3, #16
 80038f0:	e002      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80038f2:	2310      	movs	r3, #16
 80038f4:	e000      	b.n	80038f8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80038f6:	2310      	movs	r3, #16
 80038f8:	4a8c      	ldr	r2, [pc, #560]	@ (8003b2c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80038fa:	6093      	str	r3, [r2, #8]
 80038fc:	e0c6      	b.n	8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	4b8a      	ldr	r3, [pc, #552]	@ (8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8003906:	429a      	cmp	r2, r3
 8003908:	d960      	bls.n	80039cc <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a89      	ldr	r2, [pc, #548]	@ (8003b34 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d057      	beq.n	80039c4 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a87      	ldr	r2, [pc, #540]	@ (8003b38 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d050      	beq.n	80039c0 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a86      	ldr	r2, [pc, #536]	@ (8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d049      	beq.n	80039bc <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a84      	ldr	r2, [pc, #528]	@ (8003b40 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d042      	beq.n	80039b8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a83      	ldr	r2, [pc, #524]	@ (8003b44 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d03a      	beq.n	80039b2 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a81      	ldr	r2, [pc, #516]	@ (8003b48 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d032      	beq.n	80039ac <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a80      	ldr	r2, [pc, #512]	@ (8003b4c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d02a      	beq.n	80039a6 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7e      	ldr	r2, [pc, #504]	@ (8003b50 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d022      	beq.n	80039a0 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b54 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d01a      	beq.n	800399a <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a7b      	ldr	r2, [pc, #492]	@ (8003b58 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d012      	beq.n	8003994 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a7a      	ldr	r2, [pc, #488]	@ (8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00a      	beq.n	800398e <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a78      	ldr	r2, [pc, #480]	@ (8003b60 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d102      	bne.n	8003988 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8003982:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003986:	e01e      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003988:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800398c:	e01b      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800398e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003992:	e018      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003994:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003998:	e015      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800399a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800399e:	e012      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80039a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039a4:	e00f      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80039a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039aa:	e00c      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80039ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039b0:	e009      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80039b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039b6:	e006      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80039b8:	2310      	movs	r3, #16
 80039ba:	e004      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80039bc:	2310      	movs	r3, #16
 80039be:	e002      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80039c0:	2310      	movs	r3, #16
 80039c2:	e000      	b.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80039c4:	2310      	movs	r3, #16
 80039c6:	4a67      	ldr	r2, [pc, #412]	@ (8003b64 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80039c8:	60d3      	str	r3, [r2, #12]
 80039ca:	e05f      	b.n	8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a58      	ldr	r2, [pc, #352]	@ (8003b34 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d057      	beq.n	8003a86 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a57      	ldr	r2, [pc, #348]	@ (8003b38 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d050      	beq.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a55      	ldr	r2, [pc, #340]	@ (8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d049      	beq.n	8003a7e <HAL_DMAEx_MultiBufferStart_IT+0x772>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a54      	ldr	r2, [pc, #336]	@ (8003b40 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d042      	beq.n	8003a7a <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a52      	ldr	r2, [pc, #328]	@ (8003b44 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d03a      	beq.n	8003a74 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a51      	ldr	r2, [pc, #324]	@ (8003b48 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d032      	beq.n	8003a6e <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b4c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d02a      	beq.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a4e      	ldr	r2, [pc, #312]	@ (8003b50 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a4c      	ldr	r2, [pc, #304]	@ (8003b54 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01a      	beq.n	8003a5c <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a4b      	ldr	r2, [pc, #300]	@ (8003b58 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d012      	beq.n	8003a56 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a49      	ldr	r2, [pc, #292]	@ (8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00a      	beq.n	8003a50 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a48      	ldr	r2, [pc, #288]	@ (8003b60 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d102      	bne.n	8003a4a <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8003a44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003a48:	e01e      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a4a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a4e:	e01b      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003a54:	e018      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a56:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003a5a:	e015      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003a60:	e012      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a66:	e00f      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a6c:	e00c      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a72:	e009      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a78:	e006      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	e004      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a7e:	2310      	movs	r3, #16
 8003a80:	e002      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a82:	2310      	movs	r3, #16
 8003a84:	e000      	b.n	8003a88 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003a86:	2310      	movs	r3, #16
 8003a88:	4a36      	ldr	r2, [pc, #216]	@ (8003b64 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003a8a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	4b35      	ldr	r3, [pc, #212]	@ (8003b68 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003a94:	429a      	cmp	r2, r3
 8003a96:	f240 8082 	bls.w	8003b9e <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a25      	ldr	r2, [pc, #148]	@ (8003b34 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d078      	beq.n	8003b96 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a23      	ldr	r2, [pc, #140]	@ (8003b38 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d071      	beq.n	8003b92 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a22      	ldr	r2, [pc, #136]	@ (8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d06a      	beq.n	8003b8e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a20      	ldr	r2, [pc, #128]	@ (8003b40 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d063      	beq.n	8003b8a <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b44 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d05b      	beq.n	8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b48 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d053      	beq.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1c      	ldr	r2, [pc, #112]	@ (8003b4c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d04b      	beq.n	8003b78 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b50 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d043      	beq.n	8003b72 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a19      	ldr	r2, [pc, #100]	@ (8003b54 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d03b      	beq.n	8003b6c <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a17      	ldr	r2, [pc, #92]	@ (8003b58 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d012      	beq.n	8003b24 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	@ (8003b5c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00a      	beq.n	8003b1e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a14      	ldr	r2, [pc, #80]	@ (8003b60 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d102      	bne.n	8003b18 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8003b12:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b16:	e03f      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b1c:	e03c      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b1e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b22:	e039      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b28:	e036      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b2a:	bf00      	nop
 8003b2c:	40026400 	.word	0x40026400
 8003b30:	40026058 	.word	0x40026058
 8003b34:	40026010 	.word	0x40026010
 8003b38:	40026410 	.word	0x40026410
 8003b3c:	40026070 	.word	0x40026070
 8003b40:	40026470 	.word	0x40026470
 8003b44:	40026028 	.word	0x40026028
 8003b48:	40026428 	.word	0x40026428
 8003b4c:	40026088 	.word	0x40026088
 8003b50:	40026488 	.word	0x40026488
 8003b54:	40026040 	.word	0x40026040
 8003b58:	40026440 	.word	0x40026440
 8003b5c:	400260a0 	.word	0x400260a0
 8003b60:	400264a0 	.word	0x400264a0
 8003b64:	40026000 	.word	0x40026000
 8003b68:	40026458 	.word	0x40026458
 8003b6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003b70:	e012      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b76:	e00f      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b7c:	e00c      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b82:	e009      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b88:	e006      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	e004      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b8e:	2308      	movs	r3, #8
 8003b90:	e002      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b92:	2308      	movs	r3, #8
 8003b94:	e000      	b.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003b96:	2308      	movs	r3, #8
 8003b98:	4a8c      	ldr	r2, [pc, #560]	@ (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003b9a:	60d3      	str	r3, [r2, #12]
 8003b9c:	e14e      	b.n	8003e3c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b8a      	ldr	r3, [pc, #552]	@ (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d960      	bls.n	8003c6c <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a89      	ldr	r2, [pc, #548]	@ (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d057      	beq.n	8003c64 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a87      	ldr	r2, [pc, #540]	@ (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d050      	beq.n	8003c60 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a86      	ldr	r2, [pc, #536]	@ (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d049      	beq.n	8003c5c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a84      	ldr	r2, [pc, #528]	@ (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d042      	beq.n	8003c58 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a83      	ldr	r2, [pc, #524]	@ (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d03a      	beq.n	8003c52 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a81      	ldr	r2, [pc, #516]	@ (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d032      	beq.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a80      	ldr	r2, [pc, #512]	@ (8003dec <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d02a      	beq.n	8003c46 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a7e      	ldr	r2, [pc, #504]	@ (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d022      	beq.n	8003c40 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7d      	ldr	r2, [pc, #500]	@ (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d01a      	beq.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a7b      	ldr	r2, [pc, #492]	@ (8003df8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d012      	beq.n	8003c34 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7a      	ldr	r2, [pc, #488]	@ (8003dfc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00a      	beq.n	8003c2e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a78      	ldr	r2, [pc, #480]	@ (8003e00 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d102      	bne.n	8003c28 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003c22:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c26:	e01e      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c2c:	e01b      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c2e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c32:	e018      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c38:	e015      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c3a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003c3e:	e012      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c44:	e00f      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c4a:	e00c      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c50:	e009      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c56:	e006      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	e004      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	e002      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c60:	2308      	movs	r3, #8
 8003c62:	e000      	b.n	8003c66 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003c64:	2308      	movs	r3, #8
 8003c66:	4a59      	ldr	r2, [pc, #356]	@ (8003dcc <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003c68:	6093      	str	r3, [r2, #8]
 8003c6a:	e0e7      	b.n	8003e3c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b64      	ldr	r3, [pc, #400]	@ (8003e04 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d960      	bls.n	8003d3a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a55      	ldr	r2, [pc, #340]	@ (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d057      	beq.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a54      	ldr	r2, [pc, #336]	@ (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d050      	beq.n	8003d2e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a52      	ldr	r2, [pc, #328]	@ (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d049      	beq.n	8003d2a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a51      	ldr	r2, [pc, #324]	@ (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d042      	beq.n	8003d26 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d03a      	beq.n	8003d20 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a4e      	ldr	r2, [pc, #312]	@ (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d032      	beq.n	8003d1a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8003dec <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d02a      	beq.n	8003d14 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4b      	ldr	r2, [pc, #300]	@ (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d022      	beq.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a49      	ldr	r2, [pc, #292]	@ (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01a      	beq.n	8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a48      	ldr	r2, [pc, #288]	@ (8003df8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d012      	beq.n	8003d02 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a46      	ldr	r2, [pc, #280]	@ (8003dfc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00a      	beq.n	8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a45      	ldr	r2, [pc, #276]	@ (8003e00 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d102      	bne.n	8003cf6 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003cf0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003cf4:	e01e      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003cf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cfa:	e01b      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003cfc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d00:	e018      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d02:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d06:	e015      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d0c:	e012      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d12:	e00f      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d18:	e00c      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d1e:	e009      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d24:	e006      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d26:	2308      	movs	r3, #8
 8003d28:	e004      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	e002      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d2e:	2308      	movs	r3, #8
 8003d30:	e000      	b.n	8003d34 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003d32:	2308      	movs	r3, #8
 8003d34:	4a34      	ldr	r2, [pc, #208]	@ (8003e08 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003d36:	60d3      	str	r3, [r2, #12]
 8003d38:	e080      	b.n	8003e3c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a25      	ldr	r2, [pc, #148]	@ (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d078      	beq.n	8003e36 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a23      	ldr	r2, [pc, #140]	@ (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d071      	beq.n	8003e32 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a22      	ldr	r2, [pc, #136]	@ (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d06a      	beq.n	8003e2e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a20      	ldr	r2, [pc, #128]	@ (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d063      	beq.n	8003e2a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1f      	ldr	r2, [pc, #124]	@ (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d05b      	beq.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1d      	ldr	r2, [pc, #116]	@ (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d053      	beq.n	8003e1e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dec <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d04b      	beq.n	8003e18 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1a      	ldr	r2, [pc, #104]	@ (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d043      	beq.n	8003e12 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a19      	ldr	r2, [pc, #100]	@ (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d03b      	beq.n	8003e0c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a17      	ldr	r2, [pc, #92]	@ (8003df8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d012      	beq.n	8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a16      	ldr	r2, [pc, #88]	@ (8003dfc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00a      	beq.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a14      	ldr	r2, [pc, #80]	@ (8003e00 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d102      	bne.n	8003db8 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8003db2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003db6:	e03f      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003db8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dbc:	e03c      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003dbe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003dc2:	e039      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003dc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003dc8:	e036      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003dca:	bf00      	nop
 8003dcc:	40026400 	.word	0x40026400
 8003dd0:	400260b8 	.word	0x400260b8
 8003dd4:	40026010 	.word	0x40026010
 8003dd8:	40026410 	.word	0x40026410
 8003ddc:	40026070 	.word	0x40026070
 8003de0:	40026470 	.word	0x40026470
 8003de4:	40026028 	.word	0x40026028
 8003de8:	40026428 	.word	0x40026428
 8003dec:	40026088 	.word	0x40026088
 8003df0:	40026488 	.word	0x40026488
 8003df4:	40026040 	.word	0x40026040
 8003df8:	40026440 	.word	0x40026440
 8003dfc:	400260a0 	.word	0x400260a0
 8003e00:	400264a0 	.word	0x400264a0
 8003e04:	40026058 	.word	0x40026058
 8003e08:	40026000 	.word	0x40026000
 8003e0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003e10:	e012      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003e12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e16:	e00f      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e1c:	e00c      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e22:	e009      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e28:	e006      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	e004      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	e002      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003e32:	2308      	movs	r3, #8
 8003e34:	e000      	b.n	8003e38 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003e36:	2308      	movs	r3, #8
 8003e38:	4a8a      	ldr	r2, [pc, #552]	@ (8004064 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003e3a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b89      	ldr	r3, [pc, #548]	@ (8004068 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d960      	bls.n	8003f0a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a87      	ldr	r2, [pc, #540]	@ (800406c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d057      	beq.n	8003f02 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a86      	ldr	r2, [pc, #536]	@ (8004070 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d050      	beq.n	8003efe <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a84      	ldr	r2, [pc, #528]	@ (8004074 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d049      	beq.n	8003efa <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a83      	ldr	r2, [pc, #524]	@ (8004078 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d042      	beq.n	8003ef6 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a81      	ldr	r2, [pc, #516]	@ (800407c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d03a      	beq.n	8003ef0 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a80      	ldr	r2, [pc, #512]	@ (8004080 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d032      	beq.n	8003eea <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a7e      	ldr	r2, [pc, #504]	@ (8004084 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02a      	beq.n	8003ee4 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a7d      	ldr	r2, [pc, #500]	@ (8004088 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a7b      	ldr	r2, [pc, #492]	@ (800408c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01a      	beq.n	8003ed8 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a7a      	ldr	r2, [pc, #488]	@ (8004090 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d012      	beq.n	8003ed2 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a78      	ldr	r2, [pc, #480]	@ (8004094 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00a      	beq.n	8003ecc <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a77      	ldr	r2, [pc, #476]	@ (8004098 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d102      	bne.n	8003ec6 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003ec0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003ec4:	e01e      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003ec6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eca:	e01b      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003ecc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003ed0:	e018      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003ed2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003ed6:	e015      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003ed8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003edc:	e012      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003ede:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ee2:	e00f      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ee8:	e00c      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003eea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003eee:	e009      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003ef0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ef4:	e006      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	e004      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003efa:	2304      	movs	r3, #4
 8003efc:	e002      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003efe:	2304      	movs	r3, #4
 8003f00:	e000      	b.n	8003f04 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003f02:	2304      	movs	r3, #4
 8003f04:	4a65      	ldr	r2, [pc, #404]	@ (800409c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003f06:	60d3      	str	r3, [r2, #12]
 8003f08:	e150      	b.n	80041ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b63      	ldr	r3, [pc, #396]	@ (80040a0 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d960      	bls.n	8003fd8 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a54      	ldr	r2, [pc, #336]	@ (800406c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d057      	beq.n	8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a52      	ldr	r2, [pc, #328]	@ (8004070 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d050      	beq.n	8003fcc <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a51      	ldr	r2, [pc, #324]	@ (8004074 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d049      	beq.n	8003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a4f      	ldr	r2, [pc, #316]	@ (8004078 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d042      	beq.n	8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4e      	ldr	r2, [pc, #312]	@ (800407c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d03a      	beq.n	8003fbe <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8004080 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d032      	beq.n	8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a4b      	ldr	r2, [pc, #300]	@ (8004084 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d02a      	beq.n	8003fb2 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a49      	ldr	r2, [pc, #292]	@ (8004088 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d022      	beq.n	8003fac <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a48      	ldr	r2, [pc, #288]	@ (800408c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d01a      	beq.n	8003fa6 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a46      	ldr	r2, [pc, #280]	@ (8004090 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d012      	beq.n	8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a45      	ldr	r2, [pc, #276]	@ (8004094 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00a      	beq.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a43      	ldr	r2, [pc, #268]	@ (8004098 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d102      	bne.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003f8e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f92:	e01e      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f98:	e01b      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003f9a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f9e:	e018      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fa0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003fa4:	e015      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fa6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003faa:	e012      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fb0:	e00f      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fb6:	e00c      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fbc:	e009      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fc2:	e006      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	e004      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	e002      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	e000      	b.n	8003fd2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	4a32      	ldr	r2, [pc, #200]	@ (800409c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003fd4:	6093      	str	r3, [r2, #8]
 8003fd6:	e0e9      	b.n	80041ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	f240 8083 	bls.w	80040ec <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a20      	ldr	r2, [pc, #128]	@ (800406c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d079      	beq.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8004070 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d072      	beq.n	80040e0 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8004074 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d06b      	beq.n	80040dc <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1b      	ldr	r2, [pc, #108]	@ (8004078 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d064      	beq.n	80040d8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1a      	ldr	r2, [pc, #104]	@ (800407c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d05c      	beq.n	80040d2 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d054      	beq.n	80040cc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a17      	ldr	r2, [pc, #92]	@ (8004084 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d04c      	beq.n	80040c6 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a15      	ldr	r2, [pc, #84]	@ (8004088 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d044      	beq.n	80040c0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a14      	ldr	r2, [pc, #80]	@ (800408c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d03c      	beq.n	80040ba <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a12      	ldr	r2, [pc, #72]	@ (8004090 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d034      	beq.n	80040b4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a11      	ldr	r2, [pc, #68]	@ (8004094 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d02c      	beq.n	80040ae <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0f      	ldr	r2, [pc, #60]	@ (8004098 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d124      	bne.n	80040a8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800405e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004062:	e040      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004064:	40026000 	.word	0x40026000
 8004068:	40026458 	.word	0x40026458
 800406c:	40026010 	.word	0x40026010
 8004070:	40026410 	.word	0x40026410
 8004074:	40026070 	.word	0x40026070
 8004078:	40026470 	.word	0x40026470
 800407c:	40026028 	.word	0x40026028
 8004080:	40026428 	.word	0x40026428
 8004084:	40026088 	.word	0x40026088
 8004088:	40026488 	.word	0x40026488
 800408c:	40026040 	.word	0x40026040
 8004090:	40026440 	.word	0x40026440
 8004094:	400260a0 	.word	0x400260a0
 8004098:	400264a0 	.word	0x400264a0
 800409c:	40026400 	.word	0x40026400
 80040a0:	400260b8 	.word	0x400260b8
 80040a4:	40026058 	.word	0x40026058
 80040a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040ac:	e01b      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040ae:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80040b2:	e018      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80040b8:	e015      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040ba:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80040be:	e012      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040c4:	e00f      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040ca:	e00c      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040d0:	e009      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040d6:	e006      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040d8:	2304      	movs	r3, #4
 80040da:	e004      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040dc:	2304      	movs	r3, #4
 80040de:	e002      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040e0:	2304      	movs	r3, #4
 80040e2:	e000      	b.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80040e4:	2304      	movs	r3, #4
 80040e6:	4a8b      	ldr	r2, [pc, #556]	@ (8004314 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80040e8:	60d3      	str	r3, [r2, #12]
 80040ea:	e05f      	b.n	80041ac <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a89      	ldr	r2, [pc, #548]	@ (8004318 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d057      	beq.n	80041a6 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a88      	ldr	r2, [pc, #544]	@ (800431c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d050      	beq.n	80041a2 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a86      	ldr	r2, [pc, #536]	@ (8004320 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d049      	beq.n	800419e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a85      	ldr	r2, [pc, #532]	@ (8004324 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d042      	beq.n	800419a <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a83      	ldr	r2, [pc, #524]	@ (8004328 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03a      	beq.n	8004194 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a82      	ldr	r2, [pc, #520]	@ (800432c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d032      	beq.n	800418e <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a80      	ldr	r2, [pc, #512]	@ (8004330 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02a      	beq.n	8004188 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a7f      	ldr	r2, [pc, #508]	@ (8004334 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d022      	beq.n	8004182 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a7d      	ldr	r2, [pc, #500]	@ (8004338 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01a      	beq.n	800417c <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a7c      	ldr	r2, [pc, #496]	@ (800433c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d012      	beq.n	8004176 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a7a      	ldr	r2, [pc, #488]	@ (8004340 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00a      	beq.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a79      	ldr	r2, [pc, #484]	@ (8004344 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d102      	bne.n	800416a <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8004164:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004168:	e01e      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800416a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800416e:	e01b      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004170:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004174:	e018      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004176:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800417a:	e015      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800417c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004180:	e012      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004182:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004186:	e00f      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800418c:	e00c      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800418e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004192:	e009      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8004194:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004198:	e006      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800419a:	2304      	movs	r3, #4
 800419c:	e004      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800419e:	2304      	movs	r3, #4
 80041a0:	e002      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80041a2:	2304      	movs	r3, #4
 80041a4:	e000      	b.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80041a6:	2304      	movs	r3, #4
 80041a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004314 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80041aa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b65      	ldr	r3, [pc, #404]	@ (8004348 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d95c      	bls.n	8004272 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a56      	ldr	r2, [pc, #344]	@ (8004318 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d053      	beq.n	800426a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a55      	ldr	r2, [pc, #340]	@ (800431c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d04c      	beq.n	8004266 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a53      	ldr	r2, [pc, #332]	@ (8004320 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d045      	beq.n	8004262 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a52      	ldr	r2, [pc, #328]	@ (8004324 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d03e      	beq.n	800425e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a50      	ldr	r2, [pc, #320]	@ (8004328 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d037      	beq.n	800425a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a4f      	ldr	r2, [pc, #316]	@ (800432c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d030      	beq.n	8004256 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004330 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d029      	beq.n	8004252 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a4c      	ldr	r2, [pc, #304]	@ (8004334 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a4a      	ldr	r2, [pc, #296]	@ (8004338 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01a      	beq.n	8004248 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a49      	ldr	r2, [pc, #292]	@ (800433c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d012      	beq.n	8004242 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a47      	ldr	r2, [pc, #284]	@ (8004340 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00a      	beq.n	800423c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a46      	ldr	r2, [pc, #280]	@ (8004344 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d102      	bne.n	8004236 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8004230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004234:	e01a      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004236:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800423a:	e017      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800423c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004240:	e014      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004246:	e011      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800424c:	e00e      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800424e:	2340      	movs	r3, #64	@ 0x40
 8004250:	e00c      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004252:	2340      	movs	r3, #64	@ 0x40
 8004254:	e00a      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004256:	2340      	movs	r3, #64	@ 0x40
 8004258:	e008      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800425a:	2340      	movs	r3, #64	@ 0x40
 800425c:	e006      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800425e:	2301      	movs	r3, #1
 8004260:	e004      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004262:	2301      	movs	r3, #1
 8004264:	e002      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800426a:	2301      	movs	r3, #1
 800426c:	4a37      	ldr	r2, [pc, #220]	@ (800434c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800426e:	60d3      	str	r3, [r2, #12]
 8004270:	e141      	b.n	80044f6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	4b35      	ldr	r3, [pc, #212]	@ (8004350 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800427a:	429a      	cmp	r2, r3
 800427c:	d97c      	bls.n	8004378 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a25      	ldr	r2, [pc, #148]	@ (8004318 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d073      	beq.n	8004370 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a23      	ldr	r2, [pc, #140]	@ (800431c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d06c      	beq.n	800436c <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a22      	ldr	r2, [pc, #136]	@ (8004320 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d065      	beq.n	8004368 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a20      	ldr	r2, [pc, #128]	@ (8004324 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d05e      	beq.n	8004364 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004328 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d057      	beq.n	8004360 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d050      	beq.n	800435c <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1c      	ldr	r2, [pc, #112]	@ (8004330 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d049      	beq.n	8004358 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004334 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d042      	beq.n	8004354 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a19      	ldr	r2, [pc, #100]	@ (8004338 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d01a      	beq.n	800430e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a17      	ldr	r2, [pc, #92]	@ (800433c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d012      	beq.n	8004308 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a16      	ldr	r2, [pc, #88]	@ (8004340 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00a      	beq.n	8004302 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a14      	ldr	r2, [pc, #80]	@ (8004344 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d102      	bne.n	80042fc <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80042f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042fa:	e03a      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80042fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004300:	e037      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004306:	e034      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800430c:	e031      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800430e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004312:	e02e      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004314:	40026000 	.word	0x40026000
 8004318:	40026010 	.word	0x40026010
 800431c:	40026410 	.word	0x40026410
 8004320:	40026070 	.word	0x40026070
 8004324:	40026470 	.word	0x40026470
 8004328:	40026028 	.word	0x40026028
 800432c:	40026428 	.word	0x40026428
 8004330:	40026088 	.word	0x40026088
 8004334:	40026488 	.word	0x40026488
 8004338:	40026040 	.word	0x40026040
 800433c:	40026440 	.word	0x40026440
 8004340:	400260a0 	.word	0x400260a0
 8004344:	400264a0 	.word	0x400264a0
 8004348:	40026458 	.word	0x40026458
 800434c:	40026400 	.word	0x40026400
 8004350:	400260b8 	.word	0x400260b8
 8004354:	2340      	movs	r3, #64	@ 0x40
 8004356:	e00c      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004358:	2340      	movs	r3, #64	@ 0x40
 800435a:	e00a      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800435c:	2340      	movs	r3, #64	@ 0x40
 800435e:	e008      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004360:	2340      	movs	r3, #64	@ 0x40
 8004362:	e006      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004364:	2301      	movs	r3, #1
 8004366:	e004      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004368:	2301      	movs	r3, #1
 800436a:	e002      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004370:	2301      	movs	r3, #1
 8004372:	4a7b      	ldr	r2, [pc, #492]	@ (8004560 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8004374:	6093      	str	r3, [r2, #8]
 8004376:	e0be      	b.n	80044f6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	4b79      	ldr	r3, [pc, #484]	@ (8004564 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d95c      	bls.n	800443e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a77      	ldr	r2, [pc, #476]	@ (8004568 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d053      	beq.n	8004436 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a76      	ldr	r2, [pc, #472]	@ (800456c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d04c      	beq.n	8004432 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a74      	ldr	r2, [pc, #464]	@ (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d045      	beq.n	800442e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a73      	ldr	r2, [pc, #460]	@ (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d03e      	beq.n	800442a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a71      	ldr	r2, [pc, #452]	@ (8004578 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d037      	beq.n	8004426 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a70      	ldr	r2, [pc, #448]	@ (800457c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d030      	beq.n	8004422 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d029      	beq.n	800441e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004584 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d022      	beq.n	800441a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004588 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01a      	beq.n	8004414 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6a      	ldr	r2, [pc, #424]	@ (800458c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d012      	beq.n	800440e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a68      	ldr	r2, [pc, #416]	@ (8004590 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00a      	beq.n	8004408 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a67      	ldr	r2, [pc, #412]	@ (8004594 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d102      	bne.n	8004402 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80043fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004400:	e01a      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004402:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004406:	e017      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004408:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800440c:	e014      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800440e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004412:	e011      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004414:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004418:	e00e      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800441a:	2340      	movs	r3, #64	@ 0x40
 800441c:	e00c      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800441e:	2340      	movs	r3, #64	@ 0x40
 8004420:	e00a      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004422:	2340      	movs	r3, #64	@ 0x40
 8004424:	e008      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004426:	2340      	movs	r3, #64	@ 0x40
 8004428:	e006      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800442a:	2301      	movs	r3, #1
 800442c:	e004      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800442e:	2301      	movs	r3, #1
 8004430:	e002      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004436:	2301      	movs	r3, #1
 8004438:	4a57      	ldr	r2, [pc, #348]	@ (8004598 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800443a:	60d3      	str	r3, [r2, #12]
 800443c:	e05b      	b.n	80044f6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a49      	ldr	r2, [pc, #292]	@ (8004568 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d053      	beq.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a47      	ldr	r2, [pc, #284]	@ (800456c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d04c      	beq.n	80044ec <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a46      	ldr	r2, [pc, #280]	@ (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d045      	beq.n	80044e8 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a44      	ldr	r2, [pc, #272]	@ (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d03e      	beq.n	80044e4 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a43      	ldr	r2, [pc, #268]	@ (8004578 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d037      	beq.n	80044e0 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a41      	ldr	r2, [pc, #260]	@ (800457c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d030      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a40      	ldr	r2, [pc, #256]	@ (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d029      	beq.n	80044d8 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3e      	ldr	r2, [pc, #248]	@ (8004584 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d022      	beq.n	80044d4 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a3d      	ldr	r2, [pc, #244]	@ (8004588 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d01a      	beq.n	80044ce <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a3b      	ldr	r2, [pc, #236]	@ (800458c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d012      	beq.n	80044c8 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3a      	ldr	r2, [pc, #232]	@ (8004590 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00a      	beq.n	80044c2 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a38      	ldr	r2, [pc, #224]	@ (8004594 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d102      	bne.n	80044bc <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80044b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044ba:	e01a      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80044c0:	e017      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044c6:	e014      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044cc:	e011      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044d2:	e00e      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044d4:	2340      	movs	r3, #64	@ 0x40
 80044d6:	e00c      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044d8:	2340      	movs	r3, #64	@ 0x40
 80044da:	e00a      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044dc:	2340      	movs	r3, #64	@ 0x40
 80044de:	e008      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044e0:	2340      	movs	r3, #64	@ 0x40
 80044e2:	e006      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e004      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e002      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80044f0:	2301      	movs	r3, #1
 80044f2:	4a29      	ldr	r2, [pc, #164]	@ (8004598 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80044f4:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0216 	orr.w	r2, r2, #22
 8004504:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004514:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d103      	bne.n	8004526 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0208 	orr.w	r2, r2, #8
 8004534:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e005      	b.n	8004554 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004550:	2302      	movs	r3, #2
 8004552:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004554:	7dfb      	ldrb	r3, [r7, #23]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40026400 	.word	0x40026400
 8004564:	40026058 	.word	0x40026058
 8004568:	40026010 	.word	0x40026010
 800456c:	40026410 	.word	0x40026410
 8004570:	40026070 	.word	0x40026070
 8004574:	40026470 	.word	0x40026470
 8004578:	40026028 	.word	0x40026028
 800457c:	40026428 	.word	0x40026428
 8004580:	40026088 	.word	0x40026088
 8004584:	40026488 	.word	0x40026488
 8004588:	40026040 	.word	0x40026040
 800458c:	40026440 	.word	0x40026440
 8004590:	400260a0 	.word	0x400260a0
 8004594:	400264a0 	.word	0x400264a0
 8004598:	40026000 	.word	0x40026000

0800459c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	60da      	str	r2, [r3, #12]
 80045b8:	e003      	b.n	80045c2 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b40      	cmp	r3, #64	@ 0x40
 80045ec:	d108      	bne.n	8004600 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045fe:	e007      	b.n	8004610 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800461c:	b480      	push	{r7}
 800461e:	b089      	sub	sp, #36	@ 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e16b      	b.n	8004910 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004638:	2201      	movs	r2, #1
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	429a      	cmp	r2, r3
 8004652:	f040 815a 	bne.w	800490a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b01      	cmp	r3, #1
 8004660:	d005      	beq.n	800466e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466a:	2b02      	cmp	r3, #2
 800466c:	d130      	bne.n	80046d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	2203      	movs	r2, #3
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4313      	orrs	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046a4:	2201      	movs	r2, #1
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 0201 	and.w	r2, r3, #1
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d017      	beq.n	800470c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	2203      	movs	r2, #3
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d123      	bne.n	8004760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	08da      	lsrs	r2, r3, #3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3208      	adds	r2, #8
 8004720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	220f      	movs	r2, #15
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	08da      	lsrs	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3208      	adds	r2, #8
 800475a:	69b9      	ldr	r1, [r7, #24]
 800475c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	2203      	movs	r2, #3
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0203 	and.w	r2, r3, #3
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80b4 	beq.w	800490a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	4b60      	ldr	r3, [pc, #384]	@ (8004928 <HAL_GPIO_Init+0x30c>)
 80047a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047aa:	4a5f      	ldr	r2, [pc, #380]	@ (8004928 <HAL_GPIO_Init+0x30c>)
 80047ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80047b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004928 <HAL_GPIO_Init+0x30c>)
 80047b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047be:	4a5b      	ldr	r2, [pc, #364]	@ (800492c <HAL_GPIO_Init+0x310>)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	089b      	lsrs	r3, r3, #2
 80047c4:	3302      	adds	r3, #2
 80047c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	220f      	movs	r2, #15
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <HAL_GPIO_Init+0x314>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d02b      	beq.n	8004842 <HAL_GPIO_Init+0x226>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a51      	ldr	r2, [pc, #324]	@ (8004934 <HAL_GPIO_Init+0x318>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d025      	beq.n	800483e <HAL_GPIO_Init+0x222>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a50      	ldr	r2, [pc, #320]	@ (8004938 <HAL_GPIO_Init+0x31c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01f      	beq.n	800483a <HAL_GPIO_Init+0x21e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a4f      	ldr	r2, [pc, #316]	@ (800493c <HAL_GPIO_Init+0x320>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d019      	beq.n	8004836 <HAL_GPIO_Init+0x21a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a4e      	ldr	r2, [pc, #312]	@ (8004940 <HAL_GPIO_Init+0x324>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <HAL_GPIO_Init+0x216>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a4d      	ldr	r2, [pc, #308]	@ (8004944 <HAL_GPIO_Init+0x328>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00d      	beq.n	800482e <HAL_GPIO_Init+0x212>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a4c      	ldr	r2, [pc, #304]	@ (8004948 <HAL_GPIO_Init+0x32c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <HAL_GPIO_Init+0x20e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a4b      	ldr	r2, [pc, #300]	@ (800494c <HAL_GPIO_Init+0x330>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <HAL_GPIO_Init+0x20a>
 8004822:	2307      	movs	r3, #7
 8004824:	e00e      	b.n	8004844 <HAL_GPIO_Init+0x228>
 8004826:	2308      	movs	r3, #8
 8004828:	e00c      	b.n	8004844 <HAL_GPIO_Init+0x228>
 800482a:	2306      	movs	r3, #6
 800482c:	e00a      	b.n	8004844 <HAL_GPIO_Init+0x228>
 800482e:	2305      	movs	r3, #5
 8004830:	e008      	b.n	8004844 <HAL_GPIO_Init+0x228>
 8004832:	2304      	movs	r3, #4
 8004834:	e006      	b.n	8004844 <HAL_GPIO_Init+0x228>
 8004836:	2303      	movs	r3, #3
 8004838:	e004      	b.n	8004844 <HAL_GPIO_Init+0x228>
 800483a:	2302      	movs	r3, #2
 800483c:	e002      	b.n	8004844 <HAL_GPIO_Init+0x228>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_GPIO_Init+0x228>
 8004842:	2300      	movs	r3, #0
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	f002 0203 	and.w	r2, r2, #3
 800484a:	0092      	lsls	r2, r2, #2
 800484c:	4093      	lsls	r3, r2
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004854:	4935      	ldr	r1, [pc, #212]	@ (800492c <HAL_GPIO_Init+0x310>)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	3302      	adds	r3, #2
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004862:	4b3b      	ldr	r3, [pc, #236]	@ (8004950 <HAL_GPIO_Init+0x334>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004886:	4a32      	ldr	r2, [pc, #200]	@ (8004950 <HAL_GPIO_Init+0x334>)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800488c:	4b30      	ldr	r3, [pc, #192]	@ (8004950 <HAL_GPIO_Init+0x334>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b0:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <HAL_GPIO_Init+0x334>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048b6:	4b26      	ldr	r3, [pc, #152]	@ (8004950 <HAL_GPIO_Init+0x334>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048da:	4a1d      	ldr	r2, [pc, #116]	@ (8004950 <HAL_GPIO_Init+0x334>)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <HAL_GPIO_Init+0x334>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004904:	4a12      	ldr	r2, [pc, #72]	@ (8004950 <HAL_GPIO_Init+0x334>)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3301      	adds	r3, #1
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b0f      	cmp	r3, #15
 8004914:	f67f ae90 	bls.w	8004638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	3724      	adds	r7, #36	@ 0x24
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	40013800 	.word	0x40013800
 8004930:	40020000 	.word	0x40020000
 8004934:	40020400 	.word	0x40020400
 8004938:	40020800 	.word	0x40020800
 800493c:	40020c00 	.word	0x40020c00
 8004940:	40021000 	.word	0x40021000
 8004944:	40021400 	.word	0x40021400
 8004948:	40021800 	.word	0x40021800
 800494c:	40021c00 	.word	0x40021c00
 8004950:	40013c00 	.word	0x40013c00

08004954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800495e:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800496a:	4a05      	ldr	r2, [pc, #20]	@ (8004980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fd f864 	bl	8001a40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40013c00 	.word	0x40013c00

08004984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t pclk1;

  /* Check the I2C handle allocation */


  if (hi2c == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e12b      	b.n	8004bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fd f9d2 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	@ 0x24
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0201 	bic.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049e8:	f002 f9ee 	bl	8006dc8 <HAL_RCC_GetPCLK1Freq>
 80049ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4a81      	ldr	r2, [pc, #516]	@ (8004bf8 <HAL_I2C_Init+0x274>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d807      	bhi.n	8004a08 <HAL_I2C_Init+0x84>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a80      	ldr	r2, [pc, #512]	@ (8004bfc <HAL_I2C_Init+0x278>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	bf94      	ite	ls
 8004a00:	2301      	movls	r3, #1
 8004a02:	2300      	movhi	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e006      	b.n	8004a16 <HAL_I2C_Init+0x92>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a7d      	ldr	r2, [pc, #500]	@ (8004c00 <HAL_I2C_Init+0x27c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	bf94      	ite	ls
 8004a10:	2301      	movls	r3, #1
 8004a12:	2300      	movhi	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0e7      	b.n	8004bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a78      	ldr	r2, [pc, #480]	@ (8004c04 <HAL_I2C_Init+0x280>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	0c9b      	lsrs	r3, r3, #18
 8004a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4a6a      	ldr	r2, [pc, #424]	@ (8004bf8 <HAL_I2C_Init+0x274>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d802      	bhi.n	8004a58 <HAL_I2C_Init+0xd4>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	3301      	adds	r3, #1
 8004a56:	e009      	b.n	8004a6c <HAL_I2C_Init+0xe8>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	4a69      	ldr	r2, [pc, #420]	@ (8004c08 <HAL_I2C_Init+0x284>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	099b      	lsrs	r3, r3, #6
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	495c      	ldr	r1, [pc, #368]	@ (8004bf8 <HAL_I2C_Init+0x274>)
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	d819      	bhi.n	8004ac0 <HAL_I2C_Init+0x13c>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1e59      	subs	r1, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a9a:	1c59      	adds	r1, r3, #1
 8004a9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004aa0:	400b      	ands	r3, r1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_I2C_Init+0x138>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1e59      	subs	r1, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aba:	e051      	b.n	8004b60 <HAL_I2C_Init+0x1dc>
 8004abc:	2304      	movs	r3, #4
 8004abe:	e04f      	b.n	8004b60 <HAL_I2C_Init+0x1dc>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d111      	bne.n	8004aec <HAL_I2C_Init+0x168>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1e58      	subs	r0, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6859      	ldr	r1, [r3, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	440b      	add	r3, r1
 8004ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e012      	b.n	8004b12 <HAL_I2C_Init+0x18e>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1e58      	subs	r0, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	0099      	lsls	r1, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b02:	3301      	adds	r3, #1
 8004b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_I2C_Init+0x196>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e022      	b.n	8004b60 <HAL_I2C_Init+0x1dc>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10e      	bne.n	8004b40 <HAL_I2C_Init+0x1bc>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1e58      	subs	r0, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6859      	ldr	r1, [r3, #4]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	440b      	add	r3, r1
 8004b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b34:	3301      	adds	r3, #1
 8004b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b3e:	e00f      	b.n	8004b60 <HAL_I2C_Init+0x1dc>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1e58      	subs	r0, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6859      	ldr	r1, [r3, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	0099      	lsls	r1, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	6809      	ldr	r1, [r1, #0]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6911      	ldr	r1, [r2, #16]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68d2      	ldr	r2, [r2, #12]
 8004b9a:	4311      	orrs	r1, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	000186a0 	.word	0x000186a0
 8004bfc:	001e847f 	.word	0x001e847f
 8004c00:	003d08ff 	.word	0x003d08ff
 8004c04:	431bde83 	.word	0x431bde83
 8004c08:	10624dd3 	.word	0x10624dd3

08004c0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	@ 0x28
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004c1c:	f7fd fbfa 	bl	8002414 <HAL_GetTick>
 8004c20:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	f040 8111 	bne.w	8004e56 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	2319      	movs	r3, #25
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	4988      	ldr	r1, [pc, #544]	@ (8004e60 <HAL_I2C_IsDeviceReady+0x254>)
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f912 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e104      	b.n	8004e58 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_I2C_IsDeviceReady+0x50>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e0fd      	b.n	8004e58 <HAL_I2C_IsDeviceReady+0x24c>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d007      	beq.n	8004c82 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0201 	orr.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2224      	movs	r2, #36	@ 0x24
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a70      	ldr	r2, [pc, #448]	@ (8004e64 <HAL_I2C_IsDeviceReady+0x258>)
 8004ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cb4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f8d0 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00d      	beq.n	8004cea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cdc:	d103      	bne.n	8004ce6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ce4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0b6      	b.n	8004e58 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cf8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004cfa:	f7fd fb8b 	bl	8002414 <HAL_GetTick>
 8004cfe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	bf0c      	ite	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	2300      	movne	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d24:	bf0c      	ite	eq
 8004d26:	2301      	moveq	r3, #1
 8004d28:	2300      	movne	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d2e:	e025      	b.n	8004d7c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d30:	f7fd fb70 	bl	8002414 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d302      	bcc.n	8004d46 <HAL_I2C_IsDeviceReady+0x13a>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	22a0      	movs	r2, #160	@ 0xa0
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d86:	d005      	beq.n	8004d94 <HAL_I2C_IsDeviceReady+0x188>
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <HAL_I2C_IsDeviceReady+0x188>
 8004d8e:	7dbb      	ldrb	r3, [r7, #22]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0cd      	beq.n	8004d30 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d129      	bne.n	8004dfe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	2319      	movs	r3, #25
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	4921      	ldr	r1, [pc, #132]	@ (8004e60 <HAL_I2C_IsDeviceReady+0x254>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f844 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e036      	b.n	8004e58 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e02c      	b.n	8004e58 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e16:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	2319      	movs	r3, #25
 8004e1e:	2201      	movs	r2, #1
 8004e20:	490f      	ldr	r1, [pc, #60]	@ (8004e60 <HAL_I2C_IsDeviceReady+0x254>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f820 	bl	8004e68 <I2C_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e012      	b.n	8004e58 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	3301      	adds	r3, #1
 8004e36:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	f4ff af32 	bcc.w	8004ca6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	00100002 	.word	0x00100002
 8004e64:	ffff0000 	.word	0xffff0000

08004e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e78:	e048      	b.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d044      	beq.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fd fac7 	bl	8002414 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d139      	bne.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d10d      	bne.n	8004ebe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	43da      	mvns	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4013      	ands	r3, r2
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	e00c      	b.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d116      	bne.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e023      	b.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10d      	bne.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	43da      	mvns	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	e00c      	b.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d093      	beq.n	8004e7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e101      	b.n	8005172 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f00b f8f5 	bl	8010178 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2203      	movs	r2, #3
 8004f92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f9c:	d102      	bne.n	8004fa4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f004 fd1a 	bl	80099e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7c1a      	ldrb	r2, [r3, #16]
 8004fb6:	f88d 2000 	strb.w	r2, [sp]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fbe:	f004 fbf9 	bl	80097b4 <USB_CoreInit>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0ce      	b.n	8005172 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f004 fd12 	bl	8009a04 <USB_SetCurrentMode>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0bf      	b.n	8005172 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	73fb      	strb	r3, [r7, #15]
 8004ff6:	e04a      	b.n	800508e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ff8:	7bfa      	ldrb	r2, [r7, #15]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	3315      	adds	r3, #21
 8005008:	2201      	movs	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800500c:	7bfa      	ldrb	r2, [r7, #15]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	3314      	adds	r3, #20
 800501c:	7bfa      	ldrb	r2, [r7, #15]
 800501e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005020:	7bfa      	ldrb	r2, [r7, #15]
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	b298      	uxth	r0, r3
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	332e      	adds	r3, #46	@ 0x2e
 8005034:	4602      	mov	r2, r0
 8005036:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	3318      	adds	r3, #24
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800504c:	7bfa      	ldrb	r2, [r7, #15]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	331c      	adds	r3, #28
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005060:	7bfa      	ldrb	r2, [r7, #15]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3320      	adds	r3, #32
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005074:	7bfa      	ldrb	r2, [r7, #15]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	3324      	adds	r3, #36	@ 0x24
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	3301      	adds	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	791b      	ldrb	r3, [r3, #4]
 8005092:	7bfa      	ldrb	r2, [r7, #15]
 8005094:	429a      	cmp	r2, r3
 8005096:	d3af      	bcc.n	8004ff8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005098:	2300      	movs	r3, #0
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	e044      	b.n	8005128 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800509e:	7bfa      	ldrb	r2, [r7, #15]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050b4:	7bfa      	ldrb	r2, [r7, #15]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80050c6:	7bfa      	ldrb	r2, [r7, #15]
 80050c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050e0:	7bfa      	ldrb	r2, [r7, #15]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050f6:	7bfa      	ldrb	r2, [r7, #15]
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800510c:	7bfa      	ldrb	r2, [r7, #15]
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	3301      	adds	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	791b      	ldrb	r3, [r3, #4]
 800512c:	7bfa      	ldrb	r2, [r7, #15]
 800512e:	429a      	cmp	r2, r3
 8005130:	d3b5      	bcc.n	800509e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	7c1a      	ldrb	r2, [r3, #16]
 800513a:	f88d 2000 	strb.w	r2, [sp]
 800513e:	3304      	adds	r3, #4
 8005140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005142:	f004 fcab 	bl	8009a9c <USB_DevInit>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e00c      	b.n	8005172 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f005 fcf5 	bl	800ab5a <USB_DevDisconnect>

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_PCD_Start+0x1c>
 8005192:	2302      	movs	r3, #2
 8005194:	e022      	b.n	80051dc <HAL_PCD_Start+0x62>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f004 fbfc 	bl	80099c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f005 fca3 	bl	800ab18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b08d      	sub	sp, #52	@ 0x34
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f005 fd61 	bl	800acc2 <USB_GetMode>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	f040 848c 	bne.w	8005b20 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f005 fcc5 	bl	800ab9c <USB_ReadInterrupts>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8482 	beq.w	8005b1e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f005 fcb2 	bl	800ab9c <USB_ReadInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b02      	cmp	r3, #2
 8005240:	d107      	bne.n	8005252 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695a      	ldr	r2, [r3, #20]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f002 0202 	and.w	r2, r2, #2
 8005250:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f005 fca0 	bl	800ab9c <USB_ReadInterrupts>
 800525c:	4603      	mov	r3, r0
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b10      	cmp	r3, #16
 8005264:	d161      	bne.n	800532a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0210 	bic.w	r2, r2, #16
 8005274:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f003 020f 	and.w	r2, r3, #15
 8005282:	4613      	mov	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	3304      	adds	r3, #4
 8005294:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800529c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052a0:	d124      	bne.n	80052ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d035      	beq.n	800531a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	6a38      	ldr	r0, [r7, #32]
 80052c2:	f005 fad7 	bl	800a874 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052d2:	441a      	add	r2, r3
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052e4:	441a      	add	r2, r3
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	615a      	str	r2, [r3, #20]
 80052ea:	e016      	b.n	800531a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80052f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052f6:	d110      	bne.n	800531a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052fe:	2208      	movs	r2, #8
 8005300:	4619      	mov	r1, r3
 8005302:	6a38      	ldr	r0, [r7, #32]
 8005304:	f005 fab6 	bl	800a874 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005314:	441a      	add	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699a      	ldr	r2, [r3, #24]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0210 	orr.w	r2, r2, #16
 8005328:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f005 fc34 	bl	800ab9c <USB_ReadInterrupts>
 8005334:	4603      	mov	r3, r0
 8005336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800533a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800533e:	f040 80a7 	bne.w	8005490 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f005 fc39 	bl	800abc2 <USB_ReadDevAllOutEpInterrupt>
 8005350:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005352:	e099      	b.n	8005488 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 808e 	beq.w	800547c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f005 fc5d 	bl	800ac2a <USB_ReadDevOutEPInterrupt>
 8005370:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00c      	beq.n	8005396 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005388:	461a      	mov	r2, r3
 800538a:	2301      	movs	r3, #1
 800538c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800538e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fea3 	bl	80060dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00c      	beq.n	80053ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ac:	461a      	mov	r2, r3
 80053ae:	2308      	movs	r3, #8
 80053b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80053b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 ff79 	bl	80062ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d0:	461a      	mov	r2, r3
 80053d2:	2310      	movs	r3, #16
 80053d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d030      	beq.n	8005442 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e8:	2b80      	cmp	r3, #128	@ 0x80
 80053ea:	d109      	bne.n	8005400 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	78db      	ldrb	r3, [r3, #3]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d108      	bne.n	8005430 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2200      	movs	r2, #0
 8005422:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	b2db      	uxtb	r3, r3
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f00a ffaa 	bl	8010384 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543c:	461a      	mov	r2, r3
 800543e:	2302      	movs	r3, #2
 8005440:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005458:	461a      	mov	r2, r3
 800545a:	2320      	movs	r3, #32
 800545c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005474:	461a      	mov	r2, r3
 8005476:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800547a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	3301      	adds	r3, #1
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548a:	2b00      	cmp	r3, #0
 800548c:	f47f af62 	bne.w	8005354 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f005 fb81 	bl	800ab9c <USB_ReadInterrupts>
 800549a:	4603      	mov	r3, r0
 800549c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054a4:	f040 80db 	bne.w	800565e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f005 fba2 	bl	800abf6 <USB_ReadDevAllInEpInterrupt>
 80054b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80054b8:	e0cd      	b.n	8005656 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80c2 	beq.w	800564a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	4611      	mov	r1, r2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f005 fbc8 	bl	800ac66 <USB_ReadDevInEPInterrupt>
 80054d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d057      	beq.n	8005592 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	2201      	movs	r2, #1
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69f9      	ldr	r1, [r7, #28]
 80054fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005502:	4013      	ands	r3, r2
 8005504:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005512:	461a      	mov	r2, r3
 8005514:	2301      	movs	r3, #1
 8005516:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	799b      	ldrb	r3, [r3, #6]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d132      	bne.n	8005586 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	3320      	adds	r3, #32
 8005530:	6819      	ldr	r1, [r3, #0]
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005536:	4613      	mov	r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4403      	add	r3, r0
 8005540:	331c      	adds	r3, #28
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4419      	add	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554a:	4613      	mov	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4403      	add	r3, r0
 8005554:	3320      	adds	r3, #32
 8005556:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	d113      	bne.n	8005586 <HAL_PCD_IRQHandler+0x3a2>
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005562:	4613      	mov	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	3324      	adds	r3, #36	@ 0x24
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d108      	bne.n	8005586 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800557e:	461a      	mov	r2, r3
 8005580:	2101      	movs	r1, #1
 8005582:	f005 fbcf 	bl	800ad24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	b2db      	uxtb	r3, r3
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f00a fe74 	bl	801027a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a8:	461a      	mov	r2, r3
 80055aa:	2308      	movs	r3, #8
 80055ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c4:	461a      	mov	r2, r3
 80055c6:	2310      	movs	r3, #16
 80055c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e0:	461a      	mov	r2, r3
 80055e2:	2340      	movs	r3, #64	@ 0x40
 80055e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d023      	beq.n	8005638 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80055f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055f2:	6a38      	ldr	r0, [r7, #32]
 80055f4:	f004 fbb6 	bl	8009d64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80055f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fa:	4613      	mov	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	3310      	adds	r3, #16
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	3304      	adds	r3, #4
 800560a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	78db      	ldrb	r3, [r3, #3]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d108      	bne.n	8005626 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2200      	movs	r2, #0
 8005618:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	b2db      	uxtb	r3, r3
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f00a fec1 	bl	80103a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005632:	461a      	mov	r2, r3
 8005634:	2302      	movs	r3, #2
 8005636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fcbd 	bl	8005fc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	3301      	adds	r3, #1
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	2b00      	cmp	r3, #0
 800565a:	f47f af2e 	bne.w	80054ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f005 fa9a 	bl	800ab9c <USB_ReadInterrupts>
 8005668:	4603      	mov	r3, r0
 800566a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800566e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005672:	d122      	bne.n	80056ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800568e:	2b01      	cmp	r3, #1
 8005690:	d108      	bne.n	80056a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800569a:	2100      	movs	r1, #0
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fea3 	bl	80063e8 <HAL_PCDEx_LPM_Callback>
 80056a2:	e002      	b.n	80056aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f00a fe5f 	bl	8010368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80056b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f005 fa6c 	bl	800ab9c <USB_ReadInterrupts>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ce:	d112      	bne.n	80056f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d102      	bne.n	80056e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f00a fe1b 	bl	801031c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80056f4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f005 fa4e 	bl	800ab9c <USB_ReadInterrupts>
 8005700:	4603      	mov	r3, r0
 8005702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570a:	f040 80b7 	bne.w	800587c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2110      	movs	r1, #16
 8005728:	4618      	mov	r0, r3
 800572a:	f004 fb1b 	bl	8009d64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572e:	2300      	movs	r3, #0
 8005730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005732:	e046      	b.n	80057c2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005740:	461a      	mov	r2, r3
 8005742:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005746:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005762:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005766:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005774:	461a      	mov	r2, r3
 8005776:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800577a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578c:	0151      	lsls	r1, r2, #5
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	440a      	add	r2, r1
 8005792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005796:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800579a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800579c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057ba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057be:	3301      	adds	r3, #1
 80057c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	791b      	ldrb	r3, [r3, #4]
 80057c6:	461a      	mov	r2, r3
 80057c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d3b2      	bcc.n	8005734 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057dc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80057e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	7bdb      	ldrb	r3, [r3, #15]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057fa:	f043 030b 	orr.w	r3, r3, #11
 80057fe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005810:	f043 030b 	orr.w	r3, r3, #11
 8005814:	6453      	str	r3, [r2, #68]	@ 0x44
 8005816:	e015      	b.n	8005844 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005826:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800582a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800582e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800583e:	f043 030b 	orr.w	r3, r3, #11
 8005842:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005852:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005856:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005866:	461a      	mov	r2, r3
 8005868:	f005 fa5c 	bl	800ad24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800587a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f005 f98b 	bl	800ab9c <USB_ReadInterrupts>
 8005886:	4603      	mov	r3, r0
 8005888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800588c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005890:	d123      	bne.n	80058da <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f005 fa21 	bl	800acde <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f004 fad8 	bl	8009e56 <USB_GetDevSpeed>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681c      	ldr	r4, [r3, #0]
 80058b2:	f001 fa7d 	bl	8006db0 <HAL_RCC_GetHCLKFreq>
 80058b6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058bc:	461a      	mov	r2, r3
 80058be:	4620      	mov	r0, r4
 80058c0:	f003 ffdc 	bl	800987c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f00a fd00 	bl	80102ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80058d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f005 f95c 	bl	800ab9c <USB_ReadInterrupts>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d10a      	bne.n	8005904 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f00a fcdd 	bl	80102ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f002 0208 	and.w	r2, r2, #8
 8005902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f005 f947 	bl	800ab9c <USB_ReadInterrupts>
 800590e:	4603      	mov	r3, r0
 8005910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005914:	2b80      	cmp	r3, #128	@ 0x80
 8005916:	d123      	bne.n	8005960 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005924:	2301      	movs	r3, #1
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
 8005928:	e014      	b.n	8005954 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d105      	bne.n	800594e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005944:	b2db      	uxtb	r3, r3
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fb0a 	bl	8005f62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	3301      	adds	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	791b      	ldrb	r3, [r3, #4]
 8005958:	461a      	mov	r2, r3
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	4293      	cmp	r3, r2
 800595e:	d3e4      	bcc.n	800592a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f005 f919 	bl	800ab9c <USB_ReadInterrupts>
 800596a:	4603      	mov	r3, r0
 800596c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005970:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005974:	d13c      	bne.n	80059f0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005976:	2301      	movs	r3, #1
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
 800597a:	e02b      	b.n	80059d4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	3318      	adds	r3, #24
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d115      	bne.n	80059ce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80059a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	da12      	bge.n	80059ce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	3317      	adds	r3, #23
 80059b8:	2201      	movs	r2, #1
 80059ba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 faca 	bl	8005f62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	3301      	adds	r3, #1
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	791b      	ldrb	r3, [r3, #4]
 80059d8:	461a      	mov	r2, r3
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	4293      	cmp	r3, r2
 80059de:	d3cd      	bcc.n	800597c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80059ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f005 f8d1 	bl	800ab9c <USB_ReadInterrupts>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a04:	d156      	bne.n	8005ab4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a06:	2301      	movs	r3, #1
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0a:	e045      	b.n	8005a98 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d12e      	bne.n	8005a92 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da2b      	bge.n	8005a92 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	0c1a      	lsrs	r2, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005a44:	4053      	eors	r3, r2
 8005a46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d121      	bne.n	8005a92 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a60:	2201      	movs	r2, #1
 8005a62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a8e:	6053      	str	r3, [r2, #4]
            break;
 8005a90:	e008      	b.n	8005aa4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	3301      	adds	r3, #1
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	791b      	ldrb	r3, [r3, #4]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d3b3      	bcc.n	8005a0c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f005 f86f 	bl	800ab9c <USB_ReadInterrupts>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac8:	d10a      	bne.n	8005ae0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f00a fc7e 	bl	80103cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f005 f859 	bl	800ab9c <USB_ReadInterrupts>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d115      	bne.n	8005b20 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f00a fc6e 	bl	80103e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	605a      	str	r2, [r3, #4]
 8005b1c:	e000      	b.n	8005b20 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005b1e:	bf00      	nop
    }
  }
}
 8005b20:	3734      	adds	r7, #52	@ 0x34
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd90      	pop	{r4, r7, pc}

08005b26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_PCD_SetAddress+0x1a>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e012      	b.n	8005b66 <HAL_PCD_SetAddress+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	78fa      	ldrb	r2, [r7, #3]
 8005b4c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	4611      	mov	r1, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f004 ffb8 	bl	800aacc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	4608      	mov	r0, r1
 8005b78:	4611      	mov	r1, r2
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	70fb      	strb	r3, [r7, #3]
 8005b80:	460b      	mov	r3, r1
 8005b82:	803b      	strh	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da0f      	bge.n	8005bb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	f003 020f 	and.w	r2, r3, #15
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	3310      	adds	r3, #16
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3304      	adds	r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	705a      	strb	r2, [r3, #1]
 8005bb2:	e00f      	b.n	8005bd4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	f003 020f 	and.w	r2, r3, #15
 8005bba:	4613      	mov	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	3304      	adds	r3, #4
 8005bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005be0:	883b      	ldrh	r3, [r7, #0]
 8005be2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	78ba      	ldrb	r2, [r7, #2]
 8005bee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c02:	78bb      	ldrb	r3, [r7, #2]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d102      	bne.n	8005c0e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_PCD_EP_Open+0xae>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e00e      	b.n	8005c3a <HAL_PCD_EP_Open+0xcc>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68f9      	ldr	r1, [r7, #12]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 f938 	bl	8009ea0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005c38:	7afb      	ldrb	r3, [r7, #11]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da0f      	bge.n	8005c76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	f003 020f 	and.w	r2, r3, #15
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	3310      	adds	r3, #16
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4413      	add	r3, r2
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	705a      	strb	r2, [r3, #1]
 8005c74:	e00f      	b.n	8005c96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_PCD_EP_Close+0x6e>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e00e      	b.n	8005cce <HAL_PCD_EP_Close+0x8c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68f9      	ldr	r1, [r7, #12]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f004 f976 	bl	8009fb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	f003 020f 	and.w	r2, r3, #15
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d18:	7afb      	ldrb	r3, [r7, #11]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	799b      	ldrb	r3, [r3, #6]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d102      	bne.n	8005d32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	799b      	ldrb	r3, [r3, #6]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6979      	ldr	r1, [r7, #20]
 8005d3e:	f004 fa13 	bl	800a168 <USB_EPStartXfer>

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	f003 020f 	and.w	r2, r3, #15
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005d6e:	681b      	ldr	r3, [r3, #0]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	607a      	str	r2, [r7, #4]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d8c:	7afb      	ldrb	r3, [r7, #11]
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	4613      	mov	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	3310      	adds	r3, #16
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	3304      	adds	r3, #4
 8005da2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2200      	movs	r2, #0
 8005db4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2201      	movs	r2, #1
 8005dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	799b      	ldrb	r3, [r3, #6]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d102      	bne.n	8005dd6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	799b      	ldrb	r3, [r3, #6]
 8005dde:	461a      	mov	r2, r3
 8005de0:	6979      	ldr	r1, [r7, #20]
 8005de2:	f004 f9c1 	bl	800a168 <USB_EPStartXfer>

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	7912      	ldrb	r2, [r2, #4]
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e04f      	b.n	8005eae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da0f      	bge.n	8005e36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	3310      	adds	r3, #16
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4413      	add	r3, r2
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	705a      	strb	r2, [r3, #1]
 8005e34:	e00d      	b.n	8005e52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4413      	add	r3, r2
 8005e48:	3304      	adds	r3, #4
 8005e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_PCD_EP_SetStall+0x82>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e01d      	b.n	8005eae <HAL_PCD_EP_SetStall+0xbe>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f004 fd4f 	bl	800a924 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d109      	bne.n	8005ea4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	7999      	ldrb	r1, [r3, #6]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f004 ff40 	bl	800ad24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	7912      	ldrb	r2, [r2, #4]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d901      	bls.n	8005ed4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e042      	b.n	8005f5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da0f      	bge.n	8005efc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	f003 020f 	and.w	r2, r3, #15
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	3310      	adds	r3, #16
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	705a      	strb	r2, [r3, #1]
 8005efa:	e00f      	b.n	8005f1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 020f 	and.w	r2, r3, #15
 8005f02:	4613      	mov	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	4413      	add	r3, r2
 8005f12:	3304      	adds	r3, #4
 8005f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_PCD_EP_ClrStall+0x86>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e00e      	b.n	8005f5a <HAL_PCD_EP_ClrStall+0xa4>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68f9      	ldr	r1, [r7, #12]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f004 fd58 	bl	800aa00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da0c      	bge.n	8005f90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	f003 020f 	and.w	r2, r3, #15
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	3310      	adds	r3, #16
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e00c      	b.n	8005faa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	f003 020f 	and.w	r2, r3, #15
 8005f96:	4613      	mov	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68f9      	ldr	r1, [r7, #12]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f004 fb77 	bl	800a6a4 <USB_EPStopXfer>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005fba:	7afb      	ldrb	r3, [r7, #11]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	@ 0x28
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	3310      	adds	r3, #16
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3304      	adds	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d901      	bls.n	8005ffc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e06b      	b.n	80060d4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	429a      	cmp	r2, r3
 8006010:	d902      	bls.n	8006018 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	3303      	adds	r3, #3
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006020:	e02a      	b.n	8006078 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	429a      	cmp	r2, r3
 8006036:	d902      	bls.n	800603e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	3303      	adds	r3, #3
 8006042:	089b      	lsrs	r3, r3, #2
 8006044:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68d9      	ldr	r1, [r3, #12]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	b2da      	uxtb	r2, r3
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	4603      	mov	r3, r0
 800605a:	6978      	ldr	r0, [r7, #20]
 800605c:	f004 fbcc 	bl	800a7f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	441a      	add	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	441a      	add	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	429a      	cmp	r2, r3
 800608c:	d809      	bhi.n	80060a2 <PCD_WriteEmptyTxFifo+0xde>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006096:	429a      	cmp	r2, r3
 8006098:	d203      	bcs.n	80060a2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1bf      	bne.n	8006022 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d811      	bhi.n	80060d2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	2201      	movs	r2, #1
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	43db      	mvns	r3, r3
 80060c8:	6939      	ldr	r1, [r7, #16]
 80060ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060ce:	4013      	ands	r3, r2
 80060d0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	333c      	adds	r3, #60	@ 0x3c
 80060f4:	3304      	adds	r3, #4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	799b      	ldrb	r3, [r3, #6]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d17b      	bne.n	800620a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d015      	beq.n	8006148 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4a61      	ldr	r2, [pc, #388]	@ (80062a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	f240 80b9 	bls.w	8006298 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80b3 	beq.w	8006298 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613e:	461a      	mov	r2, r3
 8006140:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006144:	6093      	str	r3, [r2, #8]
 8006146:	e0a7      	b.n	8006298 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615e:	461a      	mov	r2, r3
 8006160:	2320      	movs	r3, #32
 8006162:	6093      	str	r3, [r2, #8]
 8006164:	e098      	b.n	8006298 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800616c:	2b00      	cmp	r3, #0
 800616e:	f040 8093 	bne.w	8006298 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	4a4b      	ldr	r2, [pc, #300]	@ (80062a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d90f      	bls.n	800619a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006190:	461a      	mov	r2, r3
 8006192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006196:	6093      	str	r3, [r2, #8]
 8006198:	e07e      	b.n	8006298 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4413      	add	r3, r2
 80061ac:	3304      	adds	r3, #4
 80061ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	0159      	lsls	r1, r3, #5
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	440b      	add	r3, r1
 80061bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c6:	1ad2      	subs	r2, r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d114      	bne.n	80061fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061e4:	461a      	mov	r2, r3
 80061e6:	2101      	movs	r1, #1
 80061e8:	f004 fd9c 	bl	800ad24 <USB_EP0_OutStart>
 80061ec:	e006      	b.n	80061fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	441a      	add	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f00a f81e 	bl	8010244 <HAL_PCD_DataOutStageCallback>
 8006208:	e046      	b.n	8006298 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4a26      	ldr	r2, [pc, #152]	@ (80062a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d124      	bne.n	800625c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006228:	461a      	mov	r2, r3
 800622a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800622e:	6093      	str	r3, [r2, #8]
 8006230:	e032      	b.n	8006298 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006248:	461a      	mov	r2, r3
 800624a:	2320      	movs	r3, #32
 800624c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f009 fff5 	bl	8010244 <HAL_PCD_DataOutStageCallback>
 800625a:	e01d      	b.n	8006298 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d114      	bne.n	800628c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	4613      	mov	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	440b      	add	r3, r1
 8006270:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d108      	bne.n	800628c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006284:	461a      	mov	r2, r3
 8006286:	2100      	movs	r1, #0
 8006288:	f004 fd4c 	bl	800ad24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f009 ffd6 	bl	8010244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	4f54300a 	.word	0x4f54300a
 80062a8:	4f54310a 	.word	0x4f54310a

080062ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	333c      	adds	r3, #60	@ 0x3c
 80062c4:	3304      	adds	r3, #4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4a15      	ldr	r2, [pc, #84]	@ (8006334 <PCD_EP_OutSetupPacket_int+0x88>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d90e      	bls.n	8006300 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d009      	beq.n	8006300 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f8:	461a      	mov	r2, r3
 80062fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f009 ff8d 	bl	8010220 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a0a      	ldr	r2, [pc, #40]	@ (8006334 <PCD_EP_OutSetupPacket_int+0x88>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d90c      	bls.n	8006328 <PCD_EP_OutSetupPacket_int+0x7c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	799b      	ldrb	r3, [r3, #6]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d108      	bne.n	8006328 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006320:	461a      	mov	r2, r3
 8006322:	2101      	movs	r1, #1
 8006324:	f004 fcfe 	bl	800ad24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	4f54300a 	.word	0x4f54300a

08006338 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
 8006344:	4613      	mov	r3, r2
 8006346:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d107      	bne.n	8006366 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006356:	883b      	ldrh	r3, [r7, #0]
 8006358:	0419      	lsls	r1, r3, #16
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	430a      	orrs	r2, r1
 8006362:	629a      	str	r2, [r3, #40]	@ 0x28
 8006364:	e028      	b.n	80063b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	0c1b      	lsrs	r3, r3, #16
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	4413      	add	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]
 8006378:	e00d      	b.n	8006396 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	3340      	adds	r3, #64	@ 0x40
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	3301      	adds	r3, #1
 8006394:	73fb      	strb	r3, [r7, #15]
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	3b01      	subs	r3, #1
 800639c:	429a      	cmp	r2, r3
 800639e:	d3ec      	bcc.n	800637a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063a0:	883b      	ldrh	r3, [r7, #0]
 80063a2:	0418      	lsls	r0, r3, #16
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6819      	ldr	r1, [r3, #0]
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	4302      	orrs	r2, r0
 80063b0:	3340      	adds	r3, #64	@ 0x40
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	887a      	ldrh	r2, [r7, #2]
 80063d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e267      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d075      	beq.n	800650a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800641e:	4b88      	ldr	r3, [pc, #544]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 030c 	and.w	r3, r3, #12
 8006426:	2b04      	cmp	r3, #4
 8006428:	d00c      	beq.n	8006444 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800642a:	4b85      	ldr	r3, [pc, #532]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006432:	2b08      	cmp	r3, #8
 8006434:	d112      	bne.n	800645c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006436:	4b82      	ldr	r3, [pc, #520]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800643e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006442:	d10b      	bne.n	800645c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006444:	4b7e      	ldr	r3, [pc, #504]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d05b      	beq.n	8006508 <HAL_RCC_OscConfig+0x108>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d157      	bne.n	8006508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e242      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006464:	d106      	bne.n	8006474 <HAL_RCC_OscConfig+0x74>
 8006466:	4b76      	ldr	r3, [pc, #472]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a75      	ldr	r2, [pc, #468]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e01d      	b.n	80064b0 <HAL_RCC_OscConfig+0xb0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800647c:	d10c      	bne.n	8006498 <HAL_RCC_OscConfig+0x98>
 800647e:	4b70      	ldr	r3, [pc, #448]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a6f      	ldr	r2, [pc, #444]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	4b6d      	ldr	r3, [pc, #436]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a6c      	ldr	r2, [pc, #432]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	e00b      	b.n	80064b0 <HAL_RCC_OscConfig+0xb0>
 8006498:	4b69      	ldr	r3, [pc, #420]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a68      	ldr	r2, [pc, #416]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 800649e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	4b66      	ldr	r3, [pc, #408]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a65      	ldr	r2, [pc, #404]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 80064aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d013      	beq.n	80064e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b8:	f7fb ffac 	bl	8002414 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fb ffa8 	bl	8002414 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	@ 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e207      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0xc0>
 80064de:	e014      	b.n	800650a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e0:	f7fb ff98 	bl	8002414 <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e8:	f7fb ff94 	bl	8002414 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b64      	cmp	r3, #100	@ 0x64
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e1f3      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fa:	4b51      	ldr	r3, [pc, #324]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1f0      	bne.n	80064e8 <HAL_RCC_OscConfig+0xe8>
 8006506:	e000      	b.n	800650a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d063      	beq.n	80065de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006516:	4b4a      	ldr	r3, [pc, #296]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006522:	4b47      	ldr	r3, [pc, #284]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800652a:	2b08      	cmp	r3, #8
 800652c:	d11c      	bne.n	8006568 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800652e:	4b44      	ldr	r3, [pc, #272]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d116      	bne.n	8006568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653a:	4b41      	ldr	r3, [pc, #260]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_RCC_OscConfig+0x152>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d001      	beq.n	8006552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e1c7      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006552:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4937      	ldr	r1, [pc, #220]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006566:	e03a      	b.n	80065de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d020      	beq.n	80065b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006570:	4b34      	ldr	r3, [pc, #208]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006576:	f7fb ff4d 	bl	8002414 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800657e:	f7fb ff49 	bl	8002414 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e1a8      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006590:	4b2b      	ldr	r3, [pc, #172]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0f0      	beq.n	800657e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800659c:	4b28      	ldr	r3, [pc, #160]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4925      	ldr	r1, [pc, #148]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	600b      	str	r3, [r1, #0]
 80065b0:	e015      	b.n	80065de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065b2:	4b24      	ldr	r3, [pc, #144]	@ (8006644 <HAL_RCC_OscConfig+0x244>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fb ff2c 	bl	8002414 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c0:	f7fb ff28 	bl	8002414 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e187      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d036      	beq.n	8006658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065f2:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <HAL_RCC_OscConfig+0x248>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f8:	f7fb ff0c 	bl	8002414 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006600:	f7fb ff08 	bl	8002414 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e167      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006612:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <HAL_RCC_OscConfig+0x240>)
 8006614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0x200>
 800661e:	e01b      	b.n	8006658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006620:	4b09      	ldr	r3, [pc, #36]	@ (8006648 <HAL_RCC_OscConfig+0x248>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006626:	f7fb fef5 	bl	8002414 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800662c:	e00e      	b.n	800664c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800662e:	f7fb fef1 	bl	8002414 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d907      	bls.n	800664c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e150      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
 8006640:	40023800 	.word	0x40023800
 8006644:	42470000 	.word	0x42470000
 8006648:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800664c:	4b88      	ldr	r3, [pc, #544]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800664e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ea      	bne.n	800662e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8097 	beq.w	8006794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006666:	2300      	movs	r3, #0
 8006668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800666a:	4b81      	ldr	r3, [pc, #516]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10f      	bne.n	8006696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	4b7d      	ldr	r3, [pc, #500]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667e:	4a7c      	ldr	r2, [pc, #496]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 8006680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006684:	6413      	str	r3, [r2, #64]	@ 0x40
 8006686:	4b7a      	ldr	r3, [pc, #488]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 8006688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006692:	2301      	movs	r3, #1
 8006694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006696:	4b77      	ldr	r3, [pc, #476]	@ (8006874 <HAL_RCC_OscConfig+0x474>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d118      	bne.n	80066d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066a2:	4b74      	ldr	r3, [pc, #464]	@ (8006874 <HAL_RCC_OscConfig+0x474>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a73      	ldr	r2, [pc, #460]	@ (8006874 <HAL_RCC_OscConfig+0x474>)
 80066a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ae:	f7fb feb1 	bl	8002414 <HAL_GetTick>
 80066b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b4:	e008      	b.n	80066c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b6:	f7fb fead 	bl	8002414 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e10c      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006874 <HAL_RCC_OscConfig+0x474>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0f0      	beq.n	80066b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d106      	bne.n	80066ea <HAL_RCC_OscConfig+0x2ea>
 80066dc:	4b64      	ldr	r3, [pc, #400]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 80066de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e0:	4a63      	ldr	r2, [pc, #396]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066e8:	e01c      	b.n	8006724 <HAL_RCC_OscConfig+0x324>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d10c      	bne.n	800670c <HAL_RCC_OscConfig+0x30c>
 80066f2:	4b5f      	ldr	r3, [pc, #380]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f6:	4a5e      	ldr	r2, [pc, #376]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 80066f8:	f043 0304 	orr.w	r3, r3, #4
 80066fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80066fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 8006700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006702:	4a5b      	ldr	r2, [pc, #364]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	6713      	str	r3, [r2, #112]	@ 0x70
 800670a:	e00b      	b.n	8006724 <HAL_RCC_OscConfig+0x324>
 800670c:	4b58      	ldr	r3, [pc, #352]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800670e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006710:	4a57      	ldr	r2, [pc, #348]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	6713      	str	r3, [r2, #112]	@ 0x70
 8006718:	4b55      	ldr	r3, [pc, #340]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800671a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671c:	4a54      	ldr	r2, [pc, #336]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800671e:	f023 0304 	bic.w	r3, r3, #4
 8006722:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d015      	beq.n	8006758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672c:	f7fb fe72 	bl	8002414 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006732:	e00a      	b.n	800674a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006734:	f7fb fe6e 	bl	8002414 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006742:	4293      	cmp	r3, r2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e0cb      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674a:	4b49      	ldr	r3, [pc, #292]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0ee      	beq.n	8006734 <HAL_RCC_OscConfig+0x334>
 8006756:	e014      	b.n	8006782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006758:	f7fb fe5c 	bl	8002414 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800675e:	e00a      	b.n	8006776 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006760:	f7fb fe58 	bl	8002414 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800676e:	4293      	cmp	r3, r2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e0b5      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006776:	4b3e      	ldr	r3, [pc, #248]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 8006778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1ee      	bne.n	8006760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d105      	bne.n	8006794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006788:	4b39      	ldr	r3, [pc, #228]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800678a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678c:	4a38      	ldr	r2, [pc, #224]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800678e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006792:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80a1 	beq.w	80068e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800679e:	4b34      	ldr	r3, [pc, #208]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 030c 	and.w	r3, r3, #12
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d05c      	beq.n	8006864 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d141      	bne.n	8006836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b2:	4b31      	ldr	r3, [pc, #196]	@ (8006878 <HAL_RCC_OscConfig+0x478>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b8:	f7fb fe2c 	bl	8002414 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c0:	f7fb fe28 	bl	8002414 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e087      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d2:	4b27      	ldr	r3, [pc, #156]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	019b      	lsls	r3, r3, #6
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	3b01      	subs	r3, #1
 80067f8:	041b      	lsls	r3, r3, #16
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	061b      	lsls	r3, r3, #24
 8006802:	491b      	ldr	r1, [pc, #108]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 8006804:	4313      	orrs	r3, r2
 8006806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006808:	4b1b      	ldr	r3, [pc, #108]	@ (8006878 <HAL_RCC_OscConfig+0x478>)
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680e:	f7fb fe01 	bl	8002414 <HAL_GetTick>
 8006812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006816:	f7fb fdfd 	bl	8002414 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e05c      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006828:	4b11      	ldr	r3, [pc, #68]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0f0      	beq.n	8006816 <HAL_RCC_OscConfig+0x416>
 8006834:	e054      	b.n	80068e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006836:	4b10      	ldr	r3, [pc, #64]	@ (8006878 <HAL_RCC_OscConfig+0x478>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683c:	f7fb fdea 	bl	8002414 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006844:	f7fb fde6 	bl	8002414 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e045      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006856:	4b06      	ldr	r3, [pc, #24]	@ (8006870 <HAL_RCC_OscConfig+0x470>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x444>
 8006862:	e03d      	b.n	80068e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d107      	bne.n	800687c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e038      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
 8006870:	40023800 	.word	0x40023800
 8006874:	40007000 	.word	0x40007000
 8006878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800687c:	4b1b      	ldr	r3, [pc, #108]	@ (80068ec <HAL_RCC_OscConfig+0x4ec>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d028      	beq.n	80068dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006894:	429a      	cmp	r2, r3
 8006896:	d121      	bne.n	80068dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d11a      	bne.n	80068dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80068ac:	4013      	ands	r3, r2
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d111      	bne.n	80068dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	3b01      	subs	r3, #1
 80068c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d107      	bne.n	80068dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	40023800 	.word	0x40023800

080068f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0cc      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006904:	4b68      	ldr	r3, [pc, #416]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d90c      	bls.n	800692c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006912:	4b65      	ldr	r3, [pc, #404]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800691a:	4b63      	ldr	r3, [pc, #396]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e0b8      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d020      	beq.n	800697a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006944:	4b59      	ldr	r3, [pc, #356]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	4a58      	ldr	r2, [pc, #352]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 800694a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800694e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800695c:	4b53      	ldr	r3, [pc, #332]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	4a52      	ldr	r2, [pc, #328]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006968:	4b50      	ldr	r3, [pc, #320]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	494d      	ldr	r1, [pc, #308]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006976:	4313      	orrs	r3, r2
 8006978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d044      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d107      	bne.n	800699e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800698e:	4b47      	ldr	r3, [pc, #284]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d119      	bne.n	80069ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e07f      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d003      	beq.n	80069ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d107      	bne.n	80069be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ae:	4b3f      	ldr	r3, [pc, #252]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e06f      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069be:	4b3b      	ldr	r3, [pc, #236]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e067      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ce:	4b37      	ldr	r3, [pc, #220]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f023 0203 	bic.w	r2, r3, #3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4934      	ldr	r1, [pc, #208]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069e0:	f7fb fd18 	bl	8002414 <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e6:	e00a      	b.n	80069fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e8:	f7fb fd14 	bl	8002414 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e04f      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fe:	4b2b      	ldr	r3, [pc, #172]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 020c 	and.w	r2, r3, #12
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d1eb      	bne.n	80069e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a10:	4b25      	ldr	r3, [pc, #148]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d20c      	bcs.n	8006a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1e:	4b22      	ldr	r3, [pc, #136]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a26:	4b20      	ldr	r3, [pc, #128]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d001      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e032      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a44:	4b19      	ldr	r3, [pc, #100]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	4916      	ldr	r1, [pc, #88]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a62:	4b12      	ldr	r3, [pc, #72]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	490e      	ldr	r1, [pc, #56]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a76:	f000 f895 	bl	8006ba4 <HAL_RCC_GetSysClockFreq>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	091b      	lsrs	r3, r3, #4
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	490a      	ldr	r1, [pc, #40]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a88:	5ccb      	ldrb	r3, [r1, r3]
 8006a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8e:	4a09      	ldr	r2, [pc, #36]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a92:	4b09      	ldr	r3, [pc, #36]	@ (8006ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fb fc78 	bl	800238c <HAL_InitTick>

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40023c00 	.word	0x40023c00
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	080135cc 	.word	0x080135cc
 8006ab4:	20000000 	.word	0x20000000
 8006ab8:	20000004 	.word	0x20000004

08006abc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08c      	sub	sp, #48	@ 0x30
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d129      	bne.n	8006b22 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006ad8:	f043 0301 	orr.w	r3, r3, #1
 8006adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ade:	4b28      	ldr	r3, [pc, #160]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006aea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af0:	2302      	movs	r3, #2
 8006af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006af4:	2303      	movs	r3, #3
 8006af6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006afc:	2300      	movs	r3, #0
 8006afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006b00:	f107 031c 	add.w	r3, r7, #28
 8006b04:	4619      	mov	r1, r3
 8006b06:	481f      	ldr	r0, [pc, #124]	@ (8006b84 <HAL_RCC_MCOConfig+0xc8>)
 8006b08:	f7fd fd88 	bl	800461c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	4919      	ldr	r1, [pc, #100]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006b20:	e029      	b.n	8006b76 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	4b16      	ldr	r3, [pc, #88]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2a:	4a15      	ldr	r2, [pc, #84]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006b2c:	f043 0304 	orr.w	r3, r3, #4
 8006b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b32:	4b13      	ldr	r3, [pc, #76]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006b3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b44:	2302      	movs	r3, #2
 8006b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006b50:	2300      	movs	r3, #0
 8006b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006b54:	f107 031c 	add.w	r3, r7, #28
 8006b58:	4619      	mov	r1, r3
 8006b5a:	480b      	ldr	r0, [pc, #44]	@ (8006b88 <HAL_RCC_MCOConfig+0xcc>)
 8006b5c:	f7fd fd5e 	bl	800461c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006b60:	4b07      	ldr	r3, [pc, #28]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	00d9      	lsls	r1, r3, #3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	4903      	ldr	r1, [pc, #12]	@ (8006b80 <HAL_RCC_MCOConfig+0xc4>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]
}
 8006b76:	bf00      	nop
 8006b78:	3730      	adds	r7, #48	@ 0x30
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40020000 	.word	0x40020000
 8006b88:	40020800 	.word	0x40020800

08006b8c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006b90:	4b03      	ldr	r3, [pc, #12]	@ (8006ba0 <HAL_RCC_EnableCSS+0x14>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
}
 8006b96:	bf00      	nop
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	4247004c 	.word	0x4247004c

08006ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ba8:	b094      	sub	sp, #80	@ 0x50
 8006baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bbc:	4b79      	ldr	r3, [pc, #484]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 030c 	and.w	r3, r3, #12
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d00d      	beq.n	8006be4 <HAL_RCC_GetSysClockFreq+0x40>
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	f200 80e1 	bhi.w	8006d90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d003      	beq.n	8006bde <HAL_RCC_GetSysClockFreq+0x3a>
 8006bd6:	e0db      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bd8:	4b73      	ldr	r3, [pc, #460]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bdc:	e0db      	b.n	8006d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bde:	4b73      	ldr	r3, [pc, #460]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x208>)
 8006be0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006be2:	e0d8      	b.n	8006d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006be4:	4b6f      	ldr	r3, [pc, #444]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bee:	4b6d      	ldr	r3, [pc, #436]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d063      	beq.n	8006cc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	099b      	lsrs	r3, r3, #6
 8006c00:	2200      	movs	r2, #0
 8006c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c0e:	2300      	movs	r3, #0
 8006c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c16:	4622      	mov	r2, r4
 8006c18:	462b      	mov	r3, r5
 8006c1a:	f04f 0000 	mov.w	r0, #0
 8006c1e:	f04f 0100 	mov.w	r1, #0
 8006c22:	0159      	lsls	r1, r3, #5
 8006c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c28:	0150      	lsls	r0, r2, #5
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4621      	mov	r1, r4
 8006c30:	1a51      	subs	r1, r2, r1
 8006c32:	6139      	str	r1, [r7, #16]
 8006c34:	4629      	mov	r1, r5
 8006c36:	eb63 0301 	sbc.w	r3, r3, r1
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c48:	4659      	mov	r1, fp
 8006c4a:	018b      	lsls	r3, r1, #6
 8006c4c:	4651      	mov	r1, sl
 8006c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c52:	4651      	mov	r1, sl
 8006c54:	018a      	lsls	r2, r1, #6
 8006c56:	4651      	mov	r1, sl
 8006c58:	ebb2 0801 	subs.w	r8, r2, r1
 8006c5c:	4659      	mov	r1, fp
 8006c5e:	eb63 0901 	sbc.w	r9, r3, r1
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	f04f 0300 	mov.w	r3, #0
 8006c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c76:	4690      	mov	r8, r2
 8006c78:	4699      	mov	r9, r3
 8006c7a:	4623      	mov	r3, r4
 8006c7c:	eb18 0303 	adds.w	r3, r8, r3
 8006c80:	60bb      	str	r3, [r7, #8]
 8006c82:	462b      	mov	r3, r5
 8006c84:	eb49 0303 	adc.w	r3, r9, r3
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c96:	4629      	mov	r1, r5
 8006c98:	024b      	lsls	r3, r1, #9
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	024a      	lsls	r2, r1, #9
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006caa:	2200      	movs	r2, #0
 8006cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cb4:	f7f9 ff78 	bl	8000ba8 <__aeabi_uldivmod>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc0:	e058      	b.n	8006d74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc2:	4b38      	ldr	r3, [pc, #224]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	099b      	lsrs	r3, r3, #6
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	4611      	mov	r1, r2
 8006cce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cd2:	623b      	str	r3, [r7, #32]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006cdc:	4642      	mov	r2, r8
 8006cde:	464b      	mov	r3, r9
 8006ce0:	f04f 0000 	mov.w	r0, #0
 8006ce4:	f04f 0100 	mov.w	r1, #0
 8006ce8:	0159      	lsls	r1, r3, #5
 8006cea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cee:	0150      	lsls	r0, r2, #5
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4641      	mov	r1, r8
 8006cf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d14:	ebb2 040a 	subs.w	r4, r2, sl
 8006d18:	eb63 050b 	sbc.w	r5, r3, fp
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	00eb      	lsls	r3, r5, #3
 8006d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d2a:	00e2      	lsls	r2, r4, #3
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	461d      	mov	r5, r3
 8006d30:	4643      	mov	r3, r8
 8006d32:	18e3      	adds	r3, r4, r3
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	464b      	mov	r3, r9
 8006d38:	eb45 0303 	adc.w	r3, r5, r3
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	f04f 0200 	mov.w	r2, #0
 8006d42:	f04f 0300 	mov.w	r3, #0
 8006d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	028b      	lsls	r3, r1, #10
 8006d4e:	4621      	mov	r1, r4
 8006d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d54:	4621      	mov	r1, r4
 8006d56:	028a      	lsls	r2, r1, #10
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d5e:	2200      	movs	r2, #0
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	61fa      	str	r2, [r7, #28]
 8006d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d68:	f7f9 ff1e 	bl	8000ba8 <__aeabi_uldivmod>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4613      	mov	r3, r2
 8006d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d74:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	0c1b      	lsrs	r3, r3, #16
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	3301      	adds	r3, #1
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d8e:	e002      	b.n	8006d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d90:	4b05      	ldr	r3, [pc, #20]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3750      	adds	r7, #80	@ 0x50
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da2:	bf00      	nop
 8006da4:	40023800 	.word	0x40023800
 8006da8:	00f42400 	.word	0x00f42400
 8006dac:	007a1200 	.word	0x007a1200

08006db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006db4:	4b03      	ldr	r3, [pc, #12]	@ (8006dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006db6:	681b      	ldr	r3, [r3, #0]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000000 	.word	0x20000000

08006dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dcc:	f7ff fff0 	bl	8006db0 <HAL_RCC_GetHCLKFreq>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	4b05      	ldr	r3, [pc, #20]	@ (8006de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	0a9b      	lsrs	r3, r3, #10
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	4903      	ldr	r1, [pc, #12]	@ (8006dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dde:	5ccb      	ldrb	r3, [r1, r3]
 8006de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40023800 	.word	0x40023800
 8006dec:	080135dc 	.word	0x080135dc

08006df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006df4:	f7ff ffdc 	bl	8006db0 <HAL_RCC_GetHCLKFreq>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	0b5b      	lsrs	r3, r3, #13
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	4903      	ldr	r1, [pc, #12]	@ (8006e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e06:	5ccb      	ldrb	r3, [r1, r3]
 8006e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	40023800 	.word	0x40023800
 8006e14:	080135dc 	.word	0x080135dc

08006e18 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006e1c:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e24:	2b80      	cmp	r3, #128	@ 0x80
 8006e26:	d104      	bne.n	8006e32 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006e28:	f000 f80a 	bl	8006e40 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006e2c:	4b03      	ldr	r3, [pc, #12]	@ (8006e3c <HAL_RCC_NMI_IRQHandler+0x24>)
 8006e2e:	2280      	movs	r2, #128	@ 0x80
 8006e30:	701a      	strb	r2, [r3, #0]
  }
}
 8006e32:	bf00      	nop
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	4002380e 	.word	0x4002380e

08006e40 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e022      	b.n	8006ea6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d105      	bne.n	8006e78 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fa ffb6 	bl	8001de4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f815 	bl	8006eb0 <HAL_SD_InitCard>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e00a      	b.n	8006ea6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006eb0:	b5b0      	push	{r4, r5, r7, lr}
 8006eb2:	b08e      	sub	sp, #56	@ 0x38
 8006eb4:	af04      	add	r7, sp, #16
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006ecc:	2376      	movs	r3, #118	@ 0x76
 8006ece:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681d      	ldr	r5, [r3, #0]
 8006ed4:	466c      	mov	r4, sp
 8006ed6:	f107 0318 	add.w	r3, r7, #24
 8006eda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ee2:	f107 030c 	add.w	r3, r7, #12
 8006ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f001 feef 	bl	8008ccc <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006eee:	4b2a      	ldr	r3, [pc, #168]	@ (8006f98 <HAL_SD_InitCard+0xe8>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 ff30 	bl	8008d5e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006efe:	4b26      	ldr	r3, [pc, #152]	@ (8006f98 <HAL_SD_InitCard+0xe8>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006f04:	2002      	movs	r0, #2
 8006f06:	f7fb fa91 	bl	800242c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 f806 	bl	8007f1c <SD_PowerON>
 8006f10:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e02e      	b.n	8006f8e <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 ff25 	bl	8007d80 <SD_InitCard>
 8006f36:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e01b      	b.n	8006f8e <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 ff8f 	bl	8008e82 <SDMMC_CmdBlockLength>
 8006f64:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00f      	beq.n	8006f8c <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	@ (8006f9c <HAL_SD_InitCard+0xec>)
 8006f72:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3728      	adds	r7, #40	@ 0x28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bdb0      	pop	{r4, r5, r7, pc}
 8006f96:	bf00      	nop
 8006f98:	422580a0 	.word	0x422580a0
 8006f9c:	004005ff 	.word	0x004005ff

08006fa0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08c      	sub	sp, #48	@ 0x30
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d107      	bne.n	8006fc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0c0      	b.n	800714a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	f040 80b9 	bne.w	8007148 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	441a      	add	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d907      	bls.n	8006ffa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fee:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0a7      	b.n	800714a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2200      	movs	r2, #0
 8007008:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8007018:	f043 0302 	orr.w	r3, r3, #2
 800701c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007022:	4a4c      	ldr	r2, [pc, #304]	@ (8007154 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007024:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	4a4b      	ldr	r2, [pc, #300]	@ (8007158 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800702c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007032:	2200      	movs	r2, #0
 8007034:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703a:	2200      	movs	r2, #0
 800703c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3380      	adds	r3, #128	@ 0x80
 8007064:	4619      	mov	r1, r3
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	025b      	lsls	r3, r3, #9
 800706c:	089b      	lsrs	r3, r3, #2
 800706e:	f7fb fe5d 	bl	8002d2c <HAL_DMA_Start_IT>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d017      	beq.n	80070a8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007086:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a33      	ldr	r2, [pc, #204]	@ (800715c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800708e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007094:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e050      	b.n	800714a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80070a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007160 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d002      	beq.n	80070bc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	025b      	lsls	r3, r3, #9
 80070ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070bc:	f04f 33ff 	mov.w	r3, #4294967295
 80070c0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	025b      	lsls	r3, r3, #9
 80070c6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80070c8:	2390      	movs	r3, #144	@ 0x90
 80070ca:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80070cc:	2302      	movs	r3, #2
 80070ce:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80070d4:	2301      	movs	r3, #1
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f107 0210 	add.w	r2, r7, #16
 80070e0:	4611      	mov	r1, r2
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 fea1 	bl	8008e2a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d90a      	bls.n	8007104 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2282      	movs	r2, #130	@ 0x82
 80070f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 ff05 	bl	8008f0a <SDMMC_CmdReadMultiBlock>
 8007100:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007102:	e009      	b.n	8007118 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2281      	movs	r2, #129	@ 0x81
 8007108:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007110:	4618      	mov	r0, r3
 8007112:	f001 fed8 	bl	8008ec6 <SDMMC_CmdReadSingleBlock>
 8007116:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d012      	beq.n	8007144 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a0e      	ldr	r2, [pc, #56]	@ (800715c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007124:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800712a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712c:	431a      	orrs	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e002      	b.n	800714a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	e000      	b.n	800714a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007148:	2302      	movs	r3, #2
  }
}
 800714a:	4618      	mov	r0, r3
 800714c:	3730      	adds	r7, #48	@ 0x30
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	08007b8f 	.word	0x08007b8f
 8007158:	08007c01 	.word	0x08007c01
 800715c:	004005ff 	.word	0x004005ff
 8007160:	4225858c 	.word	0x4225858c

08007164 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08c      	sub	sp, #48	@ 0x30
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d107      	bne.n	800718c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007180:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e0c5      	b.n	8007318 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	f040 80be 	bne.w	8007316 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80071a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	441a      	add	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d907      	bls.n	80071be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e0ac      	b.n	8007318 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2203      	movs	r2, #3
 80071c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2200      	movs	r2, #0
 80071cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	6812      	ldr	r2, [r2, #0]
 80071d8:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80071dc:	f043 0302 	orr.w	r3, r3, #2
 80071e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e6:	4a4e      	ldr	r2, [pc, #312]	@ (8007320 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80071e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ee:	4a4d      	ldr	r2, [pc, #308]	@ (8007324 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80071f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f6:	2200      	movs	r2, #0
 80071f8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d002      	beq.n	8007208 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007204:	025b      	lsls	r3, r3, #9
 8007206:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d90a      	bls.n	8007224 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	22a0      	movs	r2, #160	@ 0xa0
 8007212:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800721a:	4618      	mov	r0, r3
 800721c:	f001 feb9 	bl	8008f92 <SDMMC_CmdWriteMultiBlock>
 8007220:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007222:	e009      	b.n	8007238 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2290      	movs	r2, #144	@ 0x90
 8007228:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007230:	4618      	mov	r0, r3
 8007232:	f001 fe8c 	bl	8008f4e <SDMMC_CmdWriteSingleBlock>
 8007236:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d012      	beq.n	8007264 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a39      	ldr	r2, [pc, #228]	@ (8007328 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007244:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724c:	431a      	orrs	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e059      	b.n	8007318 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007264:	4b31      	ldr	r3, [pc, #196]	@ (800732c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007266:	2201      	movs	r2, #1
 8007268:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726e:	2240      	movs	r2, #64	@ 0x40
 8007270:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3380      	adds	r3, #128	@ 0x80
 800729a:	461a      	mov	r2, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	025b      	lsls	r3, r3, #9
 80072a0:	089b      	lsrs	r3, r3, #2
 80072a2:	f7fb fd43 	bl	8002d2c <HAL_DMA_Start_IT>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01c      	beq.n	80072e6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 80072ba:	f023 0302 	bic.w	r3, r3, #2
 80072be:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a18      	ldr	r2, [pc, #96]	@ (8007328 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80072c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e018      	b.n	8007318 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072e6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	025b      	lsls	r3, r3, #9
 80072f0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80072f2:	2390      	movs	r3, #144	@ 0x90
 80072f4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80072fe:	2301      	movs	r3, #1
 8007300:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f107 0210 	add.w	r2, r7, #16
 800730a:	4611      	mov	r1, r2
 800730c:	4618      	mov	r0, r3
 800730e:	f001 fd8c 	bl	8008e2a <SDIO_ConfigData>

      return HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	e000      	b.n	8007318 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	3730      	adds	r7, #48	@ 0x30
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	08007b65 	.word	0x08007b65
 8007324:	08007c01 	.word	0x08007c01
 8007328:	004005ff 	.word	0x004005ff
 800732c:	4225858c 	.word	0x4225858c

08007330 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <HAL_SD_IRQHandler+0x2e>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 f806 	bl	8008368 <SD_Read_IT>
 800735c:	e165      	b.n	800762a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 808f 	beq.w	800748c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007376:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6812      	ldr	r2, [r2, #0]
 8007382:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8007386:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800738a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d039      	beq.n	800741a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <HAL_SD_IRQHandler+0x8a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d011      	beq.n	80073de <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 fe0a 	bl	8008fd8 <SDMMC_CmdStopTransfer>
 80073c4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d008      	beq.n	80073de <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f92f 	bl	800763c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80073e6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <HAL_SD_IRQHandler+0xda>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f003 fdbe 	bl	800af8c <HAL_SD_RxCpltCallback>
 8007410:	e10b      	b.n	800762a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f003 fdb0 	bl	800af78 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007418:	e107      	b.n	800762a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 8102 	beq.w	800762a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d011      	beq.n	8007454 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f001 fdcf 	bl	8008fd8 <SDMMC_CmdStopTransfer>
 800743a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d008      	beq.n	8007454 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8f4 	bl	800763c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 80e5 	bne.w	800762a <HAL_SD_IRQHandler+0x2fa>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	f040 80df 	bne.w	800762a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0208 	bic.w	r2, r2, #8
 800747a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f003 fd77 	bl	800af78 <HAL_SD_TxCpltCallback>
}
 800748a:	e0ce      	b.n	800762a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d008      	beq.n	80074ac <HAL_SD_IRQHandler+0x17c>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 ffb0 	bl	800840a <SD_Write_IT>
 80074aa:	e0be      	b.n	800762a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074b2:	f240 233a 	movw	r3, #570	@ 0x23a
 80074b6:	4013      	ands	r3, r2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80b6 	beq.w	800762a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	f043 0202 	orr.w	r2, r3, #2
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d005      	beq.n	80074f2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ea:	f043 0208 	orr.w	r2, r3, #8
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751e:	f043 0210 	orr.w	r2, r3, #16
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800752c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007538:	f043 0208 	orr.w	r2, r3, #8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f240 723a 	movw	r2, #1850	@ 0x73a
 8007548:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8007558:	f023 0302 	bic.w	r3, r3, #2
 800755c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f001 fd38 	bl	8008fd8 <SDMMC_CmdStopTransfer>
 8007568:	4602      	mov	r2, r0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f855 	bl	800763c <HAL_SD_ErrorCallback>
}
 8007592:	e04a      	b.n	800762a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d045      	beq.n	800762a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <HAL_SD_IRQHandler+0x282>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d011      	beq.n	80075d6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007634 <HAL_SD_IRQHandler+0x304>)
 80075b8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fb fc0c 	bl	8002ddc <HAL_DMA_Abort_IT>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d02f      	beq.n	800762a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fb68 	bl	8007ca4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80075d4:	e029      	b.n	800762a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <HAL_SD_IRQHandler+0x2ba>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d011      	beq.n	800760e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ee:	4a12      	ldr	r2, [pc, #72]	@ (8007638 <HAL_SD_IRQHandler+0x308>)
 80075f0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fb fbf0 	bl	8002ddc <HAL_DMA_Abort_IT>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d013      	beq.n	800762a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fb83 	bl	8007d12 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800760c:	e00d      	b.n	800762a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f003 fc9e 	bl	800af64 <HAL_SD_AbortCallback>
}
 8007628:	e7ff      	b.n	800762a <HAL_SD_IRQHandler+0x2fa>
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	08007ca5 	.word	0x08007ca5
 8007638:	08007d13 	.word	0x08007d13

0800763c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800765e:	0f9b      	lsrs	r3, r3, #30
 8007660:	b2da      	uxtb	r2, r3
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800766a:	0e9b      	lsrs	r3, r3, #26
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	b2da      	uxtb	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800767c:	0e1b      	lsrs	r3, r3, #24
 800767e:	b2db      	uxtb	r3, r3
 8007680:	f003 0303 	and.w	r3, r3, #3
 8007684:	b2da      	uxtb	r2, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800768e:	0c1b      	lsrs	r3, r3, #16
 8007690:	b2da      	uxtb	r2, r3
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	b2da      	uxtb	r2, r3
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076b0:	0d1b      	lsrs	r3, r3, #20
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076bc:	0c1b      	lsrs	r3, r3, #16
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ce:	0bdb      	lsrs	r3, r3, #15
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076e0:	0b9b      	lsrs	r3, r3, #14
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076f2:	0b5b      	lsrs	r3, r3, #13
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007704:	0b1b      	lsrs	r3, r3, #12
 8007706:	b2db      	uxtb	r3, r3
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	b2da      	uxtb	r2, r3
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2200      	movs	r2, #0
 8007716:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800771c:	2b00      	cmp	r3, #0
 800771e:	d163      	bne.n	80077e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007724:	009a      	lsls	r2, r3, #2
 8007726:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800772a:	4013      	ands	r3, r2
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007730:	0f92      	lsrs	r2, r2, #30
 8007732:	431a      	orrs	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800773c:	0edb      	lsrs	r3, r3, #27
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	b2da      	uxtb	r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800774e:	0e1b      	lsrs	r3, r3, #24
 8007750:	b2db      	uxtb	r3, r3
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	b2da      	uxtb	r2, r3
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007760:	0d5b      	lsrs	r3, r3, #21
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	b2da      	uxtb	r2, r3
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007772:	0c9b      	lsrs	r3, r3, #18
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	b2da      	uxtb	r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007784:	0bdb      	lsrs	r3, r3, #15
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	b2da      	uxtb	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	7e1b      	ldrb	r3, [r3, #24]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	3302      	adds	r3, #2
 80077a8:	2201      	movs	r2, #1
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80077b2:	fb03 f202 	mul.w	r2, r3, r2
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	7a1b      	ldrb	r3, [r3, #8]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	2201      	movs	r2, #1
 80077c6:	409a      	lsls	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80077d4:	0a52      	lsrs	r2, r2, #9
 80077d6:	fb03 f202 	mul.w	r2, r3, r2
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80077e6:	e031      	b.n	800784c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d11d      	bne.n	800782c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077f4:	041b      	lsls	r3, r3, #16
 80077f6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077fe:	0c1b      	lsrs	r3, r3, #16
 8007800:	431a      	orrs	r2, r3
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	3301      	adds	r3, #1
 800780c:	029a      	lsls	r2, r3, #10
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007820:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	661a      	str	r2, [r3, #96]	@ 0x60
 800782a:	e00f      	b.n	800784c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a58      	ldr	r2, [pc, #352]	@ (8007994 <HAL_SD_GetCardCSD+0x344>)
 8007832:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007838:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e09d      	b.n	8007988 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007850:	0b9b      	lsrs	r3, r3, #14
 8007852:	b2db      	uxtb	r3, r3
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	b2da      	uxtb	r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007862:	09db      	lsrs	r3, r3, #7
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800786a:	b2da      	uxtb	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800787a:	b2da      	uxtb	r2, r3
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007884:	0fdb      	lsrs	r3, r3, #31
 8007886:	b2da      	uxtb	r2, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007890:	0f5b      	lsrs	r3, r3, #29
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	b2da      	uxtb	r2, r3
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078a2:	0e9b      	lsrs	r3, r3, #26
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b4:	0d9b      	lsrs	r3, r3, #22
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c6:	0d5b      	lsrs	r3, r3, #21
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e2:	0c1b      	lsrs	r3, r3, #16
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f6:	0bdb      	lsrs	r3, r3, #15
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790a:	0b9b      	lsrs	r3, r3, #14
 800790c:	b2db      	uxtb	r3, r3
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	b2da      	uxtb	r2, r3
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800791e:	0b5b      	lsrs	r3, r3, #13
 8007920:	b2db      	uxtb	r3, r3
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	b2da      	uxtb	r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007932:	0b1b      	lsrs	r3, r3, #12
 8007934:	b2db      	uxtb	r3, r3
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007946:	0a9b      	lsrs	r3, r3, #10
 8007948:	b2db      	uxtb	r3, r3
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	b2da      	uxtb	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800795a:	0a1b      	lsrs	r3, r3, #8
 800795c:	b2db      	uxtb	r3, r3
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	b2da      	uxtb	r2, r3
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007976:	b2da      	uxtb	r2, r3
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	004005ff 	.word	0x004005ff

08007998 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079f0:	b5b0      	push	{r4, r5, r7, lr}
 80079f2:	b08e      	sub	sp, #56	@ 0x38
 80079f4:	af04      	add	r7, sp, #16
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2203      	movs	r2, #3
 8007a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d02e      	beq.n	8007a6e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a16:	d106      	bne.n	8007a26 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a24:	e029      	b.n	8007a7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a2c:	d10a      	bne.n	8007a44 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb2a 	bl	8008088 <SD_WideBus_Enable>
 8007a34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a42:	e01a      	b.n	8007a7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb67 	bl	800811e <SD_WideBus_Disable>
 8007a50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a5e:	e00c      	b.n	8007a7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a64:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a6c:	e005      	b.n	8007a7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a72:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00b      	beq.n	8007a9a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a26      	ldr	r2, [pc, #152]	@ (8007b20 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007a88:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a98:	e01f      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681d      	ldr	r5, [r3, #0]
 8007ac0:	466c      	mov	r4, sp
 8007ac2:	f107 0314 	add.w	r3, r7, #20
 8007ac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ace:	f107 0308 	add.w	r3, r7, #8
 8007ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f001 f8f9 	bl	8008ccc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 f9cd 	bl	8008e82 <SDMMC_CmdBlockLength>
 8007ae8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00c      	beq.n	8007b0a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a0a      	ldr	r2, [pc, #40]	@ (8007b20 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007af6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007b12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3728      	adds	r7, #40	@ 0x28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	004005ff 	.word	0x004005ff

08007b24 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007b30:	f107 030c 	add.w	r3, r7, #12
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa7e 	bl	8008038 <SD_SendStatus>
 8007b3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	0a5b      	lsrs	r3, r3, #9
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b5a:	693b      	ldr	r3, [r7, #16]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b80:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba0:	2b82      	cmp	r3, #130	@ 0x82
 8007ba2:	d111      	bne.n	8007bc8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fa15 	bl	8008fd8 <SDMMC_CmdStopTransfer>
 8007bae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d008      	beq.n	8007bc8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7ff fd3a 	bl	800763c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0208 	bic.w	r2, r2, #8
 8007bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007be0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f003 f9cb 	bl	800af8c <HAL_SD_RxCpltCallback>
#endif
}
 8007bf6:	bf00      	nop
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7fb fa90 	bl	8003134 <HAL_DMA_GetError>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d03e      	beq.n	8007c98 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c20:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c28:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d002      	beq.n	8007c36 <SD_DMAError+0x36>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d12d      	bne.n	8007c92 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a19      	ldr	r2, [pc, #100]	@ (8007ca0 <SD_DMAError+0xa0>)
 8007c3c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c52:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007c5a:	6978      	ldr	r0, [r7, #20]
 8007c5c:	f7ff ff62 	bl	8007b24 <HAL_SD_GetCardState>
 8007c60:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b06      	cmp	r3, #6
 8007c66:	d002      	beq.n	8007c6e <SD_DMAError+0x6e>
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	d10a      	bne.n	8007c84 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 f9b0 	bl	8008fd8 <SDMMC_CmdStopTransfer>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007c92:	6978      	ldr	r0, [r7, #20]
 8007c94:	f7ff fcd2 	bl	800763c <HAL_SD_ErrorCallback>
#endif
  }
}
 8007c98:	bf00      	nop
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	004005ff 	.word	0x004005ff

08007ca4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff ff31 	bl	8007b24 <HAL_SD_GetCardState>
 8007cc2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b06      	cmp	r3, #6
 8007cd6:	d002      	beq.n	8007cde <SD_DMATxAbort+0x3a>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b05      	cmp	r3, #5
 8007cdc:	d10a      	bne.n	8007cf4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 f978 	bl	8008fd8 <SDMMC_CmdStopTransfer>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d103      	bne.n	8007d04 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f003 f931 	bl	800af64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d02:	e002      	b.n	8007d0a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff fc99 	bl	800763c <HAL_SD_ErrorCallback>
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007d28:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff fefa 	bl	8007b24 <HAL_SD_GetCardState>
 8007d30:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b06      	cmp	r3, #6
 8007d44:	d002      	beq.n	8007d4c <SD_DMARxAbort+0x3a>
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b05      	cmp	r3, #5
 8007d4a:	d10a      	bne.n	8007d62 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 f941 	bl	8008fd8 <SDMMC_CmdStopTransfer>
 8007d56:	4602      	mov	r2, r0
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f003 f8fa 	bl	800af64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d70:	e002      	b.n	8007d78 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff fc62 	bl	800763c <HAL_SD_ErrorCallback>
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d80:	b5b0      	push	{r4, r5, r7, lr}
 8007d82:	b094      	sub	sp, #80	@ 0x50
 8007d84:	af04      	add	r7, sp, #16
 8007d86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fff2 	bl	8008d7a <SDIO_GetPowerState>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d9c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007da0:	e0b8      	b.n	8007f14 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d02f      	beq.n	8007e0a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 fa1c 	bl	80091ec <SDMMC_CmdSendCID>
 8007db4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <SD_InitCard+0x40>
    {
      return errorstate;
 8007dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dbe:	e0a9      	b.n	8007f14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 f81c 	bl	8008e04 <SDIO_GetResponse>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2104      	movs	r1, #4
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 f813 	bl	8008e04 <SDIO_GetResponse>
 8007dde:	4602      	mov	r2, r0
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2108      	movs	r1, #8
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 f80a 	bl	8008e04 <SDIO_GetResponse>
 8007df0:	4602      	mov	r2, r0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	210c      	movs	r1, #12
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f001 f801 	bl	8008e04 <SDIO_GetResponse>
 8007e02:	4602      	mov	r2, r0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d00d      	beq.n	8007e2e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f107 020e 	add.w	r2, r7, #14
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f001 fa22 	bl	8009266 <SDMMC_CmdSetRelAdd>
 8007e22:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <SD_InitCard+0xae>
    {
      return errorstate;
 8007e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e2c:	e072      	b.n	8007f14 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d036      	beq.n	8007ea4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007e36:	89fb      	ldrh	r3, [r7, #14]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e46:	041b      	lsls	r3, r3, #16
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f001 f9ec 	bl	8009228 <SDMMC_CmdSendCSD>
 8007e50:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5a:	e05b      	b.n	8007f14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2100      	movs	r1, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 ffce 	bl	8008e04 <SDIO_GetResponse>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2104      	movs	r1, #4
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 ffc5 	bl	8008e04 <SDIO_GetResponse>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2108      	movs	r1, #8
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 ffbc 	bl	8008e04 <SDIO_GetResponse>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	210c      	movs	r1, #12
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 ffb3 	bl	8008e04 <SDIO_GetResponse>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2104      	movs	r1, #4
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 ffaa 	bl	8008e04 <SDIO_GetResponse>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	0d1a      	lsrs	r2, r3, #20
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007eb8:	f107 0310 	add.w	r3, r7, #16
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fbc6 	bl	8007650 <HAL_SD_GetCardCSD>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007eca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007ece:	e021      	b.n	8007f14 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6819      	ldr	r1, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed8:	041b      	lsls	r3, r3, #16
 8007eda:	2200      	movs	r2, #0
 8007edc:	461c      	mov	r4, r3
 8007ede:	4615      	mov	r5, r2
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	462b      	mov	r3, r5
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	f001 f899 	bl	800901c <SDMMC_CmdSelDesel>
 8007eea:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <SD_InitCard+0x176>
  {
    return errorstate;
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef4:	e00e      	b.n	8007f14 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681d      	ldr	r5, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	466c      	mov	r4, sp
 8007efe:	f103 0210 	add.w	r2, r3, #16
 8007f02:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f08:	3304      	adds	r3, #4
 8007f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	f000 fedd 	bl	8008ccc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3740      	adds	r7, #64	@ 0x40
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bdb0      	pop	{r4, r5, r7, pc}

08007f1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 f894 	bl	8009062 <SDMMC_CmdGoIdleState>
 8007f3a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	e072      	b.n	800802c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 f8a7 	bl	800909e <SDMMC_CmdOperCond>
 8007f50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00d      	beq.n	8007f74 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 f87d 	bl	8009062 <SDMMC_CmdGoIdleState>
 8007f68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	e05b      	b.n	800802c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d137      	bne.n	8007ff2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 f8a7 	bl	80090dc <SDMMC_CmdAppCommand>
 8007f8e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d02d      	beq.n	8007ff2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f96:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007f9a:	e047      	b.n	800802c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 f89a 	bl	80090dc <SDMMC_CmdAppCommand>
 8007fa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <SD_PowerON+0x98>
    {
      return errorstate;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	e03b      	b.n	800802c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	491e      	ldr	r1, [pc, #120]	@ (8008034 <SD_PowerON+0x118>)
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f001 f8b0 	bl	8009120 <SDMMC_CmdAppOperCommand>
 8007fc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007fcc:	e02e      	b.n	800802c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 ff15 	bl	8008e04 <SDIO_GetResponse>
 8007fda:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	0fdb      	lsrs	r3, r3, #31
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <SD_PowerON+0xcc>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e000      	b.n	8007fea <SD_PowerON+0xce>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	613b      	str	r3, [r7, #16]

    count++;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d802      	bhi.n	8008002 <SD_PowerON+0xe6>
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0cc      	beq.n	8007f9c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008008:	4293      	cmp	r3, r2
 800800a:	d902      	bls.n	8008012 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800800c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008010:	e00c      	b.n	800802c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	645a      	str	r2, [r3, #68]	@ 0x44
 8008022:	e002      	b.n	800802a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	c1100000 	.word	0xc1100000

08008038 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008048:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800804c:	e018      	b.n	8008080 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008056:	041b      	lsls	r3, r3, #16
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f001 f924 	bl	80092a8 <SDMMC_CmdSendStatus>
 8008060:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	e009      	b.n	8008080 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2100      	movs	r1, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fec6 	bl	8008e04 <SDIO_GetResponse>
 8008078:	4602      	mov	r2, r0
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008090:	2300      	movs	r3, #0
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	2300      	movs	r3, #0
 8008096:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 feb0 	bl	8008e04 <SDIO_GetResponse>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ae:	d102      	bne.n	80080b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080b4:	e02f      	b.n	8008116 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080b6:	f107 030c 	add.w	r3, r7, #12
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f879 	bl	80081b4 <SD_FindSCR>
 80080c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	e023      	b.n	8008116 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01c      	beq.n	8008112 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e0:	041b      	lsls	r3, r3, #16
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f000 fff9 	bl	80090dc <SDMMC_CmdAppCommand>
 80080ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	e00f      	b.n	8008116 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2102      	movs	r1, #2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f001 f832 	bl	8009166 <SDMMC_CmdBusWidth>
 8008102:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	e003      	b.n	8008116 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800810e:	2300      	movs	r3, #0
 8008110:	e001      	b.n	8008116 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008112:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b086      	sub	sp, #24
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	2300      	movs	r3, #0
 800812c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2100      	movs	r1, #0
 8008134:	4618      	mov	r0, r3
 8008136:	f000 fe65 	bl	8008e04 <SDIO_GetResponse>
 800813a:	4603      	mov	r3, r0
 800813c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008140:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008144:	d102      	bne.n	800814c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008146:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800814a:	e02f      	b.n	80081ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800814c:	f107 030c 	add.w	r3, r7, #12
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f82e 	bl	80081b4 <SD_FindSCR>
 8008158:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	e023      	b.n	80081ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d01c      	beq.n	80081a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008176:	041b      	lsls	r3, r3, #16
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f000 ffae 	bl	80090dc <SDMMC_CmdAppCommand>
 8008180:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	e00f      	b.n	80081ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2100      	movs	r1, #0
 8008192:	4618      	mov	r0, r3
 8008194:	f000 ffe7 	bl	8009166 <SDMMC_CmdBusWidth>
 8008198:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	e003      	b.n	80081ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e001      	b.n	80081ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80081b4:	b590      	push	{r4, r7, lr}
 80081b6:	b08f      	sub	sp, #60	@ 0x3c
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081be:	f7fa f929 	bl	8002414 <HAL_GetTick>
 80081c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80081c8:	2300      	movs	r3, #0
 80081ca:	60bb      	str	r3, [r7, #8]
 80081cc:	2300      	movs	r3, #0
 80081ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2108      	movs	r1, #8
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fe51 	bl	8008e82 <SDMMC_CmdBlockLength>
 80081e0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	e0b9      	b.n	8008360 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f4:	041b      	lsls	r3, r3, #16
 80081f6:	4619      	mov	r1, r3
 80081f8:	4610      	mov	r0, r2
 80081fa:	f000 ff6f 	bl	80090dc <SDMMC_CmdAppCommand>
 80081fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008208:	e0aa      	b.n	8008360 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800820a:	f04f 33ff 	mov.w	r3, #4294967295
 800820e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008210:	2308      	movs	r3, #8
 8008212:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008214:	2330      	movs	r3, #48	@ 0x30
 8008216:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008218:	2302      	movs	r3, #2
 800821a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800821c:	2300      	movs	r3, #0
 800821e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008220:	2301      	movs	r3, #1
 8008222:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f107 0210 	add.w	r2, r7, #16
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fdfb 	bl	8008e2a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 ffb6 	bl	80091aa <SDMMC_CmdSendSCR>
 800823e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	d02a      	beq.n	800829c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	e08a      	b.n	8008360 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00f      	beq.n	8008278 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6819      	ldr	r1, [r3, #0]
 800825c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	f107 0208 	add.w	r2, r7, #8
 8008264:	18d4      	adds	r4, r2, r3
 8008266:	4608      	mov	r0, r1
 8008268:	f000 fd5b 	bl	8008d22 <SDIO_ReadFIFO>
 800826c:	4603      	mov	r3, r0
 800826e:	6023      	str	r3, [r4, #0]
      index++;
 8008270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008272:	3301      	adds	r3, #1
 8008274:	637b      	str	r3, [r7, #52]	@ 0x34
 8008276:	e006      	b.n	8008286 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800827e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d012      	beq.n	80082ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008286:	f7fa f8c5 	bl	8002414 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008294:	d102      	bne.n	800829c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008296:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800829a:	e061      	b.n	8008360 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0cf      	beq.n	800824a <SD_FindSCR+0x96>
 80082aa:	e000      	b.n	80082ae <SD_FindSCR+0xfa>
      break;
 80082ac:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d106      	bne.n	80082ca <SD_FindSCR+0x116>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d005      	beq.n	80082d6 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2208      	movs	r2, #8
 80082d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80082d2:	2308      	movs	r3, #8
 80082d4:	e044      	b.n	8008360 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2202      	movs	r2, #2
 80082ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80082ec:	2302      	movs	r3, #2
 80082ee:	e037      	b.n	8008360 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2220      	movs	r2, #32
 8008304:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008306:	2320      	movs	r3, #32
 8008308:	e02a      	b.n	8008360 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008312:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	061a      	lsls	r2, r3, #24
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008320:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	0a1b      	lsrs	r3, r3, #8
 8008326:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800832a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	0e1b      	lsrs	r3, r3, #24
 8008330:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008334:	601a      	str	r2, [r3, #0]
    scr++;
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	3304      	adds	r3, #4
 800833a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	061a      	lsls	r2, r3, #24
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008348:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	0a1b      	lsrs	r3, r3, #8
 800834e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008352:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	0e1b      	lsrs	r3, r3, #24
 8008358:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	373c      	adds	r7, #60	@ 0x3c
 8008364:	46bd      	mov	sp, r7
 8008366:	bd90      	pop	{r4, r7, pc}

08008368 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008374:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d03f      	beq.n	8008402 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	e033      	b.n	80083f0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fcc8 	bl	8008d22 <SDIO_ReadFIFO>
 8008392:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	b2da      	uxtb	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3301      	adds	r3, #1
 80083b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	0c1b      	lsrs	r3, r3, #16
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	3301      	adds	r3, #1
 80083cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	0e1b      	lsrs	r3, r3, #24
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	3301      	adds	r3, #1
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b07      	cmp	r3, #7
 80083f4:	d9c8      	bls.n	8008388 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008402:	bf00      	nop
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d043      	beq.n	80084ac <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	e037      	b.n	800849a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3301      	adds	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	3b01      	subs	r3, #1
 800843a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	021a      	lsls	r2, r3, #8
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4313      	orrs	r3, r2
 8008446:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	3b01      	subs	r3, #1
 8008452:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	041a      	lsls	r2, r3, #16
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	4313      	orrs	r3, r2
 800845e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	3301      	adds	r3, #1
 8008464:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	3b01      	subs	r3, #1
 800846a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	061a      	lsls	r2, r3, #24
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	4313      	orrs	r3, r2
 8008476:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3301      	adds	r3, #1
 800847c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	3b01      	subs	r3, #1
 8008482:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f107 0208 	add.w	r2, r7, #8
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fc54 	bl	8008d3c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	3301      	adds	r3, #1
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b07      	cmp	r3, #7
 800849e:	d9c4      	bls.n	800842a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80084ac:	bf00      	nop
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e042      	b.n	800854c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7f9 fd84 	bl	8001fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2224      	movs	r2, #36	@ 0x24
 80084e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f973 	bl	80087e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800850c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	695a      	ldr	r2, [r3, #20]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800851c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68da      	ldr	r2, [r3, #12]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800852c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	@ 0x28
 8008558:	af02      	add	r7, sp, #8
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b20      	cmp	r3, #32
 8008572:	d175      	bne.n	8008660 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <HAL_UART_Transmit+0x2c>
 800857a:	88fb      	ldrh	r3, [r7, #6]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e06e      	b.n	8008662 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2221      	movs	r2, #33	@ 0x21
 800858e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008592:	f7f9 ff3f 	bl	8002414 <HAL_GetTick>
 8008596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	88fa      	ldrh	r2, [r7, #6]
 800859c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	88fa      	ldrh	r2, [r7, #6]
 80085a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ac:	d108      	bne.n	80085c0 <HAL_UART_Transmit+0x6c>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d104      	bne.n	80085c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	61bb      	str	r3, [r7, #24]
 80085be:	e003      	b.n	80085c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085c8:	e02e      	b.n	8008628 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2200      	movs	r2, #0
 80085d2:	2180      	movs	r1, #128	@ 0x80
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f848 	bl	800866a <UART_WaitOnFlagUntilTimeout>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e03a      	b.n	8008662 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10b      	bne.n	800860a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008600:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	3302      	adds	r3, #2
 8008606:	61bb      	str	r3, [r7, #24]
 8008608:	e007      	b.n	800861a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	781a      	ldrb	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	3301      	adds	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1cb      	bne.n	80085ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2200      	movs	r2, #0
 800863a:	2140      	movs	r1, #64	@ 0x40
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f814 	bl	800866a <UART_WaitOnFlagUntilTimeout>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2220      	movs	r2, #32
 800864c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e006      	b.n	8008662 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	e000      	b.n	8008662 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008660:	2302      	movs	r3, #2
  }
}
 8008662:	4618      	mov	r0, r3
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b086      	sub	sp, #24
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	60b9      	str	r1, [r7, #8]
 8008674:	603b      	str	r3, [r7, #0]
 8008676:	4613      	mov	r3, r2
 8008678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800867a:	e03b      	b.n	80086f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008682:	d037      	beq.n	80086f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008684:	f7f9 fec6 	bl	8002414 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	6a3a      	ldr	r2, [r7, #32]
 8008690:	429a      	cmp	r2, r3
 8008692:	d302      	bcc.n	800869a <UART_WaitOnFlagUntilTimeout+0x30>
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e03a      	b.n	8008714 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d023      	beq.n	80086f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b80      	cmp	r3, #128	@ 0x80
 80086b0:	d020      	beq.n	80086f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b40      	cmp	r3, #64	@ 0x40
 80086b6:	d01d      	beq.n	80086f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	2b08      	cmp	r3, #8
 80086c4:	d116      	bne.n	80086f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	617b      	str	r3, [r7, #20]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	617b      	str	r3, [r7, #20]
 80086da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f81d 	bl	800871c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2208      	movs	r2, #8
 80086e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e00f      	b.n	8008714 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	4013      	ands	r3, r2
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	429a      	cmp	r2, r3
 8008702:	bf0c      	ite	eq
 8008704:	2301      	moveq	r3, #1
 8008706:	2300      	movne	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	429a      	cmp	r2, r3
 8008710:	d0b4      	beq.n	800867c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b095      	sub	sp, #84	@ 0x54
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	330c      	adds	r3, #12
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800873a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	330c      	adds	r3, #12
 8008742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008744:	643a      	str	r2, [r7, #64]	@ 0x40
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800874a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e5      	bne.n	8008724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3314      	adds	r3, #20
 800875e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	61fb      	str	r3, [r7, #28]
   return(result);
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	f023 0301 	bic.w	r3, r3, #1
 800876e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3314      	adds	r3, #20
 8008776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800877a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800877e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e5      	bne.n	8008758 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008790:	2b01      	cmp	r3, #1
 8008792:	d119      	bne.n	80087c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	330c      	adds	r3, #12
 800879a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f023 0310 	bic.w	r3, r3, #16
 80087aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	330c      	adds	r3, #12
 80087b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087b4:	61ba      	str	r2, [r7, #24]
 80087b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6979      	ldr	r1, [r7, #20]
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	613b      	str	r3, [r7, #16]
   return(result);
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e5      	bne.n	8008794 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80087d6:	bf00      	nop
 80087d8:	3754      	adds	r7, #84	@ 0x54
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
	...

080087e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e8:	b0c0      	sub	sp, #256	@ 0x100
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80087fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008800:	68d9      	ldr	r1, [r3, #12]
 8008802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	ea40 0301 	orr.w	r3, r0, r1
 800880c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800880e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	431a      	orrs	r2, r3
 800881c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	431a      	orrs	r2, r3
 8008824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800883c:	f021 010c 	bic.w	r1, r1, #12
 8008840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800884a:	430b      	orrs	r3, r1
 800884c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800884e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800885a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800885e:	6999      	ldr	r1, [r3, #24]
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	ea40 0301 	orr.w	r3, r0, r1
 800886a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800886c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b8f      	ldr	r3, [pc, #572]	@ (8008ab0 <UART_SetConfig+0x2cc>)
 8008874:	429a      	cmp	r2, r3
 8008876:	d005      	beq.n	8008884 <UART_SetConfig+0xa0>
 8008878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	4b8d      	ldr	r3, [pc, #564]	@ (8008ab4 <UART_SetConfig+0x2d0>)
 8008880:	429a      	cmp	r2, r3
 8008882:	d104      	bne.n	800888e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008884:	f7fe fab4 	bl	8006df0 <HAL_RCC_GetPCLK2Freq>
 8008888:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800888c:	e003      	b.n	8008896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800888e:	f7fe fa9b 	bl	8006dc8 <HAL_RCC_GetPCLK1Freq>
 8008892:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088a0:	f040 810c 	bne.w	8008abc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80088ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80088b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80088b6:	4622      	mov	r2, r4
 80088b8:	462b      	mov	r3, r5
 80088ba:	1891      	adds	r1, r2, r2
 80088bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80088be:	415b      	adcs	r3, r3
 80088c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80088c6:	4621      	mov	r1, r4
 80088c8:	eb12 0801 	adds.w	r8, r2, r1
 80088cc:	4629      	mov	r1, r5
 80088ce:	eb43 0901 	adc.w	r9, r3, r1
 80088d2:	f04f 0200 	mov.w	r2, #0
 80088d6:	f04f 0300 	mov.w	r3, #0
 80088da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088e6:	4690      	mov	r8, r2
 80088e8:	4699      	mov	r9, r3
 80088ea:	4623      	mov	r3, r4
 80088ec:	eb18 0303 	adds.w	r3, r8, r3
 80088f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088f4:	462b      	mov	r3, r5
 80088f6:	eb49 0303 	adc.w	r3, r9, r3
 80088fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80088fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800890a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800890e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008912:	460b      	mov	r3, r1
 8008914:	18db      	adds	r3, r3, r3
 8008916:	653b      	str	r3, [r7, #80]	@ 0x50
 8008918:	4613      	mov	r3, r2
 800891a:	eb42 0303 	adc.w	r3, r2, r3
 800891e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008928:	f7f8 f93e 	bl	8000ba8 <__aeabi_uldivmod>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4b61      	ldr	r3, [pc, #388]	@ (8008ab8 <UART_SetConfig+0x2d4>)
 8008932:	fba3 2302 	umull	r2, r3, r3, r2
 8008936:	095b      	lsrs	r3, r3, #5
 8008938:	011c      	lsls	r4, r3, #4
 800893a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800893e:	2200      	movs	r2, #0
 8008940:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008944:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800894c:	4642      	mov	r2, r8
 800894e:	464b      	mov	r3, r9
 8008950:	1891      	adds	r1, r2, r2
 8008952:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008954:	415b      	adcs	r3, r3
 8008956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800895c:	4641      	mov	r1, r8
 800895e:	eb12 0a01 	adds.w	sl, r2, r1
 8008962:	4649      	mov	r1, r9
 8008964:	eb43 0b01 	adc.w	fp, r3, r1
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	f04f 0300 	mov.w	r3, #0
 8008970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800897c:	4692      	mov	sl, r2
 800897e:	469b      	mov	fp, r3
 8008980:	4643      	mov	r3, r8
 8008982:	eb1a 0303 	adds.w	r3, sl, r3
 8008986:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800898a:	464b      	mov	r3, r9
 800898c:	eb4b 0303 	adc.w	r3, fp, r3
 8008990:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80089a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80089a8:	460b      	mov	r3, r1
 80089aa:	18db      	adds	r3, r3, r3
 80089ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80089ae:	4613      	mov	r3, r2
 80089b0:	eb42 0303 	adc.w	r3, r2, r3
 80089b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80089b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80089ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80089be:	f7f8 f8f3 	bl	8000ba8 <__aeabi_uldivmod>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ab8 <UART_SetConfig+0x2d4>)
 80089ca:	fba3 2301 	umull	r2, r3, r3, r1
 80089ce:	095b      	lsrs	r3, r3, #5
 80089d0:	2264      	movs	r2, #100	@ 0x64
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	1acb      	subs	r3, r1, r3
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80089de:	4b36      	ldr	r3, [pc, #216]	@ (8008ab8 <UART_SetConfig+0x2d4>)
 80089e0:	fba3 2302 	umull	r2, r3, r3, r2
 80089e4:	095b      	lsrs	r3, r3, #5
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80089ec:	441c      	add	r4, r3
 80089ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80089fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a00:	4642      	mov	r2, r8
 8008a02:	464b      	mov	r3, r9
 8008a04:	1891      	adds	r1, r2, r2
 8008a06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a08:	415b      	adcs	r3, r3
 8008a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a10:	4641      	mov	r1, r8
 8008a12:	1851      	adds	r1, r2, r1
 8008a14:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a16:	4649      	mov	r1, r9
 8008a18:	414b      	adcs	r3, r1
 8008a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008a28:	4659      	mov	r1, fp
 8008a2a:	00cb      	lsls	r3, r1, #3
 8008a2c:	4651      	mov	r1, sl
 8008a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a32:	4651      	mov	r1, sl
 8008a34:	00ca      	lsls	r2, r1, #3
 8008a36:	4610      	mov	r0, r2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	189b      	adds	r3, r3, r2
 8008a40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a44:	464b      	mov	r3, r9
 8008a46:	460a      	mov	r2, r1
 8008a48:	eb42 0303 	adc.w	r3, r2, r3
 8008a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008a60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a64:	460b      	mov	r3, r1
 8008a66:	18db      	adds	r3, r3, r3
 8008a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	eb42 0303 	adc.w	r3, r2, r3
 8008a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008a76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008a7a:	f7f8 f895 	bl	8000ba8 <__aeabi_uldivmod>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <UART_SetConfig+0x2d4>)
 8008a84:	fba3 1302 	umull	r1, r3, r3, r2
 8008a88:	095b      	lsrs	r3, r3, #5
 8008a8a:	2164      	movs	r1, #100	@ 0x64
 8008a8c:	fb01 f303 	mul.w	r3, r1, r3
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	3332      	adds	r3, #50	@ 0x32
 8008a96:	4a08      	ldr	r2, [pc, #32]	@ (8008ab8 <UART_SetConfig+0x2d4>)
 8008a98:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9c:	095b      	lsrs	r3, r3, #5
 8008a9e:	f003 0207 	and.w	r2, r3, #7
 8008aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4422      	add	r2, r4
 8008aaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008aac:	e106      	b.n	8008cbc <UART_SetConfig+0x4d8>
 8008aae:	bf00      	nop
 8008ab0:	40011000 	.word	0x40011000
 8008ab4:	40011400 	.word	0x40011400
 8008ab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008aca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ace:	4642      	mov	r2, r8
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	1891      	adds	r1, r2, r2
 8008ad4:	6239      	str	r1, [r7, #32]
 8008ad6:	415b      	adcs	r3, r3
 8008ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ade:	4641      	mov	r1, r8
 8008ae0:	1854      	adds	r4, r2, r1
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	eb43 0501 	adc.w	r5, r3, r1
 8008ae8:	f04f 0200 	mov.w	r2, #0
 8008aec:	f04f 0300 	mov.w	r3, #0
 8008af0:	00eb      	lsls	r3, r5, #3
 8008af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008af6:	00e2      	lsls	r2, r4, #3
 8008af8:	4614      	mov	r4, r2
 8008afa:	461d      	mov	r5, r3
 8008afc:	4643      	mov	r3, r8
 8008afe:	18e3      	adds	r3, r4, r3
 8008b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b04:	464b      	mov	r3, r9
 8008b06:	eb45 0303 	adc.w	r3, r5, r3
 8008b0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b1e:	f04f 0200 	mov.w	r2, #0
 8008b22:	f04f 0300 	mov.w	r3, #0
 8008b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	008b      	lsls	r3, r1, #2
 8008b2e:	4621      	mov	r1, r4
 8008b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b34:	4621      	mov	r1, r4
 8008b36:	008a      	lsls	r2, r1, #2
 8008b38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008b3c:	f7f8 f834 	bl	8000ba8 <__aeabi_uldivmod>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4b60      	ldr	r3, [pc, #384]	@ (8008cc8 <UART_SetConfig+0x4e4>)
 8008b46:	fba3 2302 	umull	r2, r3, r3, r2
 8008b4a:	095b      	lsrs	r3, r3, #5
 8008b4c:	011c      	lsls	r4, r3, #4
 8008b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008b5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008b60:	4642      	mov	r2, r8
 8008b62:	464b      	mov	r3, r9
 8008b64:	1891      	adds	r1, r2, r2
 8008b66:	61b9      	str	r1, [r7, #24]
 8008b68:	415b      	adcs	r3, r3
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b70:	4641      	mov	r1, r8
 8008b72:	1851      	adds	r1, r2, r1
 8008b74:	6139      	str	r1, [r7, #16]
 8008b76:	4649      	mov	r1, r9
 8008b78:	414b      	adcs	r3, r1
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b88:	4659      	mov	r1, fp
 8008b8a:	00cb      	lsls	r3, r1, #3
 8008b8c:	4651      	mov	r1, sl
 8008b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b92:	4651      	mov	r1, sl
 8008b94:	00ca      	lsls	r2, r1, #3
 8008b96:	4610      	mov	r0, r2
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4642      	mov	r2, r8
 8008b9e:	189b      	adds	r3, r3, r2
 8008ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	460a      	mov	r2, r1
 8008ba8:	eb42 0303 	adc.w	r3, r2, r3
 8008bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008bba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	f04f 0300 	mov.w	r3, #0
 8008bc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008bc8:	4649      	mov	r1, r9
 8008bca:	008b      	lsls	r3, r1, #2
 8008bcc:	4641      	mov	r1, r8
 8008bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bd2:	4641      	mov	r1, r8
 8008bd4:	008a      	lsls	r2, r1, #2
 8008bd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008bda:	f7f7 ffe5 	bl	8000ba8 <__aeabi_uldivmod>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4611      	mov	r1, r2
 8008be4:	4b38      	ldr	r3, [pc, #224]	@ (8008cc8 <UART_SetConfig+0x4e4>)
 8008be6:	fba3 2301 	umull	r2, r3, r3, r1
 8008bea:	095b      	lsrs	r3, r3, #5
 8008bec:	2264      	movs	r2, #100	@ 0x64
 8008bee:	fb02 f303 	mul.w	r3, r2, r3
 8008bf2:	1acb      	subs	r3, r1, r3
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	3332      	adds	r3, #50	@ 0x32
 8008bf8:	4a33      	ldr	r2, [pc, #204]	@ (8008cc8 <UART_SetConfig+0x4e4>)
 8008bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfe:	095b      	lsrs	r3, r3, #5
 8008c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c04:	441c      	add	r4, r3
 8008c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c14:	4642      	mov	r2, r8
 8008c16:	464b      	mov	r3, r9
 8008c18:	1891      	adds	r1, r2, r2
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	415b      	adcs	r3, r3
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c24:	4641      	mov	r1, r8
 8008c26:	1851      	adds	r1, r2, r1
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	414b      	adcs	r3, r1
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	00cb      	lsls	r3, r1, #3
 8008c40:	4651      	mov	r1, sl
 8008c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c46:	4651      	mov	r1, sl
 8008c48:	00ca      	lsls	r2, r1, #3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4642      	mov	r2, r8
 8008c52:	189b      	adds	r3, r3, r2
 8008c54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c56:	464b      	mov	r3, r9
 8008c58:	460a      	mov	r2, r1
 8008c5a:	eb42 0303 	adc.w	r3, r2, r3
 8008c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008c6c:	f04f 0200 	mov.w	r2, #0
 8008c70:	f04f 0300 	mov.w	r3, #0
 8008c74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008c78:	4649      	mov	r1, r9
 8008c7a:	008b      	lsls	r3, r1, #2
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c82:	4641      	mov	r1, r8
 8008c84:	008a      	lsls	r2, r1, #2
 8008c86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008c8a:	f7f7 ff8d 	bl	8000ba8 <__aeabi_uldivmod>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc8 <UART_SetConfig+0x4e4>)
 8008c94:	fba3 1302 	umull	r1, r3, r3, r2
 8008c98:	095b      	lsrs	r3, r3, #5
 8008c9a:	2164      	movs	r1, #100	@ 0x64
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	3332      	adds	r3, #50	@ 0x32
 8008ca6:	4a08      	ldr	r2, [pc, #32]	@ (8008cc8 <UART_SetConfig+0x4e4>)
 8008ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cac:	095b      	lsrs	r3, r3, #5
 8008cae:	f003 020f 	and.w	r2, r3, #15
 8008cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4422      	add	r2, r4
 8008cba:	609a      	str	r2, [r3, #8]
}
 8008cbc:	bf00      	nop
 8008cbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cc8:	51eb851f 	.word	0x51eb851f

08008ccc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008ccc:	b084      	sub	sp, #16
 8008cce:	b480      	push	{r7}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	f107 001c 	add.w	r0, r7, #28
 8008cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008ce2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008ce6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008cea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008cee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008cf2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008cf6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008d06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	b004      	add	sp, #16
 8008d20:	4770      	bx	lr

08008d22 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2203      	movs	r2, #3
 8008d6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0303 	and.w	r3, r3, #3
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b085      	sub	sp, #20
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008db4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008dba:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008dc0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008dd0:	f023 030f 	bic.w	r3, r3, #15
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	b2db      	uxtb	r3, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3314      	adds	r3, #20
 8008e12:	461a      	mov	r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	4413      	add	r3, r2
 8008e18:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
}  
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b085      	sub	sp, #20
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e50:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008e56:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008e5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e68:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0

}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b088      	sub	sp, #32
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008e90:	2310      	movs	r3, #16
 8008e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e94:	2340      	movs	r3, #64	@ 0x40
 8008e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ea0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ea2:	f107 0308 	add.w	r3, r7, #8
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff ff74 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eb2:	2110      	movs	r1, #16
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fa19 	bl	80092ec <SDMMC_GetCmdResp1>
 8008eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b088      	sub	sp, #32
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008ed4:	2311      	movs	r3, #17
 8008ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ed8:	2340      	movs	r3, #64	@ 0x40
 8008eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ee4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ee6:	f107 0308 	add.w	r3, r7, #8
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7ff ff52 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ef6:	2111      	movs	r1, #17
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f9f7 	bl	80092ec <SDMMC_GetCmdResp1>
 8008efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f00:	69fb      	ldr	r3, [r7, #28]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3720      	adds	r7, #32
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b088      	sub	sp, #32
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008f18:	2312      	movs	r3, #18
 8008f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f1c:	2340      	movs	r3, #64	@ 0x40
 8008f1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f20:	2300      	movs	r3, #0
 8008f22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f2a:	f107 0308 	add.w	r3, r7, #8
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff ff30 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f3a:	2112      	movs	r1, #18
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9d5 	bl	80092ec <SDMMC_GetCmdResp1>
 8008f42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f44:	69fb      	ldr	r3, [r7, #28]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b088      	sub	sp, #32
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008f5c:	2318      	movs	r3, #24
 8008f5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f60:	2340      	movs	r3, #64	@ 0x40
 8008f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f64:	2300      	movs	r3, #0
 8008f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f6e:	f107 0308 	add.w	r3, r7, #8
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff ff0e 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f7e:	2118      	movs	r1, #24
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f9b3 	bl	80092ec <SDMMC_GetCmdResp1>
 8008f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f88:	69fb      	ldr	r3, [r7, #28]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3720      	adds	r7, #32
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b088      	sub	sp, #32
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008fa0:	2319      	movs	r3, #25
 8008fa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fa4:	2340      	movs	r3, #64	@ 0x40
 8008fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fb2:	f107 0308 	add.w	r3, r7, #8
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff feec 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fc2:	2119      	movs	r1, #25
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f991 	bl	80092ec <SDMMC_GetCmdResp1>
 8008fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3720      	adds	r7, #32
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008fe4:	230c      	movs	r3, #12
 8008fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fe8:	2340      	movs	r3, #64	@ 0x40
 8008fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ff4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ff6:	f107 0308 	add.w	r3, r7, #8
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff feca 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009002:	4a05      	ldr	r2, [pc, #20]	@ (8009018 <SDMMC_CmdStopTransfer+0x40>)
 8009004:	210c      	movs	r1, #12
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f970 	bl	80092ec <SDMMC_GetCmdResp1>
 800900c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800900e:	69fb      	ldr	r3, [r7, #28]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3720      	adds	r7, #32
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	05f5e100 	.word	0x05f5e100

0800901c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	@ 0x28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800902c:	2307      	movs	r3, #7
 800902e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009030:	2340      	movs	r3, #64	@ 0x40
 8009032:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009034:	2300      	movs	r3, #0
 8009036:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800903c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800903e:	f107 0310 	add.w	r3, r7, #16
 8009042:	4619      	mov	r1, r3
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f7ff fea6 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800904a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800904e:	2107      	movs	r1, #7
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 f94b 	bl	80092ec <SDMMC_GetCmdResp1>
 8009056:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800905a:	4618      	mov	r0, r3
 800905c:	3728      	adds	r7, #40	@ 0x28
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b088      	sub	sp, #32
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800906e:	2300      	movs	r3, #0
 8009070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800907a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800907e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009080:	f107 0308 	add.w	r3, r7, #8
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff fe85 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fb65 	bl	800975c <SDMMC_GetCmdError>
 8009092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009094:	69fb      	ldr	r3, [r7, #28]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3720      	adds	r7, #32
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b088      	sub	sp, #32
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80090a6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80090aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80090ac:	2308      	movs	r3, #8
 80090ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090b0:	2340      	movs	r3, #64	@ 0x40
 80090b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090be:	f107 0308 	add.w	r3, r7, #8
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff fe66 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 faf8 	bl	80096c0 <SDMMC_GetCmdResp7>
 80090d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090d2:	69fb      	ldr	r3, [r7, #28]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3720      	adds	r7, #32
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80090ea:	2337      	movs	r3, #55	@ 0x37
 80090ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090ee:	2340      	movs	r3, #64	@ 0x40
 80090f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090f2:	2300      	movs	r3, #0
 80090f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090fc:	f107 0308 	add.w	r3, r7, #8
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fe47 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800910c:	2137      	movs	r1, #55	@ 0x37
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f8ec 	bl	80092ec <SDMMC_GetCmdResp1>
 8009114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009116:	69fb      	ldr	r3, [r7, #28]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3720      	adds	r7, #32
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009130:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009136:	2329      	movs	r3, #41	@ 0x29
 8009138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800913a:	2340      	movs	r3, #64	@ 0x40
 800913c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800913e:	2300      	movs	r3, #0
 8009140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009146:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009148:	f107 0308 	add.w	r3, r7, #8
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff fe21 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f9ff 	bl	8009558 <SDMMC_GetCmdResp3>
 800915a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800915c:	69fb      	ldr	r3, [r7, #28]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3720      	adds	r7, #32
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b088      	sub	sp, #32
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009174:	2306      	movs	r3, #6
 8009176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009178:	2340      	movs	r3, #64	@ 0x40
 800917a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800917c:	2300      	movs	r3, #0
 800917e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009184:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009186:	f107 0308 	add.w	r3, r7, #8
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff fe02 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009196:	2106      	movs	r1, #6
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f8a7 	bl	80092ec <SDMMC_GetCmdResp1>
 800919e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091a0:	69fb      	ldr	r3, [r7, #28]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3720      	adds	r7, #32
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b088      	sub	sp, #32
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80091b6:	2333      	movs	r3, #51	@ 0x33
 80091b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091ba:	2340      	movs	r3, #64	@ 0x40
 80091bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091c8:	f107 0308 	add.w	r3, r7, #8
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff fde1 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80091d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091d8:	2133      	movs	r1, #51	@ 0x33
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f886 	bl	80092ec <SDMMC_GetCmdResp1>
 80091e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091e2:	69fb      	ldr	r3, [r7, #28]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3720      	adds	r7, #32
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091f8:	2302      	movs	r3, #2
 80091fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80091fc:	23c0      	movs	r3, #192	@ 0xc0
 80091fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009200:	2300      	movs	r3, #0
 8009202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009208:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800920a:	f107 0308 	add.w	r3, r7, #8
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff fdc0 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f956 	bl	80094c8 <SDMMC_GetCmdResp2>
 800921c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800921e:	69fb      	ldr	r3, [r7, #28]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3720      	adds	r7, #32
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009236:	2309      	movs	r3, #9
 8009238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800923a:	23c0      	movs	r3, #192	@ 0xc0
 800923c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009246:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009248:	f107 0308 	add.w	r3, r7, #8
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff fda1 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f937 	bl	80094c8 <SDMMC_GetCmdResp2>
 800925a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800925c:	69fb      	ldr	r3, [r7, #28]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b088      	sub	sp, #32
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009274:	2303      	movs	r3, #3
 8009276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009278:	2340      	movs	r3, #64	@ 0x40
 800927a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009284:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff fd82 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	2103      	movs	r1, #3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f99c 	bl	80095d4 <SDMMC_GetCmdResp6>
 800929c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800929e:	69fb      	ldr	r3, [r7, #28]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3720      	adds	r7, #32
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80092b6:	230d      	movs	r3, #13
 80092b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092ba:	2340      	movs	r3, #64	@ 0x40
 80092bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092be:	2300      	movs	r3, #0
 80092c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092c8:	f107 0308 	add.w	r3, r7, #8
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff fd61 	bl	8008d96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80092d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092d8:	210d      	movs	r1, #13
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f806 	bl	80092ec <SDMMC_GetCmdResp1>
 80092e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092e2:	69fb      	ldr	r3, [r7, #28]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3720      	adds	r7, #32
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	460b      	mov	r3, r1
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80092fa:	4b70      	ldr	r3, [pc, #448]	@ (80094bc <SDMMC_GetCmdResp1+0x1d0>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a70      	ldr	r2, [pc, #448]	@ (80094c0 <SDMMC_GetCmdResp1+0x1d4>)
 8009300:	fba2 2303 	umull	r2, r3, r2, r3
 8009304:	0a5a      	lsrs	r2, r3, #9
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	fb02 f303 	mul.w	r3, r2, r3
 800930c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	1e5a      	subs	r2, r3, #1
 8009312:	61fa      	str	r2, [r7, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009318:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800931c:	e0c9      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009322:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0ef      	beq.n	800930e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1ea      	bne.n	800930e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b00      	cmp	r3, #0
 8009342:	d004      	beq.n	800934e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2204      	movs	r2, #4
 8009348:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800934a:	2304      	movs	r3, #4
 800934c:	e0b1      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d004      	beq.n	8009364 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009360:	2301      	movs	r3, #1
 8009362:	e0a6      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	22c5      	movs	r2, #197	@ 0xc5
 8009368:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f7ff fd3d 	bl	8008dea <SDIO_GetCommandResponse>
 8009370:	4603      	mov	r3, r0
 8009372:	461a      	mov	r2, r3
 8009374:	7afb      	ldrb	r3, [r7, #11]
 8009376:	4293      	cmp	r3, r2
 8009378:	d001      	beq.n	800937e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800937a:	2301      	movs	r3, #1
 800937c:	e099      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800937e:	2100      	movs	r1, #0
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7ff fd3f 	bl	8008e04 <SDIO_GetResponse>
 8009386:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	4b4e      	ldr	r3, [pc, #312]	@ (80094c4 <SDMMC_GetCmdResp1+0x1d8>)
 800938c:	4013      	ands	r3, r2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009392:	2300      	movs	r3, #0
 8009394:	e08d      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	da02      	bge.n	80093a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800939c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093a0:	e087      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80093ac:	2340      	movs	r3, #64	@ 0x40
 80093ae:	e080      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80093ba:	2380      	movs	r3, #128	@ 0x80
 80093bc:	e079      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80093c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80093cc:	e071      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80093d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093dc:	e069      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80093e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093ec:	e061      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80093f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093fc:	e059      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800940c:	e051      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009418:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800941c:	e049      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009428:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800942c:	e041      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009438:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800943c:	e039      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009448:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800944c:	e031      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009458:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800945c:	e029      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009468:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800946c:	e021      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009478:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800947c:	e019      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009488:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800948c:	e011      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009498:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800949c:	e009      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80094a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80094ac:	e001      	b.n	80094b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3720      	adds	r7, #32
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000000 	.word	0x20000000
 80094c0:	10624dd3 	.word	0x10624dd3
 80094c4:	fdffe008 	.word	0xfdffe008

080094c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094d0:	4b1f      	ldr	r3, [pc, #124]	@ (8009550 <SDMMC_GetCmdResp2+0x88>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a1f      	ldr	r2, [pc, #124]	@ (8009554 <SDMMC_GetCmdResp2+0x8c>)
 80094d6:	fba2 2303 	umull	r2, r3, r2, r3
 80094da:	0a5b      	lsrs	r3, r3, #9
 80094dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e0:	fb02 f303 	mul.w	r3, r2, r3
 80094e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	1e5a      	subs	r2, r3, #1
 80094ea:	60fa      	str	r2, [r7, #12]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d102      	bne.n	80094f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80094f4:	e026      	b.n	8009544 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0ef      	beq.n	80094e6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1ea      	bne.n	80094e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009514:	f003 0304 	and.w	r3, r3, #4
 8009518:	2b00      	cmp	r3, #0
 800951a:	d004      	beq.n	8009526 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2204      	movs	r2, #4
 8009520:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009522:	2304      	movs	r3, #4
 8009524:	e00e      	b.n	8009544 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009538:	2301      	movs	r3, #1
 800953a:	e003      	b.n	8009544 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	22c5      	movs	r2, #197	@ 0xc5
 8009540:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	20000000 	.word	0x20000000
 8009554:	10624dd3 	.word	0x10624dd3

08009558 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009560:	4b1a      	ldr	r3, [pc, #104]	@ (80095cc <SDMMC_GetCmdResp3+0x74>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a1a      	ldr	r2, [pc, #104]	@ (80095d0 <SDMMC_GetCmdResp3+0x78>)
 8009566:	fba2 2303 	umull	r2, r3, r2, r3
 800956a:	0a5b      	lsrs	r3, r3, #9
 800956c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009570:	fb02 f303 	mul.w	r3, r2, r3
 8009574:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	1e5a      	subs	r2, r3, #1
 800957a:	60fa      	str	r2, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d102      	bne.n	8009586 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009580:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009584:	e01b      	b.n	80095be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800958a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0ef      	beq.n	8009576 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1ea      	bne.n	8009576 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d004      	beq.n	80095b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2204      	movs	r2, #4
 80095b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095b2:	2304      	movs	r3, #4
 80095b4:	e003      	b.n	80095be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	22c5      	movs	r2, #197	@ 0xc5
 80095ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	20000000 	.word	0x20000000
 80095d0:	10624dd3 	.word	0x10624dd3

080095d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b088      	sub	sp, #32
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	460b      	mov	r3, r1
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095e2:	4b35      	ldr	r3, [pc, #212]	@ (80096b8 <SDMMC_GetCmdResp6+0xe4>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a35      	ldr	r2, [pc, #212]	@ (80096bc <SDMMC_GetCmdResp6+0xe8>)
 80095e8:	fba2 2303 	umull	r2, r3, r2, r3
 80095ec:	0a5b      	lsrs	r3, r3, #9
 80095ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095f2:	fb02 f303 	mul.w	r3, r2, r3
 80095f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	1e5a      	subs	r2, r3, #1
 80095fc:	61fa      	str	r2, [r7, #28]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d102      	bne.n	8009608 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009602:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009606:	e052      	b.n	80096ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0ef      	beq.n	80095f8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1ea      	bne.n	80095f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b00      	cmp	r3, #0
 800962c:	d004      	beq.n	8009638 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2204      	movs	r2, #4
 8009632:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009634:	2304      	movs	r3, #4
 8009636:	e03a      	b.n	80096ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d004      	beq.n	800964e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2201      	movs	r2, #1
 8009648:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800964a:	2301      	movs	r3, #1
 800964c:	e02f      	b.n	80096ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fbcb 	bl	8008dea <SDIO_GetCommandResponse>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	7afb      	ldrb	r3, [r7, #11]
 800965a:	4293      	cmp	r3, r2
 800965c:	d001      	beq.n	8009662 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800965e:	2301      	movs	r3, #1
 8009660:	e025      	b.n	80096ae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22c5      	movs	r2, #197	@ 0xc5
 8009666:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009668:	2100      	movs	r1, #0
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7ff fbca 	bl	8008e04 <SDIO_GetResponse>
 8009670:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d106      	bne.n	800968a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	0c1b      	lsrs	r3, r3, #16
 8009680:	b29a      	uxth	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009686:	2300      	movs	r3, #0
 8009688:	e011      	b.n	80096ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009698:	e009      	b.n	80096ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096a8:	e001      	b.n	80096ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3720      	adds	r7, #32
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20000000 	.word	0x20000000
 80096bc:	10624dd3 	.word	0x10624dd3

080096c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096c8:	4b22      	ldr	r3, [pc, #136]	@ (8009754 <SDMMC_GetCmdResp7+0x94>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a22      	ldr	r2, [pc, #136]	@ (8009758 <SDMMC_GetCmdResp7+0x98>)
 80096ce:	fba2 2303 	umull	r2, r3, r2, r3
 80096d2:	0a5b      	lsrs	r3, r3, #9
 80096d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096d8:	fb02 f303 	mul.w	r3, r2, r3
 80096dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	1e5a      	subs	r2, r3, #1
 80096e2:	60fa      	str	r2, [r7, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80096ec:	e02c      	b.n	8009748 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0ef      	beq.n	80096de <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1ea      	bne.n	80096de <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2204      	movs	r2, #4
 8009718:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800971a:	2304      	movs	r3, #4
 800971c:	e014      	b.n	8009748 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009730:	2301      	movs	r3, #1
 8009732:	e009      	b.n	8009748 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2240      	movs	r2, #64	@ 0x40
 8009744:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009746:	2300      	movs	r3, #0
  
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	20000000 	.word	0x20000000
 8009758:	10624dd3 	.word	0x10624dd3

0800975c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009764:	4b11      	ldr	r3, [pc, #68]	@ (80097ac <SDMMC_GetCmdError+0x50>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a11      	ldr	r2, [pc, #68]	@ (80097b0 <SDMMC_GetCmdError+0x54>)
 800976a:	fba2 2303 	umull	r2, r3, r2, r3
 800976e:	0a5b      	lsrs	r3, r3, #9
 8009770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009774:	fb02 f303 	mul.w	r3, r2, r3
 8009778:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	1e5a      	subs	r2, r3, #1
 800977e:	60fa      	str	r2, [r7, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d102      	bne.n	800978a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009784:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009788:	e009      	b.n	800979e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800978e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0f1      	beq.n	800977a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	22c5      	movs	r2, #197	@ 0xc5
 800979a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	20000000 	.word	0x20000000
 80097b0:	10624dd3 	.word	0x10624dd3

080097b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097b4:	b084      	sub	sp, #16
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	f107 001c 	add.w	r0, r7, #28
 80097c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d123      	bne.n	8009816 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80097e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80097f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d105      	bne.n	800980a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f001 fae8 	bl	800ade0 <USB_CoreReset>
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]
 8009814:	e01b      	b.n	800984e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f001 fadc 	bl	800ade0 <USB_CoreReset>
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800982c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009830:	2b00      	cmp	r3, #0
 8009832:	d106      	bne.n	8009842 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009838:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009840:	e005      	b.n	800984e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009846:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800984e:	7fbb      	ldrb	r3, [r7, #30]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d10b      	bne.n	800986c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f043 0206 	orr.w	r2, r3, #6
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f043 0220 	orr.w	r2, r3, #32
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009878:	b004      	add	sp, #16
 800987a:	4770      	bx	lr

0800987c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	4613      	mov	r3, r2
 8009888:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d165      	bne.n	800995c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4a41      	ldr	r2, [pc, #260]	@ (8009998 <USB_SetTurnaroundTime+0x11c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d906      	bls.n	80098a6 <USB_SetTurnaroundTime+0x2a>
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4a40      	ldr	r2, [pc, #256]	@ (800999c <USB_SetTurnaroundTime+0x120>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d202      	bcs.n	80098a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80098a0:	230f      	movs	r3, #15
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	e062      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	4a3c      	ldr	r2, [pc, #240]	@ (800999c <USB_SetTurnaroundTime+0x120>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d306      	bcc.n	80098bc <USB_SetTurnaroundTime+0x40>
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	4a3b      	ldr	r2, [pc, #236]	@ (80099a0 <USB_SetTurnaroundTime+0x124>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d202      	bcs.n	80098bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80098b6:	230e      	movs	r3, #14
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e057      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	4a38      	ldr	r2, [pc, #224]	@ (80099a0 <USB_SetTurnaroundTime+0x124>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d306      	bcc.n	80098d2 <USB_SetTurnaroundTime+0x56>
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	4a37      	ldr	r2, [pc, #220]	@ (80099a4 <USB_SetTurnaroundTime+0x128>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d202      	bcs.n	80098d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80098cc:	230d      	movs	r3, #13
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e04c      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	4a33      	ldr	r2, [pc, #204]	@ (80099a4 <USB_SetTurnaroundTime+0x128>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d306      	bcc.n	80098e8 <USB_SetTurnaroundTime+0x6c>
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	4a32      	ldr	r2, [pc, #200]	@ (80099a8 <USB_SetTurnaroundTime+0x12c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d802      	bhi.n	80098e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80098e2:	230c      	movs	r3, #12
 80098e4:	617b      	str	r3, [r7, #20]
 80098e6:	e041      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	4a2f      	ldr	r2, [pc, #188]	@ (80099a8 <USB_SetTurnaroundTime+0x12c>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d906      	bls.n	80098fe <USB_SetTurnaroundTime+0x82>
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4a2e      	ldr	r2, [pc, #184]	@ (80099ac <USB_SetTurnaroundTime+0x130>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d802      	bhi.n	80098fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80098f8:	230b      	movs	r3, #11
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	e036      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	4a2a      	ldr	r2, [pc, #168]	@ (80099ac <USB_SetTurnaroundTime+0x130>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d906      	bls.n	8009914 <USB_SetTurnaroundTime+0x98>
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	4a29      	ldr	r2, [pc, #164]	@ (80099b0 <USB_SetTurnaroundTime+0x134>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d802      	bhi.n	8009914 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800990e:	230a      	movs	r3, #10
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	e02b      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4a26      	ldr	r2, [pc, #152]	@ (80099b0 <USB_SetTurnaroundTime+0x134>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d906      	bls.n	800992a <USB_SetTurnaroundTime+0xae>
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4a25      	ldr	r2, [pc, #148]	@ (80099b4 <USB_SetTurnaroundTime+0x138>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d202      	bcs.n	800992a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009924:	2309      	movs	r3, #9
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	e020      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	4a21      	ldr	r2, [pc, #132]	@ (80099b4 <USB_SetTurnaroundTime+0x138>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d306      	bcc.n	8009940 <USB_SetTurnaroundTime+0xc4>
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	4a20      	ldr	r2, [pc, #128]	@ (80099b8 <USB_SetTurnaroundTime+0x13c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d802      	bhi.n	8009940 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800993a:	2308      	movs	r3, #8
 800993c:	617b      	str	r3, [r7, #20]
 800993e:	e015      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	4a1d      	ldr	r2, [pc, #116]	@ (80099b8 <USB_SetTurnaroundTime+0x13c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d906      	bls.n	8009956 <USB_SetTurnaroundTime+0xda>
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	4a1c      	ldr	r2, [pc, #112]	@ (80099bc <USB_SetTurnaroundTime+0x140>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d202      	bcs.n	8009956 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009950:	2307      	movs	r3, #7
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	e00a      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009956:	2306      	movs	r3, #6
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	e007      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d102      	bne.n	8009968 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009962:	2309      	movs	r3, #9
 8009964:	617b      	str	r3, [r7, #20]
 8009966:	e001      	b.n	800996c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009968:	2309      	movs	r3, #9
 800996a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	029b      	lsls	r3, r3, #10
 8009980:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009984:	431a      	orrs	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	371c      	adds	r7, #28
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	00d8acbf 	.word	0x00d8acbf
 800999c:	00e4e1c0 	.word	0x00e4e1c0
 80099a0:	00f42400 	.word	0x00f42400
 80099a4:	01067380 	.word	0x01067380
 80099a8:	011a499f 	.word	0x011a499f
 80099ac:	01312cff 	.word	0x01312cff
 80099b0:	014ca43f 	.word	0x014ca43f
 80099b4:	016e3600 	.word	0x016e3600
 80099b8:	01a6ab1f 	.word	0x01a6ab1f
 80099bc:	01e84800 	.word	0x01e84800

080099c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f043 0201 	orr.w	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b083      	sub	sp, #12
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f023 0201 	bic.w	r2, r3, #1
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d115      	bne.n	8009a52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a32:	200a      	movs	r0, #10
 8009a34:	f7f8 fcfa 	bl	800242c <HAL_Delay>
      ms += 10U;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	330a      	adds	r3, #10
 8009a3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f001 f93f 	bl	800acc2 <USB_GetMode>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d01e      	beq.n	8009a88 <USB_SetCurrentMode+0x84>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a4e:	d9f0      	bls.n	8009a32 <USB_SetCurrentMode+0x2e>
 8009a50:	e01a      	b.n	8009a88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d115      	bne.n	8009a84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a64:	200a      	movs	r0, #10
 8009a66:	f7f8 fce1 	bl	800242c <HAL_Delay>
      ms += 10U;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	330a      	adds	r3, #10
 8009a6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 f926 	bl	800acc2 <USB_GetMode>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d005      	beq.n	8009a88 <USB_SetCurrentMode+0x84>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a80:	d9f0      	bls.n	8009a64 <USB_SetCurrentMode+0x60>
 8009a82:	e001      	b.n	8009a88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e005      	b.n	8009a94 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2bc8      	cmp	r3, #200	@ 0xc8
 8009a8c:	d101      	bne.n	8009a92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e000      	b.n	8009a94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b086      	sub	sp, #24
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	e009      	b.n	8009ad0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	3340      	adds	r3, #64	@ 0x40
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	3301      	adds	r3, #1
 8009ace:	613b      	str	r3, [r7, #16]
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2b0e      	cmp	r3, #14
 8009ad4:	d9f2      	bls.n	8009abc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ad6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d11c      	bne.n	8009b18 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009aec:	f043 0302 	orr.w	r3, r3, #2
 8009af0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b02:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b0e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	639a      	str	r2, [r3, #56]	@ 0x38
 8009b16:	e00b      	b.n	8009b30 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b28:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b36:	461a      	mov	r2, r3
 8009b38:	2300      	movs	r3, #0
 8009b3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b3c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d10d      	bne.n	8009b60 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f968 	bl	8009e24 <USB_SetDevSpeed>
 8009b54:	e008      	b.n	8009b68 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b56:	2101      	movs	r1, #1
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f963 	bl	8009e24 <USB_SetDevSpeed>
 8009b5e:	e003      	b.n	8009b68 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b60:	2103      	movs	r1, #3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f95e 	bl	8009e24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b68:	2110      	movs	r1, #16
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f8fa 	bl	8009d64 <USB_FlushTxFifo>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f924 	bl	8009dc8 <USB_FlushRxFifo>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b90:	461a      	mov	r2, r3
 8009b92:	2300      	movs	r3, #0
 8009b94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ba8:	461a      	mov	r2, r3
 8009baa:	2300      	movs	r3, #0
 8009bac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bae:	2300      	movs	r3, #0
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	e043      	b.n	8009c3c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bca:	d118      	bne.n	8009bfe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bde:	461a      	mov	r2, r3
 8009be0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	e013      	b.n	8009c10 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	e008      	b.n	8009c10 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	015a      	lsls	r2, r3, #5
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	2300      	movs	r3, #0
 8009c20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	613b      	str	r3, [r7, #16]
 8009c3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c40:	461a      	mov	r2, r3
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d3b5      	bcc.n	8009bb4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	613b      	str	r3, [r7, #16]
 8009c4c:	e043      	b.n	8009cd6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c64:	d118      	bne.n	8009c98 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	e013      	b.n	8009caa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	e008      	b.n	8009caa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	2300      	movs	r3, #0
 8009cba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc8:	461a      	mov	r2, r3
 8009cca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009cce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	613b      	str	r3, [r7, #16]
 8009cd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009cda:	461a      	mov	r2, r3
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d3b5      	bcc.n	8009c4e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cf4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009d02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d105      	bne.n	8009d18 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	f043 0210 	orr.w	r2, r3, #16
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699a      	ldr	r2, [r3, #24]
 8009d1c:	4b10      	ldr	r3, [pc, #64]	@ (8009d60 <USB_DevInit+0x2c4>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d005      	beq.n	8009d38 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	f043 0208 	orr.w	r2, r3, #8
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d107      	bne.n	8009d50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d48:	f043 0304 	orr.w	r3, r3, #4
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d5c:	b004      	add	sp, #16
 8009d5e:	4770      	bx	lr
 8009d60:	803c3800 	.word	0x803c3800

08009d64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3301      	adds	r3, #1
 8009d76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d7e:	d901      	bls.n	8009d84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e01b      	b.n	8009dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	daf2      	bge.n	8009d72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	019b      	lsls	r3, r3, #6
 8009d94:	f043 0220 	orr.w	r2, r3, #32
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009da8:	d901      	bls.n	8009dae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e006      	b.n	8009dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b20      	cmp	r3, #32
 8009db8:	d0f0      	beq.n	8009d9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009de0:	d901      	bls.n	8009de6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e018      	b.n	8009e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	daf2      	bge.n	8009dd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2210      	movs	r2, #16
 8009df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e04:	d901      	bls.n	8009e0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e006      	b.n	8009e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f003 0310 	and.w	r3, r3, #16
 8009e12:	2b10      	cmp	r3, #16
 8009e14:	d0f0      	beq.n	8009df8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	68f9      	ldr	r1, [r7, #12]
 8009e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e44:	4313      	orrs	r3, r2
 8009e46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b087      	sub	sp, #28
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f003 0306 	and.w	r3, r3, #6
 8009e6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d102      	bne.n	8009e7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75fb      	strb	r3, [r7, #23]
 8009e7a:	e00a      	b.n	8009e92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d002      	beq.n	8009e88 <USB_GetDevSpeed+0x32>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b06      	cmp	r3, #6
 8009e86:	d102      	bne.n	8009e8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	75fb      	strb	r3, [r7, #23]
 8009e8c:	e001      	b.n	8009e92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e8e:	230f      	movs	r3, #15
 8009e90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	785b      	ldrb	r3, [r3, #1]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d13a      	bne.n	8009f32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ec2:	69da      	ldr	r2, [r3, #28]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	f003 030f 	and.w	r3, r3, #15
 8009ecc:	2101      	movs	r1, #1
 8009ece:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	68f9      	ldr	r1, [r7, #12]
 8009ed6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eda:	4313      	orrs	r3, r2
 8009edc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d155      	bne.n	8009fa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	791b      	ldrb	r3, [r3, #4]
 8009f0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	059b      	lsls	r3, r3, #22
 8009f16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	0151      	lsls	r1, r2, #5
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	440a      	add	r2, r1
 8009f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	e036      	b.n	8009fa0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f38:	69da      	ldr	r2, [r3, #28]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	2101      	movs	r1, #1
 8009f44:	fa01 f303 	lsl.w	r3, r1, r3
 8009f48:	041b      	lsls	r3, r3, #16
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f50:	4313      	orrs	r3, r2
 8009f52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d11a      	bne.n	8009fa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	791b      	ldrb	r3, [r3, #4]
 8009f84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f86:	430b      	orrs	r3, r1
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	0151      	lsls	r1, r2, #5
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	440a      	add	r2, r1
 8009f92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
	...

08009fb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d161      	bne.n	800a090 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fe2:	d11f      	bne.n	800a024 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	0151      	lsls	r1, r2, #5
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	440a      	add	r2, r1
 8009ffa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ffe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a002:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a01e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a022:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a02a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	2101      	movs	r1, #1
 800a036:	fa01 f303 	lsl.w	r3, r1, r3
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	43db      	mvns	r3, r3
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a044:	4013      	ands	r3, r2
 800a046:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a04e:	69da      	ldr	r2, [r3, #28]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	f003 030f 	and.w	r3, r3, #15
 800a058:	2101      	movs	r1, #1
 800a05a:	fa01 f303 	lsl.w	r3, r1, r3
 800a05e:	b29b      	uxth	r3, r3
 800a060:	43db      	mvns	r3, r3
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a068:	4013      	ands	r3, r2
 800a06a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	0159      	lsls	r1, r3, #5
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	440b      	add	r3, r1
 800a082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a086:	4619      	mov	r1, r3
 800a088:	4b35      	ldr	r3, [pc, #212]	@ (800a160 <USB_DeactivateEndpoint+0x1b0>)
 800a08a:	4013      	ands	r3, r2
 800a08c:	600b      	str	r3, [r1, #0]
 800a08e:	e060      	b.n	800a152 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0a6:	d11f      	bne.n	800a0e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	0151      	lsls	r1, r2, #5
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	440a      	add	r2, r1
 800a0de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fe:	041b      	lsls	r3, r3, #16
 800a100:	43db      	mvns	r3, r3
 800a102:	68f9      	ldr	r1, [r7, #12]
 800a104:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a108:	4013      	ands	r3, r2
 800a10a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a112:	69da      	ldr	r2, [r3, #28]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	f003 030f 	and.w	r3, r3, #15
 800a11c:	2101      	movs	r1, #1
 800a11e:	fa01 f303 	lsl.w	r3, r1, r3
 800a122:	041b      	lsls	r3, r3, #16
 800a124:	43db      	mvns	r3, r3
 800a126:	68f9      	ldr	r1, [r7, #12]
 800a128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a12c:	4013      	ands	r3, r2
 800a12e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	0159      	lsls	r1, r3, #5
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	440b      	add	r3, r1
 800a146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a14a:	4619      	mov	r1, r3
 800a14c:	4b05      	ldr	r3, [pc, #20]	@ (800a164 <USB_DeactivateEndpoint+0x1b4>)
 800a14e:	4013      	ands	r3, r2
 800a150:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	ec337800 	.word	0xec337800
 800a164:	eff37800 	.word	0xeff37800

0800a168 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08a      	sub	sp, #40	@ 0x28
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	4613      	mov	r3, r2
 800a174:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	785b      	ldrb	r3, [r3, #1]
 800a184:	2b01      	cmp	r3, #1
 800a186:	f040 817f 	bne.w	800a488 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d132      	bne.n	800a1f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	0151      	lsls	r1, r2, #5
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	440a      	add	r2, r1
 800a1a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a1b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a1b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	69ba      	ldr	r2, [r7, #24]
 800a1c6:	0151      	lsls	r1, r2, #5
 800a1c8:	69fa      	ldr	r2, [r7, #28]
 800a1ca:	440a      	add	r2, r1
 800a1cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	69ba      	ldr	r2, [r7, #24]
 800a1e6:	0151      	lsls	r1, r2, #5
 800a1e8:	69fa      	ldr	r2, [r7, #28]
 800a1ea:	440a      	add	r2, r1
 800a1ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1f0:	0cdb      	lsrs	r3, r3, #19
 800a1f2:	04db      	lsls	r3, r3, #19
 800a1f4:	6113      	str	r3, [r2, #16]
 800a1f6:	e097      	b.n	800a328 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	69ba      	ldr	r2, [r7, #24]
 800a208:	0151      	lsls	r1, r2, #5
 800a20a:	69fa      	ldr	r2, [r7, #28]
 800a20c:	440a      	add	r2, r1
 800a20e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a212:	0cdb      	lsrs	r3, r3, #19
 800a214:	04db      	lsls	r3, r3, #19
 800a216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	69ba      	ldr	r2, [r7, #24]
 800a228:	0151      	lsls	r1, r2, #5
 800a22a:	69fa      	ldr	r2, [r7, #28]
 800a22c:	440a      	add	r2, r1
 800a22e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a232:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a236:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a23a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d11a      	bne.n	800a278 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	691a      	ldr	r2, [r3, #16]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d903      	bls.n	800a256 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	0151      	lsls	r1, r2, #5
 800a268:	69fa      	ldr	r2, [r7, #28]
 800a26a:	440a      	add	r2, r1
 800a26c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a270:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a274:	6113      	str	r3, [r2, #16]
 800a276:	e044      	b.n	800a302 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	691a      	ldr	r2, [r3, #16]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	4413      	add	r3, r2
 800a282:	1e5a      	subs	r2, r3, #1
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a29a:	691a      	ldr	r2, [r3, #16]
 800a29c:	8afb      	ldrh	r3, [r7, #22]
 800a29e:	04d9      	lsls	r1, r3, #19
 800a2a0:	4ba4      	ldr	r3, [pc, #656]	@ (800a534 <USB_EPStartXfer+0x3cc>)
 800a2a2:	400b      	ands	r3, r1
 800a2a4:	69b9      	ldr	r1, [r7, #24]
 800a2a6:	0148      	lsls	r0, r1, #5
 800a2a8:	69f9      	ldr	r1, [r7, #28]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	791b      	ldrb	r3, [r3, #4]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d122      	bne.n	800a302 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	0151      	lsls	r1, r2, #5
 800a2ce:	69fa      	ldr	r2, [r7, #28]
 800a2d0:	440a      	add	r2, r1
 800a2d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2d6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a2da:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e8:	691a      	ldr	r2, [r3, #16]
 800a2ea:	8afb      	ldrh	r3, [r7, #22]
 800a2ec:	075b      	lsls	r3, r3, #29
 800a2ee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a2f2:	69b9      	ldr	r1, [r7, #24]
 800a2f4:	0148      	lsls	r0, r1, #5
 800a2f6:	69f9      	ldr	r1, [r7, #28]
 800a2f8:	4401      	add	r1, r0
 800a2fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2fe:	4313      	orrs	r3, r2
 800a300:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	015a      	lsls	r2, r3, #5
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	4413      	add	r3, r2
 800a30a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a30e:	691a      	ldr	r2, [r3, #16]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a318:	69b9      	ldr	r1, [r7, #24]
 800a31a:	0148      	lsls	r0, r1, #5
 800a31c:	69f9      	ldr	r1, [r7, #28]
 800a31e:	4401      	add	r1, r0
 800a320:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a324:	4313      	orrs	r3, r2
 800a326:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d14b      	bne.n	800a3c6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d009      	beq.n	800a34a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a342:	461a      	mov	r2, r3
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	791b      	ldrb	r3, [r3, #4]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d128      	bne.n	800a3a4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d110      	bne.n	800a384 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	440a      	add	r2, r1
 800a378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a37c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	e00f      	b.n	800a3a4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	0151      	lsls	r1, r2, #5
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	440a      	add	r2, r1
 800a39a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a39e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3a2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	0151      	lsls	r1, r2, #5
 800a3b6:	69fa      	ldr	r2, [r7, #28]
 800a3b8:	440a      	add	r2, r1
 800a3ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	e166      	b.n	800a694 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	015a      	lsls	r2, r3, #5
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	69ba      	ldr	r2, [r7, #24]
 800a3d6:	0151      	lsls	r1, r2, #5
 800a3d8:	69fa      	ldr	r2, [r7, #28]
 800a3da:	440a      	add	r2, r1
 800a3dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3e4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	791b      	ldrb	r3, [r3, #4]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d015      	beq.n	800a41a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f000 814e 	beq.w	800a694 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	f003 030f 	and.w	r3, r3, #15
 800a408:	2101      	movs	r1, #1
 800a40a:	fa01 f303 	lsl.w	r3, r1, r3
 800a40e:	69f9      	ldr	r1, [r7, #28]
 800a410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a414:	4313      	orrs	r3, r2
 800a416:	634b      	str	r3, [r1, #52]	@ 0x34
 800a418:	e13c      	b.n	800a694 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a426:	2b00      	cmp	r3, #0
 800a428:	d110      	bne.n	800a44c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	015a      	lsls	r2, r3, #5
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	4413      	add	r3, r2
 800a432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	69ba      	ldr	r2, [r7, #24]
 800a43a:	0151      	lsls	r1, r2, #5
 800a43c:	69fa      	ldr	r2, [r7, #28]
 800a43e:	440a      	add	r2, r1
 800a440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a444:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a448:	6013      	str	r3, [r2, #0]
 800a44a:	e00f      	b.n	800a46c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	0151      	lsls	r1, r2, #5
 800a45e:	69fa      	ldr	r2, [r7, #28]
 800a460:	440a      	add	r2, r1
 800a462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a46a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	68d9      	ldr	r1, [r3, #12]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	781a      	ldrb	r2, [r3, #0]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	b298      	uxth	r0, r3
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	4603      	mov	r3, r0
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 f9b9 	bl	800a7f8 <USB_WritePacket>
 800a486:	e105      	b.n	800a694 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	69ba      	ldr	r2, [r7, #24]
 800a498:	0151      	lsls	r1, r2, #5
 800a49a:	69fa      	ldr	r2, [r7, #28]
 800a49c:	440a      	add	r2, r1
 800a49e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4a2:	0cdb      	lsrs	r3, r3, #19
 800a4a4:	04db      	lsls	r3, r3, #19
 800a4a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	69ba      	ldr	r2, [r7, #24]
 800a4b8:	0151      	lsls	r1, r2, #5
 800a4ba:	69fa      	ldr	r2, [r7, #28]
 800a4bc:	440a      	add	r2, r1
 800a4be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a4c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a4ca:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d132      	bne.n	800a538 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	689a      	ldr	r2, [r3, #8]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f6:	691a      	ldr	r2, [r3, #16]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a500:	69b9      	ldr	r1, [r7, #24]
 800a502:	0148      	lsls	r0, r1, #5
 800a504:	69f9      	ldr	r1, [r7, #28]
 800a506:	4401      	add	r1, r0
 800a508:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a50c:	4313      	orrs	r3, r2
 800a50e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	0151      	lsls	r1, r2, #5
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	440a      	add	r2, r1
 800a526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a52a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a52e:	6113      	str	r3, [r2, #16]
 800a530:	e062      	b.n	800a5f8 <USB_EPStartXfer+0x490>
 800a532:	bf00      	nop
 800a534:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d123      	bne.n	800a588 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54c:	691a      	ldr	r2, [r3, #16]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a556:	69b9      	ldr	r1, [r7, #24]
 800a558:	0148      	lsls	r0, r1, #5
 800a55a:	69f9      	ldr	r1, [r7, #28]
 800a55c:	4401      	add	r1, r0
 800a55e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a562:	4313      	orrs	r3, r2
 800a564:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	69ba      	ldr	r2, [r7, #24]
 800a576:	0151      	lsls	r1, r2, #5
 800a578:	69fa      	ldr	r2, [r7, #28]
 800a57a:	440a      	add	r2, r1
 800a57c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a580:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a584:	6113      	str	r3, [r2, #16]
 800a586:	e037      	b.n	800a5f8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	691a      	ldr	r2, [r3, #16]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	4413      	add	r3, r2
 800a592:	1e5a      	subs	r2, r3, #1
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	fbb2 f3f3 	udiv	r3, r2, r3
 800a59c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	8afa      	ldrh	r2, [r7, #22]
 800a5a4:	fb03 f202 	mul.w	r2, r3, r2
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b8:	691a      	ldr	r2, [r3, #16]
 800a5ba:	8afb      	ldrh	r3, [r7, #22]
 800a5bc:	04d9      	lsls	r1, r3, #19
 800a5be:	4b38      	ldr	r3, [pc, #224]	@ (800a6a0 <USB_EPStartXfer+0x538>)
 800a5c0:	400b      	ands	r3, r1
 800a5c2:	69b9      	ldr	r1, [r7, #24]
 800a5c4:	0148      	lsls	r0, r1, #5
 800a5c6:	69f9      	ldr	r1, [r7, #28]
 800a5c8:	4401      	add	r1, r0
 800a5ca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5de:	691a      	ldr	r2, [r3, #16]
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5e8:	69b9      	ldr	r1, [r7, #24]
 800a5ea:	0148      	lsls	r0, r1, #5
 800a5ec:	69f9      	ldr	r1, [r7, #28]
 800a5ee:	4401      	add	r1, r0
 800a5f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d10d      	bne.n	800a61a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	68d9      	ldr	r1, [r3, #12]
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	015a      	lsls	r2, r3, #5
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	4413      	add	r3, r2
 800a612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a616:	460a      	mov	r2, r1
 800a618:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	791b      	ldrb	r3, [r3, #4]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d128      	bne.n	800a674 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d110      	bne.n	800a654 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	0151      	lsls	r1, r2, #5
 800a644:	69fa      	ldr	r2, [r7, #28]
 800a646:	440a      	add	r2, r1
 800a648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a64c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a650:	6013      	str	r3, [r2, #0]
 800a652:	e00f      	b.n	800a674 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	0151      	lsls	r1, r2, #5
 800a666:	69fa      	ldr	r2, [r7, #28]
 800a668:	440a      	add	r2, r1
 800a66a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a66e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a672:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	0151      	lsls	r1, r2, #5
 800a686:	69fa      	ldr	r2, [r7, #28]
 800a688:	440a      	add	r2, r1
 800a68a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a68e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3720      	adds	r7, #32
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	1ff80000 	.word	0x1ff80000

0800a6a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	785b      	ldrb	r3, [r3, #1]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d14a      	bne.n	800a758 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6da:	f040 8086 	bne.w	800a7ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	7812      	ldrb	r2, [r2, #0]
 800a6f2:	0151      	lsls	r1, r2, #5
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	440a      	add	r2, r1
 800a6f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a700:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	015a      	lsls	r2, r3, #5
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	4413      	add	r3, r2
 800a70c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	7812      	ldrb	r2, [r2, #0]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a720:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a724:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3301      	adds	r3, #1
 800a72a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a732:	4293      	cmp	r3, r2
 800a734:	d902      	bls.n	800a73c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	75fb      	strb	r3, [r7, #23]
          break;
 800a73a:	e056      	b.n	800a7ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a754:	d0e7      	beq.n	800a726 <USB_EPStopXfer+0x82>
 800a756:	e048      	b.n	800a7ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a76c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a770:	d13b      	bne.n	800a7ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	7812      	ldrb	r2, [r2, #0]
 800a786:	0151      	lsls	r1, r2, #5
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	440a      	add	r2, r1
 800a78c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a790:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a794:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	015a      	lsls	r2, r3, #5
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	4413      	add	r3, r2
 800a7a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	7812      	ldrb	r2, [r2, #0]
 800a7aa:	0151      	lsls	r1, r2, #5
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	440a      	add	r2, r1
 800a7b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d902      	bls.n	800a7d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a7ce:	e00c      	b.n	800a7ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7e8:	d0e7      	beq.n	800a7ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	371c      	adds	r7, #28
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b089      	sub	sp, #36	@ 0x24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4611      	mov	r1, r2
 800a804:	461a      	mov	r2, r3
 800a806:	460b      	mov	r3, r1
 800a808:	71fb      	strb	r3, [r7, #7]
 800a80a:	4613      	mov	r3, r2
 800a80c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a816:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d123      	bne.n	800a866 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a81e:	88bb      	ldrh	r3, [r7, #4]
 800a820:	3303      	adds	r3, #3
 800a822:	089b      	lsrs	r3, r3, #2
 800a824:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a826:	2300      	movs	r3, #0
 800a828:	61bb      	str	r3, [r7, #24]
 800a82a:	e018      	b.n	800a85e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	031a      	lsls	r2, r3, #12
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	4413      	add	r3, r2
 800a834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a838:	461a      	mov	r2, r3
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	3301      	adds	r3, #1
 800a844:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	3301      	adds	r3, #1
 800a84a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	3301      	adds	r3, #1
 800a850:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	3301      	adds	r3, #1
 800a856:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	3301      	adds	r3, #1
 800a85c:	61bb      	str	r3, [r7, #24]
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	429a      	cmp	r2, r3
 800a864:	d3e2      	bcc.n	800a82c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3724      	adds	r7, #36	@ 0x24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a874:	b480      	push	{r7}
 800a876:	b08b      	sub	sp, #44	@ 0x2c
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	4613      	mov	r3, r2
 800a880:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a88a:	88fb      	ldrh	r3, [r7, #6]
 800a88c:	089b      	lsrs	r3, r3, #2
 800a88e:	b29b      	uxth	r3, r3
 800a890:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a892:	88fb      	ldrh	r3, [r7, #6]
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a89a:	2300      	movs	r3, #0
 800a89c:	623b      	str	r3, [r7, #32]
 800a89e:	e014      	b.n	800a8ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8aa:	601a      	str	r2, [r3, #0]
    pDest++;
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	623b      	str	r3, [r7, #32]
 800a8ca:	6a3a      	ldr	r2, [r7, #32]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d3e6      	bcc.n	800a8a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a8d2:	8bfb      	ldrh	r3, [r7, #30]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d01e      	beq.n	800a916 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f107 0310 	add.w	r3, r7, #16
 800a8e8:	6812      	ldr	r2, [r2, #0]
 800a8ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	701a      	strb	r2, [r3, #0]
      i++;
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	3301      	adds	r3, #1
 800a902:	623b      	str	r3, [r7, #32]
      pDest++;
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	3301      	adds	r3, #1
 800a908:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a90a:	8bfb      	ldrh	r3, [r7, #30]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a910:	8bfb      	ldrh	r3, [r7, #30]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1ea      	bne.n	800a8ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a918:	4618      	mov	r0, r3
 800a91a:	372c      	adds	r7, #44	@ 0x2c
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	785b      	ldrb	r3, [r3, #1]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d12c      	bne.n	800a99a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4413      	add	r3, r2
 800a948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	db12      	blt.n	800a978 <USB_EPSetStall+0x54>
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00f      	beq.n	800a978 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	0151      	lsls	r1, r2, #5
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	440a      	add	r2, r1
 800a96e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a972:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a976:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	0151      	lsls	r1, r2, #5
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	440a      	add	r2, r1
 800a98e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a992:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	e02b      	b.n	800a9f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	db12      	blt.n	800a9d2 <USB_EPSetStall+0xae>
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00f      	beq.n	800a9d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	0151      	lsls	r1, r2, #5
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	440a      	add	r2, r1
 800a9c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a9d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	0151      	lsls	r1, r2, #5
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	440a      	add	r2, r1
 800a9e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	785b      	ldrb	r3, [r3, #1]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d128      	bne.n	800aa6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	791b      	ldrb	r3, [r3, #4]
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d003      	beq.n	800aa4c <USB_EPClearStall+0x4c>
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	791b      	ldrb	r3, [r3, #4]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d138      	bne.n	800aabe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	e027      	b.n	800aabe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	0151      	lsls	r1, r2, #5
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	440a      	add	r2, r1
 800aa84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	791b      	ldrb	r3, [r3, #4]
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	d003      	beq.n	800aa9e <USB_EPClearStall+0x9e>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	791b      	ldrb	r3, [r3, #4]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d10f      	bne.n	800aabe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	0151      	lsls	r1, r2, #5
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	440a      	add	r2, r1
 800aab4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aabc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aaea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aaee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	011b      	lsls	r3, r3, #4
 800aafc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ab00:	68f9      	ldr	r1, [r7, #12]
 800ab02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab06:	4313      	orrs	r3, r2
 800ab08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab32:	f023 0303 	bic.w	r3, r3, #3
 800ab36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab46:	f023 0302 	bic.w	r3, r3, #2
 800ab4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b085      	sub	sp, #20
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab74:	f023 0303 	bic.w	r3, r3, #3
 800ab78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab88:	f043 0302 	orr.w	r3, r3, #2
 800ab8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	4013      	ands	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800abb4:	68fb      	ldr	r3, [r7, #12]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b085      	sub	sp, #20
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	4013      	ands	r3, r2
 800abe4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	0c1b      	lsrs	r3, r3, #16
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b085      	sub	sp, #20
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	4013      	ands	r3, r2
 800ac18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	b29b      	uxth	r3, r3
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b085      	sub	sp, #20
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac3a:	78fb      	ldrb	r3, [r7, #3]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	4013      	ands	r3, r2
 800ac56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac58:	68bb      	ldr	r3, [r7, #8]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b087      	sub	sp, #28
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	f003 030f 	and.w	r3, r3, #15
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	fa22 f303 	lsr.w	r3, r2, r3
 800ac96:	01db      	lsls	r3, r3, #7
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aca0:	78fb      	ldrb	r3, [r7, #3]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	4013      	ands	r3, r2
 800acb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800acb4:	68bb      	ldr	r3, [r7, #8]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	371c      	adds	r7, #28
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b083      	sub	sp, #12
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	f003 0301 	and.w	r3, r3, #1
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800acde:	b480      	push	{r7}
 800ace0:	b085      	sub	sp, #20
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acf8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800acfc:	f023 0307 	bic.w	r3, r3, #7
 800ad00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	333c      	adds	r3, #60	@ 0x3c
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	4a26      	ldr	r2, [pc, #152]	@ (800addc <USB_EP0_OutStart+0xb8>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d90a      	bls.n	800ad5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad58:	d101      	bne.n	800ad5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	e037      	b.n	800adce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad64:	461a      	mov	r2, r3
 800ad66:	2300      	movs	r3, #0
 800ad68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad8c:	f043 0318 	orr.w	r3, r3, #24
 800ad90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ada0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ada4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ada6:	7afb      	ldrb	r3, [r7, #11]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d10f      	bne.n	800adcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb2:	461a      	mov	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adc6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800adca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	4f54300a 	.word	0x4f54300a

0800ade0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ade8:	2300      	movs	r3, #0
 800adea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3301      	adds	r3, #1
 800adf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adf8:	d901      	bls.n	800adfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e022      	b.n	800ae44 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	daf2      	bge.n	800adec <USB_CoreReset+0xc>

  count = 10U;
 800ae06:	230a      	movs	r3, #10
 800ae08:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800ae0a:	e002      	b.n	800ae12 <USB_CoreReset+0x32>
  {
    count--;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1f9      	bne.n	800ae0c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	f043 0201 	orr.w	r2, r3, #1
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	3301      	adds	r3, #1
 800ae28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae30:	d901      	bls.n	800ae36 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e006      	b.n	800ae44 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d0f0      	beq.n	800ae24 <USB_CoreReset+0x44>

  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ae54:	4904      	ldr	r1, [pc, #16]	@ (800ae68 <MX_FATFS_Init+0x18>)
 800ae56:	4805      	ldr	r0, [pc, #20]	@ (800ae6c <MX_FATFS_Init+0x1c>)
 800ae58:	f000 fa88 	bl	800b36c <FATFS_LinkDriver>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4b03      	ldr	r3, [pc, #12]	@ (800ae70 <MX_FATFS_Init+0x20>)
 800ae62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae64:	bf00      	nop
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20009dfc 	.word	0x20009dfc
 800ae6c:	080135ec 	.word	0x080135ec
 800ae70:	20009df8 	.word	0x20009df8

0800ae74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ae7e:	f000 f896 	bl	800afae <BSP_SD_IsDetected>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d001      	beq.n	800ae8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e012      	b.n	800aeb2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ae8c:	480b      	ldr	r0, [pc, #44]	@ (800aebc <BSP_SD_Init+0x48>)
 800ae8e:	f7fb ffde 	bl	8006e4e <HAL_SD_Init>
 800ae92:	4603      	mov	r3, r0
 800ae94:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d109      	bne.n	800aeb0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ae9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800aea0:	4806      	ldr	r0, [pc, #24]	@ (800aebc <BSP_SD_Init+0x48>)
 800aea2:	f7fc fda5 	bl	80079f0 <HAL_SD_ConfigWideBusOperation>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d001      	beq.n	800aeb0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	20009c60 	.word	0x20009c60

0800aec0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	68f9      	ldr	r1, [r7, #12]
 800aed6:	4806      	ldr	r0, [pc, #24]	@ (800aef0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800aed8:	f7fc f862 	bl	8006fa0 <HAL_SD_ReadBlocks_DMA>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20009c60 	.word	0x20009c60

0800aef4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af00:	2300      	movs	r3, #0
 800af02:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	68f9      	ldr	r1, [r7, #12]
 800af0a:	4806      	ldr	r0, [pc, #24]	@ (800af24 <BSP_SD_WriteBlocks_DMA+0x30>)
 800af0c:	f7fc f92a 	bl	8007164 <HAL_SD_WriteBlocks_DMA>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20009c60 	.word	0x20009c60

0800af28 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af2c:	4805      	ldr	r0, [pc, #20]	@ (800af44 <BSP_SD_GetCardState+0x1c>)
 800af2e:	f7fc fdf9 	bl	8007b24 <HAL_SD_GetCardState>
 800af32:	4603      	mov	r3, r0
 800af34:	2b04      	cmp	r3, #4
 800af36:	bf14      	ite	ne
 800af38:	2301      	movne	r3, #1
 800af3a:	2300      	moveq	r3, #0
 800af3c:	b2db      	uxtb	r3, r3
}
 800af3e:	4618      	mov	r0, r3
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20009c60 	.word	0x20009c60

0800af48 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800af50:	6879      	ldr	r1, [r7, #4]
 800af52:	4803      	ldr	r0, [pc, #12]	@ (800af60 <BSP_SD_GetCardInfo+0x18>)
 800af54:	f7fc fd20 	bl	8007998 <HAL_SD_GetCardInfo>
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20009c60 	.word	0x20009c60

0800af64 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800af6c:	f000 f818 	bl	800afa0 <BSP_SD_AbortCallback>
}
 800af70:	bf00      	nop
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800af80:	f7f6 f8d0 	bl	8001124 <BSP_SD_WriteCpltCallback>
}
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800af94:	f7f6 f8e8 	bl	8001168 <BSP_SD_ReadCpltCallback>
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0

}
 800afa4:	bf00      	nop
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800afae:	b480      	push	{r7}
 800afb0:	b083      	sub	sp, #12
 800afb2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800afb4:	2301      	movs	r3, #1
 800afb6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800afb8:	79fb      	ldrb	r3, [r7, #7]
 800afba:	b2db      	uxtb	r3, r3
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800afd0:	f000 fa18 	bl	800b404 <osKernelSysTick>
 800afd4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800afd6:	e006      	b.n	800afe6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800afd8:	f7ff ffa6 	bl	800af28 <BSP_SD_GetCardState>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	e009      	b.n	800affa <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800afe6:	f000 fa0d 	bl	800b404 <osKernelSysTick>
 800afea:	4602      	mov	r2, r0
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d8f0      	bhi.n	800afd8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800aff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
	...

0800b004 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	4603      	mov	r3, r0
 800b00c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b00e:	4b0b      	ldr	r3, [pc, #44]	@ (800b03c <SD_CheckStatus+0x38>)
 800b010:	2201      	movs	r2, #1
 800b012:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b014:	f7ff ff88 	bl	800af28 <BSP_SD_GetCardState>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d107      	bne.n	800b02e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b01e:	4b07      	ldr	r3, [pc, #28]	@ (800b03c <SD_CheckStatus+0x38>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	f023 0301 	bic.w	r3, r3, #1
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	4b04      	ldr	r3, [pc, #16]	@ (800b03c <SD_CheckStatus+0x38>)
 800b02c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b02e:	4b03      	ldr	r3, [pc, #12]	@ (800b03c <SD_CheckStatus+0x38>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	b2db      	uxtb	r3, r3
}
 800b034:	4618      	mov	r0, r3
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	20000009 	.word	0x20000009

0800b040 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b040:	b590      	push	{r4, r7, lr}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b04a:	4b20      	ldr	r3, [pc, #128]	@ (800b0cc <SD_initialize+0x8c>)
 800b04c:	2201      	movs	r2, #1
 800b04e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b050:	f000 f9cc 	bl	800b3ec <osKernelRunning>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d030      	beq.n	800b0bc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b05a:	f7ff ff0b 	bl	800ae74 <BSP_SD_Init>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d107      	bne.n	800b074 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b064:	79fb      	ldrb	r3, [r7, #7]
 800b066:	4618      	mov	r0, r3
 800b068:	f7ff ffcc 	bl	800b004 <SD_CheckStatus>
 800b06c:	4603      	mov	r3, r0
 800b06e:	461a      	mov	r2, r3
 800b070:	4b16      	ldr	r3, [pc, #88]	@ (800b0cc <SD_initialize+0x8c>)
 800b072:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b074:	4b15      	ldr	r3, [pc, #84]	@ (800b0cc <SD_initialize+0x8c>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d01e      	beq.n	800b0bc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b07e:	4b14      	ldr	r3, [pc, #80]	@ (800b0d0 <SD_initialize+0x90>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10e      	bne.n	800b0a4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b086:	4b13      	ldr	r3, [pc, #76]	@ (800b0d4 <SD_initialize+0x94>)
 800b088:	f107 0408 	add.w	r4, r7, #8
 800b08c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b08e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b092:	f107 0308 	add.w	r3, r7, #8
 800b096:	2100      	movs	r1, #0
 800b098:	4618      	mov	r0, r3
 800b09a:	f000 fa23 	bl	800b4e4 <osMessageCreate>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	4a0b      	ldr	r2, [pc, #44]	@ (800b0d0 <SD_initialize+0x90>)
 800b0a2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b0d0 <SD_initialize+0x90>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d107      	bne.n	800b0bc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b0ac:	4b07      	ldr	r3, [pc, #28]	@ (800b0cc <SD_initialize+0x8c>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	f043 0301 	orr.w	r3, r3, #1
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	4b04      	ldr	r3, [pc, #16]	@ (800b0cc <SD_initialize+0x8c>)
 800b0ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b0bc:	4b03      	ldr	r3, [pc, #12]	@ (800b0cc <SD_initialize+0x8c>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	b2db      	uxtb	r3, r3
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	371c      	adds	r7, #28
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd90      	pop	{r4, r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20000009 	.word	0x20000009
 800b0d0:	20009e00 	.word	0x20009e00
 800b0d4:	080134b8 	.word	0x080134b8

0800b0d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7ff ff8d 	bl	800b004 <SD_CheckStatus>
 800b0ea:	4603      	mov	r3, r0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b08a      	sub	sp, #40	@ 0x28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60b9      	str	r1, [r7, #8]
 800b0fc:	607a      	str	r2, [r7, #4]
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b10a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b10e:	f7ff ff5b 	bl	800afc8 <SD_CheckStatusWithTimeout>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	da02      	bge.n	800b11e <SD_read+0x2a>
  {
    return res;
 800b118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b11c:	e032      	b.n	800b184 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	6879      	ldr	r1, [r7, #4]
 800b122:	68b8      	ldr	r0, [r7, #8]
 800b124:	f7ff fecc 	bl	800aec0 <BSP_SD_ReadBlocks_DMA>
 800b128:	4603      	mov	r3, r0
 800b12a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800b12e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b132:	2b00      	cmp	r3, #0
 800b134:	d124      	bne.n	800b180 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b136:	4b15      	ldr	r3, [pc, #84]	@ (800b18c <SD_read+0x98>)
 800b138:	6819      	ldr	r1, [r3, #0]
 800b13a:	f107 0314 	add.w	r3, r7, #20
 800b13e:	f247 5230 	movw	r2, #30000	@ 0x7530
 800b142:	4618      	mov	r0, r3
 800b144:	f000 f9f6 	bl	800b534 <osMessageGet>

    if (event.status == osEventMessage)
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	2b10      	cmp	r3, #16
 800b14c:	d118      	bne.n	800b180 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d115      	bne.n	800b180 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b154:	f000 f956 	bl	800b404 <osKernelSysTick>
 800b158:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b15a:	e008      	b.n	800b16e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b15c:	f7ff fee4 	bl	800af28 <BSP_SD_GetCardState>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d103      	bne.n	800b16e <SD_read+0x7a>
              {
                res = RES_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b16c:	e008      	b.n	800b180 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b16e:	f000 f949 	bl	800b404 <osKernelSysTick>
 800b172:	4602      	mov	r2, r0
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d9ed      	bls.n	800b15c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b184:	4618      	mov	r0, r3
 800b186:	3728      	adds	r7, #40	@ 0x28
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20009e00 	.word	0x20009e00

0800b190 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08a      	sub	sp, #40	@ 0x28
 800b194:	af00      	add	r7, sp, #0
 800b196:	60b9      	str	r1, [r7, #8]
 800b198:	607a      	str	r2, [r7, #4]
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b1a6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b1aa:	f7ff ff0d 	bl	800afc8 <SD_CheckStatusWithTimeout>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	da02      	bge.n	800b1ba <SD_write+0x2a>
  {
    return res;
 800b1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1b8:	e02e      	b.n	800b218 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	68b8      	ldr	r0, [r7, #8]
 800b1c0:	f7ff fe98 	bl	800aef4 <BSP_SD_WriteBlocks_DMA>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d124      	bne.n	800b214 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b1ca:	4b15      	ldr	r3, [pc, #84]	@ (800b220 <SD_write+0x90>)
 800b1cc:	6819      	ldr	r1, [r3, #0]
 800b1ce:	f107 0314 	add.w	r3, r7, #20
 800b1d2:	f247 5230 	movw	r2, #30000	@ 0x7530
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 f9ac 	bl	800b534 <osMessageGet>

    if (event.status == osEventMessage)
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	2b10      	cmp	r3, #16
 800b1e0:	d118      	bne.n	800b214 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d115      	bne.n	800b214 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b1e8:	f000 f90c 	bl	800b404 <osKernelSysTick>
 800b1ec:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b1ee:	e008      	b.n	800b202 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1f0:	f7ff fe9a 	bl	800af28 <BSP_SD_GetCardState>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d103      	bne.n	800b202 <SD_write+0x72>
          {
            res = RES_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b200:	e008      	b.n	800b214 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b202:	f000 f8ff 	bl	800b404 <osKernelSysTick>
 800b206:	4602      	mov	r2, r0
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b210:	4293      	cmp	r3, r2
 800b212:	d9ed      	bls.n	800b1f0 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3728      	adds	r7, #40	@ 0x28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	20009e00 	.word	0x20009e00

0800b224 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08c      	sub	sp, #48	@ 0x30
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4603      	mov	r3, r0
 800b22c:	603a      	str	r2, [r7, #0]
 800b22e:	71fb      	strb	r3, [r7, #7]
 800b230:	460b      	mov	r3, r1
 800b232:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b23a:	4b25      	ldr	r3, [pc, #148]	@ (800b2d0 <SD_ioctl+0xac>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <SD_ioctl+0x28>
 800b248:	2303      	movs	r3, #3
 800b24a:	e03c      	b.n	800b2c6 <SD_ioctl+0xa2>

  switch (cmd)
 800b24c:	79bb      	ldrb	r3, [r7, #6]
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d834      	bhi.n	800b2bc <SD_ioctl+0x98>
 800b252:	a201      	add	r2, pc, #4	@ (adr r2, 800b258 <SD_ioctl+0x34>)
 800b254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b258:	0800b269 	.word	0x0800b269
 800b25c:	0800b271 	.word	0x0800b271
 800b260:	0800b289 	.word	0x0800b289
 800b264:	0800b2a3 	.word	0x0800b2a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b268:	2300      	movs	r3, #0
 800b26a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b26e:	e028      	b.n	800b2c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b270:	f107 030c 	add.w	r3, r7, #12
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff fe67 	bl	800af48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b27a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b286:	e01c      	b.n	800b2c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b288:	f107 030c 	add.w	r3, r7, #12
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7ff fe5b 	bl	800af48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b294:	b29a      	uxth	r2, r3
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b2a0:	e00f      	b.n	800b2c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b2a2:	f107 030c 	add.w	r3, r7, #12
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff fe4e 	bl	800af48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ae:	0a5a      	lsrs	r2, r3, #9
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b2ba:	e002      	b.n	800b2c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b2bc:	2304      	movs	r3, #4
 800b2be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b2c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3730      	adds	r7, #48	@ 0x30
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000009 	.word	0x20000009

0800b2d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b2ea:	4b1f      	ldr	r3, [pc, #124]	@ (800b368 <FATFS_LinkDriverEx+0x94>)
 800b2ec:	7a5b      	ldrb	r3, [r3, #9]
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d131      	bne.n	800b358 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b2f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b368 <FATFS_LinkDriverEx+0x94>)
 800b2f6:	7a5b      	ldrb	r3, [r3, #9]
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b368 <FATFS_LinkDriverEx+0x94>)
 800b2fe:	2100      	movs	r1, #0
 800b300:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b302:	4b19      	ldr	r3, [pc, #100]	@ (800b368 <FATFS_LinkDriverEx+0x94>)
 800b304:	7a5b      	ldrb	r3, [r3, #9]
 800b306:	b2db      	uxtb	r3, r3
 800b308:	4a17      	ldr	r2, [pc, #92]	@ (800b368 <FATFS_LinkDriverEx+0x94>)
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4413      	add	r3, r2
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b312:	4b15      	ldr	r3, [pc, #84]	@ (800b368 <FATFS_LinkDriverEx+0x94>)
 800b314:	7a5b      	ldrb	r3, [r3, #9]
 800b316:	b2db      	uxtb	r3, r3
 800b318:	461a      	mov	r2, r3
 800b31a:	4b13      	ldr	r3, [pc, #76]	@ (800b368 <FATFS_LinkDriverEx+0x94>)
 800b31c:	4413      	add	r3, r2
 800b31e:	79fa      	ldrb	r2, [r7, #7]
 800b320:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b322:	4b11      	ldr	r3, [pc, #68]	@ (800b368 <FATFS_LinkDriverEx+0x94>)
 800b324:	7a5b      	ldrb	r3, [r3, #9]
 800b326:	b2db      	uxtb	r3, r3
 800b328:	1c5a      	adds	r2, r3, #1
 800b32a:	b2d1      	uxtb	r1, r2
 800b32c:	4a0e      	ldr	r2, [pc, #56]	@ (800b368 <FATFS_LinkDriverEx+0x94>)
 800b32e:	7251      	strb	r1, [r2, #9]
 800b330:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b332:	7dbb      	ldrb	r3, [r7, #22]
 800b334:	3330      	adds	r3, #48	@ 0x30
 800b336:	b2da      	uxtb	r2, r3
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	3301      	adds	r3, #1
 800b340:	223a      	movs	r2, #58	@ 0x3a
 800b342:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	3302      	adds	r3, #2
 800b348:	222f      	movs	r2, #47	@ 0x2f
 800b34a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	3303      	adds	r3, #3
 800b350:	2200      	movs	r2, #0
 800b352:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b358:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	371c      	adds	r7, #28
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	20009e04 	.word	0x20009e04

0800b36c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b376:	2200      	movs	r2, #0
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff ffaa 	bl	800b2d4 <FATFS_LinkDriverEx>
 800b380:	4603      	mov	r3, r0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	4603      	mov	r3, r0
 800b392:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b394:	2300      	movs	r3, #0
 800b396:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b39c:	2b84      	cmp	r3, #132	@ 0x84
 800b39e:	d005      	beq.n	800b3ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b3a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	3303      	adds	r3, #3
 800b3aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3c0:	f3ef 8305 	mrs	r3, IPSR
 800b3c4:	607b      	str	r3, [r7, #4]
  return(result);
 800b3c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	bf14      	ite	ne
 800b3cc:	2301      	movne	r3, #1
 800b3ce:	2300      	moveq	r3, #0
 800b3d0:	b2db      	uxtb	r3, r3
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b3e2:	f001 fd6b 	bl	800cebc <vTaskStartScheduler>
  
  return osOK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800b3f0:	f002 f9f4 	bl	800d7dc <xTaskGetSchedulerState>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d101      	bne.n	800b3fe <osKernelRunning+0x12>
    return 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e000      	b.n	800b400 <osKernelRunning+0x14>
  else
    return 1;
 800b3fe:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800b400:	4618      	mov	r0, r3
 800b402:	bd80      	pop	{r7, pc}

0800b404 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b408:	f7ff ffd7 	bl	800b3ba <inHandlerMode>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d003      	beq.n	800b41a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b412:	f001 fe71 	bl	800d0f8 <xTaskGetTickCountFromISR>
 800b416:	4603      	mov	r3, r0
 800b418:	e002      	b.n	800b420 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b41a:	f001 fe5d 	bl	800d0d8 <xTaskGetTickCount>
 800b41e:	4603      	mov	r3, r0
  }
}
 800b420:	4618      	mov	r0, r3
 800b422:	bd80      	pop	{r7, pc}

0800b424 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b426:	b089      	sub	sp, #36	@ 0x24
 800b428:	af04      	add	r7, sp, #16
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d020      	beq.n	800b478 <osThreadCreate+0x54>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d01c      	beq.n	800b478 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685c      	ldr	r4, [r3, #4]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	691e      	ldr	r6, [r3, #16]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff ff9a 	bl	800b38a <makeFreeRtosPriority>
 800b456:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	695b      	ldr	r3, [r3, #20]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b460:	9202      	str	r2, [sp, #8]
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	9100      	str	r1, [sp, #0]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	4632      	mov	r2, r6
 800b46a:	4629      	mov	r1, r5
 800b46c:	4620      	mov	r0, r4
 800b46e:	f001 fb57 	bl	800cb20 <xTaskCreateStatic>
 800b472:	4603      	mov	r3, r0
 800b474:	60fb      	str	r3, [r7, #12]
 800b476:	e01c      	b.n	800b4b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	685c      	ldr	r4, [r3, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b484:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7ff ff7c 	bl	800b38a <makeFreeRtosPriority>
 800b492:	4602      	mov	r2, r0
 800b494:	f107 030c 	add.w	r3, r7, #12
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	9200      	str	r2, [sp, #0]
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	4632      	mov	r2, r6
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f001 fb9c 	bl	800cbe0 <xTaskCreate>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d001      	beq.n	800b4b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	e000      	b.n	800b4b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <osDelay+0x16>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	e000      	b.n	800b4d4 <osDelay+0x18>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f001 fcbb 	bl	800ce50 <vTaskDelay>
  
  return osOK;
 800b4da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b4e4:	b590      	push	{r4, r7, lr}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af02      	add	r7, sp, #8
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d011      	beq.n	800b51a <osMessageCreate+0x36>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6859      	ldr	r1, [r3, #4]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	689a      	ldr	r2, [r3, #8]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	2400      	movs	r4, #0
 800b510:	9400      	str	r4, [sp, #0]
 800b512:	f000 fe85 	bl	800c220 <xQueueGenericCreateStatic>
 800b516:	4603      	mov	r3, r0
 800b518:	e008      	b.n	800b52c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6818      	ldr	r0, [r3, #0]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	4619      	mov	r1, r3
 800b526:	f000 fef8 	bl	800c31a <xQueueGenericCreate>
 800b52a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	bd90      	pop	{r4, r7, pc}

0800b534 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b08b      	sub	sp, #44	@ 0x2c
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10a      	bne.n	800b564 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b54e:	2380      	movs	r3, #128	@ 0x80
 800b550:	617b      	str	r3, [r7, #20]
    return event;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	461c      	mov	r4, r3
 800b556:	f107 0314 	add.w	r3, r7, #20
 800b55a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b55e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b562:	e054      	b.n	800b60e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b564:	2300      	movs	r3, #0
 800b566:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b572:	d103      	bne.n	800b57c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b574:	f04f 33ff 	mov.w	r3, #4294967295
 800b578:	627b      	str	r3, [r7, #36]	@ 0x24
 800b57a:	e009      	b.n	800b590 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d006      	beq.n	800b590 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <osMessageGet+0x5c>
      ticks = 1;
 800b58c:	2301      	movs	r3, #1
 800b58e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b590:	f7ff ff13 	bl	800b3ba <inHandlerMode>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d01c      	beq.n	800b5d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b59a:	f107 0220 	add.w	r2, r7, #32
 800b59e:	f107 0314 	add.w	r3, r7, #20
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	68b8      	ldr	r0, [r7, #8]
 800b5a8:	f001 f928 	bl	800c7fc <xQueueReceiveFromISR>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d102      	bne.n	800b5b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b5b2:	2310      	movs	r3, #16
 800b5b4:	617b      	str	r3, [r7, #20]
 800b5b6:	e001      	b.n	800b5bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d01d      	beq.n	800b5fe <osMessageGet+0xca>
 800b5c2:	4b15      	ldr	r3, [pc, #84]	@ (800b618 <osMessageGet+0xe4>)
 800b5c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	e014      	b.n	800b5fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b5d4:	f107 0314 	add.w	r3, r7, #20
 800b5d8:	3304      	adds	r3, #4
 800b5da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5dc:	4619      	mov	r1, r3
 800b5de:	68b8      	ldr	r0, [r7, #8]
 800b5e0:	f001 f82a 	bl	800c638 <xQueueReceive>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d102      	bne.n	800b5f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b5ea:	2310      	movs	r3, #16
 800b5ec:	617b      	str	r3, [r7, #20]
 800b5ee:	e006      	b.n	800b5fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <osMessageGet+0xc6>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e000      	b.n	800b5fc <osMessageGet+0xc8>
 800b5fa:	2340      	movs	r3, #64	@ 0x40
 800b5fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	461c      	mov	r4, r3
 800b602:	f107 0314 	add.w	r3, r7, #20
 800b606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b60a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	372c      	adds	r7, #44	@ 0x2c
 800b612:	46bd      	mov	sp, r7
 800b614:	bd90      	pop	{r4, r7, pc}
 800b616:	bf00      	nop
 800b618:	e000ed04 	.word	0xe000ed04

0800b61c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b622:	201c      	movs	r0, #28
 800b624:	f000 f8a0 	bl	800b768 <pvPortMalloc>
 800b628:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00a      	beq.n	800b646 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3304      	adds	r3, #4
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 fa82 	bl	800bb44 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b646:	687b      	ldr	r3, [r7, #4]
	}
 800b648:	4618      	mov	r0, r3
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b08e      	sub	sp, #56	@ 0x38
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800b65a:	2300      	movs	r3, #0
 800b65c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800b662:	2300      	movs	r3, #0
 800b664:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <xEventGroupSetBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b67e:	bf00      	nop
 800b680:	bf00      	nop
 800b682:	e7fd      	b.n	800b680 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b68a:	d30b      	bcc.n	800b6a4 <xEventGroupSetBits+0x54>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	60fb      	str	r3, [r7, #12]
}
 800b69e:	bf00      	nop
 800b6a0:	bf00      	nop
 800b6a2:	e7fd      	b.n	800b6a0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800b6b0:	f001 fc66 	bl	800cf80 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800b6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800b6c6:	e03c      	b.n	800b742 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800b6ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800b6de:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b6e6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d108      	bne.n	800b704 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800b6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00b      	beq.n	800b716 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800b6fe:	2301      	movs	r3, #1
 800b700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b702:	e008      	b.n	800b716 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800b704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	4013      	ands	r3, r2
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d101      	bne.n	800b716 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800b712:	2301      	movs	r3, #1
 800b714:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800b716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d010      	beq.n	800b73e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800b726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800b72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b736:	4619      	mov	r1, r3
 800b738:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b73a:	f001 fe8f 	bl	800d45c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800b742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	429a      	cmp	r2, r3
 800b748:	d1be      	bne.n	800b6c8 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800b74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b750:	43db      	mvns	r3, r3
 800b752:	401a      	ands	r2, r3
 800b754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b756:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800b758:	f001 fc20 	bl	800cf9c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800b75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75e:	681b      	ldr	r3, [r3, #0]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3738      	adds	r7, #56	@ 0x38
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08a      	sub	sp, #40	@ 0x28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b770:	2300      	movs	r3, #0
 800b772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b774:	f001 fc04 	bl	800cf80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b778:	4b5c      	ldr	r3, [pc, #368]	@ (800b8ec <pvPortMalloc+0x184>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b780:	f000 f924 	bl	800b9cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b784:	4b5a      	ldr	r3, [pc, #360]	@ (800b8f0 <pvPortMalloc+0x188>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4013      	ands	r3, r2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f040 8095 	bne.w	800b8bc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d01e      	beq.n	800b7d6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b798:	2208      	movs	r2, #8
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d015      	beq.n	800b7d6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f023 0307 	bic.w	r3, r3, #7
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f003 0307 	and.w	r3, r3, #7
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00b      	beq.n	800b7d6 <pvPortMalloc+0x6e>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	617b      	str	r3, [r7, #20]
}
 800b7d0:	bf00      	nop
 800b7d2:	bf00      	nop
 800b7d4:	e7fd      	b.n	800b7d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d06f      	beq.n	800b8bc <pvPortMalloc+0x154>
 800b7dc:	4b45      	ldr	r3, [pc, #276]	@ (800b8f4 <pvPortMalloc+0x18c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d86a      	bhi.n	800b8bc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7e6:	4b44      	ldr	r3, [pc, #272]	@ (800b8f8 <pvPortMalloc+0x190>)
 800b7e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7ea:	4b43      	ldr	r3, [pc, #268]	@ (800b8f8 <pvPortMalloc+0x190>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7f0:	e004      	b.n	800b7fc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	429a      	cmp	r2, r3
 800b804:	d903      	bls.n	800b80e <pvPortMalloc+0xa6>
 800b806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1f1      	bne.n	800b7f2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b80e:	4b37      	ldr	r3, [pc, #220]	@ (800b8ec <pvPortMalloc+0x184>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b814:	429a      	cmp	r2, r3
 800b816:	d051      	beq.n	800b8bc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2208      	movs	r2, #8
 800b81e:	4413      	add	r3, r2
 800b820:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	1ad2      	subs	r2, r2, r3
 800b832:	2308      	movs	r3, #8
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	429a      	cmp	r2, r3
 800b838:	d920      	bls.n	800b87c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b83a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4413      	add	r3, r2
 800b840:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	f003 0307 	and.w	r3, r3, #7
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00b      	beq.n	800b864 <pvPortMalloc+0xfc>
	__asm volatile
 800b84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	613b      	str	r3, [r7, #16]
}
 800b85e:	bf00      	nop
 800b860:	bf00      	nop
 800b862:	e7fd      	b.n	800b860 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	1ad2      	subs	r2, r2, r3
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b876:	69b8      	ldr	r0, [r7, #24]
 800b878:	f000 f90a 	bl	800ba90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b87c:	4b1d      	ldr	r3, [pc, #116]	@ (800b8f4 <pvPortMalloc+0x18c>)
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	4a1b      	ldr	r2, [pc, #108]	@ (800b8f4 <pvPortMalloc+0x18c>)
 800b888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b88a:	4b1a      	ldr	r3, [pc, #104]	@ (800b8f4 <pvPortMalloc+0x18c>)
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	4b1b      	ldr	r3, [pc, #108]	@ (800b8fc <pvPortMalloc+0x194>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	429a      	cmp	r2, r3
 800b894:	d203      	bcs.n	800b89e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b896:	4b17      	ldr	r3, [pc, #92]	@ (800b8f4 <pvPortMalloc+0x18c>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a18      	ldr	r2, [pc, #96]	@ (800b8fc <pvPortMalloc+0x194>)
 800b89c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	4b13      	ldr	r3, [pc, #76]	@ (800b8f0 <pvPortMalloc+0x188>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	431a      	orrs	r2, r3
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8b2:	4b13      	ldr	r3, [pc, #76]	@ (800b900 <pvPortMalloc+0x198>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	4a11      	ldr	r2, [pc, #68]	@ (800b900 <pvPortMalloc+0x198>)
 800b8ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8bc:	f001 fb6e 	bl	800cf9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00b      	beq.n	800b8e2 <pvPortMalloc+0x17a>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	60fb      	str	r3, [r7, #12]
}
 800b8dc:	bf00      	nop
 800b8de:	bf00      	nop
 800b8e0:	e7fd      	b.n	800b8de <pvPortMalloc+0x176>
	return pvReturn;
 800b8e2:	69fb      	ldr	r3, [r7, #28]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3728      	adds	r7, #40	@ 0x28
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	2000da18 	.word	0x2000da18
 800b8f0:	2000da2c 	.word	0x2000da2c
 800b8f4:	2000da1c 	.word	0x2000da1c
 800b8f8:	2000da10 	.word	0x2000da10
 800b8fc:	2000da20 	.word	0x2000da20
 800b900:	2000da24 	.word	0x2000da24

0800b904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d04f      	beq.n	800b9b6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b916:	2308      	movs	r3, #8
 800b918:	425b      	negs	r3, r3
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4413      	add	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	4b25      	ldr	r3, [pc, #148]	@ (800b9c0 <vPortFree+0xbc>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4013      	ands	r3, r2
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10b      	bne.n	800b94a <vPortFree+0x46>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	60fb      	str	r3, [r7, #12]
}
 800b944:	bf00      	nop
 800b946:	bf00      	nop
 800b948:	e7fd      	b.n	800b946 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00b      	beq.n	800b96a <vPortFree+0x66>
	__asm volatile
 800b952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	60bb      	str	r3, [r7, #8]
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop
 800b968:	e7fd      	b.n	800b966 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	4b14      	ldr	r3, [pc, #80]	@ (800b9c0 <vPortFree+0xbc>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4013      	ands	r3, r2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d01e      	beq.n	800b9b6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d11a      	bne.n	800b9b6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	4b0e      	ldr	r3, [pc, #56]	@ (800b9c0 <vPortFree+0xbc>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	43db      	mvns	r3, r3
 800b98a:	401a      	ands	r2, r3
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b990:	f001 faf6 	bl	800cf80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	4b0a      	ldr	r3, [pc, #40]	@ (800b9c4 <vPortFree+0xc0>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4413      	add	r3, r2
 800b99e:	4a09      	ldr	r2, [pc, #36]	@ (800b9c4 <vPortFree+0xc0>)
 800b9a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9a2:	6938      	ldr	r0, [r7, #16]
 800b9a4:	f000 f874 	bl	800ba90 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9a8:	4b07      	ldr	r3, [pc, #28]	@ (800b9c8 <vPortFree+0xc4>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	4a06      	ldr	r2, [pc, #24]	@ (800b9c8 <vPortFree+0xc4>)
 800b9b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9b2:	f001 faf3 	bl	800cf9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9b6:	bf00      	nop
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	2000da2c 	.word	0x2000da2c
 800b9c4:	2000da1c 	.word	0x2000da1c
 800b9c8:	2000da28 	.word	0x2000da28

0800b9cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9d2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b9d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9d8:	4b27      	ldr	r3, [pc, #156]	@ (800ba78 <prvHeapInit+0xac>)
 800b9da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f003 0307 	and.w	r3, r3, #7
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00c      	beq.n	800ba00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3307      	adds	r3, #7
 800b9ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f023 0307 	bic.w	r3, r3, #7
 800b9f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	4a1f      	ldr	r2, [pc, #124]	@ (800ba78 <prvHeapInit+0xac>)
 800b9fc:	4413      	add	r3, r2
 800b9fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba04:	4a1d      	ldr	r2, [pc, #116]	@ (800ba7c <prvHeapInit+0xb0>)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba0a:	4b1c      	ldr	r3, [pc, #112]	@ (800ba7c <prvHeapInit+0xb0>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	4413      	add	r3, r2
 800ba16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba18:	2208      	movs	r2, #8
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	1a9b      	subs	r3, r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f023 0307 	bic.w	r3, r3, #7
 800ba26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	4a15      	ldr	r2, [pc, #84]	@ (800ba80 <prvHeapInit+0xb4>)
 800ba2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba2e:	4b14      	ldr	r3, [pc, #80]	@ (800ba80 <prvHeapInit+0xb4>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2200      	movs	r2, #0
 800ba34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba36:	4b12      	ldr	r3, [pc, #72]	@ (800ba80 <prvHeapInit+0xb4>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	1ad2      	subs	r2, r2, r3
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ba80 <prvHeapInit+0xb4>)
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	4a0a      	ldr	r2, [pc, #40]	@ (800ba84 <prvHeapInit+0xb8>)
 800ba5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	4a09      	ldr	r2, [pc, #36]	@ (800ba88 <prvHeapInit+0xbc>)
 800ba62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba64:	4b09      	ldr	r3, [pc, #36]	@ (800ba8c <prvHeapInit+0xc0>)
 800ba66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ba6a:	601a      	str	r2, [r3, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	20009e10 	.word	0x20009e10
 800ba7c:	2000da10 	.word	0x2000da10
 800ba80:	2000da18 	.word	0x2000da18
 800ba84:	2000da20 	.word	0x2000da20
 800ba88:	2000da1c 	.word	0x2000da1c
 800ba8c:	2000da2c 	.word	0x2000da2c

0800ba90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba98:	4b28      	ldr	r3, [pc, #160]	@ (800bb3c <prvInsertBlockIntoFreeList+0xac>)
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	e002      	b.n	800baa4 <prvInsertBlockIntoFreeList+0x14>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d8f7      	bhi.n	800ba9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	4413      	add	r3, r2
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	429a      	cmp	r2, r3
 800babe:	d108      	bne.n	800bad2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	441a      	add	r2, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	441a      	add	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d118      	bne.n	800bb18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	4b15      	ldr	r3, [pc, #84]	@ (800bb40 <prvInsertBlockIntoFreeList+0xb0>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d00d      	beq.n	800bb0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	441a      	add	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	e008      	b.n	800bb20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb0e:	4b0c      	ldr	r3, [pc, #48]	@ (800bb40 <prvInsertBlockIntoFreeList+0xb0>)
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	601a      	str	r2, [r3, #0]
 800bb16:	e003      	b.n	800bb20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d002      	beq.n	800bb2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb2e:	bf00      	nop
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	2000da10 	.word	0x2000da10
 800bb40:	2000da18 	.word	0x2000da18

0800bb44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f103 0208 	add.w	r2, r3, #8
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f103 0208 	add.w	r2, r3, #8
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f103 0208 	add.w	r2, r3, #8
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb92:	bf00      	nop
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b085      	sub	sp, #20
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
 800bba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	1c5a      	adds	r2, r3, #1
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	601a      	str	r2, [r3, #0]
}
 800bbda:	bf00      	nop
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	b085      	sub	sp, #20
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfc:	d103      	bne.n	800bc06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	60fb      	str	r3, [r7, #12]
 800bc04:	e00c      	b.n	800bc20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3308      	adds	r3, #8
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	e002      	b.n	800bc14 <vListInsert+0x2e>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	60fb      	str	r3, [r7, #12]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d2f6      	bcs.n	800bc0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	685a      	ldr	r2, [r3, #4]
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	601a      	str	r2, [r3, #0]
}
 800bc4c:	bf00      	nop
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	6892      	ldr	r2, [r2, #8]
 800bc6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	6852      	ldr	r2, [r2, #4]
 800bc78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d103      	bne.n	800bc8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689a      	ldr	r2, [r3, #8]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	1e5a      	subs	r2, r3, #1
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	3b04      	subs	r3, #4
 800bcbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bcc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	3b04      	subs	r3, #4
 800bcca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	f023 0201 	bic.w	r2, r3, #1
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3b04      	subs	r3, #4
 800bcda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcdc:	4a0c      	ldr	r2, [pc, #48]	@ (800bd10 <pxPortInitialiseStack+0x64>)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3b14      	subs	r3, #20
 800bce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3b04      	subs	r3, #4
 800bcf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f06f 0202 	mvn.w	r2, #2
 800bcfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3b20      	subs	r3, #32
 800bd00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd02:	68fb      	ldr	r3, [r7, #12]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	0800bd15 	.word	0x0800bd15

0800bd14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd1e:	4b13      	ldr	r3, [pc, #76]	@ (800bd6c <prvTaskExitError+0x58>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd26:	d00b      	beq.n	800bd40 <prvTaskExitError+0x2c>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	60fb      	str	r3, [r7, #12]
}
 800bd3a:	bf00      	nop
 800bd3c:	bf00      	nop
 800bd3e:	e7fd      	b.n	800bd3c <prvTaskExitError+0x28>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	60bb      	str	r3, [r7, #8]
}
 800bd52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd54:	bf00      	nop
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d0fc      	beq.n	800bd56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd5c:	bf00      	nop
 800bd5e:	bf00      	nop
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	2000000c 	.word	0x2000000c

0800bd70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd70:	4b07      	ldr	r3, [pc, #28]	@ (800bd90 <pxCurrentTCBConst2>)
 800bd72:	6819      	ldr	r1, [r3, #0]
 800bd74:	6808      	ldr	r0, [r1, #0]
 800bd76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7a:	f380 8809 	msr	PSP, r0
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f04f 0000 	mov.w	r0, #0
 800bd86:	f380 8811 	msr	BASEPRI, r0
 800bd8a:	4770      	bx	lr
 800bd8c:	f3af 8000 	nop.w

0800bd90 <pxCurrentTCBConst2>:
 800bd90:	2000da38 	.word	0x2000da38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop

0800bd98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd98:	4808      	ldr	r0, [pc, #32]	@ (800bdbc <prvPortStartFirstTask+0x24>)
 800bd9a:	6800      	ldr	r0, [r0, #0]
 800bd9c:	6800      	ldr	r0, [r0, #0]
 800bd9e:	f380 8808 	msr	MSP, r0
 800bda2:	f04f 0000 	mov.w	r0, #0
 800bda6:	f380 8814 	msr	CONTROL, r0
 800bdaa:	b662      	cpsie	i
 800bdac:	b661      	cpsie	f
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	df00      	svc	0
 800bdb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bdba:	bf00      	nop
 800bdbc:	e000ed08 	.word	0xe000ed08

0800bdc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bdc6:	4b47      	ldr	r3, [pc, #284]	@ (800bee4 <xPortStartScheduler+0x124>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a47      	ldr	r2, [pc, #284]	@ (800bee8 <xPortStartScheduler+0x128>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d10b      	bne.n	800bde8 <xPortStartScheduler+0x28>
	__asm volatile
 800bdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	60fb      	str	r3, [r7, #12]
}
 800bde2:	bf00      	nop
 800bde4:	bf00      	nop
 800bde6:	e7fd      	b.n	800bde4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bde8:	4b3e      	ldr	r3, [pc, #248]	@ (800bee4 <xPortStartScheduler+0x124>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a3f      	ldr	r2, [pc, #252]	@ (800beec <xPortStartScheduler+0x12c>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d10b      	bne.n	800be0a <xPortStartScheduler+0x4a>
	__asm volatile
 800bdf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	613b      	str	r3, [r7, #16]
}
 800be04:	bf00      	nop
 800be06:	bf00      	nop
 800be08:	e7fd      	b.n	800be06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be0a:	4b39      	ldr	r3, [pc, #228]	@ (800bef0 <xPortStartScheduler+0x130>)
 800be0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	b2db      	uxtb	r3, r3
 800be14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	22ff      	movs	r2, #255	@ 0xff
 800be1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	b2db      	uxtb	r3, r3
 800be22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be24:	78fb      	ldrb	r3, [r7, #3]
 800be26:	b2db      	uxtb	r3, r3
 800be28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	4b31      	ldr	r3, [pc, #196]	@ (800bef4 <xPortStartScheduler+0x134>)
 800be30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be32:	4b31      	ldr	r3, [pc, #196]	@ (800bef8 <xPortStartScheduler+0x138>)
 800be34:	2207      	movs	r2, #7
 800be36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be38:	e009      	b.n	800be4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800be3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bef8 <xPortStartScheduler+0x138>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3b01      	subs	r3, #1
 800be40:	4a2d      	ldr	r2, [pc, #180]	@ (800bef8 <xPortStartScheduler+0x138>)
 800be42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	b2db      	uxtb	r3, r3
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be4e:	78fb      	ldrb	r3, [r7, #3]
 800be50:	b2db      	uxtb	r3, r3
 800be52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be56:	2b80      	cmp	r3, #128	@ 0x80
 800be58:	d0ef      	beq.n	800be3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be5a:	4b27      	ldr	r3, [pc, #156]	@ (800bef8 <xPortStartScheduler+0x138>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f1c3 0307 	rsb	r3, r3, #7
 800be62:	2b04      	cmp	r3, #4
 800be64:	d00b      	beq.n	800be7e <xPortStartScheduler+0xbe>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	60bb      	str	r3, [r7, #8]
}
 800be78:	bf00      	nop
 800be7a:	bf00      	nop
 800be7c:	e7fd      	b.n	800be7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be7e:	4b1e      	ldr	r3, [pc, #120]	@ (800bef8 <xPortStartScheduler+0x138>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	021b      	lsls	r3, r3, #8
 800be84:	4a1c      	ldr	r2, [pc, #112]	@ (800bef8 <xPortStartScheduler+0x138>)
 800be86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be88:	4b1b      	ldr	r3, [pc, #108]	@ (800bef8 <xPortStartScheduler+0x138>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be90:	4a19      	ldr	r2, [pc, #100]	@ (800bef8 <xPortStartScheduler+0x138>)
 800be92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	b2da      	uxtb	r2, r3
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be9c:	4b17      	ldr	r3, [pc, #92]	@ (800befc <xPortStartScheduler+0x13c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a16      	ldr	r2, [pc, #88]	@ (800befc <xPortStartScheduler+0x13c>)
 800bea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bea8:	4b14      	ldr	r3, [pc, #80]	@ (800befc <xPortStartScheduler+0x13c>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a13      	ldr	r2, [pc, #76]	@ (800befc <xPortStartScheduler+0x13c>)
 800beae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800beb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800beb4:	f000 f8da 	bl	800c06c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800beb8:	4b11      	ldr	r3, [pc, #68]	@ (800bf00 <xPortStartScheduler+0x140>)
 800beba:	2200      	movs	r2, #0
 800bebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bebe:	f000 f8f9 	bl	800c0b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bec2:	4b10      	ldr	r3, [pc, #64]	@ (800bf04 <xPortStartScheduler+0x144>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a0f      	ldr	r2, [pc, #60]	@ (800bf04 <xPortStartScheduler+0x144>)
 800bec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800becc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bece:	f7ff ff63 	bl	800bd98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bed2:	f001 f9dd 	bl	800d290 <vTaskSwitchContext>
	prvTaskExitError();
 800bed6:	f7ff ff1d 	bl	800bd14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3718      	adds	r7, #24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	e000ed00 	.word	0xe000ed00
 800bee8:	410fc271 	.word	0x410fc271
 800beec:	410fc270 	.word	0x410fc270
 800bef0:	e000e400 	.word	0xe000e400
 800bef4:	2000da30 	.word	0x2000da30
 800bef8:	2000da34 	.word	0x2000da34
 800befc:	e000ed20 	.word	0xe000ed20
 800bf00:	2000000c 	.word	0x2000000c
 800bf04:	e000ef34 	.word	0xe000ef34

0800bf08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	607b      	str	r3, [r7, #4]
}
 800bf20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf22:	4b10      	ldr	r3, [pc, #64]	@ (800bf64 <vPortEnterCritical+0x5c>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	3301      	adds	r3, #1
 800bf28:	4a0e      	ldr	r2, [pc, #56]	@ (800bf64 <vPortEnterCritical+0x5c>)
 800bf2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bf64 <vPortEnterCritical+0x5c>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d110      	bne.n	800bf56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf34:	4b0c      	ldr	r3, [pc, #48]	@ (800bf68 <vPortEnterCritical+0x60>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00b      	beq.n	800bf56 <vPortEnterCritical+0x4e>
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	603b      	str	r3, [r7, #0]
}
 800bf50:	bf00      	nop
 800bf52:	bf00      	nop
 800bf54:	e7fd      	b.n	800bf52 <vPortEnterCritical+0x4a>
	}
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	2000000c 	.word	0x2000000c
 800bf68:	e000ed04 	.word	0xe000ed04

0800bf6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf72:	4b12      	ldr	r3, [pc, #72]	@ (800bfbc <vPortExitCritical+0x50>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10b      	bne.n	800bf92 <vPortExitCritical+0x26>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	607b      	str	r3, [r7, #4]
}
 800bf8c:	bf00      	nop
 800bf8e:	bf00      	nop
 800bf90:	e7fd      	b.n	800bf8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf92:	4b0a      	ldr	r3, [pc, #40]	@ (800bfbc <vPortExitCritical+0x50>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	4a08      	ldr	r2, [pc, #32]	@ (800bfbc <vPortExitCritical+0x50>)
 800bf9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf9c:	4b07      	ldr	r3, [pc, #28]	@ (800bfbc <vPortExitCritical+0x50>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d105      	bne.n	800bfb0 <vPortExitCritical+0x44>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bfae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	2000000c 	.word	0x2000000c

0800bfc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfc0:	f3ef 8009 	mrs	r0, PSP
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	4b15      	ldr	r3, [pc, #84]	@ (800c020 <pxCurrentTCBConst>)
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	f01e 0f10 	tst.w	lr, #16
 800bfd0:	bf08      	it	eq
 800bfd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfda:	6010      	str	r0, [r2, #0]
 800bfdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bfe4:	f380 8811 	msr	BASEPRI, r0
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f001 f94e 	bl	800d290 <vTaskSwitchContext>
 800bff4:	f04f 0000 	mov.w	r0, #0
 800bff8:	f380 8811 	msr	BASEPRI, r0
 800bffc:	bc09      	pop	{r0, r3}
 800bffe:	6819      	ldr	r1, [r3, #0]
 800c000:	6808      	ldr	r0, [r1, #0]
 800c002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c006:	f01e 0f10 	tst.w	lr, #16
 800c00a:	bf08      	it	eq
 800c00c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c010:	f380 8809 	msr	PSP, r0
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	f3af 8000 	nop.w

0800c020 <pxCurrentTCBConst>:
 800c020:	2000da38 	.word	0x2000da38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop

0800c028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	607b      	str	r3, [r7, #4]
}
 800c040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c042:	f001 f86b 	bl	800d11c <xTaskIncrementTick>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d003      	beq.n	800c054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c04c:	4b06      	ldr	r3, [pc, #24]	@ (800c068 <xPortSysTickHandler+0x40>)
 800c04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c052:	601a      	str	r2, [r3, #0]
 800c054:	2300      	movs	r3, #0
 800c056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	f383 8811 	msr	BASEPRI, r3
}
 800c05e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	e000ed04 	.word	0xe000ed04

0800c06c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c06c:	b480      	push	{r7}
 800c06e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c070:	4b0b      	ldr	r3, [pc, #44]	@ (800c0a0 <vPortSetupTimerInterrupt+0x34>)
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c076:	4b0b      	ldr	r3, [pc, #44]	@ (800c0a4 <vPortSetupTimerInterrupt+0x38>)
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c07c:	4b0a      	ldr	r3, [pc, #40]	@ (800c0a8 <vPortSetupTimerInterrupt+0x3c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a0a      	ldr	r2, [pc, #40]	@ (800c0ac <vPortSetupTimerInterrupt+0x40>)
 800c082:	fba2 2303 	umull	r2, r3, r2, r3
 800c086:	099b      	lsrs	r3, r3, #6
 800c088:	4a09      	ldr	r2, [pc, #36]	@ (800c0b0 <vPortSetupTimerInterrupt+0x44>)
 800c08a:	3b01      	subs	r3, #1
 800c08c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c08e:	4b04      	ldr	r3, [pc, #16]	@ (800c0a0 <vPortSetupTimerInterrupt+0x34>)
 800c090:	2207      	movs	r2, #7
 800c092:	601a      	str	r2, [r3, #0]
}
 800c094:	bf00      	nop
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	e000e010 	.word	0xe000e010
 800c0a4:	e000e018 	.word	0xe000e018
 800c0a8:	20000000 	.word	0x20000000
 800c0ac:	10624dd3 	.word	0x10624dd3
 800c0b0:	e000e014 	.word	0xe000e014

0800c0b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c0b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c0c4 <vPortEnableVFP+0x10>
 800c0b8:	6801      	ldr	r1, [r0, #0]
 800c0ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c0be:	6001      	str	r1, [r0, #0]
 800c0c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c0c2:	bf00      	nop
 800c0c4:	e000ed88 	.word	0xe000ed88

0800c0c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c0ce:	f3ef 8305 	mrs	r3, IPSR
 800c0d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2b0f      	cmp	r3, #15
 800c0d8:	d915      	bls.n	800c106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0da:	4a18      	ldr	r2, [pc, #96]	@ (800c13c <vPortValidateInterruptPriority+0x74>)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4413      	add	r3, r2
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0e4:	4b16      	ldr	r3, [pc, #88]	@ (800c140 <vPortValidateInterruptPriority+0x78>)
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	7afa      	ldrb	r2, [r7, #11]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d20b      	bcs.n	800c106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	607b      	str	r3, [r7, #4]
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	e7fd      	b.n	800c102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c106:	4b0f      	ldr	r3, [pc, #60]	@ (800c144 <vPortValidateInterruptPriority+0x7c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c10e:	4b0e      	ldr	r3, [pc, #56]	@ (800c148 <vPortValidateInterruptPriority+0x80>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	429a      	cmp	r2, r3
 800c114:	d90b      	bls.n	800c12e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	603b      	str	r3, [r7, #0]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <vPortValidateInterruptPriority+0x62>
	}
 800c12e:	bf00      	nop
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	e000e3f0 	.word	0xe000e3f0
 800c140:	2000da30 	.word	0x2000da30
 800c144:	e000ed0c 	.word	0xe000ed0c
 800c148:	2000da34 	.word	0x2000da34

0800c14c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10b      	bne.n	800c178 <xQueueGenericReset+0x2c>
	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	60bb      	str	r3, [r7, #8]
}
 800c172:	bf00      	nop
 800c174:	bf00      	nop
 800c176:	e7fd      	b.n	800c174 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c178:	f7ff fec6 	bl	800bf08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c184:	68f9      	ldr	r1, [r7, #12]
 800c186:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c188:	fb01 f303 	mul.w	r3, r1, r3
 800c18c:	441a      	add	r2, r3
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	68f9      	ldr	r1, [r7, #12]
 800c1ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1ae:	fb01 f303 	mul.w	r3, r1, r3
 800c1b2:	441a      	add	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	22ff      	movs	r2, #255	@ 0xff
 800c1bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	22ff      	movs	r2, #255	@ 0xff
 800c1c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d114      	bne.n	800c1f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d01a      	beq.n	800c20c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3310      	adds	r3, #16
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f001 f8da 	bl	800d394 <xTaskRemoveFromEventList>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d012      	beq.n	800c20c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c21c <xQueueGenericReset+0xd0>)
 800c1e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	e009      	b.n	800c20c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3310      	adds	r3, #16
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7ff fca1 	bl	800bb44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3324      	adds	r3, #36	@ 0x24
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff fc9c 	bl	800bb44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c20c:	f7ff feae 	bl	800bf6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c210:	2301      	movs	r3, #1
}
 800c212:	4618      	mov	r0, r3
 800c214:	3710      	adds	r7, #16
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	e000ed04 	.word	0xe000ed04

0800c220 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c220:	b580      	push	{r7, lr}
 800c222:	b08e      	sub	sp, #56	@ 0x38
 800c224:	af02      	add	r7, sp, #8
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10b      	bne.n	800c24c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c246:	bf00      	nop
 800c248:	bf00      	nop
 800c24a:	e7fd      	b.n	800c248 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10b      	bne.n	800c26a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop
 800c268:	e7fd      	b.n	800c266 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d002      	beq.n	800c276 <xQueueGenericCreateStatic+0x56>
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d001      	beq.n	800c27a <xQueueGenericCreateStatic+0x5a>
 800c276:	2301      	movs	r3, #1
 800c278:	e000      	b.n	800c27c <xQueueGenericCreateStatic+0x5c>
 800c27a:	2300      	movs	r3, #0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10b      	bne.n	800c298 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	623b      	str	r3, [r7, #32]
}
 800c292:	bf00      	nop
 800c294:	bf00      	nop
 800c296:	e7fd      	b.n	800c294 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d102      	bne.n	800c2a4 <xQueueGenericCreateStatic+0x84>
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <xQueueGenericCreateStatic+0x88>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e000      	b.n	800c2aa <xQueueGenericCreateStatic+0x8a>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d10b      	bne.n	800c2c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	61fb      	str	r3, [r7, #28]
}
 800c2c0:	bf00      	nop
 800c2c2:	bf00      	nop
 800c2c4:	e7fd      	b.n	800c2c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c2c6:	2348      	movs	r3, #72	@ 0x48
 800c2c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	2b48      	cmp	r3, #72	@ 0x48
 800c2ce:	d00b      	beq.n	800c2e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	61bb      	str	r3, [r7, #24]
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	e7fd      	b.n	800c2e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c2e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00d      	beq.n	800c310 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	4613      	mov	r3, r2
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	68b9      	ldr	r1, [r7, #8]
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f000 f840 	bl	800c390 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c312:	4618      	mov	r0, r3
 800c314:	3730      	adds	r7, #48	@ 0x30
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b08a      	sub	sp, #40	@ 0x28
 800c31e:	af02      	add	r7, sp, #8
 800c320:	60f8      	str	r0, [r7, #12]
 800c322:	60b9      	str	r1, [r7, #8]
 800c324:	4613      	mov	r3, r2
 800c326:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10b      	bne.n	800c346 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	613b      	str	r3, [r7, #16]
}
 800c340:	bf00      	nop
 800c342:	bf00      	nop
 800c344:	e7fd      	b.n	800c342 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	fb02 f303 	mul.w	r3, r2, r3
 800c34e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	3348      	adds	r3, #72	@ 0x48
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff fa07 	bl	800b768 <pvPortMalloc>
 800c35a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d011      	beq.n	800c386 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	3348      	adds	r3, #72	@ 0x48
 800c36a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c374:	79fa      	ldrb	r2, [r7, #7]
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	4613      	mov	r3, r2
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	68b9      	ldr	r1, [r7, #8]
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f000 f805 	bl	800c390 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c386:	69bb      	ldr	r3, [r7, #24]
	}
 800c388:	4618      	mov	r0, r3
 800c38a:	3720      	adds	r7, #32
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d103      	bne.n	800c3ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	69ba      	ldr	r2, [r7, #24]
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	e002      	b.n	800c3b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3be:	2101      	movs	r1, #1
 800c3c0:	69b8      	ldr	r0, [r7, #24]
 800c3c2:	f7ff fec3 	bl	800c14c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c3c6:	bf00      	nop
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b082      	sub	sp, #8
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00e      	beq.n	800c3fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f81d 	bl	800c434 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c402:	b580      	push	{r7, lr}
 800c404:	b086      	sub	sp, #24
 800c406:	af00      	add	r7, sp, #0
 800c408:	4603      	mov	r3, r0
 800c40a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c40c:	2301      	movs	r3, #1
 800c40e:	617b      	str	r3, [r7, #20]
 800c410:	2300      	movs	r3, #0
 800c412:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c414:	79fb      	ldrb	r3, [r7, #7]
 800c416:	461a      	mov	r2, r3
 800c418:	6939      	ldr	r1, [r7, #16]
 800c41a:	6978      	ldr	r0, [r7, #20]
 800c41c:	f7ff ff7d 	bl	800c31a <xQueueGenericCreate>
 800c420:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f7ff ffd3 	bl	800c3ce <prvInitialiseMutex>

		return xNewQueue;
 800c428:	68fb      	ldr	r3, [r7, #12]
	}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
	...

0800c434 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08e      	sub	sp, #56	@ 0x38
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c442:	2300      	movs	r3, #0
 800c444:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10b      	bne.n	800c468 <xQueueGenericSend+0x34>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c462:	bf00      	nop
 800c464:	bf00      	nop
 800c466:	e7fd      	b.n	800c464 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d103      	bne.n	800c476 <xQueueGenericSend+0x42>
 800c46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c472:	2b00      	cmp	r3, #0
 800c474:	d101      	bne.n	800c47a <xQueueGenericSend+0x46>
 800c476:	2301      	movs	r3, #1
 800c478:	e000      	b.n	800c47c <xQueueGenericSend+0x48>
 800c47a:	2300      	movs	r3, #0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10b      	bne.n	800c498 <xQueueGenericSend+0x64>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c492:	bf00      	nop
 800c494:	bf00      	nop
 800c496:	e7fd      	b.n	800c494 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d103      	bne.n	800c4a6 <xQueueGenericSend+0x72>
 800c49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d101      	bne.n	800c4aa <xQueueGenericSend+0x76>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e000      	b.n	800c4ac <xQueueGenericSend+0x78>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10b      	bne.n	800c4c8 <xQueueGenericSend+0x94>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	623b      	str	r3, [r7, #32]
}
 800c4c2:	bf00      	nop
 800c4c4:	bf00      	nop
 800c4c6:	e7fd      	b.n	800c4c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4c8:	f001 f988 	bl	800d7dc <xTaskGetSchedulerState>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d102      	bne.n	800c4d8 <xQueueGenericSend+0xa4>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d101      	bne.n	800c4dc <xQueueGenericSend+0xa8>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e000      	b.n	800c4de <xQueueGenericSend+0xaa>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10b      	bne.n	800c4fa <xQueueGenericSend+0xc6>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	61fb      	str	r3, [r7, #28]
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop
 800c4f8:	e7fd      	b.n	800c4f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4fa:	f7ff fd05 	bl	800bf08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c506:	429a      	cmp	r2, r3
 800c508:	d302      	bcc.n	800c510 <xQueueGenericSend+0xdc>
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d129      	bne.n	800c564 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	68b9      	ldr	r1, [r7, #8]
 800c514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c516:	f000 f9f3 	bl	800c900 <prvCopyDataToQueue>
 800c51a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	d010      	beq.n	800c546 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c526:	3324      	adds	r3, #36	@ 0x24
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 ff33 	bl	800d394 <xTaskRemoveFromEventList>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d013      	beq.n	800c55c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c534:	4b3f      	ldr	r3, [pc, #252]	@ (800c634 <xQueueGenericSend+0x200>)
 800c536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	e00a      	b.n	800c55c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d007      	beq.n	800c55c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c54c:	4b39      	ldr	r3, [pc, #228]	@ (800c634 <xQueueGenericSend+0x200>)
 800c54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c55c:	f7ff fd06 	bl	800bf6c <vPortExitCritical>
				return pdPASS;
 800c560:	2301      	movs	r3, #1
 800c562:	e063      	b.n	800c62c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d103      	bne.n	800c572 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c56a:	f7ff fcff 	bl	800bf6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	e05c      	b.n	800c62c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c574:	2b00      	cmp	r3, #0
 800c576:	d106      	bne.n	800c586 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c578:	f107 0314 	add.w	r3, r7, #20
 800c57c:	4618      	mov	r0, r3
 800c57e:	f000 ffd1 	bl	800d524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c582:	2301      	movs	r3, #1
 800c584:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c586:	f7ff fcf1 	bl	800bf6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c58a:	f000 fcf9 	bl	800cf80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c58e:	f7ff fcbb 	bl	800bf08 <vPortEnterCritical>
 800c592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c594:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c598:	b25b      	sxtb	r3, r3
 800c59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59e:	d103      	bne.n	800c5a8 <xQueueGenericSend+0x174>
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5ae:	b25b      	sxtb	r3, r3
 800c5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b4:	d103      	bne.n	800c5be <xQueueGenericSend+0x18a>
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5be:	f7ff fcd5 	bl	800bf6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5c2:	1d3a      	adds	r2, r7, #4
 800c5c4:	f107 0314 	add.w	r3, r7, #20
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f000 ffc0 	bl	800d550 <xTaskCheckForTimeOut>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d124      	bne.n	800c620 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5d8:	f000 fa8a 	bl	800caf0 <prvIsQueueFull>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d018      	beq.n	800c614 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e4:	3310      	adds	r3, #16
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 feac 	bl	800d348 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5f2:	f000 fa15 	bl	800ca20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5f6:	f000 fcd1 	bl	800cf9c <xTaskResumeAll>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f47f af7c 	bne.w	800c4fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c602:	4b0c      	ldr	r3, [pc, #48]	@ (800c634 <xQueueGenericSend+0x200>)
 800c604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c608:	601a      	str	r2, [r3, #0]
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	e772      	b.n	800c4fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c616:	f000 fa03 	bl	800ca20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c61a:	f000 fcbf 	bl	800cf9c <xTaskResumeAll>
 800c61e:	e76c      	b.n	800c4fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c622:	f000 f9fd 	bl	800ca20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c626:	f000 fcb9 	bl	800cf9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c62a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3738      	adds	r7, #56	@ 0x38
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	e000ed04 	.word	0xe000ed04

0800c638 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08c      	sub	sp, #48	@ 0x30
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c644:	2300      	movs	r3, #0
 800c646:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10b      	bne.n	800c66a <xQueueReceive+0x32>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	623b      	str	r3, [r7, #32]
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	e7fd      	b.n	800c666 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <xQueueReceive+0x40>
 800c670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <xQueueReceive+0x44>
 800c678:	2301      	movs	r3, #1
 800c67a:	e000      	b.n	800c67e <xQueueReceive+0x46>
 800c67c:	2300      	movs	r3, #0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10b      	bne.n	800c69a <xQueueReceive+0x62>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	61fb      	str	r3, [r7, #28]
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop
 800c698:	e7fd      	b.n	800c696 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c69a:	f001 f89f 	bl	800d7dc <xTaskGetSchedulerState>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d102      	bne.n	800c6aa <xQueueReceive+0x72>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <xQueueReceive+0x76>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e000      	b.n	800c6b0 <xQueueReceive+0x78>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10b      	bne.n	800c6cc <xQueueReceive+0x94>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	61bb      	str	r3, [r7, #24]
}
 800c6c6:	bf00      	nop
 800c6c8:	bf00      	nop
 800c6ca:	e7fd      	b.n	800c6c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6cc:	f7ff fc1c 	bl	800bf08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d01f      	beq.n	800c71c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6dc:	68b9      	ldr	r1, [r7, #8]
 800c6de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6e0:	f000 f978 	bl	800c9d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e6:	1e5a      	subs	r2, r3, #1
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00f      	beq.n	800c714 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f6:	3310      	adds	r3, #16
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 fe4b 	bl	800d394 <xTaskRemoveFromEventList>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d007      	beq.n	800c714 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c704:	4b3c      	ldr	r3, [pc, #240]	@ (800c7f8 <xQueueReceive+0x1c0>)
 800c706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c70a:	601a      	str	r2, [r3, #0]
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c714:	f7ff fc2a 	bl	800bf6c <vPortExitCritical>
				return pdPASS;
 800c718:	2301      	movs	r3, #1
 800c71a:	e069      	b.n	800c7f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d103      	bne.n	800c72a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c722:	f7ff fc23 	bl	800bf6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c726:	2300      	movs	r3, #0
 800c728:	e062      	b.n	800c7f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d106      	bne.n	800c73e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c730:	f107 0310 	add.w	r3, r7, #16
 800c734:	4618      	mov	r0, r3
 800c736:	f000 fef5 	bl	800d524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c73a:	2301      	movs	r3, #1
 800c73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c73e:	f7ff fc15 	bl	800bf6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c742:	f000 fc1d 	bl	800cf80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c746:	f7ff fbdf 	bl	800bf08 <vPortEnterCritical>
 800c74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c750:	b25b      	sxtb	r3, r3
 800c752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c756:	d103      	bne.n	800c760 <xQueueReceive+0x128>
 800c758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c762:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c766:	b25b      	sxtb	r3, r3
 800c768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76c:	d103      	bne.n	800c776 <xQueueReceive+0x13e>
 800c76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c776:	f7ff fbf9 	bl	800bf6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c77a:	1d3a      	adds	r2, r7, #4
 800c77c:	f107 0310 	add.w	r3, r7, #16
 800c780:	4611      	mov	r1, r2
 800c782:	4618      	mov	r0, r3
 800c784:	f000 fee4 	bl	800d550 <xTaskCheckForTimeOut>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d123      	bne.n	800c7d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c78e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c790:	f000 f998 	bl	800cac4 <prvIsQueueEmpty>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d017      	beq.n	800c7ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79c:	3324      	adds	r3, #36	@ 0x24
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 fdd0 	bl	800d348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7aa:	f000 f939 	bl	800ca20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7ae:	f000 fbf5 	bl	800cf9c <xTaskResumeAll>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d189      	bne.n	800c6cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c7f8 <xQueueReceive+0x1c0>)
 800c7ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	e780      	b.n	800c6cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c7ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7cc:	f000 f928 	bl	800ca20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7d0:	f000 fbe4 	bl	800cf9c <xTaskResumeAll>
 800c7d4:	e77a      	b.n	800c6cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7d8:	f000 f922 	bl	800ca20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7dc:	f000 fbde 	bl	800cf9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7e2:	f000 f96f 	bl	800cac4 <prvIsQueueEmpty>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f43f af6f 	beq.w	800c6cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3730      	adds	r7, #48	@ 0x30
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	e000ed04 	.word	0xe000ed04

0800c7fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b08e      	sub	sp, #56	@ 0x38
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10b      	bne.n	800c82a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	623b      	str	r3, [r7, #32]
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop
 800c828:	e7fd      	b.n	800c826 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d103      	bne.n	800c838 <xQueueReceiveFromISR+0x3c>
 800c830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c834:	2b00      	cmp	r3, #0
 800c836:	d101      	bne.n	800c83c <xQueueReceiveFromISR+0x40>
 800c838:	2301      	movs	r3, #1
 800c83a:	e000      	b.n	800c83e <xQueueReceiveFromISR+0x42>
 800c83c:	2300      	movs	r3, #0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d10b      	bne.n	800c85a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	61fb      	str	r3, [r7, #28]
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop
 800c858:	e7fd      	b.n	800c856 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c85a:	f7ff fc35 	bl	800c0c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c85e:	f3ef 8211 	mrs	r2, BASEPRI
 800c862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	61ba      	str	r2, [r7, #24]
 800c874:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c876:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c878:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c87e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c882:	2b00      	cmp	r3, #0
 800c884:	d02f      	beq.n	800c8e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c88c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c890:	68b9      	ldr	r1, [r7, #8]
 800c892:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c894:	f000 f89e 	bl	800c9d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c89a:	1e5a      	subs	r2, r3, #1
 800c89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c8a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a8:	d112      	bne.n	800c8d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ac:	691b      	ldr	r3, [r3, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d016      	beq.n	800c8e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b4:	3310      	adds	r3, #16
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 fd6c 	bl	800d394 <xTaskRemoveFromEventList>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d00e      	beq.n	800c8e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00b      	beq.n	800c8e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	601a      	str	r2, [r3, #0]
 800c8ce:	e007      	b.n	800c8e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	b25a      	sxtb	r2, r3
 800c8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8e4:	e001      	b.n	800c8ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	f383 8811 	msr	BASEPRI, r3
}
 800c8f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3738      	adds	r7, #56	@ 0x38
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c90c:	2300      	movs	r3, #0
 800c90e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c914:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10d      	bne.n	800c93a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d14d      	bne.n	800c9c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 ff74 	bl	800d818 <xTaskPriorityDisinherit>
 800c930:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2200      	movs	r2, #0
 800c936:	609a      	str	r2, [r3, #8]
 800c938:	e043      	b.n	800c9c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d119      	bne.n	800c974 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6858      	ldr	r0, [r3, #4]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c948:	461a      	mov	r2, r3
 800c94a:	68b9      	ldr	r1, [r7, #8]
 800c94c:	f004 fe07 	bl	801155e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c958:	441a      	add	r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	429a      	cmp	r2, r3
 800c968:	d32b      	bcc.n	800c9c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	605a      	str	r2, [r3, #4]
 800c972:	e026      	b.n	800c9c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	68d8      	ldr	r0, [r3, #12]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c97c:	461a      	mov	r2, r3
 800c97e:	68b9      	ldr	r1, [r7, #8]
 800c980:	f004 fded 	bl	801155e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c98c:	425b      	negs	r3, r3
 800c98e:	441a      	add	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	68da      	ldr	r2, [r3, #12]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d207      	bcs.n	800c9b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	689a      	ldr	r2, [r3, #8]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9a8:	425b      	negs	r3, r3
 800c9aa:	441a      	add	r2, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d105      	bne.n	800c9c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c9ca:	697b      	ldr	r3, [r7, #20]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d018      	beq.n	800ca18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	68da      	ldr	r2, [r3, #12]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ee:	441a      	add	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	68da      	ldr	r2, [r3, #12]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d303      	bcc.n	800ca08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68d9      	ldr	r1, [r3, #12]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca10:	461a      	mov	r2, r3
 800ca12:	6838      	ldr	r0, [r7, #0]
 800ca14:	f004 fda3 	bl	801155e <memcpy>
	}
}
 800ca18:	bf00      	nop
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca28:	f7ff fa6e 	bl	800bf08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca34:	e011      	b.n	800ca5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d012      	beq.n	800ca64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3324      	adds	r3, #36	@ 0x24
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 fca6 	bl	800d394 <xTaskRemoveFromEventList>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca4e:	f000 fde3 	bl	800d618 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
 800ca54:	3b01      	subs	r3, #1
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	dce9      	bgt.n	800ca36 <prvUnlockQueue+0x16>
 800ca62:	e000      	b.n	800ca66 <prvUnlockQueue+0x46>
					break;
 800ca64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	22ff      	movs	r2, #255	@ 0xff
 800ca6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ca6e:	f7ff fa7d 	bl	800bf6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca72:	f7ff fa49 	bl	800bf08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca7e:	e011      	b.n	800caa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d012      	beq.n	800caae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	3310      	adds	r3, #16
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f000 fc81 	bl	800d394 <xTaskRemoveFromEventList>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca98:	f000 fdbe 	bl	800d618 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca9c:	7bbb      	ldrb	r3, [r7, #14]
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800caa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	dce9      	bgt.n	800ca80 <prvUnlockQueue+0x60>
 800caac:	e000      	b.n	800cab0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800caae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	22ff      	movs	r2, #255	@ 0xff
 800cab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cab8:	f7ff fa58 	bl	800bf6c <vPortExitCritical>
}
 800cabc:	bf00      	nop
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cacc:	f7ff fa1c 	bl	800bf08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d102      	bne.n	800cade <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cad8:	2301      	movs	r3, #1
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	e001      	b.n	800cae2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cade:	2300      	movs	r3, #0
 800cae0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cae2:	f7ff fa43 	bl	800bf6c <vPortExitCritical>

	return xReturn;
 800cae6:	68fb      	ldr	r3, [r7, #12]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3710      	adds	r7, #16
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800caf8:	f7ff fa06 	bl	800bf08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d102      	bne.n	800cb0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	60fb      	str	r3, [r7, #12]
 800cb0c:	e001      	b.n	800cb12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb12:	f7ff fa2b 	bl	800bf6c <vPortExitCritical>

	return xReturn;
 800cb16:	68fb      	ldr	r3, [r7, #12]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08e      	sub	sp, #56	@ 0x38
 800cb24:	af04      	add	r7, sp, #16
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10b      	bne.n	800cb4c <xTaskCreateStatic+0x2c>
	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	623b      	str	r3, [r7, #32]
}
 800cb46:	bf00      	nop
 800cb48:	bf00      	nop
 800cb4a:	e7fd      	b.n	800cb48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d10b      	bne.n	800cb6a <xTaskCreateStatic+0x4a>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	61fb      	str	r3, [r7, #28]
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop
 800cb68:	e7fd      	b.n	800cb66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb6a:	2354      	movs	r3, #84	@ 0x54
 800cb6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	2b54      	cmp	r3, #84	@ 0x54
 800cb72:	d00b      	beq.n	800cb8c <xTaskCreateStatic+0x6c>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	61bb      	str	r3, [r7, #24]
}
 800cb86:	bf00      	nop
 800cb88:	bf00      	nop
 800cb8a:	e7fd      	b.n	800cb88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d01e      	beq.n	800cbd2 <xTaskCreateStatic+0xb2>
 800cb94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d01b      	beq.n	800cbd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cba2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba6:	2202      	movs	r2, #2
 800cba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbac:	2300      	movs	r3, #0
 800cbae:	9303      	str	r3, [sp, #12]
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb2:	9302      	str	r3, [sp, #8]
 800cbb4:	f107 0314 	add.w	r3, r7, #20
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	68b9      	ldr	r1, [r7, #8]
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f000 f850 	bl	800cc6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbcc:	f000 f8d6 	bl	800cd7c <prvAddNewTaskToReadyList>
 800cbd0:	e001      	b.n	800cbd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cbd6:	697b      	ldr	r3, [r7, #20]
	}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3728      	adds	r7, #40	@ 0x28
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08c      	sub	sp, #48	@ 0x30
 800cbe4:	af04      	add	r7, sp, #16
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	603b      	str	r3, [r7, #0]
 800cbec:	4613      	mov	r3, r2
 800cbee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cbf0:	88fb      	ldrh	r3, [r7, #6]
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe fdb7 	bl	800b768 <pvPortMalloc>
 800cbfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00e      	beq.n	800cc20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc02:	2054      	movs	r0, #84	@ 0x54
 800cc04:	f7fe fdb0 	bl	800b768 <pvPortMalloc>
 800cc08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc16:	e005      	b.n	800cc24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc18:	6978      	ldr	r0, [r7, #20]
 800cc1a:	f7fe fe73 	bl	800b904 <vPortFree>
 800cc1e:	e001      	b.n	800cc24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc20:	2300      	movs	r3, #0
 800cc22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d017      	beq.n	800cc5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc32:	88fa      	ldrh	r2, [r7, #6]
 800cc34:	2300      	movs	r3, #0
 800cc36:	9303      	str	r3, [sp, #12]
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	9302      	str	r3, [sp, #8]
 800cc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3e:	9301      	str	r3, [sp, #4]
 800cc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	68b9      	ldr	r1, [r7, #8]
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 f80e 	bl	800cc6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc4e:	69f8      	ldr	r0, [r7, #28]
 800cc50:	f000 f894 	bl	800cd7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc54:	2301      	movs	r3, #1
 800cc56:	61bb      	str	r3, [r7, #24]
 800cc58:	e002      	b.n	800cc60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc60:	69bb      	ldr	r3, [r7, #24]
	}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3720      	adds	r7, #32
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b088      	sub	sp, #32
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	60f8      	str	r0, [r7, #12]
 800cc72:	60b9      	str	r1, [r7, #8]
 800cc74:	607a      	str	r2, [r7, #4]
 800cc76:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc82:	3b01      	subs	r3, #1
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	f023 0307 	bic.w	r3, r3, #7
 800cc90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	f003 0307 	and.w	r3, r3, #7
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00b      	beq.n	800ccb4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	617b      	str	r3, [r7, #20]
}
 800ccae:	bf00      	nop
 800ccb0:	bf00      	nop
 800ccb2:	e7fd      	b.n	800ccb0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d01f      	beq.n	800ccfa <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccba:	2300      	movs	r3, #0
 800ccbc:	61fb      	str	r3, [r7, #28]
 800ccbe:	e012      	b.n	800cce6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	7819      	ldrb	r1, [r3, #0]
 800ccc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	4413      	add	r3, r2
 800ccce:	3334      	adds	r3, #52	@ 0x34
 800ccd0:	460a      	mov	r2, r1
 800ccd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	4413      	add	r3, r2
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d006      	beq.n	800ccee <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	3301      	adds	r3, #1
 800cce4:	61fb      	str	r3, [r7, #28]
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	2b0f      	cmp	r3, #15
 800ccea:	d9e9      	bls.n	800ccc0 <prvInitialiseNewTask+0x56>
 800ccec:	e000      	b.n	800ccf0 <prvInitialiseNewTask+0x86>
			{
				break;
 800ccee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ccf8:	e003      	b.n	800cd02 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd04:	2b06      	cmp	r3, #6
 800cd06:	d901      	bls.n	800cd0c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd08:	2306      	movs	r3, #6
 800cd0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd10:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd16:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd20:	3304      	adds	r3, #4
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fe ff2e 	bl	800bb84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2a:	3318      	adds	r3, #24
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe ff29 	bl	800bb84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3a:	f1c3 0207 	rsb	r2, r3, #7
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd46:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	68f9      	ldr	r1, [r7, #12]
 800cd5a:	69b8      	ldr	r0, [r7, #24]
 800cd5c:	f7fe ffa6 	bl	800bcac <pxPortInitialiseStack>
 800cd60:	4602      	mov	r2, r0
 800cd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd72:	bf00      	nop
 800cd74:	3720      	adds	r7, #32
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd84:	f7ff f8c0 	bl	800bf08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd88:	4b2a      	ldr	r3, [pc, #168]	@ (800ce34 <prvAddNewTaskToReadyList+0xb8>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	4a29      	ldr	r2, [pc, #164]	@ (800ce34 <prvAddNewTaskToReadyList+0xb8>)
 800cd90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd92:	4b29      	ldr	r3, [pc, #164]	@ (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d109      	bne.n	800cdae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd9a:	4a27      	ldr	r2, [pc, #156]	@ (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cda0:	4b24      	ldr	r3, [pc, #144]	@ (800ce34 <prvAddNewTaskToReadyList+0xb8>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d110      	bne.n	800cdca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cda8:	f000 fc5a 	bl	800d660 <prvInitialiseTaskLists>
 800cdac:	e00d      	b.n	800cdca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdae:	4b23      	ldr	r3, [pc, #140]	@ (800ce3c <prvAddNewTaskToReadyList+0xc0>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d109      	bne.n	800cdca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdb6:	4b20      	ldr	r3, [pc, #128]	@ (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d802      	bhi.n	800cdca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cdc4:	4a1c      	ldr	r2, [pc, #112]	@ (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cdca:	4b1d      	ldr	r3, [pc, #116]	@ (800ce40 <prvAddNewTaskToReadyList+0xc4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	4a1b      	ldr	r2, [pc, #108]	@ (800ce40 <prvAddNewTaskToReadyList+0xc4>)
 800cdd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd8:	2201      	movs	r2, #1
 800cdda:	409a      	lsls	r2, r3
 800cddc:	4b19      	ldr	r3, [pc, #100]	@ (800ce44 <prvAddNewTaskToReadyList+0xc8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	4a18      	ldr	r2, [pc, #96]	@ (800ce44 <prvAddNewTaskToReadyList+0xc8>)
 800cde4:	6013      	str	r3, [r2, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdea:	4613      	mov	r3, r2
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4413      	add	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4a15      	ldr	r2, [pc, #84]	@ (800ce48 <prvAddNewTaskToReadyList+0xcc>)
 800cdf4:	441a      	add	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	f7fe fece 	bl	800bb9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce02:	f7ff f8b3 	bl	800bf6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce06:	4b0d      	ldr	r3, [pc, #52]	@ (800ce3c <prvAddNewTaskToReadyList+0xc0>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00e      	beq.n	800ce2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d207      	bcs.n	800ce2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce4c <prvAddNewTaskToReadyList+0xd0>)
 800ce1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce2c:	bf00      	nop
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	2000db38 	.word	0x2000db38
 800ce38:	2000da38 	.word	0x2000da38
 800ce3c:	2000db44 	.word	0x2000db44
 800ce40:	2000db54 	.word	0x2000db54
 800ce44:	2000db40 	.word	0x2000db40
 800ce48:	2000da3c 	.word	0x2000da3c
 800ce4c:	e000ed04 	.word	0xe000ed04

0800ce50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d018      	beq.n	800ce94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce62:	4b14      	ldr	r3, [pc, #80]	@ (800ceb4 <vTaskDelay+0x64>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00b      	beq.n	800ce82 <vTaskDelay+0x32>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	60bb      	str	r3, [r7, #8]
}
 800ce7c:	bf00      	nop
 800ce7e:	bf00      	nop
 800ce80:	e7fd      	b.n	800ce7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce82:	f000 f87d 	bl	800cf80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce86:	2100      	movs	r1, #0
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 ff19 	bl	800dcc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce8e:	f000 f885 	bl	800cf9c <xTaskResumeAll>
 800ce92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d107      	bne.n	800ceaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ce9a:	4b07      	ldr	r3, [pc, #28]	@ (800ceb8 <vTaskDelay+0x68>)
 800ce9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cea0:	601a      	str	r2, [r3, #0]
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ceaa:	bf00      	nop
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	2000db60 	.word	0x2000db60
 800ceb8:	e000ed04 	.word	0xe000ed04

0800cebc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b08a      	sub	sp, #40	@ 0x28
 800cec0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ceca:	463a      	mov	r2, r7
 800cecc:	1d39      	adds	r1, r7, #4
 800cece:	f107 0308 	add.w	r3, r7, #8
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7f4 fa74 	bl	80013c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	9202      	str	r2, [sp, #8]
 800cee0:	9301      	str	r3, [sp, #4]
 800cee2:	2300      	movs	r3, #0
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	2300      	movs	r3, #0
 800cee8:	460a      	mov	r2, r1
 800ceea:	491f      	ldr	r1, [pc, #124]	@ (800cf68 <vTaskStartScheduler+0xac>)
 800ceec:	481f      	ldr	r0, [pc, #124]	@ (800cf6c <vTaskStartScheduler+0xb0>)
 800ceee:	f7ff fe17 	bl	800cb20 <xTaskCreateStatic>
 800cef2:	4603      	mov	r3, r0
 800cef4:	4a1e      	ldr	r2, [pc, #120]	@ (800cf70 <vTaskStartScheduler+0xb4>)
 800cef6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cef8:	4b1d      	ldr	r3, [pc, #116]	@ (800cf70 <vTaskStartScheduler+0xb4>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf00:	2301      	movs	r3, #1
 800cf02:	617b      	str	r3, [r7, #20]
 800cf04:	e001      	b.n	800cf0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf06:	2300      	movs	r3, #0
 800cf08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d116      	bne.n	800cf3e <vTaskStartScheduler+0x82>
	__asm volatile
 800cf10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	613b      	str	r3, [r7, #16]
}
 800cf22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf24:	4b13      	ldr	r3, [pc, #76]	@ (800cf74 <vTaskStartScheduler+0xb8>)
 800cf26:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf2c:	4b12      	ldr	r3, [pc, #72]	@ (800cf78 <vTaskStartScheduler+0xbc>)
 800cf2e:	2201      	movs	r2, #1
 800cf30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf32:	4b12      	ldr	r3, [pc, #72]	@ (800cf7c <vTaskStartScheduler+0xc0>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf38:	f7fe ff42 	bl	800bdc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf3c:	e00f      	b.n	800cf5e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf44:	d10b      	bne.n	800cf5e <vTaskStartScheduler+0xa2>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	60fb      	str	r3, [r7, #12]
}
 800cf58:	bf00      	nop
 800cf5a:	bf00      	nop
 800cf5c:	e7fd      	b.n	800cf5a <vTaskStartScheduler+0x9e>
}
 800cf5e:	bf00      	nop
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	080134c8 	.word	0x080134c8
 800cf6c:	0800d631 	.word	0x0800d631
 800cf70:	2000db5c 	.word	0x2000db5c
 800cf74:	2000db58 	.word	0x2000db58
 800cf78:	2000db44 	.word	0x2000db44
 800cf7c:	2000db3c 	.word	0x2000db3c

0800cf80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf80:	b480      	push	{r7}
 800cf82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf84:	4b04      	ldr	r3, [pc, #16]	@ (800cf98 <vTaskSuspendAll+0x18>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	4a03      	ldr	r2, [pc, #12]	@ (800cf98 <vTaskSuspendAll+0x18>)
 800cf8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf8e:	bf00      	nop
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr
 800cf98:	2000db60 	.word	0x2000db60

0800cf9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfaa:	4b42      	ldr	r3, [pc, #264]	@ (800d0b4 <xTaskResumeAll+0x118>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10b      	bne.n	800cfca <xTaskResumeAll+0x2e>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	603b      	str	r3, [r7, #0]
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop
 800cfc8:	e7fd      	b.n	800cfc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cfca:	f7fe ff9d 	bl	800bf08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cfce:	4b39      	ldr	r3, [pc, #228]	@ (800d0b4 <xTaskResumeAll+0x118>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	4a37      	ldr	r2, [pc, #220]	@ (800d0b4 <xTaskResumeAll+0x118>)
 800cfd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfd8:	4b36      	ldr	r3, [pc, #216]	@ (800d0b4 <xTaskResumeAll+0x118>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d161      	bne.n	800d0a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfe0:	4b35      	ldr	r3, [pc, #212]	@ (800d0b8 <xTaskResumeAll+0x11c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d05d      	beq.n	800d0a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfe8:	e02e      	b.n	800d048 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfea:	4b34      	ldr	r3, [pc, #208]	@ (800d0bc <xTaskResumeAll+0x120>)
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	3318      	adds	r3, #24
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fe fe2e 	bl	800bc58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3304      	adds	r3, #4
 800d000:	4618      	mov	r0, r3
 800d002:	f7fe fe29 	bl	800bc58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d00a:	2201      	movs	r2, #1
 800d00c:	409a      	lsls	r2, r3
 800d00e:	4b2c      	ldr	r3, [pc, #176]	@ (800d0c0 <xTaskResumeAll+0x124>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4313      	orrs	r3, r2
 800d014:	4a2a      	ldr	r2, [pc, #168]	@ (800d0c0 <xTaskResumeAll+0x124>)
 800d016:	6013      	str	r3, [r2, #0]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d01c:	4613      	mov	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4a27      	ldr	r2, [pc, #156]	@ (800d0c4 <xTaskResumeAll+0x128>)
 800d026:	441a      	add	r2, r3
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	3304      	adds	r3, #4
 800d02c:	4619      	mov	r1, r3
 800d02e:	4610      	mov	r0, r2
 800d030:	f7fe fdb5 	bl	800bb9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d038:	4b23      	ldr	r3, [pc, #140]	@ (800d0c8 <xTaskResumeAll+0x12c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d03e:	429a      	cmp	r2, r3
 800d040:	d302      	bcc.n	800d048 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d042:	4b22      	ldr	r3, [pc, #136]	@ (800d0cc <xTaskResumeAll+0x130>)
 800d044:	2201      	movs	r2, #1
 800d046:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d048:	4b1c      	ldr	r3, [pc, #112]	@ (800d0bc <xTaskResumeAll+0x120>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1cc      	bne.n	800cfea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d001      	beq.n	800d05a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d056:	f000 fba1 	bl	800d79c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d05a:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d0 <xTaskResumeAll+0x134>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d010      	beq.n	800d088 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d066:	f000 f859 	bl	800d11c <xTaskIncrementTick>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d070:	4b16      	ldr	r3, [pc, #88]	@ (800d0cc <xTaskResumeAll+0x130>)
 800d072:	2201      	movs	r2, #1
 800d074:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	3b01      	subs	r3, #1
 800d07a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1f1      	bne.n	800d066 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d082:	4b13      	ldr	r3, [pc, #76]	@ (800d0d0 <xTaskResumeAll+0x134>)
 800d084:	2200      	movs	r2, #0
 800d086:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d088:	4b10      	ldr	r3, [pc, #64]	@ (800d0cc <xTaskResumeAll+0x130>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d009      	beq.n	800d0a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d090:	2301      	movs	r3, #1
 800d092:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d094:	4b0f      	ldr	r3, [pc, #60]	@ (800d0d4 <xTaskResumeAll+0x138>)
 800d096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d09a:	601a      	str	r2, [r3, #0]
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0a4:	f7fe ff62 	bl	800bf6c <vPortExitCritical>

	return xAlreadyYielded;
 800d0a8:	68bb      	ldr	r3, [r7, #8]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	2000db60 	.word	0x2000db60
 800d0b8:	2000db38 	.word	0x2000db38
 800d0bc:	2000daf8 	.word	0x2000daf8
 800d0c0:	2000db40 	.word	0x2000db40
 800d0c4:	2000da3c 	.word	0x2000da3c
 800d0c8:	2000da38 	.word	0x2000da38
 800d0cc:	2000db4c 	.word	0x2000db4c
 800d0d0:	2000db48 	.word	0x2000db48
 800d0d4:	e000ed04 	.word	0xe000ed04

0800d0d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d0de:	4b05      	ldr	r3, [pc, #20]	@ (800d0f4 <xTaskGetTickCount+0x1c>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d0e4:	687b      	ldr	r3, [r7, #4]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	2000db3c 	.word	0x2000db3c

0800d0f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0fe:	f7fe ffe3 	bl	800c0c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d102:	2300      	movs	r3, #0
 800d104:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d106:	4b04      	ldr	r3, [pc, #16]	@ (800d118 <xTaskGetTickCountFromISR+0x20>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d10c:	683b      	ldr	r3, [r7, #0]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	2000db3c 	.word	0x2000db3c

0800d11c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d122:	2300      	movs	r3, #0
 800d124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d126:	4b4f      	ldr	r3, [pc, #316]	@ (800d264 <xTaskIncrementTick+0x148>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f040 808f 	bne.w	800d24e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d130:	4b4d      	ldr	r3, [pc, #308]	@ (800d268 <xTaskIncrementTick+0x14c>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d138:	4a4b      	ldr	r2, [pc, #300]	@ (800d268 <xTaskIncrementTick+0x14c>)
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d121      	bne.n	800d188 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d144:	4b49      	ldr	r3, [pc, #292]	@ (800d26c <xTaskIncrementTick+0x150>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00b      	beq.n	800d166 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	603b      	str	r3, [r7, #0]
}
 800d160:	bf00      	nop
 800d162:	bf00      	nop
 800d164:	e7fd      	b.n	800d162 <xTaskIncrementTick+0x46>
 800d166:	4b41      	ldr	r3, [pc, #260]	@ (800d26c <xTaskIncrementTick+0x150>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	4b40      	ldr	r3, [pc, #256]	@ (800d270 <xTaskIncrementTick+0x154>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a3e      	ldr	r2, [pc, #248]	@ (800d26c <xTaskIncrementTick+0x150>)
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	4a3e      	ldr	r2, [pc, #248]	@ (800d270 <xTaskIncrementTick+0x154>)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	4b3e      	ldr	r3, [pc, #248]	@ (800d274 <xTaskIncrementTick+0x158>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	3301      	adds	r3, #1
 800d180:	4a3c      	ldr	r2, [pc, #240]	@ (800d274 <xTaskIncrementTick+0x158>)
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	f000 fb0a 	bl	800d79c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d188:	4b3b      	ldr	r3, [pc, #236]	@ (800d278 <xTaskIncrementTick+0x15c>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d348      	bcc.n	800d224 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d192:	4b36      	ldr	r3, [pc, #216]	@ (800d26c <xTaskIncrementTick+0x150>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d104      	bne.n	800d1a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d19c:	4b36      	ldr	r3, [pc, #216]	@ (800d278 <xTaskIncrementTick+0x15c>)
 800d19e:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a2:	601a      	str	r2, [r3, #0]
					break;
 800d1a4:	e03e      	b.n	800d224 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1a6:	4b31      	ldr	r3, [pc, #196]	@ (800d26c <xTaskIncrementTick+0x150>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d203      	bcs.n	800d1c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1be:	4a2e      	ldr	r2, [pc, #184]	@ (800d278 <xTaskIncrementTick+0x15c>)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d1c4:	e02e      	b.n	800d224 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fd44 	bl	800bc58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d004      	beq.n	800d1e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	3318      	adds	r3, #24
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fe fd3b 	bl	800bc58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	409a      	lsls	r2, r3
 800d1ea:	4b24      	ldr	r3, [pc, #144]	@ (800d27c <xTaskIncrementTick+0x160>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	4a22      	ldr	r2, [pc, #136]	@ (800d27c <xTaskIncrementTick+0x160>)
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4413      	add	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	4a1f      	ldr	r2, [pc, #124]	@ (800d280 <xTaskIncrementTick+0x164>)
 800d202:	441a      	add	r2, r3
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	3304      	adds	r3, #4
 800d208:	4619      	mov	r1, r3
 800d20a:	4610      	mov	r0, r2
 800d20c:	f7fe fcc7 	bl	800bb9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d214:	4b1b      	ldr	r3, [pc, #108]	@ (800d284 <xTaskIncrementTick+0x168>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d3b9      	bcc.n	800d192 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d21e:	2301      	movs	r3, #1
 800d220:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d222:	e7b6      	b.n	800d192 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d224:	4b17      	ldr	r3, [pc, #92]	@ (800d284 <xTaskIncrementTick+0x168>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d22a:	4915      	ldr	r1, [pc, #84]	@ (800d280 <xTaskIncrementTick+0x164>)
 800d22c:	4613      	mov	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4413      	add	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	440b      	add	r3, r1
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d901      	bls.n	800d240 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d23c:	2301      	movs	r3, #1
 800d23e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d240:	4b11      	ldr	r3, [pc, #68]	@ (800d288 <xTaskIncrementTick+0x16c>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d007      	beq.n	800d258 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d248:	2301      	movs	r3, #1
 800d24a:	617b      	str	r3, [r7, #20]
 800d24c:	e004      	b.n	800d258 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d24e:	4b0f      	ldr	r3, [pc, #60]	@ (800d28c <xTaskIncrementTick+0x170>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	4a0d      	ldr	r2, [pc, #52]	@ (800d28c <xTaskIncrementTick+0x170>)
 800d256:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d258:	697b      	ldr	r3, [r7, #20]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3718      	adds	r7, #24
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	2000db60 	.word	0x2000db60
 800d268:	2000db3c 	.word	0x2000db3c
 800d26c:	2000daf0 	.word	0x2000daf0
 800d270:	2000daf4 	.word	0x2000daf4
 800d274:	2000db50 	.word	0x2000db50
 800d278:	2000db58 	.word	0x2000db58
 800d27c:	2000db40 	.word	0x2000db40
 800d280:	2000da3c 	.word	0x2000da3c
 800d284:	2000da38 	.word	0x2000da38
 800d288:	2000db4c 	.word	0x2000db4c
 800d28c:	2000db48 	.word	0x2000db48

0800d290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d290:	b480      	push	{r7}
 800d292:	b087      	sub	sp, #28
 800d294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d296:	4b27      	ldr	r3, [pc, #156]	@ (800d334 <vTaskSwitchContext+0xa4>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d003      	beq.n	800d2a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d29e:	4b26      	ldr	r3, [pc, #152]	@ (800d338 <vTaskSwitchContext+0xa8>)
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2a4:	e040      	b.n	800d328 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d2a6:	4b24      	ldr	r3, [pc, #144]	@ (800d338 <vTaskSwitchContext+0xa8>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ac:	4b23      	ldr	r3, [pc, #140]	@ (800d33c <vTaskSwitchContext+0xac>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	fab3 f383 	clz	r3, r3
 800d2b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d2ba:	7afb      	ldrb	r3, [r7, #11]
 800d2bc:	f1c3 031f 	rsb	r3, r3, #31
 800d2c0:	617b      	str	r3, [r7, #20]
 800d2c2:	491f      	ldr	r1, [pc, #124]	@ (800d340 <vTaskSwitchContext+0xb0>)
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	440b      	add	r3, r1
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10b      	bne.n	800d2ee <vTaskSwitchContext+0x5e>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	607b      	str	r3, [r7, #4]
}
 800d2e8:	bf00      	nop
 800d2ea:	bf00      	nop
 800d2ec:	e7fd      	b.n	800d2ea <vTaskSwitchContext+0x5a>
 800d2ee:	697a      	ldr	r2, [r7, #20]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4a11      	ldr	r2, [pc, #68]	@ (800d340 <vTaskSwitchContext+0xb0>)
 800d2fa:	4413      	add	r3, r2
 800d2fc:	613b      	str	r3, [r7, #16]
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	685a      	ldr	r2, [r3, #4]
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	605a      	str	r2, [r3, #4]
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	685a      	ldr	r2, [r3, #4]
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	3308      	adds	r3, #8
 800d310:	429a      	cmp	r2, r3
 800d312:	d104      	bne.n	800d31e <vTaskSwitchContext+0x8e>
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	685a      	ldr	r2, [r3, #4]
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	605a      	str	r2, [r3, #4]
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	4a07      	ldr	r2, [pc, #28]	@ (800d344 <vTaskSwitchContext+0xb4>)
 800d326:	6013      	str	r3, [r2, #0]
}
 800d328:	bf00      	nop
 800d32a:	371c      	adds	r7, #28
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	2000db60 	.word	0x2000db60
 800d338:	2000db4c 	.word	0x2000db4c
 800d33c:	2000db40 	.word	0x2000db40
 800d340:	2000da3c 	.word	0x2000da3c
 800d344:	2000da38 	.word	0x2000da38

0800d348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10b      	bne.n	800d370 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	60fb      	str	r3, [r7, #12]
}
 800d36a:	bf00      	nop
 800d36c:	bf00      	nop
 800d36e:	e7fd      	b.n	800d36c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d370:	4b07      	ldr	r3, [pc, #28]	@ (800d390 <vTaskPlaceOnEventList+0x48>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	3318      	adds	r3, #24
 800d376:	4619      	mov	r1, r3
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7fe fc34 	bl	800bbe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d37e:	2101      	movs	r1, #1
 800d380:	6838      	ldr	r0, [r7, #0]
 800d382:	f000 fc9d 	bl	800dcc0 <prvAddCurrentTaskToDelayedList>
}
 800d386:	bf00      	nop
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	2000da38 	.word	0x2000da38

0800d394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10b      	bne.n	800d3c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	60fb      	str	r3, [r7, #12]
}
 800d3bc:	bf00      	nop
 800d3be:	bf00      	nop
 800d3c0:	e7fd      	b.n	800d3be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	3318      	adds	r3, #24
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fe fc46 	bl	800bc58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3cc:	4b1d      	ldr	r3, [pc, #116]	@ (800d444 <xTaskRemoveFromEventList+0xb0>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d11c      	bne.n	800d40e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	3304      	adds	r3, #4
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fe fc3d 	bl	800bc58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	409a      	lsls	r2, r3
 800d3e6:	4b18      	ldr	r3, [pc, #96]	@ (800d448 <xTaskRemoveFromEventList+0xb4>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	4a16      	ldr	r2, [pc, #88]	@ (800d448 <xTaskRemoveFromEventList+0xb4>)
 800d3ee:	6013      	str	r3, [r2, #0]
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	4413      	add	r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4a13      	ldr	r2, [pc, #76]	@ (800d44c <xTaskRemoveFromEventList+0xb8>)
 800d3fe:	441a      	add	r2, r3
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	3304      	adds	r3, #4
 800d404:	4619      	mov	r1, r3
 800d406:	4610      	mov	r0, r2
 800d408:	f7fe fbc9 	bl	800bb9e <vListInsertEnd>
 800d40c:	e005      	b.n	800d41a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	3318      	adds	r3, #24
 800d412:	4619      	mov	r1, r3
 800d414:	480e      	ldr	r0, [pc, #56]	@ (800d450 <xTaskRemoveFromEventList+0xbc>)
 800d416:	f7fe fbc2 	bl	800bb9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d41e:	4b0d      	ldr	r3, [pc, #52]	@ (800d454 <xTaskRemoveFromEventList+0xc0>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d424:	429a      	cmp	r2, r3
 800d426:	d905      	bls.n	800d434 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d428:	2301      	movs	r3, #1
 800d42a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d42c:	4b0a      	ldr	r3, [pc, #40]	@ (800d458 <xTaskRemoveFromEventList+0xc4>)
 800d42e:	2201      	movs	r2, #1
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	e001      	b.n	800d438 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d434:	2300      	movs	r3, #0
 800d436:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d438:	697b      	ldr	r3, [r7, #20]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3718      	adds	r7, #24
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	2000db60 	.word	0x2000db60
 800d448:	2000db40 	.word	0x2000db40
 800d44c:	2000da3c 	.word	0x2000da3c
 800d450:	2000daf8 	.word	0x2000daf8
 800d454:	2000da38 	.word	0x2000da38
 800d458:	2000db4c 	.word	0x2000db4c

0800d45c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b086      	sub	sp, #24
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800d466:	4b2a      	ldr	r3, [pc, #168]	@ (800d510 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10b      	bne.n	800d486 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	613b      	str	r3, [r7, #16]
}
 800d480:	bf00      	nop
 800d482:	bf00      	nop
 800d484:	e7fd      	b.n	800d482 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10b      	bne.n	800d4b4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	60fb      	str	r3, [r7, #12]
}
 800d4ae:	bf00      	nop
 800d4b0:	bf00      	nop
 800d4b2:	e7fd      	b.n	800d4b0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7fe fbcf 	bl	800bc58 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	3304      	adds	r3, #4
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe fbca 	bl	800bc58 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	409a      	lsls	r2, r3
 800d4cc:	4b11      	ldr	r3, [pc, #68]	@ (800d514 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	4a10      	ldr	r2, [pc, #64]	@ (800d514 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800d4d4:	6013      	str	r3, [r2, #0]
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4da:	4613      	mov	r3, r2
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	4413      	add	r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	4a0d      	ldr	r2, [pc, #52]	@ (800d518 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800d4e4:	441a      	add	r2, r3
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	f7fe fb56 	bl	800bb9e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4f6:	4b09      	ldr	r3, [pc, #36]	@ (800d51c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d902      	bls.n	800d506 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800d500:	4b07      	ldr	r3, [pc, #28]	@ (800d520 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800d502:	2201      	movs	r2, #1
 800d504:	601a      	str	r2, [r3, #0]
	}
}
 800d506:	bf00      	nop
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	2000db60 	.word	0x2000db60
 800d514:	2000db40 	.word	0x2000db40
 800d518:	2000da3c 	.word	0x2000da3c
 800d51c:	2000da38 	.word	0x2000da38
 800d520:	2000db4c 	.word	0x2000db4c

0800d524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d52c:	4b06      	ldr	r3, [pc, #24]	@ (800d548 <vTaskInternalSetTimeOutState+0x24>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d534:	4b05      	ldr	r3, [pc, #20]	@ (800d54c <vTaskInternalSetTimeOutState+0x28>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	605a      	str	r2, [r3, #4]
}
 800d53c:	bf00      	nop
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	2000db50 	.word	0x2000db50
 800d54c:	2000db3c 	.word	0x2000db3c

0800d550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10b      	bne.n	800d578 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d564:	f383 8811 	msr	BASEPRI, r3
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	f3bf 8f4f 	dsb	sy
 800d570:	613b      	str	r3, [r7, #16]
}
 800d572:	bf00      	nop
 800d574:	bf00      	nop
 800d576:	e7fd      	b.n	800d574 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10b      	bne.n	800d596 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d582:	f383 8811 	msr	BASEPRI, r3
 800d586:	f3bf 8f6f 	isb	sy
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	60fb      	str	r3, [r7, #12]
}
 800d590:	bf00      	nop
 800d592:	bf00      	nop
 800d594:	e7fd      	b.n	800d592 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d596:	f7fe fcb7 	bl	800bf08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d59a:	4b1d      	ldr	r3, [pc, #116]	@ (800d610 <xTaskCheckForTimeOut+0xc0>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	69ba      	ldr	r2, [r7, #24]
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b2:	d102      	bne.n	800d5ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	e023      	b.n	800d602 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	4b15      	ldr	r3, [pc, #84]	@ (800d614 <xTaskCheckForTimeOut+0xc4>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d007      	beq.n	800d5d6 <xTaskCheckForTimeOut+0x86>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	69ba      	ldr	r2, [r7, #24]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d302      	bcc.n	800d5d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	61fb      	str	r3, [r7, #28]
 800d5d4:	e015      	b.n	800d602 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	697a      	ldr	r2, [r7, #20]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d20b      	bcs.n	800d5f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	1ad2      	subs	r2, r2, r3
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7ff ff99 	bl	800d524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	61fb      	str	r3, [r7, #28]
 800d5f6:	e004      	b.n	800d602 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5fe:	2301      	movs	r3, #1
 800d600:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d602:	f7fe fcb3 	bl	800bf6c <vPortExitCritical>

	return xReturn;
 800d606:	69fb      	ldr	r3, [r7, #28]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3720      	adds	r7, #32
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	2000db3c 	.word	0x2000db3c
 800d614:	2000db50 	.word	0x2000db50

0800d618 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d618:	b480      	push	{r7}
 800d61a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d61c:	4b03      	ldr	r3, [pc, #12]	@ (800d62c <vTaskMissedYield+0x14>)
 800d61e:	2201      	movs	r2, #1
 800d620:	601a      	str	r2, [r3, #0]
}
 800d622:	bf00      	nop
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr
 800d62c:	2000db4c 	.word	0x2000db4c

0800d630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d638:	f000 f852 	bl	800d6e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d63c:	4b06      	ldr	r3, [pc, #24]	@ (800d658 <prvIdleTask+0x28>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d9f9      	bls.n	800d638 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d644:	4b05      	ldr	r3, [pc, #20]	@ (800d65c <prvIdleTask+0x2c>)
 800d646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d654:	e7f0      	b.n	800d638 <prvIdleTask+0x8>
 800d656:	bf00      	nop
 800d658:	2000da3c 	.word	0x2000da3c
 800d65c:	e000ed04 	.word	0xe000ed04

0800d660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d666:	2300      	movs	r3, #0
 800d668:	607b      	str	r3, [r7, #4]
 800d66a:	e00c      	b.n	800d686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	4613      	mov	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4a12      	ldr	r2, [pc, #72]	@ (800d6c0 <prvInitialiseTaskLists+0x60>)
 800d678:	4413      	add	r3, r2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe fa62 	bl	800bb44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	3301      	adds	r3, #1
 800d684:	607b      	str	r3, [r7, #4]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2b06      	cmp	r3, #6
 800d68a:	d9ef      	bls.n	800d66c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d68c:	480d      	ldr	r0, [pc, #52]	@ (800d6c4 <prvInitialiseTaskLists+0x64>)
 800d68e:	f7fe fa59 	bl	800bb44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d692:	480d      	ldr	r0, [pc, #52]	@ (800d6c8 <prvInitialiseTaskLists+0x68>)
 800d694:	f7fe fa56 	bl	800bb44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d698:	480c      	ldr	r0, [pc, #48]	@ (800d6cc <prvInitialiseTaskLists+0x6c>)
 800d69a:	f7fe fa53 	bl	800bb44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d69e:	480c      	ldr	r0, [pc, #48]	@ (800d6d0 <prvInitialiseTaskLists+0x70>)
 800d6a0:	f7fe fa50 	bl	800bb44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6a4:	480b      	ldr	r0, [pc, #44]	@ (800d6d4 <prvInitialiseTaskLists+0x74>)
 800d6a6:	f7fe fa4d 	bl	800bb44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d8 <prvInitialiseTaskLists+0x78>)
 800d6ac:	4a05      	ldr	r2, [pc, #20]	@ (800d6c4 <prvInitialiseTaskLists+0x64>)
 800d6ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d6dc <prvInitialiseTaskLists+0x7c>)
 800d6b2:	4a05      	ldr	r2, [pc, #20]	@ (800d6c8 <prvInitialiseTaskLists+0x68>)
 800d6b4:	601a      	str	r2, [r3, #0]
}
 800d6b6:	bf00      	nop
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	2000da3c 	.word	0x2000da3c
 800d6c4:	2000dac8 	.word	0x2000dac8
 800d6c8:	2000dadc 	.word	0x2000dadc
 800d6cc:	2000daf8 	.word	0x2000daf8
 800d6d0:	2000db0c 	.word	0x2000db0c
 800d6d4:	2000db24 	.word	0x2000db24
 800d6d8:	2000daf0 	.word	0x2000daf0
 800d6dc:	2000daf4 	.word	0x2000daf4

0800d6e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6e6:	e019      	b.n	800d71c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6e8:	f7fe fc0e 	bl	800bf08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ec:	4b10      	ldr	r3, [pc, #64]	@ (800d730 <prvCheckTasksWaitingTermination+0x50>)
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	3304      	adds	r3, #4
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe faad 	bl	800bc58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d734 <prvCheckTasksWaitingTermination+0x54>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3b01      	subs	r3, #1
 800d704:	4a0b      	ldr	r2, [pc, #44]	@ (800d734 <prvCheckTasksWaitingTermination+0x54>)
 800d706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d708:	4b0b      	ldr	r3, [pc, #44]	@ (800d738 <prvCheckTasksWaitingTermination+0x58>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3b01      	subs	r3, #1
 800d70e:	4a0a      	ldr	r2, [pc, #40]	@ (800d738 <prvCheckTasksWaitingTermination+0x58>)
 800d710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d712:	f7fe fc2b 	bl	800bf6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f810 	bl	800d73c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d71c:	4b06      	ldr	r3, [pc, #24]	@ (800d738 <prvCheckTasksWaitingTermination+0x58>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1e1      	bne.n	800d6e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d724:	bf00      	nop
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	2000db0c 	.word	0x2000db0c
 800d734:	2000db38 	.word	0x2000db38
 800d738:	2000db20 	.word	0x2000db20

0800d73c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d108      	bne.n	800d760 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d752:	4618      	mov	r0, r3
 800d754:	f7fe f8d6 	bl	800b904 <vPortFree>
				vPortFree( pxTCB );
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f7fe f8d3 	bl	800b904 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d75e:	e019      	b.n	800d794 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d766:	2b01      	cmp	r3, #1
 800d768:	d103      	bne.n	800d772 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7fe f8ca 	bl	800b904 <vPortFree>
	}
 800d770:	e010      	b.n	800d794 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d778:	2b02      	cmp	r3, #2
 800d77a:	d00b      	beq.n	800d794 <prvDeleteTCB+0x58>
	__asm volatile
 800d77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d780:	f383 8811 	msr	BASEPRI, r3
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	60fb      	str	r3, [r7, #12]
}
 800d78e:	bf00      	nop
 800d790:	bf00      	nop
 800d792:	e7fd      	b.n	800d790 <prvDeleteTCB+0x54>
	}
 800d794:	bf00      	nop
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d7d4 <prvResetNextTaskUnblockTime+0x38>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d104      	bne.n	800d7b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d8 <prvResetNextTaskUnblockTime+0x3c>)
 800d7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7b4:	e008      	b.n	800d7c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b6:	4b07      	ldr	r3, [pc, #28]	@ (800d7d4 <prvResetNextTaskUnblockTime+0x38>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	4a04      	ldr	r2, [pc, #16]	@ (800d7d8 <prvResetNextTaskUnblockTime+0x3c>)
 800d7c6:	6013      	str	r3, [r2, #0]
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	2000daf0 	.word	0x2000daf0
 800d7d8:	2000db58 	.word	0x2000db58

0800d7dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d810 <xTaskGetSchedulerState+0x34>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d102      	bne.n	800d7f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	607b      	str	r3, [r7, #4]
 800d7ee:	e008      	b.n	800d802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7f0:	4b08      	ldr	r3, [pc, #32]	@ (800d814 <xTaskGetSchedulerState+0x38>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7f8:	2302      	movs	r3, #2
 800d7fa:	607b      	str	r3, [r7, #4]
 800d7fc:	e001      	b.n	800d802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7fe:	2300      	movs	r3, #0
 800d800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d802:	687b      	ldr	r3, [r7, #4]
	}
 800d804:	4618      	mov	r0, r3
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr
 800d810:	2000db44 	.word	0x2000db44
 800d814:	2000db60 	.word	0x2000db60

0800d818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d824:	2300      	movs	r3, #0
 800d826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d070      	beq.n	800d910 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d82e:	4b3b      	ldr	r3, [pc, #236]	@ (800d91c <xTaskPriorityDisinherit+0x104>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	693a      	ldr	r2, [r7, #16]
 800d834:	429a      	cmp	r2, r3
 800d836:	d00b      	beq.n	800d850 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d83c:	f383 8811 	msr	BASEPRI, r3
 800d840:	f3bf 8f6f 	isb	sy
 800d844:	f3bf 8f4f 	dsb	sy
 800d848:	60fb      	str	r3, [r7, #12]
}
 800d84a:	bf00      	nop
 800d84c:	bf00      	nop
 800d84e:	e7fd      	b.n	800d84c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10b      	bne.n	800d870 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	60bb      	str	r3, [r7, #8]
}
 800d86a:	bf00      	nop
 800d86c:	bf00      	nop
 800d86e:	e7fd      	b.n	800d86c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d874:	1e5a      	subs	r2, r3, #1
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d882:	429a      	cmp	r2, r3
 800d884:	d044      	beq.n	800d910 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d140      	bne.n	800d910 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	3304      	adds	r3, #4
 800d892:	4618      	mov	r0, r3
 800d894:	f7fe f9e0 	bl	800bc58 <uxListRemove>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d115      	bne.n	800d8ca <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8a2:	491f      	ldr	r1, [pc, #124]	@ (800d920 <xTaskPriorityDisinherit+0x108>)
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	4413      	add	r3, r2
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	440b      	add	r3, r1
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10a      	bne.n	800d8ca <xTaskPriorityDisinherit+0xb2>
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d8be:	43da      	mvns	r2, r3
 800d8c0:	4b18      	ldr	r3, [pc, #96]	@ (800d924 <xTaskPriorityDisinherit+0x10c>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	4a17      	ldr	r2, [pc, #92]	@ (800d924 <xTaskPriorityDisinherit+0x10c>)
 800d8c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8d6:	f1c3 0207 	rsb	r2, r3, #7
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	409a      	lsls	r2, r3
 800d8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d924 <xTaskPriorityDisinherit+0x10c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	4a0d      	ldr	r2, [pc, #52]	@ (800d924 <xTaskPriorityDisinherit+0x10c>)
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4a08      	ldr	r2, [pc, #32]	@ (800d920 <xTaskPriorityDisinherit+0x108>)
 800d8fe:	441a      	add	r2, r3
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	3304      	adds	r3, #4
 800d904:	4619      	mov	r1, r3
 800d906:	4610      	mov	r0, r2
 800d908:	f7fe f949 	bl	800bb9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d90c:	2301      	movs	r3, #1
 800d90e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d910:	697b      	ldr	r3, [r7, #20]
	}
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	2000da38 	.word	0x2000da38
 800d920:	2000da3c 	.word	0x2000da3c
 800d924:	2000db40 	.word	0x2000db40

0800d928 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b086      	sub	sp, #24
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
 800d934:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d936:	f7fe fae7 	bl	800bf08 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d93a:	4b26      	ldr	r3, [pc, #152]	@ (800d9d4 <xTaskNotifyWait+0xac>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d942:	b2db      	uxtb	r3, r3
 800d944:	2b02      	cmp	r3, #2
 800d946:	d01a      	beq.n	800d97e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d948:	4b22      	ldr	r3, [pc, #136]	@ (800d9d4 <xTaskNotifyWait+0xac>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	43d2      	mvns	r2, r2
 800d952:	400a      	ands	r2, r1
 800d954:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d956:	4b1f      	ldr	r3, [pc, #124]	@ (800d9d4 <xTaskNotifyWait+0xac>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00b      	beq.n	800d97e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d966:	2101      	movs	r1, #1
 800d968:	6838      	ldr	r0, [r7, #0]
 800d96a:	f000 f9a9 	bl	800dcc0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d96e:	4b1a      	ldr	r3, [pc, #104]	@ (800d9d8 <xTaskNotifyWait+0xb0>)
 800d970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d97e:	f7fe faf5 	bl	800bf6c <vPortExitCritical>

		taskENTER_CRITICAL();
 800d982:	f7fe fac1 	bl	800bf08 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d004      	beq.n	800d996 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d98c:	4b11      	ldr	r3, [pc, #68]	@ (800d9d4 <xTaskNotifyWait+0xac>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d996:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d4 <xTaskNotifyWait+0xac>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d002      	beq.n	800d9aa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	617b      	str	r3, [r7, #20]
 800d9a8:	e008      	b.n	800d9bc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d4 <xTaskNotifyWait+0xac>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	43d2      	mvns	r2, r2
 800d9b4:	400a      	ands	r2, r1
 800d9b6:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9bc:	4b05      	ldr	r3, [pc, #20]	@ (800d9d4 <xTaskNotifyWait+0xac>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800d9c6:	f7fe fad1 	bl	800bf6c <vPortExitCritical>

		return xReturn;
 800d9ca:	697b      	ldr	r3, [r7, #20]
	}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3718      	adds	r7, #24
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	2000da38 	.word	0x2000da38
 800d9d8:	e000ed04 	.word	0xe000ed04

0800d9dc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b08e      	sub	sp, #56	@ 0x38
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	603b      	str	r3, [r7, #0]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d10b      	bne.n	800da0e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800d9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fa:	f383 8811 	msr	BASEPRI, r3
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da08:	bf00      	nop
 800da0a:	bf00      	nop
 800da0c:	e7fd      	b.n	800da0a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da0e:	f7fe fb5b 	bl	800c0c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800da16:	f3ef 8211 	mrs	r2, BASEPRI
 800da1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	623a      	str	r2, [r7, #32]
 800da2c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800da2e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da30:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d003      	beq.n	800da40 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800da38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800da40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800da46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800da4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4c:	2202      	movs	r2, #2
 800da4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800da52:	79fb      	ldrb	r3, [r7, #7]
 800da54:	2b04      	cmp	r3, #4
 800da56:	d829      	bhi.n	800daac <xTaskGenericNotifyFromISR+0xd0>
 800da58:	a201      	add	r2, pc, #4	@ (adr r2, 800da60 <xTaskGenericNotifyFromISR+0x84>)
 800da5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5e:	bf00      	nop
 800da60:	0800dacf 	.word	0x0800dacf
 800da64:	0800da75 	.word	0x0800da75
 800da68:	0800da83 	.word	0x0800da83
 800da6c:	0800da8f 	.word	0x0800da8f
 800da70:	0800da97 	.word	0x0800da97
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800da74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	431a      	orrs	r2, r3
 800da7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da7e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800da80:	e028      	b.n	800dad4 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800da82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800da8c:	e022      	b.n	800dad4 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800da8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800da94:	e01e      	b.n	800dad4 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800da96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d003      	beq.n	800daa6 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800da9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800daa4:	e016      	b.n	800dad4 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800daa6:	2300      	movs	r3, #0
 800daa8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800daaa:	e013      	b.n	800dad4 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800daac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab4:	d00d      	beq.n	800dad2 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	61bb      	str	r3, [r7, #24]
}
 800dac8:	bf00      	nop
 800daca:	bf00      	nop
 800dacc:	e7fd      	b.n	800daca <xTaskGenericNotifyFromISR+0xee>
					break;
 800dace:	bf00      	nop
 800dad0:	e000      	b.n	800dad4 <xTaskGenericNotifyFromISR+0xf8>
					break;
 800dad2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dad4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d146      	bne.n	800db6a <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00b      	beq.n	800dafc <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 800dae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae8:	f383 8811 	msr	BASEPRI, r3
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	617b      	str	r3, [r7, #20]
}
 800daf6:	bf00      	nop
 800daf8:	bf00      	nop
 800dafa:	e7fd      	b.n	800daf8 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dafc:	4b20      	ldr	r3, [pc, #128]	@ (800db80 <xTaskGenericNotifyFromISR+0x1a4>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d11c      	bne.n	800db3e <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db06:	3304      	adds	r3, #4
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe f8a5 	bl	800bc58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db12:	2201      	movs	r2, #1
 800db14:	409a      	lsls	r2, r3
 800db16:	4b1b      	ldr	r3, [pc, #108]	@ (800db84 <xTaskGenericNotifyFromISR+0x1a8>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	4a19      	ldr	r2, [pc, #100]	@ (800db84 <xTaskGenericNotifyFromISR+0x1a8>)
 800db1e:	6013      	str	r3, [r2, #0]
 800db20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db24:	4613      	mov	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4413      	add	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4a16      	ldr	r2, [pc, #88]	@ (800db88 <xTaskGenericNotifyFromISR+0x1ac>)
 800db2e:	441a      	add	r2, r3
 800db30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db32:	3304      	adds	r3, #4
 800db34:	4619      	mov	r1, r3
 800db36:	4610      	mov	r0, r2
 800db38:	f7fe f831 	bl	800bb9e <vListInsertEnd>
 800db3c:	e005      	b.n	800db4a <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db40:	3318      	adds	r3, #24
 800db42:	4619      	mov	r1, r3
 800db44:	4811      	ldr	r0, [pc, #68]	@ (800db8c <xTaskGenericNotifyFromISR+0x1b0>)
 800db46:	f7fe f82a 	bl	800bb9e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db4e:	4b10      	ldr	r3, [pc, #64]	@ (800db90 <xTaskGenericNotifyFromISR+0x1b4>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db54:	429a      	cmp	r2, r3
 800db56:	d908      	bls.n	800db6a <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800db58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d002      	beq.n	800db64 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800db5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db60:	2201      	movs	r2, #1
 800db62:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800db64:	4b0b      	ldr	r3, [pc, #44]	@ (800db94 <xTaskGenericNotifyFromISR+0x1b8>)
 800db66:	2201      	movs	r2, #1
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	f383 8811 	msr	BASEPRI, r3
}
 800db74:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800db76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800db78:	4618      	mov	r0, r3
 800db7a:	3738      	adds	r7, #56	@ 0x38
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	2000db60 	.word	0x2000db60
 800db84:	2000db40 	.word	0x2000db40
 800db88:	2000da3c 	.word	0x2000da3c
 800db8c:	2000daf8 	.word	0x2000daf8
 800db90:	2000da38 	.word	0x2000da38
 800db94:	2000db4c 	.word	0x2000db4c

0800db98 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b08a      	sub	sp, #40	@ 0x28
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d10b      	bne.n	800dbc0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800dba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbac:	f383 8811 	msr	BASEPRI, r3
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	61bb      	str	r3, [r7, #24]
}
 800dbba:	bf00      	nop
 800dbbc:	bf00      	nop
 800dbbe:	e7fd      	b.n	800dbbc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbc0:	f7fe fa82 	bl	800c0c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800dbc8:	f3ef 8211 	mrs	r2, BASEPRI
 800dbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	617a      	str	r2, [r7, #20]
 800dbde:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dbe0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbe2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800dbea:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbee:	2202      	movs	r2, #2
 800dbf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfc:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dbfe:	7ffb      	ldrb	r3, [r7, #31]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d146      	bne.n	800dc92 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00b      	beq.n	800dc24 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800dc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc10:	f383 8811 	msr	BASEPRI, r3
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	60fb      	str	r3, [r7, #12]
}
 800dc1e:	bf00      	nop
 800dc20:	bf00      	nop
 800dc22:	e7fd      	b.n	800dc20 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc24:	4b20      	ldr	r3, [pc, #128]	@ (800dca8 <vTaskNotifyGiveFromISR+0x110>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d11c      	bne.n	800dc66 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2e:	3304      	adds	r3, #4
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fe f811 	bl	800bc58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	409a      	lsls	r2, r3
 800dc3e:	4b1b      	ldr	r3, [pc, #108]	@ (800dcac <vTaskNotifyGiveFromISR+0x114>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	4a19      	ldr	r2, [pc, #100]	@ (800dcac <vTaskNotifyGiveFromISR+0x114>)
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4a16      	ldr	r2, [pc, #88]	@ (800dcb0 <vTaskNotifyGiveFromISR+0x118>)
 800dc56:	441a      	add	r2, r3
 800dc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4610      	mov	r0, r2
 800dc60:	f7fd ff9d 	bl	800bb9e <vListInsertEnd>
 800dc64:	e005      	b.n	800dc72 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800dc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc68:	3318      	adds	r3, #24
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	4811      	ldr	r0, [pc, #68]	@ (800dcb4 <vTaskNotifyGiveFromISR+0x11c>)
 800dc6e:	f7fd ff96 	bl	800bb9e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc76:	4b10      	ldr	r3, [pc, #64]	@ (800dcb8 <vTaskNotifyGiveFromISR+0x120>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d908      	bls.n	800dc92 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800dc8c:	4b0b      	ldr	r3, [pc, #44]	@ (800dcbc <vTaskNotifyGiveFromISR+0x124>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	601a      	str	r2, [r3, #0]
 800dc92:	6a3b      	ldr	r3, [r7, #32]
 800dc94:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	f383 8811 	msr	BASEPRI, r3
}
 800dc9c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800dc9e:	bf00      	nop
 800dca0:	3728      	adds	r7, #40	@ 0x28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	2000db60 	.word	0x2000db60
 800dcac:	2000db40 	.word	0x2000db40
 800dcb0:	2000da3c 	.word	0x2000da3c
 800dcb4:	2000daf8 	.word	0x2000daf8
 800dcb8:	2000da38 	.word	0x2000da38
 800dcbc:	2000db4c 	.word	0x2000db4c

0800dcc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dcca:	4b29      	ldr	r3, [pc, #164]	@ (800dd70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcd0:	4b28      	ldr	r3, [pc, #160]	@ (800dd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fd ffbe 	bl	800bc58 <uxListRemove>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d10b      	bne.n	800dcfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dce2:	4b24      	ldr	r3, [pc, #144]	@ (800dd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce8:	2201      	movs	r2, #1
 800dcea:	fa02 f303 	lsl.w	r3, r2, r3
 800dcee:	43da      	mvns	r2, r3
 800dcf0:	4b21      	ldr	r3, [pc, #132]	@ (800dd78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4013      	ands	r3, r2
 800dcf6:	4a20      	ldr	r2, [pc, #128]	@ (800dd78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dcf8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd00:	d10a      	bne.n	800dd18 <prvAddCurrentTaskToDelayedList+0x58>
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d007      	beq.n	800dd18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd08:	4b1a      	ldr	r3, [pc, #104]	@ (800dd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	4619      	mov	r1, r3
 800dd10:	481a      	ldr	r0, [pc, #104]	@ (800dd7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800dd12:	f7fd ff44 	bl	800bb9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd16:	e026      	b.n	800dd66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd20:	4b14      	ldr	r3, [pc, #80]	@ (800dd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d209      	bcs.n	800dd44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd30:	4b13      	ldr	r3, [pc, #76]	@ (800dd80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	4b0f      	ldr	r3, [pc, #60]	@ (800dd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	f7fd ff52 	bl	800bbe6 <vListInsert>
}
 800dd42:	e010      	b.n	800dd66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd44:	4b0f      	ldr	r3, [pc, #60]	@ (800dd84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	4b0a      	ldr	r3, [pc, #40]	@ (800dd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	4619      	mov	r1, r3
 800dd50:	4610      	mov	r0, r2
 800dd52:	f7fd ff48 	bl	800bbe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dd56:	4b0c      	ldr	r3, [pc, #48]	@ (800dd88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d202      	bcs.n	800dd66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dd60:	4a09      	ldr	r2, [pc, #36]	@ (800dd88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	6013      	str	r3, [r2, #0]
}
 800dd66:	bf00      	nop
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	2000db3c 	.word	0x2000db3c
 800dd74:	2000da38 	.word	0x2000da38
 800dd78:	2000db40 	.word	0x2000db40
 800dd7c:	2000db24 	.word	0x2000db24
 800dd80:	2000daf4 	.word	0x2000daf4
 800dd84:	2000daf0 	.word	0x2000daf0
 800dd88:	2000db58 	.word	0x2000db58

0800dd8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dd98:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800dd9c:	f002 fcbc 	bl	8010718 <USBD_static_malloc>
 800dda0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d109      	bne.n	800ddbc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	32b0      	adds	r2, #176	@ 0xb0
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ddb8:	2302      	movs	r3, #2
 800ddba:	e0d4      	b.n	800df66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ddbc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	f003 fb4c 	bl	8011460 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	32b0      	adds	r2, #176	@ 0xb0
 800ddd2:	68f9      	ldr	r1, [r7, #12]
 800ddd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	32b0      	adds	r2, #176	@ 0xb0
 800dde2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	7c1b      	ldrb	r3, [r3, #16]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d138      	bne.n	800de66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ddf4:	4b5e      	ldr	r3, [pc, #376]	@ (800df70 <USBD_CDC_Init+0x1e4>)
 800ddf6:	7819      	ldrb	r1, [r3, #0]
 800ddf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddfc:	2202      	movs	r2, #2
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f002 fb67 	bl	80104d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de04:	4b5a      	ldr	r3, [pc, #360]	@ (800df70 <USBD_CDC_Init+0x1e4>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	f003 020f 	and.w	r2, r3, #15
 800de0c:	6879      	ldr	r1, [r7, #4]
 800de0e:	4613      	mov	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	440b      	add	r3, r1
 800de18:	3323      	adds	r3, #35	@ 0x23
 800de1a:	2201      	movs	r2, #1
 800de1c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800de1e:	4b55      	ldr	r3, [pc, #340]	@ (800df74 <USBD_CDC_Init+0x1e8>)
 800de20:	7819      	ldrb	r1, [r3, #0]
 800de22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de26:	2202      	movs	r2, #2
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f002 fb52 	bl	80104d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800de2e:	4b51      	ldr	r3, [pc, #324]	@ (800df74 <USBD_CDC_Init+0x1e8>)
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	f003 020f 	and.w	r2, r3, #15
 800de36:	6879      	ldr	r1, [r7, #4]
 800de38:	4613      	mov	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	4413      	add	r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	440b      	add	r3, r1
 800de42:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800de46:	2201      	movs	r2, #1
 800de48:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800de4a:	4b4b      	ldr	r3, [pc, #300]	@ (800df78 <USBD_CDC_Init+0x1ec>)
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	f003 020f 	and.w	r2, r3, #15
 800de52:	6879      	ldr	r1, [r7, #4]
 800de54:	4613      	mov	r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	440b      	add	r3, r1
 800de5e:	331c      	adds	r3, #28
 800de60:	2210      	movs	r2, #16
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	e035      	b.n	800ded2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de66:	4b42      	ldr	r3, [pc, #264]	@ (800df70 <USBD_CDC_Init+0x1e4>)
 800de68:	7819      	ldrb	r1, [r3, #0]
 800de6a:	2340      	movs	r3, #64	@ 0x40
 800de6c:	2202      	movs	r2, #2
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f002 fb2f 	bl	80104d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de74:	4b3e      	ldr	r3, [pc, #248]	@ (800df70 <USBD_CDC_Init+0x1e4>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	f003 020f 	and.w	r2, r3, #15
 800de7c:	6879      	ldr	r1, [r7, #4]
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	440b      	add	r3, r1
 800de88:	3323      	adds	r3, #35	@ 0x23
 800de8a:	2201      	movs	r2, #1
 800de8c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800de8e:	4b39      	ldr	r3, [pc, #228]	@ (800df74 <USBD_CDC_Init+0x1e8>)
 800de90:	7819      	ldrb	r1, [r3, #0]
 800de92:	2340      	movs	r3, #64	@ 0x40
 800de94:	2202      	movs	r2, #2
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f002 fb1b 	bl	80104d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800de9c:	4b35      	ldr	r3, [pc, #212]	@ (800df74 <USBD_CDC_Init+0x1e8>)
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	f003 020f 	and.w	r2, r3, #15
 800dea4:	6879      	ldr	r1, [r7, #4]
 800dea6:	4613      	mov	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4413      	add	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	440b      	add	r3, r1
 800deb0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800deb4:	2201      	movs	r2, #1
 800deb6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800deb8:	4b2f      	ldr	r3, [pc, #188]	@ (800df78 <USBD_CDC_Init+0x1ec>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	f003 020f 	and.w	r2, r3, #15
 800dec0:	6879      	ldr	r1, [r7, #4]
 800dec2:	4613      	mov	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	440b      	add	r3, r1
 800decc:	331c      	adds	r3, #28
 800dece:	2210      	movs	r2, #16
 800ded0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ded2:	4b29      	ldr	r3, [pc, #164]	@ (800df78 <USBD_CDC_Init+0x1ec>)
 800ded4:	7819      	ldrb	r1, [r3, #0]
 800ded6:	2308      	movs	r3, #8
 800ded8:	2203      	movs	r2, #3
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f002 faf9 	bl	80104d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dee0:	4b25      	ldr	r3, [pc, #148]	@ (800df78 <USBD_CDC_Init+0x1ec>)
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	f003 020f 	and.w	r2, r3, #15
 800dee8:	6879      	ldr	r1, [r7, #4]
 800deea:	4613      	mov	r3, r2
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	440b      	add	r3, r1
 800def4:	3323      	adds	r3, #35	@ 0x23
 800def6:	2201      	movs	r2, #1
 800def8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	33b0      	adds	r3, #176	@ 0xb0
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	4413      	add	r3, r2
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2200      	movs	r2, #0
 800df1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d101      	bne.n	800df34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800df30:	2302      	movs	r3, #2
 800df32:	e018      	b.n	800df66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	7c1b      	ldrb	r3, [r3, #16]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10a      	bne.n	800df52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df3c:	4b0d      	ldr	r3, [pc, #52]	@ (800df74 <USBD_CDC_Init+0x1e8>)
 800df3e:	7819      	ldrb	r1, [r3, #0]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800df46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f002 fbb0 	bl	80106b0 <USBD_LL_PrepareReceive>
 800df50:	e008      	b.n	800df64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df52:	4b08      	ldr	r3, [pc, #32]	@ (800df74 <USBD_CDC_Init+0x1e8>)
 800df54:	7819      	ldrb	r1, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800df5c:	2340      	movs	r3, #64	@ 0x40
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f002 fba6 	bl	80106b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	20000097 	.word	0x20000097
 800df74:	20000098 	.word	0x20000098
 800df78:	20000099 	.word	0x20000099

0800df7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	460b      	mov	r3, r1
 800df86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800df88:	4b3a      	ldr	r3, [pc, #232]	@ (800e074 <USBD_CDC_DeInit+0xf8>)
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f002 fac5 	bl	801051e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800df94:	4b37      	ldr	r3, [pc, #220]	@ (800e074 <USBD_CDC_DeInit+0xf8>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	f003 020f 	and.w	r2, r3, #15
 800df9c:	6879      	ldr	r1, [r7, #4]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	4413      	add	r3, r2
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	440b      	add	r3, r1
 800dfa8:	3323      	adds	r3, #35	@ 0x23
 800dfaa:	2200      	movs	r2, #0
 800dfac:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dfae:	4b32      	ldr	r3, [pc, #200]	@ (800e078 <USBD_CDC_DeInit+0xfc>)
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f002 fab2 	bl	801051e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dfba:	4b2f      	ldr	r3, [pc, #188]	@ (800e078 <USBD_CDC_DeInit+0xfc>)
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	f003 020f 	and.w	r2, r3, #15
 800dfc2:	6879      	ldr	r1, [r7, #4]
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	4413      	add	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	440b      	add	r3, r1
 800dfce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dfd6:	4b29      	ldr	r3, [pc, #164]	@ (800e07c <USBD_CDC_DeInit+0x100>)
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f002 fa9e 	bl	801051e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dfe2:	4b26      	ldr	r3, [pc, #152]	@ (800e07c <USBD_CDC_DeInit+0x100>)
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	f003 020f 	and.w	r2, r3, #15
 800dfea:	6879      	ldr	r1, [r7, #4]
 800dfec:	4613      	mov	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4413      	add	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	440b      	add	r3, r1
 800dff6:	3323      	adds	r3, #35	@ 0x23
 800dff8:	2200      	movs	r2, #0
 800dffa:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dffc:	4b1f      	ldr	r3, [pc, #124]	@ (800e07c <USBD_CDC_DeInit+0x100>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	f003 020f 	and.w	r2, r3, #15
 800e004:	6879      	ldr	r1, [r7, #4]
 800e006:	4613      	mov	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	440b      	add	r3, r1
 800e010:	331c      	adds	r3, #28
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	32b0      	adds	r2, #176	@ 0xb0
 800e020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d01f      	beq.n	800e068 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	33b0      	adds	r3, #176	@ 0xb0
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	32b0      	adds	r2, #176	@ 0xb0
 800e046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f002 fb72 	bl	8010734 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	32b0      	adds	r2, #176	@ 0xb0
 800e05a:	2100      	movs	r1, #0
 800e05c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20000097 	.word	0x20000097
 800e078:	20000098 	.word	0x20000098
 800e07c:	20000099 	.word	0x20000099

0800e080 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	32b0      	adds	r2, #176	@ 0xb0
 800e094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e098:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e09a:	2300      	movs	r3, #0
 800e09c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d101      	bne.n	800e0b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	e0bf      	b.n	800e230 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d050      	beq.n	800e15e <USBD_CDC_Setup+0xde>
 800e0bc:	2b20      	cmp	r3, #32
 800e0be:	f040 80af 	bne.w	800e220 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	88db      	ldrh	r3, [r3, #6]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d03a      	beq.n	800e140 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	b25b      	sxtb	r3, r3
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	da1b      	bge.n	800e10c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	33b0      	adds	r3, #176	@ 0xb0
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	683a      	ldr	r2, [r7, #0]
 800e0e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e0ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e0ec:	683a      	ldr	r2, [r7, #0]
 800e0ee:	88d2      	ldrh	r2, [r2, #6]
 800e0f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	88db      	ldrh	r3, [r3, #6]
 800e0f6:	2b07      	cmp	r3, #7
 800e0f8:	bf28      	it	cs
 800e0fa:	2307      	movcs	r3, #7
 800e0fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	89fa      	ldrh	r2, [r7, #14]
 800e102:	4619      	mov	r1, r3
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f001 fda9 	bl	800fc5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e10a:	e090      	b.n	800e22e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	785a      	ldrb	r2, [r3, #1]
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	88db      	ldrh	r3, [r3, #6]
 800e11a:	2b3f      	cmp	r3, #63	@ 0x3f
 800e11c:	d803      	bhi.n	800e126 <USBD_CDC_Setup+0xa6>
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	88db      	ldrh	r3, [r3, #6]
 800e122:	b2da      	uxtb	r2, r3
 800e124:	e000      	b.n	800e128 <USBD_CDC_Setup+0xa8>
 800e126:	2240      	movs	r2, #64	@ 0x40
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e12e:	6939      	ldr	r1, [r7, #16]
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e136:	461a      	mov	r2, r3
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f001 fdbe 	bl	800fcba <USBD_CtlPrepareRx>
      break;
 800e13e:	e076      	b.n	800e22e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	33b0      	adds	r3, #176	@ 0xb0
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	7850      	ldrb	r0, [r2, #1]
 800e156:	2200      	movs	r2, #0
 800e158:	6839      	ldr	r1, [r7, #0]
 800e15a:	4798      	blx	r3
      break;
 800e15c:	e067      	b.n	800e22e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	785b      	ldrb	r3, [r3, #1]
 800e162:	2b0b      	cmp	r3, #11
 800e164:	d851      	bhi.n	800e20a <USBD_CDC_Setup+0x18a>
 800e166:	a201      	add	r2, pc, #4	@ (adr r2, 800e16c <USBD_CDC_Setup+0xec>)
 800e168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e16c:	0800e19d 	.word	0x0800e19d
 800e170:	0800e219 	.word	0x0800e219
 800e174:	0800e20b 	.word	0x0800e20b
 800e178:	0800e20b 	.word	0x0800e20b
 800e17c:	0800e20b 	.word	0x0800e20b
 800e180:	0800e20b 	.word	0x0800e20b
 800e184:	0800e20b 	.word	0x0800e20b
 800e188:	0800e20b 	.word	0x0800e20b
 800e18c:	0800e20b 	.word	0x0800e20b
 800e190:	0800e20b 	.word	0x0800e20b
 800e194:	0800e1c7 	.word	0x0800e1c7
 800e198:	0800e1f1 	.word	0x0800e1f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	d107      	bne.n	800e1b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e1a8:	f107 030a 	add.w	r3, r7, #10
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f001 fd53 	bl	800fc5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1b6:	e032      	b.n	800e21e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f001 fcd1 	bl	800fb62 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1c0:	2303      	movs	r3, #3
 800e1c2:	75fb      	strb	r3, [r7, #23]
          break;
 800e1c4:	e02b      	b.n	800e21e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	2b03      	cmp	r3, #3
 800e1d0:	d107      	bne.n	800e1e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e1d2:	f107 030d 	add.w	r3, r7, #13
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	4619      	mov	r1, r3
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f001 fd3e 	bl	800fc5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1e0:	e01d      	b.n	800e21e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e1e2:	6839      	ldr	r1, [r7, #0]
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f001 fcbc 	bl	800fb62 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	75fb      	strb	r3, [r7, #23]
          break;
 800e1ee:	e016      	b.n	800e21e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	2b03      	cmp	r3, #3
 800e1fa:	d00f      	beq.n	800e21c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f001 fcaf 	bl	800fb62 <USBD_CtlError>
            ret = USBD_FAIL;
 800e204:	2303      	movs	r3, #3
 800e206:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e208:	e008      	b.n	800e21c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e20a:	6839      	ldr	r1, [r7, #0]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f001 fca8 	bl	800fb62 <USBD_CtlError>
          ret = USBD_FAIL;
 800e212:	2303      	movs	r3, #3
 800e214:	75fb      	strb	r3, [r7, #23]
          break;
 800e216:	e002      	b.n	800e21e <USBD_CDC_Setup+0x19e>
          break;
 800e218:	bf00      	nop
 800e21a:	e008      	b.n	800e22e <USBD_CDC_Setup+0x1ae>
          break;
 800e21c:	bf00      	nop
      }
      break;
 800e21e:	e006      	b.n	800e22e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f001 fc9d 	bl	800fb62 <USBD_CtlError>
      ret = USBD_FAIL;
 800e228:	2303      	movs	r3, #3
 800e22a:	75fb      	strb	r3, [r7, #23]
      break;
 800e22c:	bf00      	nop
  }

  return (uint8_t)ret;
 800e22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e230:	4618      	mov	r0, r3
 800e232:	3718      	adds	r7, #24
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	460b      	mov	r3, r1
 800e242:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e24a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	32b0      	adds	r2, #176	@ 0xb0
 800e256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e25e:	2303      	movs	r3, #3
 800e260:	e065      	b.n	800e32e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	32b0      	adds	r2, #176	@ 0xb0
 800e26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e270:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e272:	78fb      	ldrb	r3, [r7, #3]
 800e274:	f003 020f 	and.w	r2, r3, #15
 800e278:	6879      	ldr	r1, [r7, #4]
 800e27a:	4613      	mov	r3, r2
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	4413      	add	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	440b      	add	r3, r1
 800e284:	3314      	adds	r3, #20
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d02f      	beq.n	800e2ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e28c:	78fb      	ldrb	r3, [r7, #3]
 800e28e:	f003 020f 	and.w	r2, r3, #15
 800e292:	6879      	ldr	r1, [r7, #4]
 800e294:	4613      	mov	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4413      	add	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	440b      	add	r3, r1
 800e29e:	3314      	adds	r3, #20
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	78fb      	ldrb	r3, [r7, #3]
 800e2a4:	f003 010f 	and.w	r1, r3, #15
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	00db      	lsls	r3, r3, #3
 800e2ae:	440b      	add	r3, r1
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4403      	add	r3, r0
 800e2b4:	331c      	adds	r3, #28
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800e2bc:	fb01 f303 	mul.w	r3, r1, r3
 800e2c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d112      	bne.n	800e2ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e2c6:	78fb      	ldrb	r3, [r7, #3]
 800e2c8:	f003 020f 	and.w	r2, r3, #15
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	4413      	add	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	440b      	add	r3, r1
 800e2d8:	3314      	adds	r3, #20
 800e2da:	2200      	movs	r2, #0
 800e2dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e2de:	78f9      	ldrb	r1, [r7, #3]
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f002 f9c2 	bl	801066e <USBD_LL_Transmit>
 800e2ea:	e01f      	b.n	800e32c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	33b0      	adds	r3, #176	@ 0xb0
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	4413      	add	r3, r2
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	691b      	ldr	r3, [r3, #16]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d010      	beq.n	800e32c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	33b0      	adds	r3, #176	@ 0xb0
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4413      	add	r3, r2
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	68ba      	ldr	r2, [r7, #8]
 800e31e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e328:	78fa      	ldrb	r2, [r7, #3]
 800e32a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b084      	sub	sp, #16
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
 800e33e:	460b      	mov	r3, r1
 800e340:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	32b0      	adds	r2, #176	@ 0xb0
 800e34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e350:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	32b0      	adds	r2, #176	@ 0xb0
 800e35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d101      	bne.n	800e368 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e364:	2303      	movs	r3, #3
 800e366:	e01a      	b.n	800e39e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e368:	78fb      	ldrb	r3, [r7, #3]
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f002 f9c0 	bl	80106f2 <USBD_LL_GetRxDataSize>
 800e372:	4602      	mov	r2, r0
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	33b0      	adds	r3, #176	@ 0xb0
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e398:	4611      	mov	r1, r2
 800e39a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b084      	sub	sp, #16
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	32b0      	adds	r2, #176	@ 0xb0
 800e3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d101      	bne.n	800e3c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	e024      	b.n	800e412 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	33b0      	adds	r3, #176	@ 0xb0
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4413      	add	r3, r2
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d019      	beq.n	800e410 <USBD_CDC_EP0_RxReady+0x6a>
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e3e2:	2bff      	cmp	r3, #255	@ 0xff
 800e3e4:	d014      	beq.n	800e410 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	33b0      	adds	r3, #176	@ 0xb0
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e3fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e406:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	22ff      	movs	r2, #255	@ 0xff
 800e40c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e410:	2300      	movs	r3, #0
}
 800e412:	4618      	mov	r0, r3
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
	...

0800e41c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e424:	2182      	movs	r1, #130	@ 0x82
 800e426:	4818      	ldr	r0, [pc, #96]	@ (800e488 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e428:	f000 fd62 	bl	800eef0 <USBD_GetEpDesc>
 800e42c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e42e:	2101      	movs	r1, #1
 800e430:	4815      	ldr	r0, [pc, #84]	@ (800e488 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e432:	f000 fd5d 	bl	800eef0 <USBD_GetEpDesc>
 800e436:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e438:	2181      	movs	r1, #129	@ 0x81
 800e43a:	4813      	ldr	r0, [pc, #76]	@ (800e488 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e43c:	f000 fd58 	bl	800eef0 <USBD_GetEpDesc>
 800e440:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d002      	beq.n	800e44e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	2210      	movs	r2, #16
 800e44c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d006      	beq.n	800e462 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	2200      	movs	r2, #0
 800e458:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e45c:	711a      	strb	r2, [r3, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d006      	beq.n	800e476 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e470:	711a      	strb	r2, [r3, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2243      	movs	r2, #67	@ 0x43
 800e47a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e47c:	4b02      	ldr	r3, [pc, #8]	@ (800e488 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3718      	adds	r7, #24
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	20000054 	.word	0x20000054

0800e48c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b086      	sub	sp, #24
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e494:	2182      	movs	r1, #130	@ 0x82
 800e496:	4818      	ldr	r0, [pc, #96]	@ (800e4f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e498:	f000 fd2a 	bl	800eef0 <USBD_GetEpDesc>
 800e49c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e49e:	2101      	movs	r1, #1
 800e4a0:	4815      	ldr	r0, [pc, #84]	@ (800e4f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4a2:	f000 fd25 	bl	800eef0 <USBD_GetEpDesc>
 800e4a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e4a8:	2181      	movs	r1, #129	@ 0x81
 800e4aa:	4813      	ldr	r0, [pc, #76]	@ (800e4f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4ac:	f000 fd20 	bl	800eef0 <USBD_GetEpDesc>
 800e4b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d002      	beq.n	800e4be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	2210      	movs	r2, #16
 800e4bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d006      	beq.n	800e4d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	711a      	strb	r2, [r3, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f042 0202 	orr.w	r2, r2, #2
 800e4d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d006      	beq.n	800e4e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	711a      	strb	r2, [r3, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f042 0202 	orr.w	r2, r2, #2
 800e4e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2243      	movs	r2, #67	@ 0x43
 800e4ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e4ec:	4b02      	ldr	r3, [pc, #8]	@ (800e4f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3718      	adds	r7, #24
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	20000054 	.word	0x20000054

0800e4fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b086      	sub	sp, #24
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e504:	2182      	movs	r1, #130	@ 0x82
 800e506:	4818      	ldr	r0, [pc, #96]	@ (800e568 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e508:	f000 fcf2 	bl	800eef0 <USBD_GetEpDesc>
 800e50c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e50e:	2101      	movs	r1, #1
 800e510:	4815      	ldr	r0, [pc, #84]	@ (800e568 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e512:	f000 fced 	bl	800eef0 <USBD_GetEpDesc>
 800e516:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e518:	2181      	movs	r1, #129	@ 0x81
 800e51a:	4813      	ldr	r0, [pc, #76]	@ (800e568 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e51c:	f000 fce8 	bl	800eef0 <USBD_GetEpDesc>
 800e520:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d002      	beq.n	800e52e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	2210      	movs	r2, #16
 800e52c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d006      	beq.n	800e542 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	2200      	movs	r2, #0
 800e538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e53c:	711a      	strb	r2, [r3, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d006      	beq.n	800e556 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e550:	711a      	strb	r2, [r3, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2243      	movs	r2, #67	@ 0x43
 800e55a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e55c:	4b02      	ldr	r3, [pc, #8]	@ (800e568 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3718      	adds	r7, #24
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20000054 	.word	0x20000054

0800e56c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	220a      	movs	r2, #10
 800e578:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e57a:	4b03      	ldr	r3, [pc, #12]	@ (800e588 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr
 800e588:	20000010 	.word	0x20000010

0800e58c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e59c:	2303      	movs	r3, #3
 800e59e:	e009      	b.n	800e5b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	33b0      	adds	r3, #176	@ 0xb0
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4413      	add	r3, r2
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b087      	sub	sp, #28
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	32b0      	adds	r2, #176	@ 0xb0
 800e5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d101      	bne.n	800e5e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e5e2:	2303      	movs	r3, #3
 800e5e4:	e008      	b.n	800e5f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	68ba      	ldr	r2, [r7, #8]
 800e5ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	371c      	adds	r7, #28
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e604:	b480      	push	{r7}
 800e606:	b085      	sub	sp, #20
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	32b0      	adds	r2, #176	@ 0xb0
 800e618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e61c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e624:	2303      	movs	r3, #3
 800e626:	e004      	b.n	800e632 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	683a      	ldr	r2, [r7, #0]
 800e62c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e630:	2300      	movs	r3, #0
}
 800e632:	4618      	mov	r0, r3
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
	...

0800e640 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	32b0      	adds	r2, #176	@ 0xb0
 800e652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e656:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e658:	2301      	movs	r3, #1
 800e65a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d101      	bne.n	800e666 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e662:	2303      	movs	r3, #3
 800e664:	e025      	b.n	800e6b2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d11f      	bne.n	800e6b0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	2201      	movs	r2, #1
 800e674:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e678:	4b10      	ldr	r3, [pc, #64]	@ (800e6bc <USBD_CDC_TransmitPacket+0x7c>)
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	f003 020f 	and.w	r2, r3, #15
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	4613      	mov	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	4413      	add	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	4403      	add	r3, r0
 800e692:	3314      	adds	r3, #20
 800e694:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e696:	4b09      	ldr	r3, [pc, #36]	@ (800e6bc <USBD_CDC_TransmitPacket+0x7c>)
 800e698:	7819      	ldrb	r1, [r3, #0]
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f001 ffe1 	bl	801066e <USBD_LL_Transmit>

    ret = USBD_OK;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20000097 	.word	0x20000097

0800e6c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	32b0      	adds	r2, #176	@ 0xb0
 800e6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	32b0      	adds	r2, #176	@ 0xb0
 800e6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d101      	bne.n	800e6ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e6ea:	2303      	movs	r3, #3
 800e6ec:	e018      	b.n	800e720 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	7c1b      	ldrb	r3, [r3, #16]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10a      	bne.n	800e70c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e728 <USBD_CDC_ReceivePacket+0x68>)
 800e6f8:	7819      	ldrb	r1, [r3, #0]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f001 ffd3 	bl	80106b0 <USBD_LL_PrepareReceive>
 800e70a:	e008      	b.n	800e71e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e70c:	4b06      	ldr	r3, [pc, #24]	@ (800e728 <USBD_CDC_ReceivePacket+0x68>)
 800e70e:	7819      	ldrb	r1, [r3, #0]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e716:	2340      	movs	r3, #64	@ 0x40
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f001 ffc9 	bl	80106b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3710      	adds	r7, #16
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	20000098 	.word	0x20000098

0800e72c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	4613      	mov	r3, r2
 800e738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d101      	bne.n	800e744 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e740:	2303      	movs	r3, #3
 800e742:	e01f      	b.n	800e784 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2200      	movs	r2, #0
 800e748:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d003      	beq.n	800e76a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	68ba      	ldr	r2, [r7, #8]
 800e766:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2201      	movs	r2, #1
 800e76e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	79fa      	ldrb	r2, [r7, #7]
 800e776:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f001 fe43 	bl	8010404 <USBD_LL_Init>
 800e77e:	4603      	mov	r3, r0
 800e780:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e782:	7dfb      	ldrb	r3, [r7, #23]
}
 800e784:	4618      	mov	r0, r3
 800e786:	3718      	adds	r7, #24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e796:	2300      	movs	r3, #0
 800e798:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d101      	bne.n	800e7a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e7a0:	2303      	movs	r3, #3
 800e7a2:	e025      	b.n	800e7f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	683a      	ldr	r2, [r7, #0]
 800e7a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	32ae      	adds	r2, #174	@ 0xae
 800e7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00f      	beq.n	800e7e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	32ae      	adds	r2, #174	@ 0xae
 800e7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d0:	f107 020e 	add.w	r2, r7, #14
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	4798      	blx	r3
 800e7d8:	4602      	mov	r2, r0
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3710      	adds	r7, #16
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f001 fe4b 	bl	801049c <USBD_LL_Start>
 800e806:	4603      	mov	r3, r0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e818:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	370c      	adds	r7, #12
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr

0800e826 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	460b      	mov	r3, r1
 800e830:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e832:	2300      	movs	r3, #0
 800e834:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d009      	beq.n	800e854 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	78fa      	ldrb	r2, [r7, #3]
 800e84a:	4611      	mov	r1, r2
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	4798      	blx	r3
 800e850:	4603      	mov	r3, r0
 800e852:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e854:	7bfb      	ldrb	r3, [r7, #15]
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b084      	sub	sp, #16
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	460b      	mov	r3, r1
 800e868:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e86a:	2300      	movs	r3, #0
 800e86c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	78fa      	ldrb	r2, [r7, #3]
 800e878:	4611      	mov	r1, r2
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	4798      	blx	r3
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d001      	beq.n	800e888 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e884:	2303      	movs	r3, #3
 800e886:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e888:	7bfb      	ldrb	r3, [r7, #15]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b084      	sub	sp, #16
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
 800e89a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e8a2:	6839      	ldr	r1, [r7, #0]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f001 f922 	bl	800faee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e8c6:	f003 031f 	and.w	r3, r3, #31
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d01a      	beq.n	800e904 <USBD_LL_SetupStage+0x72>
 800e8ce:	2b02      	cmp	r3, #2
 800e8d0:	d822      	bhi.n	800e918 <USBD_LL_SetupStage+0x86>
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d002      	beq.n	800e8dc <USBD_LL_SetupStage+0x4a>
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d00a      	beq.n	800e8f0 <USBD_LL_SetupStage+0x5e>
 800e8da:	e01d      	b.n	800e918 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 fb77 	bl	800efd8 <USBD_StdDevReq>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	73fb      	strb	r3, [r7, #15]
      break;
 800e8ee:	e020      	b.n	800e932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 fbdf 	bl	800f0bc <USBD_StdItfReq>
 800e8fe:	4603      	mov	r3, r0
 800e900:	73fb      	strb	r3, [r7, #15]
      break;
 800e902:	e016      	b.n	800e932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e90a:	4619      	mov	r1, r3
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 fc41 	bl	800f194 <USBD_StdEPReq>
 800e912:	4603      	mov	r3, r0
 800e914:	73fb      	strb	r3, [r7, #15]
      break;
 800e916:	e00c      	b.n	800e932 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e91e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e922:	b2db      	uxtb	r3, r3
 800e924:	4619      	mov	r1, r3
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f001 fe18 	bl	801055c <USBD_LL_StallEP>
 800e92c:	4603      	mov	r3, r0
 800e92e:	73fb      	strb	r3, [r7, #15]
      break;
 800e930:	bf00      	nop
  }

  return ret;
 800e932:	7bfb      	ldrb	r3, [r7, #15]
}
 800e934:	4618      	mov	r0, r3
 800e936:	3710      	adds	r7, #16
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	460b      	mov	r3, r1
 800e946:	607a      	str	r2, [r7, #4]
 800e948:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e94a:	2300      	movs	r3, #0
 800e94c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800e94e:	7afb      	ldrb	r3, [r7, #11]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d177      	bne.n	800ea44 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e95a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e962:	2b03      	cmp	r3, #3
 800e964:	f040 80a1 	bne.w	800eaaa <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	693a      	ldr	r2, [r7, #16]
 800e96e:	8992      	ldrh	r2, [r2, #12]
 800e970:	4293      	cmp	r3, r2
 800e972:	d91c      	bls.n	800e9ae <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	693a      	ldr	r2, [r7, #16]
 800e97a:	8992      	ldrh	r2, [r2, #12]
 800e97c:	1a9a      	subs	r2, r3, r2
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	691b      	ldr	r3, [r3, #16]
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	8992      	ldrh	r2, [r2, #12]
 800e98a:	441a      	add	r2, r3
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	6919      	ldr	r1, [r3, #16]
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	899b      	ldrh	r3, [r3, #12]
 800e998:	461a      	mov	r2, r3
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	bf38      	it	cc
 800e9a2:	4613      	movcc	r3, r2
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f001 f9a8 	bl	800fcfc <USBD_CtlContinueRx>
 800e9ac:	e07d      	b.n	800eaaa <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e9b4:	f003 031f 	and.w	r3, r3, #31
 800e9b8:	2b02      	cmp	r3, #2
 800e9ba:	d014      	beq.n	800e9e6 <USBD_LL_DataOutStage+0xaa>
 800e9bc:	2b02      	cmp	r3, #2
 800e9be:	d81d      	bhi.n	800e9fc <USBD_LL_DataOutStage+0xc0>
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <USBD_LL_DataOutStage+0x8e>
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d003      	beq.n	800e9d0 <USBD_LL_DataOutStage+0x94>
 800e9c8:	e018      	b.n	800e9fc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	75bb      	strb	r3, [r7, #22]
            break;
 800e9ce:	e018      	b.n	800ea02 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	4619      	mov	r1, r3
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f000 fa6e 	bl	800eebc <USBD_CoreFindIF>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	75bb      	strb	r3, [r7, #22]
            break;
 800e9e4:	e00d      	b.n	800ea02 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	f000 fa70 	bl	800eed6 <USBD_CoreFindEP>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	75bb      	strb	r3, [r7, #22]
            break;
 800e9fa:	e002      	b.n	800ea02 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	75bb      	strb	r3, [r7, #22]
            break;
 800ea00:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ea02:	7dbb      	ldrb	r3, [r7, #22]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d119      	bne.n	800ea3c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	2b03      	cmp	r3, #3
 800ea12:	d113      	bne.n	800ea3c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ea14:	7dba      	ldrb	r2, [r7, #22]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	32ae      	adds	r2, #174	@ 0xae
 800ea1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00b      	beq.n	800ea3c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800ea24:	7dba      	ldrb	r2, [r7, #22]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ea2c:	7dba      	ldrb	r2, [r7, #22]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	32ae      	adds	r2, #174	@ 0xae
 800ea32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	68f8      	ldr	r0, [r7, #12]
 800ea3a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f001 f96e 	bl	800fd1e <USBD_CtlSendStatus>
 800ea42:	e032      	b.n	800eaaa <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ea44:	7afb      	ldrb	r3, [r7, #11]
 800ea46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	f000 fa41 	bl	800eed6 <USBD_CoreFindEP>
 800ea54:	4603      	mov	r3, r0
 800ea56:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea58:	7dbb      	ldrb	r3, [r7, #22]
 800ea5a:	2bff      	cmp	r3, #255	@ 0xff
 800ea5c:	d025      	beq.n	800eaaa <USBD_LL_DataOutStage+0x16e>
 800ea5e:	7dbb      	ldrb	r3, [r7, #22]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d122      	bne.n	800eaaa <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	2b03      	cmp	r3, #3
 800ea6e:	d117      	bne.n	800eaa0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ea70:	7dba      	ldrb	r2, [r7, #22]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	32ae      	adds	r2, #174	@ 0xae
 800ea76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00f      	beq.n	800eaa0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800ea80:	7dba      	ldrb	r2, [r7, #22]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ea88:	7dba      	ldrb	r2, [r7, #22]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	32ae      	adds	r2, #174	@ 0xae
 800ea8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea92:	699b      	ldr	r3, [r3, #24]
 800ea94:	7afa      	ldrb	r2, [r7, #11]
 800ea96:	4611      	mov	r1, r2
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	4798      	blx	r3
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eaa0:	7dfb      	ldrb	r3, [r7, #23]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d001      	beq.n	800eaaa <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800eaa6:	7dfb      	ldrb	r3, [r7, #23]
 800eaa8:	e000      	b.n	800eaac <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b086      	sub	sp, #24
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	460b      	mov	r3, r1
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800eac2:	7afb      	ldrb	r3, [r7, #11]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d178      	bne.n	800ebba <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3314      	adds	r3, #20
 800eacc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d163      	bne.n	800eba0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	693a      	ldr	r2, [r7, #16]
 800eade:	8992      	ldrh	r2, [r2, #12]
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d91c      	bls.n	800eb1e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	693a      	ldr	r2, [r7, #16]
 800eaea:	8992      	ldrh	r2, [r2, #12]
 800eaec:	1a9a      	subs	r2, r3, r2
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	691b      	ldr	r3, [r3, #16]
 800eaf6:	693a      	ldr	r2, [r7, #16]
 800eaf8:	8992      	ldrh	r2, [r2, #12]
 800eafa:	441a      	add	r2, r3
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	6919      	ldr	r1, [r3, #16]
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	461a      	mov	r2, r3
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f001 f8c4 	bl	800fc98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb10:	2300      	movs	r3, #0
 800eb12:	2200      	movs	r2, #0
 800eb14:	2100      	movs	r1, #0
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f001 fdca 	bl	80106b0 <USBD_LL_PrepareReceive>
 800eb1c:	e040      	b.n	800eba0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	899b      	ldrh	r3, [r3, #12]
 800eb22:	461a      	mov	r2, r3
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d11c      	bne.n	800eb66 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	693a      	ldr	r2, [r7, #16]
 800eb32:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d316      	bcc.n	800eb66 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d20f      	bcs.n	800eb66 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eb46:	2200      	movs	r2, #0
 800eb48:	2100      	movs	r1, #0
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f001 f8a4 	bl	800fc98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2200      	movs	r2, #0
 800eb54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb58:	2300      	movs	r3, #0
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f001 fda6 	bl	80106b0 <USBD_LL_PrepareReceive>
 800eb64:	e01c      	b.n	800eba0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b03      	cmp	r3, #3
 800eb70:	d10f      	bne.n	800eb92 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d009      	beq.n	800eb92 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb92:	2180      	movs	r1, #128	@ 0x80
 800eb94:	68f8      	ldr	r0, [r7, #12]
 800eb96:	f001 fce1 	bl	801055c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f001 f8d2 	bl	800fd44 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d03a      	beq.n	800ec20 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	f7ff fe30 	bl	800e810 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ebb8:	e032      	b.n	800ec20 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ebba:	7afb      	ldrb	r3, [r7, #11]
 800ebbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f000 f986 	bl	800eed6 <USBD_CoreFindEP>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebce:	7dfb      	ldrb	r3, [r7, #23]
 800ebd0:	2bff      	cmp	r3, #255	@ 0xff
 800ebd2:	d025      	beq.n	800ec20 <USBD_LL_DataInStage+0x16c>
 800ebd4:	7dfb      	ldrb	r3, [r7, #23]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d122      	bne.n	800ec20 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	2b03      	cmp	r3, #3
 800ebe4:	d11c      	bne.n	800ec20 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ebe6:	7dfa      	ldrb	r2, [r7, #23]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	32ae      	adds	r2, #174	@ 0xae
 800ebec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d014      	beq.n	800ec20 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800ebf6:	7dfa      	ldrb	r2, [r7, #23]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ebfe:	7dfa      	ldrb	r2, [r7, #23]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	32ae      	adds	r2, #174	@ 0xae
 800ec04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec08:	695b      	ldr	r3, [r3, #20]
 800ec0a:	7afa      	ldrb	r2, [r7, #11]
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	68f8      	ldr	r0, [r7, #12]
 800ec10:	4798      	blx	r3
 800ec12:	4603      	mov	r3, r0
 800ec14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ec16:	7dbb      	ldrb	r3, [r7, #22]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d001      	beq.n	800ec20 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800ec1c:	7dbb      	ldrb	r3, [r7, #22]
 800ec1e:	e000      	b.n	800ec22 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3718      	adds	r7, #24
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b084      	sub	sp, #16
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec32:	2300      	movs	r3, #0
 800ec34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d014      	beq.n	800ec90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00e      	beq.n	800ec90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	6852      	ldr	r2, [r2, #4]
 800ec7e:	b2d2      	uxtb	r2, r2
 800ec80:	4611      	mov	r1, r2
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	4798      	blx	r3
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d001      	beq.n	800ec90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ec8c:	2303      	movs	r3, #3
 800ec8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec90:	2340      	movs	r3, #64	@ 0x40
 800ec92:	2200      	movs	r2, #0
 800ec94:	2100      	movs	r1, #0
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f001 fc1b 	bl	80104d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2240      	movs	r2, #64	@ 0x40
 800eca8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ecac:	2340      	movs	r3, #64	@ 0x40
 800ecae:	2200      	movs	r2, #0
 800ecb0:	2180      	movs	r1, #128	@ 0x80
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f001 fc0d 	bl	80104d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2201      	movs	r2, #1
 800ecbc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2240      	movs	r2, #64	@ 0x40
 800ecc4:	841a      	strh	r2, [r3, #32]

  return ret;
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	460b      	mov	r3, r1
 800ecda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	78fa      	ldrb	r2, [r7, #3]
 800ece0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b04      	cmp	r3, #4
 800ed02:	d006      	beq.n	800ed12 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed0a:	b2da      	uxtb	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2204      	movs	r2, #4
 800ed16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ed1a:	2300      	movs	r3, #0
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	2b04      	cmp	r3, #4
 800ed3a:	d106      	bne.n	800ed4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ed4a:	2300      	movs	r3, #0
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	2b03      	cmp	r3, #3
 800ed6a:	d110      	bne.n	800ed8e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d00b      	beq.n	800ed8e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed7c:	69db      	ldr	r3, [r3, #28]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d005      	beq.n	800ed8e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed88:	69db      	ldr	r3, [r3, #28]
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ed8e:	2300      	movs	r3, #0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	460b      	mov	r3, r1
 800eda2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	32ae      	adds	r2, #174	@ 0xae
 800edae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d101      	bne.n	800edba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800edb6:	2303      	movs	r3, #3
 800edb8:	e01c      	b.n	800edf4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	2b03      	cmp	r3, #3
 800edc4:	d115      	bne.n	800edf2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	32ae      	adds	r2, #174	@ 0xae
 800edd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edd4:	6a1b      	ldr	r3, [r3, #32]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00b      	beq.n	800edf2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	32ae      	adds	r2, #174	@ 0xae
 800ede4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ede8:	6a1b      	ldr	r3, [r3, #32]
 800edea:	78fa      	ldrb	r2, [r7, #3]
 800edec:	4611      	mov	r1, r2
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	460b      	mov	r3, r1
 800ee06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	32ae      	adds	r2, #174	@ 0xae
 800ee12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d101      	bne.n	800ee1e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	e01c      	b.n	800ee58 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b03      	cmp	r3, #3
 800ee28:	d115      	bne.n	800ee56 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	32ae      	adds	r2, #174	@ 0xae
 800ee34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00b      	beq.n	800ee56 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	32ae      	adds	r2, #174	@ 0xae
 800ee48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee4e:	78fa      	ldrb	r2, [r7, #3]
 800ee50:	4611      	mov	r1, r2
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	370c      	adds	r7, #12
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr

0800ee76 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b084      	sub	sp, #16
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2201      	movs	r2, #1
 800ee86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00e      	beq.n	800eeb2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	6852      	ldr	r2, [r2, #4]
 800eea0:	b2d2      	uxtb	r2, r2
 800eea2:	4611      	mov	r1, r2
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	4798      	blx	r3
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d001      	beq.n	800eeb2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800eeae:	2303      	movs	r3, #3
 800eeb0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3710      	adds	r7, #16
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eec8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	370c      	adds	r7, #12
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr

0800eed6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eed6:	b480      	push	{r7}
 800eed8:	b083      	sub	sp, #12
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	460b      	mov	r3, r1
 800eee0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eee2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr

0800eef0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	460b      	mov	r3, r1
 800eefa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ef04:	2300      	movs	r3, #0
 800ef06:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	885b      	ldrh	r3, [r3, #2]
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	7812      	ldrb	r2, [r2, #0]
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d91f      	bls.n	800ef56 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ef1c:	e013      	b.n	800ef46 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ef1e:	f107 030a 	add.w	r3, r7, #10
 800ef22:	4619      	mov	r1, r3
 800ef24:	6978      	ldr	r0, [r7, #20]
 800ef26:	f000 f81b 	bl	800ef60 <USBD_GetNextDesc>
 800ef2a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	785b      	ldrb	r3, [r3, #1]
 800ef30:	2b05      	cmp	r3, #5
 800ef32:	d108      	bne.n	800ef46 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	789b      	ldrb	r3, [r3, #2]
 800ef3c:	78fa      	ldrb	r2, [r7, #3]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d008      	beq.n	800ef54 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	885b      	ldrh	r3, [r3, #2]
 800ef4a:	b29a      	uxth	r2, r3
 800ef4c:	897b      	ldrh	r3, [r7, #10]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d8e5      	bhi.n	800ef1e <USBD_GetEpDesc+0x2e>
 800ef52:	e000      	b.n	800ef56 <USBD_GetEpDesc+0x66>
          break;
 800ef54:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ef56:	693b      	ldr	r3, [r7, #16]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b085      	sub	sp, #20
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	881b      	ldrh	r3, [r3, #0]
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	7812      	ldrb	r2, [r2, #0]
 800ef76:	4413      	add	r3, r2
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	461a      	mov	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4413      	add	r3, r2
 800ef88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b087      	sub	sp, #28
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	3301      	adds	r3, #1
 800efae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800efb6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800efba:	021b      	lsls	r3, r3, #8
 800efbc:	b21a      	sxth	r2, r3
 800efbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800efc2:	4313      	orrs	r3, r2
 800efc4:	b21b      	sxth	r3, r3
 800efc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800efc8:	89fb      	ldrh	r3, [r7, #14]
}
 800efca:	4618      	mov	r0, r3
 800efcc:	371c      	adds	r7, #28
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
	...

0800efd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800efe2:	2300      	movs	r3, #0
 800efe4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800efee:	2b40      	cmp	r3, #64	@ 0x40
 800eff0:	d005      	beq.n	800effe <USBD_StdDevReq+0x26>
 800eff2:	2b40      	cmp	r3, #64	@ 0x40
 800eff4:	d857      	bhi.n	800f0a6 <USBD_StdDevReq+0xce>
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00f      	beq.n	800f01a <USBD_StdDevReq+0x42>
 800effa:	2b20      	cmp	r3, #32
 800effc:	d153      	bne.n	800f0a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	32ae      	adds	r2, #174	@ 0xae
 800f008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	6839      	ldr	r1, [r7, #0]
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	4798      	blx	r3
 800f014:	4603      	mov	r3, r0
 800f016:	73fb      	strb	r3, [r7, #15]
      break;
 800f018:	e04a      	b.n	800f0b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	785b      	ldrb	r3, [r3, #1]
 800f01e:	2b09      	cmp	r3, #9
 800f020:	d83b      	bhi.n	800f09a <USBD_StdDevReq+0xc2>
 800f022:	a201      	add	r2, pc, #4	@ (adr r2, 800f028 <USBD_StdDevReq+0x50>)
 800f024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f028:	0800f07d 	.word	0x0800f07d
 800f02c:	0800f091 	.word	0x0800f091
 800f030:	0800f09b 	.word	0x0800f09b
 800f034:	0800f087 	.word	0x0800f087
 800f038:	0800f09b 	.word	0x0800f09b
 800f03c:	0800f05b 	.word	0x0800f05b
 800f040:	0800f051 	.word	0x0800f051
 800f044:	0800f09b 	.word	0x0800f09b
 800f048:	0800f073 	.word	0x0800f073
 800f04c:	0800f065 	.word	0x0800f065
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f000 fa3e 	bl	800f4d4 <USBD_GetDescriptor>
          break;
 800f058:	e024      	b.n	800f0a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f05a:	6839      	ldr	r1, [r7, #0]
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 fba3 	bl	800f7a8 <USBD_SetAddress>
          break;
 800f062:	e01f      	b.n	800f0a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f064:	6839      	ldr	r1, [r7, #0]
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 fbe2 	bl	800f830 <USBD_SetConfig>
 800f06c:	4603      	mov	r3, r0
 800f06e:	73fb      	strb	r3, [r7, #15]
          break;
 800f070:	e018      	b.n	800f0a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f072:	6839      	ldr	r1, [r7, #0]
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 fc85 	bl	800f984 <USBD_GetConfig>
          break;
 800f07a:	e013      	b.n	800f0a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f07c:	6839      	ldr	r1, [r7, #0]
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 fcb6 	bl	800f9f0 <USBD_GetStatus>
          break;
 800f084:	e00e      	b.n	800f0a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f086:	6839      	ldr	r1, [r7, #0]
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 fce5 	bl	800fa58 <USBD_SetFeature>
          break;
 800f08e:	e009      	b.n	800f0a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f090:	6839      	ldr	r1, [r7, #0]
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 fd09 	bl	800faaa <USBD_ClrFeature>
          break;
 800f098:	e004      	b.n	800f0a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f09a:	6839      	ldr	r1, [r7, #0]
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 fd60 	bl	800fb62 <USBD_CtlError>
          break;
 800f0a2:	bf00      	nop
      }
      break;
 800f0a4:	e004      	b.n	800f0b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f0a6:	6839      	ldr	r1, [r7, #0]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 fd5a 	bl	800fb62 <USBD_CtlError>
      break;
 800f0ae:	bf00      	nop
  }

  return ret;
 800f0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3710      	adds	r7, #16
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop

0800f0bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0d2:	2b40      	cmp	r3, #64	@ 0x40
 800f0d4:	d005      	beq.n	800f0e2 <USBD_StdItfReq+0x26>
 800f0d6:	2b40      	cmp	r3, #64	@ 0x40
 800f0d8:	d852      	bhi.n	800f180 <USBD_StdItfReq+0xc4>
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <USBD_StdItfReq+0x26>
 800f0de:	2b20      	cmp	r3, #32
 800f0e0:	d14e      	bne.n	800f180 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	3b01      	subs	r3, #1
 800f0ec:	2b02      	cmp	r3, #2
 800f0ee:	d840      	bhi.n	800f172 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	889b      	ldrh	r3, [r3, #4]
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d836      	bhi.n	800f168 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	889b      	ldrh	r3, [r3, #4]
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	4619      	mov	r1, r3
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7ff feda 	bl	800eebc <USBD_CoreFindIF>
 800f108:	4603      	mov	r3, r0
 800f10a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f10c:	7bbb      	ldrb	r3, [r7, #14]
 800f10e:	2bff      	cmp	r3, #255	@ 0xff
 800f110:	d01d      	beq.n	800f14e <USBD_StdItfReq+0x92>
 800f112:	7bbb      	ldrb	r3, [r7, #14]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d11a      	bne.n	800f14e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f118:	7bba      	ldrb	r2, [r7, #14]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	32ae      	adds	r2, #174	@ 0xae
 800f11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00f      	beq.n	800f148 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f128:	7bba      	ldrb	r2, [r7, #14]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f130:	7bba      	ldrb	r2, [r7, #14]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	32ae      	adds	r2, #174	@ 0xae
 800f136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	6839      	ldr	r1, [r7, #0]
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	4798      	blx	r3
 800f142:	4603      	mov	r3, r0
 800f144:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f146:	e004      	b.n	800f152 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f148:	2303      	movs	r3, #3
 800f14a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f14c:	e001      	b.n	800f152 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f14e:	2303      	movs	r3, #3
 800f150:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	88db      	ldrh	r3, [r3, #6]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d110      	bne.n	800f17c <USBD_StdItfReq+0xc0>
 800f15a:	7bfb      	ldrb	r3, [r7, #15]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10d      	bne.n	800f17c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 fddc 	bl	800fd1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f166:	e009      	b.n	800f17c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f168:	6839      	ldr	r1, [r7, #0]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 fcf9 	bl	800fb62 <USBD_CtlError>
          break;
 800f170:	e004      	b.n	800f17c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fcf4 	bl	800fb62 <USBD_CtlError>
          break;
 800f17a:	e000      	b.n	800f17e <USBD_StdItfReq+0xc2>
          break;
 800f17c:	bf00      	nop
      }
      break;
 800f17e:	e004      	b.n	800f18a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f180:	6839      	ldr	r1, [r7, #0]
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 fced 	bl	800fb62 <USBD_CtlError>
      break;
 800f188:	bf00      	nop
  }

  return ret;
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	889b      	ldrh	r3, [r3, #4]
 800f1a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f1b0:	2b40      	cmp	r3, #64	@ 0x40
 800f1b2:	d007      	beq.n	800f1c4 <USBD_StdEPReq+0x30>
 800f1b4:	2b40      	cmp	r3, #64	@ 0x40
 800f1b6:	f200 8181 	bhi.w	800f4bc <USBD_StdEPReq+0x328>
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d02a      	beq.n	800f214 <USBD_StdEPReq+0x80>
 800f1be:	2b20      	cmp	r3, #32
 800f1c0:	f040 817c 	bne.w	800f4bc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f1c4:	7bbb      	ldrb	r3, [r7, #14]
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7ff fe84 	bl	800eed6 <USBD_CoreFindEP>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1d2:	7b7b      	ldrb	r3, [r7, #13]
 800f1d4:	2bff      	cmp	r3, #255	@ 0xff
 800f1d6:	f000 8176 	beq.w	800f4c6 <USBD_StdEPReq+0x332>
 800f1da:	7b7b      	ldrb	r3, [r7, #13]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f040 8172 	bne.w	800f4c6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800f1e2:	7b7a      	ldrb	r2, [r7, #13]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f1ea:	7b7a      	ldrb	r2, [r7, #13]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	32ae      	adds	r2, #174	@ 0xae
 800f1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f000 8165 	beq.w	800f4c6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f1fc:	7b7a      	ldrb	r2, [r7, #13]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	32ae      	adds	r2, #174	@ 0xae
 800f202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	4798      	blx	r3
 800f20e:	4603      	mov	r3, r0
 800f210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f212:	e158      	b.n	800f4c6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	785b      	ldrb	r3, [r3, #1]
 800f218:	2b03      	cmp	r3, #3
 800f21a:	d008      	beq.n	800f22e <USBD_StdEPReq+0x9a>
 800f21c:	2b03      	cmp	r3, #3
 800f21e:	f300 8147 	bgt.w	800f4b0 <USBD_StdEPReq+0x31c>
 800f222:	2b00      	cmp	r3, #0
 800f224:	f000 809b 	beq.w	800f35e <USBD_StdEPReq+0x1ca>
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d03c      	beq.n	800f2a6 <USBD_StdEPReq+0x112>
 800f22c:	e140      	b.n	800f4b0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f234:	b2db      	uxtb	r3, r3
 800f236:	2b02      	cmp	r3, #2
 800f238:	d002      	beq.n	800f240 <USBD_StdEPReq+0xac>
 800f23a:	2b03      	cmp	r3, #3
 800f23c:	d016      	beq.n	800f26c <USBD_StdEPReq+0xd8>
 800f23e:	e02c      	b.n	800f29a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f240:	7bbb      	ldrb	r3, [r7, #14]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00d      	beq.n	800f262 <USBD_StdEPReq+0xce>
 800f246:	7bbb      	ldrb	r3, [r7, #14]
 800f248:	2b80      	cmp	r3, #128	@ 0x80
 800f24a:	d00a      	beq.n	800f262 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f24c:	7bbb      	ldrb	r3, [r7, #14]
 800f24e:	4619      	mov	r1, r3
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f001 f983 	bl	801055c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f256:	2180      	movs	r1, #128	@ 0x80
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f001 f97f 	bl	801055c <USBD_LL_StallEP>
 800f25e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f260:	e020      	b.n	800f2a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fc7c 	bl	800fb62 <USBD_CtlError>
              break;
 800f26a:	e01b      	b.n	800f2a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	885b      	ldrh	r3, [r3, #2]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d10e      	bne.n	800f292 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f274:	7bbb      	ldrb	r3, [r7, #14]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00b      	beq.n	800f292 <USBD_StdEPReq+0xfe>
 800f27a:	7bbb      	ldrb	r3, [r7, #14]
 800f27c:	2b80      	cmp	r3, #128	@ 0x80
 800f27e:	d008      	beq.n	800f292 <USBD_StdEPReq+0xfe>
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	88db      	ldrh	r3, [r3, #6]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d104      	bne.n	800f292 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f288:	7bbb      	ldrb	r3, [r7, #14]
 800f28a:	4619      	mov	r1, r3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f001 f965 	bl	801055c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fd43 	bl	800fd1e <USBD_CtlSendStatus>

              break;
 800f298:	e004      	b.n	800f2a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f29a:	6839      	ldr	r1, [r7, #0]
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 fc60 	bl	800fb62 <USBD_CtlError>
              break;
 800f2a2:	bf00      	nop
          }
          break;
 800f2a4:	e109      	b.n	800f4ba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	d002      	beq.n	800f2b8 <USBD_StdEPReq+0x124>
 800f2b2:	2b03      	cmp	r3, #3
 800f2b4:	d016      	beq.n	800f2e4 <USBD_StdEPReq+0x150>
 800f2b6:	e04b      	b.n	800f350 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2b8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00d      	beq.n	800f2da <USBD_StdEPReq+0x146>
 800f2be:	7bbb      	ldrb	r3, [r7, #14]
 800f2c0:	2b80      	cmp	r3, #128	@ 0x80
 800f2c2:	d00a      	beq.n	800f2da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2c4:	7bbb      	ldrb	r3, [r7, #14]
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f001 f947 	bl	801055c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2ce:	2180      	movs	r1, #128	@ 0x80
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f001 f943 	bl	801055c <USBD_LL_StallEP>
 800f2d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f2d8:	e040      	b.n	800f35c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f2da:	6839      	ldr	r1, [r7, #0]
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f000 fc40 	bl	800fb62 <USBD_CtlError>
              break;
 800f2e2:	e03b      	b.n	800f35c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	885b      	ldrh	r3, [r3, #2]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d136      	bne.n	800f35a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f2ec:	7bbb      	ldrb	r3, [r7, #14]
 800f2ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d004      	beq.n	800f300 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f2f6:	7bbb      	ldrb	r3, [r7, #14]
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f001 f94d 	bl	801059a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 fd0c 	bl	800fd1e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f306:	7bbb      	ldrb	r3, [r7, #14]
 800f308:	4619      	mov	r1, r3
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff fde3 	bl	800eed6 <USBD_CoreFindEP>
 800f310:	4603      	mov	r3, r0
 800f312:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f314:	7b7b      	ldrb	r3, [r7, #13]
 800f316:	2bff      	cmp	r3, #255	@ 0xff
 800f318:	d01f      	beq.n	800f35a <USBD_StdEPReq+0x1c6>
 800f31a:	7b7b      	ldrb	r3, [r7, #13]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d11c      	bne.n	800f35a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f320:	7b7a      	ldrb	r2, [r7, #13]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f328:	7b7a      	ldrb	r2, [r7, #13]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	32ae      	adds	r2, #174	@ 0xae
 800f32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d010      	beq.n	800f35a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f338:	7b7a      	ldrb	r2, [r7, #13]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	32ae      	adds	r2, #174	@ 0xae
 800f33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	6839      	ldr	r1, [r7, #0]
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	4798      	blx	r3
 800f34a:	4603      	mov	r3, r0
 800f34c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f34e:	e004      	b.n	800f35a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f350:	6839      	ldr	r1, [r7, #0]
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 fc05 	bl	800fb62 <USBD_CtlError>
              break;
 800f358:	e000      	b.n	800f35c <USBD_StdEPReq+0x1c8>
              break;
 800f35a:	bf00      	nop
          }
          break;
 800f35c:	e0ad      	b.n	800f4ba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b02      	cmp	r3, #2
 800f368:	d002      	beq.n	800f370 <USBD_StdEPReq+0x1dc>
 800f36a:	2b03      	cmp	r3, #3
 800f36c:	d033      	beq.n	800f3d6 <USBD_StdEPReq+0x242>
 800f36e:	e099      	b.n	800f4a4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f370:	7bbb      	ldrb	r3, [r7, #14]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d007      	beq.n	800f386 <USBD_StdEPReq+0x1f2>
 800f376:	7bbb      	ldrb	r3, [r7, #14]
 800f378:	2b80      	cmp	r3, #128	@ 0x80
 800f37a:	d004      	beq.n	800f386 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f37c:	6839      	ldr	r1, [r7, #0]
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 fbef 	bl	800fb62 <USBD_CtlError>
                break;
 800f384:	e093      	b.n	800f4ae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	da0b      	bge.n	800f3a6 <USBD_StdEPReq+0x212>
 800f38e:	7bbb      	ldrb	r3, [r7, #14]
 800f390:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f394:	4613      	mov	r3, r2
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4413      	add	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	3310      	adds	r3, #16
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	e00b      	b.n	800f3be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3a6:	7bbb      	ldrb	r3, [r7, #14]
 800f3a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	4413      	add	r3, r2
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	3304      	adds	r3, #4
 800f3be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	330e      	adds	r3, #14
 800f3ca:	2202      	movs	r2, #2
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 fc44 	bl	800fc5c <USBD_CtlSendData>
              break;
 800f3d4:	e06b      	b.n	800f4ae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f3d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	da11      	bge.n	800f402 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f3de:	7bbb      	ldrb	r3, [r7, #14]
 800f3e0:	f003 020f 	and.w	r2, r3, #15
 800f3e4:	6879      	ldr	r1, [r7, #4]
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	4413      	add	r3, r2
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	440b      	add	r3, r1
 800f3f0:	3323      	adds	r3, #35	@ 0x23
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d117      	bne.n	800f428 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 fbb1 	bl	800fb62 <USBD_CtlError>
                  break;
 800f400:	e055      	b.n	800f4ae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f402:	7bbb      	ldrb	r3, [r7, #14]
 800f404:	f003 020f 	and.w	r2, r3, #15
 800f408:	6879      	ldr	r1, [r7, #4]
 800f40a:	4613      	mov	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	440b      	add	r3, r1
 800f414:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d104      	bne.n	800f428 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800f41e:	6839      	ldr	r1, [r7, #0]
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 fb9e 	bl	800fb62 <USBD_CtlError>
                  break;
 800f426:	e042      	b.n	800f4ae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	da0b      	bge.n	800f448 <USBD_StdEPReq+0x2b4>
 800f430:	7bbb      	ldrb	r3, [r7, #14]
 800f432:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f436:	4613      	mov	r3, r2
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	4413      	add	r3, r2
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	3310      	adds	r3, #16
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	4413      	add	r3, r2
 800f444:	3304      	adds	r3, #4
 800f446:	e00b      	b.n	800f460 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f448:	7bbb      	ldrb	r3, [r7, #14]
 800f44a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f44e:	4613      	mov	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f45a:	687a      	ldr	r2, [r7, #4]
 800f45c:	4413      	add	r3, r2
 800f45e:	3304      	adds	r3, #4
 800f460:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f462:	7bbb      	ldrb	r3, [r7, #14]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d002      	beq.n	800f46e <USBD_StdEPReq+0x2da>
 800f468:	7bbb      	ldrb	r3, [r7, #14]
 800f46a:	2b80      	cmp	r3, #128	@ 0x80
 800f46c:	d103      	bne.n	800f476 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	2200      	movs	r2, #0
 800f472:	739a      	strb	r2, [r3, #14]
 800f474:	e00e      	b.n	800f494 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f476:	7bbb      	ldrb	r3, [r7, #14]
 800f478:	4619      	mov	r1, r3
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f001 f8ac 	bl	80105d8 <USBD_LL_IsStallEP>
 800f480:	4603      	mov	r3, r0
 800f482:	2b00      	cmp	r3, #0
 800f484:	d003      	beq.n	800f48e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	2201      	movs	r2, #1
 800f48a:	739a      	strb	r2, [r3, #14]
 800f48c:	e002      	b.n	800f494 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	2200      	movs	r2, #0
 800f492:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	330e      	adds	r3, #14
 800f498:	2202      	movs	r2, #2
 800f49a:	4619      	mov	r1, r3
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 fbdd 	bl	800fc5c <USBD_CtlSendData>
              break;
 800f4a2:	e004      	b.n	800f4ae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 fb5b 	bl	800fb62 <USBD_CtlError>
              break;
 800f4ac:	bf00      	nop
          }
          break;
 800f4ae:	e004      	b.n	800f4ba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 fb55 	bl	800fb62 <USBD_CtlError>
          break;
 800f4b8:	bf00      	nop
      }
      break;
 800f4ba:	e005      	b.n	800f4c8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800f4bc:	6839      	ldr	r1, [r7, #0]
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 fb4f 	bl	800fb62 <USBD_CtlError>
      break;
 800f4c4:	e000      	b.n	800f4c8 <USBD_StdEPReq+0x334>
      break;
 800f4c6:	bf00      	nop
  }

  return ret;
 800f4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
	...

0800f4d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	885b      	ldrh	r3, [r3, #2]
 800f4ee:	0a1b      	lsrs	r3, r3, #8
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	2b06      	cmp	r3, #6
 800f4f6:	f200 8128 	bhi.w	800f74a <USBD_GetDescriptor+0x276>
 800f4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f500 <USBD_GetDescriptor+0x2c>)
 800f4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f500:	0800f51d 	.word	0x0800f51d
 800f504:	0800f535 	.word	0x0800f535
 800f508:	0800f575 	.word	0x0800f575
 800f50c:	0800f74b 	.word	0x0800f74b
 800f510:	0800f74b 	.word	0x0800f74b
 800f514:	0800f6eb 	.word	0x0800f6eb
 800f518:	0800f717 	.word	0x0800f717
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	7c12      	ldrb	r2, [r2, #16]
 800f528:	f107 0108 	add.w	r1, r7, #8
 800f52c:	4610      	mov	r0, r2
 800f52e:	4798      	blx	r3
 800f530:	60f8      	str	r0, [r7, #12]
      break;
 800f532:	e112      	b.n	800f75a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	7c1b      	ldrb	r3, [r3, #16]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10d      	bne.n	800f558 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f544:	f107 0208 	add.w	r2, r7, #8
 800f548:	4610      	mov	r0, r2
 800f54a:	4798      	blx	r3
 800f54c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	3301      	adds	r3, #1
 800f552:	2202      	movs	r2, #2
 800f554:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f556:	e100      	b.n	800f75a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f560:	f107 0208 	add.w	r2, r7, #8
 800f564:	4610      	mov	r0, r2
 800f566:	4798      	blx	r3
 800f568:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	3301      	adds	r3, #1
 800f56e:	2202      	movs	r2, #2
 800f570:	701a      	strb	r2, [r3, #0]
      break;
 800f572:	e0f2      	b.n	800f75a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	885b      	ldrh	r3, [r3, #2]
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	2b05      	cmp	r3, #5
 800f57c:	f200 80ac 	bhi.w	800f6d8 <USBD_GetDescriptor+0x204>
 800f580:	a201      	add	r2, pc, #4	@ (adr r2, 800f588 <USBD_GetDescriptor+0xb4>)
 800f582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f586:	bf00      	nop
 800f588:	0800f5a1 	.word	0x0800f5a1
 800f58c:	0800f5d5 	.word	0x0800f5d5
 800f590:	0800f609 	.word	0x0800f609
 800f594:	0800f63d 	.word	0x0800f63d
 800f598:	0800f671 	.word	0x0800f671
 800f59c:	0800f6a5 	.word	0x0800f6a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00b      	beq.n	800f5c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	7c12      	ldrb	r2, [r2, #16]
 800f5b8:	f107 0108 	add.w	r1, r7, #8
 800f5bc:	4610      	mov	r0, r2
 800f5be:	4798      	blx	r3
 800f5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5c2:	e091      	b.n	800f6e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 facb 	bl	800fb62 <USBD_CtlError>
            err++;
 800f5cc:	7afb      	ldrb	r3, [r7, #11]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800f5d2:	e089      	b.n	800f6e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00b      	beq.n	800f5f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	7c12      	ldrb	r2, [r2, #16]
 800f5ec:	f107 0108 	add.w	r1, r7, #8
 800f5f0:	4610      	mov	r0, r2
 800f5f2:	4798      	blx	r3
 800f5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5f6:	e077      	b.n	800f6e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5f8:	6839      	ldr	r1, [r7, #0]
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f000 fab1 	bl	800fb62 <USBD_CtlError>
            err++;
 800f600:	7afb      	ldrb	r3, [r7, #11]
 800f602:	3301      	adds	r3, #1
 800f604:	72fb      	strb	r3, [r7, #11]
          break;
 800f606:	e06f      	b.n	800f6e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00b      	beq.n	800f62c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	7c12      	ldrb	r2, [r2, #16]
 800f620:	f107 0108 	add.w	r1, r7, #8
 800f624:	4610      	mov	r0, r2
 800f626:	4798      	blx	r3
 800f628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f62a:	e05d      	b.n	800f6e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f62c:	6839      	ldr	r1, [r7, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 fa97 	bl	800fb62 <USBD_CtlError>
            err++;
 800f634:	7afb      	ldrb	r3, [r7, #11]
 800f636:	3301      	adds	r3, #1
 800f638:	72fb      	strb	r3, [r7, #11]
          break;
 800f63a:	e055      	b.n	800f6e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f642:	691b      	ldr	r3, [r3, #16]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d00b      	beq.n	800f660 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	7c12      	ldrb	r2, [r2, #16]
 800f654:	f107 0108 	add.w	r1, r7, #8
 800f658:	4610      	mov	r0, r2
 800f65a:	4798      	blx	r3
 800f65c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f65e:	e043      	b.n	800f6e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f660:	6839      	ldr	r1, [r7, #0]
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 fa7d 	bl	800fb62 <USBD_CtlError>
            err++;
 800f668:	7afb      	ldrb	r3, [r7, #11]
 800f66a:	3301      	adds	r3, #1
 800f66c:	72fb      	strb	r3, [r7, #11]
          break;
 800f66e:	e03b      	b.n	800f6e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f676:	695b      	ldr	r3, [r3, #20]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00b      	beq.n	800f694 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f682:	695b      	ldr	r3, [r3, #20]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	7c12      	ldrb	r2, [r2, #16]
 800f688:	f107 0108 	add.w	r1, r7, #8
 800f68c:	4610      	mov	r0, r2
 800f68e:	4798      	blx	r3
 800f690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f692:	e029      	b.n	800f6e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 fa63 	bl	800fb62 <USBD_CtlError>
            err++;
 800f69c:	7afb      	ldrb	r3, [r7, #11]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	72fb      	strb	r3, [r7, #11]
          break;
 800f6a2:	e021      	b.n	800f6e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6aa:	699b      	ldr	r3, [r3, #24]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d00b      	beq.n	800f6c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6b6:	699b      	ldr	r3, [r3, #24]
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	7c12      	ldrb	r2, [r2, #16]
 800f6bc:	f107 0108 	add.w	r1, r7, #8
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	4798      	blx	r3
 800f6c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6c6:	e00f      	b.n	800f6e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f000 fa49 	bl	800fb62 <USBD_CtlError>
            err++;
 800f6d0:	7afb      	ldrb	r3, [r7, #11]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	72fb      	strb	r3, [r7, #11]
          break;
 800f6d6:	e007      	b.n	800f6e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f6d8:	6839      	ldr	r1, [r7, #0]
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fa41 	bl	800fb62 <USBD_CtlError>
          err++;
 800f6e0:	7afb      	ldrb	r3, [r7, #11]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f6e6:	bf00      	nop
      }
      break;
 800f6e8:	e037      	b.n	800f75a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	7c1b      	ldrb	r3, [r3, #16]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d109      	bne.n	800f706 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6fa:	f107 0208 	add.w	r2, r7, #8
 800f6fe:	4610      	mov	r0, r2
 800f700:	4798      	blx	r3
 800f702:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f704:	e029      	b.n	800f75a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f706:	6839      	ldr	r1, [r7, #0]
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 fa2a 	bl	800fb62 <USBD_CtlError>
        err++;
 800f70e:	7afb      	ldrb	r3, [r7, #11]
 800f710:	3301      	adds	r3, #1
 800f712:	72fb      	strb	r3, [r7, #11]
      break;
 800f714:	e021      	b.n	800f75a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	7c1b      	ldrb	r3, [r3, #16]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d10d      	bne.n	800f73a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f726:	f107 0208 	add.w	r2, r7, #8
 800f72a:	4610      	mov	r0, r2
 800f72c:	4798      	blx	r3
 800f72e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	3301      	adds	r3, #1
 800f734:	2207      	movs	r2, #7
 800f736:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f738:	e00f      	b.n	800f75a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f73a:	6839      	ldr	r1, [r7, #0]
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f000 fa10 	bl	800fb62 <USBD_CtlError>
        err++;
 800f742:	7afb      	ldrb	r3, [r7, #11]
 800f744:	3301      	adds	r3, #1
 800f746:	72fb      	strb	r3, [r7, #11]
      break;
 800f748:	e007      	b.n	800f75a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f74a:	6839      	ldr	r1, [r7, #0]
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 fa08 	bl	800fb62 <USBD_CtlError>
      err++;
 800f752:	7afb      	ldrb	r3, [r7, #11]
 800f754:	3301      	adds	r3, #1
 800f756:	72fb      	strb	r3, [r7, #11]
      break;
 800f758:	bf00      	nop
  }

  if (err != 0U)
 800f75a:	7afb      	ldrb	r3, [r7, #11]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d11e      	bne.n	800f79e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	88db      	ldrh	r3, [r3, #6]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d016      	beq.n	800f796 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f768:	893b      	ldrh	r3, [r7, #8]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d00e      	beq.n	800f78c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	88da      	ldrh	r2, [r3, #6]
 800f772:	893b      	ldrh	r3, [r7, #8]
 800f774:	4293      	cmp	r3, r2
 800f776:	bf28      	it	cs
 800f778:	4613      	movcs	r3, r2
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f77e:	893b      	ldrh	r3, [r7, #8]
 800f780:	461a      	mov	r2, r3
 800f782:	68f9      	ldr	r1, [r7, #12]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 fa69 	bl	800fc5c <USBD_CtlSendData>
 800f78a:	e009      	b.n	800f7a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f78c:	6839      	ldr	r1, [r7, #0]
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 f9e7 	bl	800fb62 <USBD_CtlError>
 800f794:	e004      	b.n	800f7a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 fac1 	bl	800fd1e <USBD_CtlSendStatus>
 800f79c:	e000      	b.n	800f7a0 <USBD_GetDescriptor+0x2cc>
    return;
 800f79e:	bf00      	nop
  }
}
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop

0800f7a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	889b      	ldrh	r3, [r3, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d131      	bne.n	800f81e <USBD_SetAddress+0x76>
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	88db      	ldrh	r3, [r3, #6]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d12d      	bne.n	800f81e <USBD_SetAddress+0x76>
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	885b      	ldrh	r3, [r3, #2]
 800f7c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f7c8:	d829      	bhi.n	800f81e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	885b      	ldrh	r3, [r3, #2]
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	2b03      	cmp	r3, #3
 800f7e0:	d104      	bne.n	800f7ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f7e2:	6839      	ldr	r1, [r7, #0]
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 f9bc 	bl	800fb62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7ea:	e01d      	b.n	800f828 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	7bfa      	ldrb	r2, [r7, #15]
 800f7f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 ff19 	bl	8010630 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 fa8d 	bl	800fd1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f804:	7bfb      	ldrb	r3, [r7, #15]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d004      	beq.n	800f814 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2202      	movs	r2, #2
 800f80e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f812:	e009      	b.n	800f828 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f81c:	e004      	b.n	800f828 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f81e:	6839      	ldr	r1, [r7, #0]
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f000 f99e 	bl	800fb62 <USBD_CtlError>
  }
}
 800f826:	bf00      	nop
 800f828:	bf00      	nop
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f83a:	2300      	movs	r3, #0
 800f83c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	885b      	ldrh	r3, [r3, #2]
 800f842:	b2da      	uxtb	r2, r3
 800f844:	4b4e      	ldr	r3, [pc, #312]	@ (800f980 <USBD_SetConfig+0x150>)
 800f846:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f848:	4b4d      	ldr	r3, [pc, #308]	@ (800f980 <USBD_SetConfig+0x150>)
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d905      	bls.n	800f85c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 f985 	bl	800fb62 <USBD_CtlError>
    return USBD_FAIL;
 800f858:	2303      	movs	r3, #3
 800f85a:	e08c      	b.n	800f976 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f862:	b2db      	uxtb	r3, r3
 800f864:	2b02      	cmp	r3, #2
 800f866:	d002      	beq.n	800f86e <USBD_SetConfig+0x3e>
 800f868:	2b03      	cmp	r3, #3
 800f86a:	d029      	beq.n	800f8c0 <USBD_SetConfig+0x90>
 800f86c:	e075      	b.n	800f95a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f86e:	4b44      	ldr	r3, [pc, #272]	@ (800f980 <USBD_SetConfig+0x150>)
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d020      	beq.n	800f8b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f876:	4b42      	ldr	r3, [pc, #264]	@ (800f980 <USBD_SetConfig+0x150>)
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	461a      	mov	r2, r3
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f880:	4b3f      	ldr	r3, [pc, #252]	@ (800f980 <USBD_SetConfig+0x150>)
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	4619      	mov	r1, r3
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7fe ffcd 	bl	800e826 <USBD_SetClassConfig>
 800f88c:	4603      	mov	r3, r0
 800f88e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f890:	7bfb      	ldrb	r3, [r7, #15]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d008      	beq.n	800f8a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f896:	6839      	ldr	r1, [r7, #0]
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f962 	bl	800fb62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2202      	movs	r2, #2
 800f8a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f8a6:	e065      	b.n	800f974 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fa38 	bl	800fd1e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2203      	movs	r2, #3
 800f8b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f8b6:	e05d      	b.n	800f974 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 fa30 	bl	800fd1e <USBD_CtlSendStatus>
      break;
 800f8be:	e059      	b.n	800f974 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f8c0:	4b2f      	ldr	r3, [pc, #188]	@ (800f980 <USBD_SetConfig+0x150>)
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d112      	bne.n	800f8ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f8d0:	4b2b      	ldr	r3, [pc, #172]	@ (800f980 <USBD_SetConfig+0x150>)
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f8da:	4b29      	ldr	r3, [pc, #164]	@ (800f980 <USBD_SetConfig+0x150>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7fe ffbc 	bl	800e85e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 fa19 	bl	800fd1e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f8ec:	e042      	b.n	800f974 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f8ee:	4b24      	ldr	r3, [pc, #144]	@ (800f980 <USBD_SetConfig+0x150>)
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d02a      	beq.n	800f952 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	b2db      	uxtb	r3, r3
 800f902:	4619      	mov	r1, r3
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7fe ffaa 	bl	800e85e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f90a:	4b1d      	ldr	r3, [pc, #116]	@ (800f980 <USBD_SetConfig+0x150>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	461a      	mov	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f914:	4b1a      	ldr	r3, [pc, #104]	@ (800f980 <USBD_SetConfig+0x150>)
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	4619      	mov	r1, r3
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7fe ff83 	bl	800e826 <USBD_SetClassConfig>
 800f920:	4603      	mov	r3, r0
 800f922:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f924:	7bfb      	ldrb	r3, [r7, #15]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00f      	beq.n	800f94a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f92a:	6839      	ldr	r1, [r7, #0]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 f918 	bl	800fb62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	b2db      	uxtb	r3, r3
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7fe ff8f 	bl	800e85e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2202      	movs	r2, #2
 800f944:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f948:	e014      	b.n	800f974 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f9e7 	bl	800fd1e <USBD_CtlSendStatus>
      break;
 800f950:	e010      	b.n	800f974 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f9e3 	bl	800fd1e <USBD_CtlSendStatus>
      break;
 800f958:	e00c      	b.n	800f974 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f95a:	6839      	ldr	r1, [r7, #0]
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 f900 	bl	800fb62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f962:	4b07      	ldr	r3, [pc, #28]	@ (800f980 <USBD_SetConfig+0x150>)
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	4619      	mov	r1, r3
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f7fe ff78 	bl	800e85e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f96e:	2303      	movs	r3, #3
 800f970:	73fb      	strb	r3, [r7, #15]
      break;
 800f972:	bf00      	nop
  }

  return ret;
 800f974:	7bfb      	ldrb	r3, [r7, #15]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	2000db64 	.word	0x2000db64

0800f984 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	88db      	ldrh	r3, [r3, #6]
 800f992:	2b01      	cmp	r3, #1
 800f994:	d004      	beq.n	800f9a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f996:	6839      	ldr	r1, [r7, #0]
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 f8e2 	bl	800fb62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f99e:	e023      	b.n	800f9e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	2b02      	cmp	r3, #2
 800f9aa:	dc02      	bgt.n	800f9b2 <USBD_GetConfig+0x2e>
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	dc03      	bgt.n	800f9b8 <USBD_GetConfig+0x34>
 800f9b0:	e015      	b.n	800f9de <USBD_GetConfig+0x5a>
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	d00b      	beq.n	800f9ce <USBD_GetConfig+0x4a>
 800f9b6:	e012      	b.n	800f9de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	3308      	adds	r3, #8
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f948 	bl	800fc5c <USBD_CtlSendData>
        break;
 800f9cc:	e00c      	b.n	800f9e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	3304      	adds	r3, #4
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 f940 	bl	800fc5c <USBD_CtlSendData>
        break;
 800f9dc:	e004      	b.n	800f9e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f9de:	6839      	ldr	r1, [r7, #0]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f000 f8be 	bl	800fb62 <USBD_CtlError>
        break;
 800f9e6:	bf00      	nop
}
 800f9e8:	bf00      	nop
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	3b01      	subs	r3, #1
 800fa04:	2b02      	cmp	r3, #2
 800fa06:	d81e      	bhi.n	800fa46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	88db      	ldrh	r3, [r3, #6]
 800fa0c:	2b02      	cmp	r3, #2
 800fa0e:	d004      	beq.n	800fa1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 f8a5 	bl	800fb62 <USBD_CtlError>
        break;
 800fa18:	e01a      	b.n	800fa50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d005      	beq.n	800fa36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	f043 0202 	orr.w	r2, r3, #2
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	330c      	adds	r3, #12
 800fa3a:	2202      	movs	r2, #2
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f000 f90c 	bl	800fc5c <USBD_CtlSendData>
      break;
 800fa44:	e004      	b.n	800fa50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fa46:	6839      	ldr	r1, [r7, #0]
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 f88a 	bl	800fb62 <USBD_CtlError>
      break;
 800fa4e:	bf00      	nop
  }
}
 800fa50:	bf00      	nop
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	885b      	ldrh	r3, [r3, #2]
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d107      	bne.n	800fa7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 f953 	bl	800fd1e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fa78:	e013      	b.n	800faa2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	885b      	ldrh	r3, [r3, #2]
 800fa7e:	2b02      	cmp	r3, #2
 800fa80:	d10b      	bne.n	800fa9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	889b      	ldrh	r3, [r3, #4]
 800fa86:	0a1b      	lsrs	r3, r3, #8
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f000 f943 	bl	800fd1e <USBD_CtlSendStatus>
}
 800fa98:	e003      	b.n	800faa2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fa9a:	6839      	ldr	r1, [r7, #0]
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f000 f860 	bl	800fb62 <USBD_CtlError>
}
 800faa2:	bf00      	nop
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b082      	sub	sp, #8
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
 800fab2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	3b01      	subs	r3, #1
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d80b      	bhi.n	800fada <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	885b      	ldrh	r3, [r3, #2]
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d10c      	bne.n	800fae4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 f923 	bl	800fd1e <USBD_CtlSendStatus>
      }
      break;
 800fad8:	e004      	b.n	800fae4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 f840 	bl	800fb62 <USBD_CtlError>
      break;
 800fae2:	e000      	b.n	800fae6 <USBD_ClrFeature+0x3c>
      break;
 800fae4:	bf00      	nop
  }
}
 800fae6:	bf00      	nop
 800fae8:	3708      	adds	r7, #8
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b084      	sub	sp, #16
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
 800faf6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	781a      	ldrb	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	3301      	adds	r3, #1
 800fb08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	781a      	ldrb	r2, [r3, #0]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	3301      	adds	r3, #1
 800fb16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f7ff fa3d 	bl	800ef98 <SWAPBYTE>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	461a      	mov	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f7ff fa30 	bl	800ef98 <SWAPBYTE>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	3301      	adds	r3, #1
 800fb44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f7ff fa23 	bl	800ef98 <SWAPBYTE>
 800fb52:	4603      	mov	r3, r0
 800fb54:	461a      	mov	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	80da      	strh	r2, [r3, #6]
}
 800fb5a:	bf00      	nop
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b082      	sub	sp, #8
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
 800fb6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb6c:	2180      	movs	r1, #128	@ 0x80
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fcf4 	bl	801055c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fb74:	2100      	movs	r1, #0
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 fcf0 	bl	801055c <USBD_LL_StallEP>
}
 800fb7c:	bf00      	nop
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fb90:	2300      	movs	r3, #0
 800fb92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d042      	beq.n	800fc20 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800fb9e:	6938      	ldr	r0, [r7, #16]
 800fba0:	f000 f842 	bl	800fc28 <USBD_GetLen>
 800fba4:	4603      	mov	r3, r0
 800fba6:	3301      	adds	r3, #1
 800fba8:	005b      	lsls	r3, r3, #1
 800fbaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbae:	d808      	bhi.n	800fbc2 <USBD_GetString+0x3e>
 800fbb0:	6938      	ldr	r0, [r7, #16]
 800fbb2:	f000 f839 	bl	800fc28 <USBD_GetLen>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	3301      	adds	r3, #1
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	005b      	lsls	r3, r3, #1
 800fbbe:	b29a      	uxth	r2, r3
 800fbc0:	e001      	b.n	800fbc6 <USBD_GetString+0x42>
 800fbc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fbca:	7dfb      	ldrb	r3, [r7, #23]
 800fbcc:	68ba      	ldr	r2, [r7, #8]
 800fbce:	4413      	add	r3, r2
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	7812      	ldrb	r2, [r2, #0]
 800fbd4:	701a      	strb	r2, [r3, #0]
  idx++;
 800fbd6:	7dfb      	ldrb	r3, [r7, #23]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fbdc:	7dfb      	ldrb	r3, [r7, #23]
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	4413      	add	r3, r2
 800fbe2:	2203      	movs	r2, #3
 800fbe4:	701a      	strb	r2, [r3, #0]
  idx++;
 800fbe6:	7dfb      	ldrb	r3, [r7, #23]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fbec:	e013      	b.n	800fc16 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800fbee:	7dfb      	ldrb	r3, [r7, #23]
 800fbf0:	68ba      	ldr	r2, [r7, #8]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	693a      	ldr	r2, [r7, #16]
 800fbf6:	7812      	ldrb	r2, [r2, #0]
 800fbf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	613b      	str	r3, [r7, #16]
    idx++;
 800fc00:	7dfb      	ldrb	r3, [r7, #23]
 800fc02:	3301      	adds	r3, #1
 800fc04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc06:	7dfb      	ldrb	r3, [r7, #23]
 800fc08:	68ba      	ldr	r2, [r7, #8]
 800fc0a:	4413      	add	r3, r2
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc10:	7dfb      	ldrb	r3, [r7, #23]
 800fc12:	3301      	adds	r3, #1
 800fc14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d1e7      	bne.n	800fbee <USBD_GetString+0x6a>
 800fc1e:	e000      	b.n	800fc22 <USBD_GetString+0x9e>
    return;
 800fc20:	bf00      	nop
  }
}
 800fc22:	3718      	adds	r7, #24
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc30:	2300      	movs	r3, #0
 800fc32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc38:	e005      	b.n	800fc46 <USBD_GetLen+0x1e>
  {
    len++;
 800fc3a:	7bfb      	ldrb	r3, [r7, #15]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	3301      	adds	r3, #1
 800fc44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d1f5      	bne.n	800fc3a <USBD_GetLen+0x12>
  }

  return len;
 800fc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	60f8      	str	r0, [r7, #12]
 800fc64:	60b9      	str	r1, [r7, #8]
 800fc66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2202      	movs	r2, #2
 800fc6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	68ba      	ldr	r2, [r7, #8]
 800fc7a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	68ba      	ldr	r2, [r7, #8]
 800fc86:	2100      	movs	r1, #0
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	f000 fcf0 	bl	801066e <USBD_LL_Transmit>

  return USBD_OK;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	68ba      	ldr	r2, [r7, #8]
 800fca8:	2100      	movs	r1, #0
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f000 fcdf 	bl	801066e <USBD_LL_Transmit>

  return USBD_OK;
 800fcb0:	2300      	movs	r3, #0
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b084      	sub	sp, #16
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	60f8      	str	r0, [r7, #12]
 800fcc2:	60b9      	str	r1, [r7, #8]
 800fcc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2203      	movs	r2, #3
 800fcca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	2100      	movs	r1, #0
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f000 fcdf 	bl	80106b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fcf2:	2300      	movs	r3, #0
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	68ba      	ldr	r2, [r7, #8]
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	f000 fcce 	bl	80106b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3710      	adds	r7, #16
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b082      	sub	sp, #8
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2204      	movs	r2, #4
 800fd2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd2e:	2300      	movs	r3, #0
 800fd30:	2200      	movs	r2, #0
 800fd32:	2100      	movs	r1, #0
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f000 fc9a 	bl	801066e <USBD_LL_Transmit>

  return USBD_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2205      	movs	r2, #5
 800fd50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd54:	2300      	movs	r3, #0
 800fd56:	2200      	movs	r2, #0
 800fd58:	2100      	movs	r1, #0
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 fca8 	bl	80106b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
	...

0800fd6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fd70:	2200      	movs	r2, #0
 800fd72:	4912      	ldr	r1, [pc, #72]	@ (800fdbc <MX_USB_DEVICE_Init+0x50>)
 800fd74:	4812      	ldr	r0, [pc, #72]	@ (800fdc0 <MX_USB_DEVICE_Init+0x54>)
 800fd76:	f7fe fcd9 	bl	800e72c <USBD_Init>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d001      	beq.n	800fd84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fd80:	f7f1 fe90 	bl	8001aa4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fd84:	490f      	ldr	r1, [pc, #60]	@ (800fdc4 <MX_USB_DEVICE_Init+0x58>)
 800fd86:	480e      	ldr	r0, [pc, #56]	@ (800fdc0 <MX_USB_DEVICE_Init+0x54>)
 800fd88:	f7fe fd00 	bl	800e78c <USBD_RegisterClass>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fd92:	f7f1 fe87 	bl	8001aa4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fd96:	490c      	ldr	r1, [pc, #48]	@ (800fdc8 <MX_USB_DEVICE_Init+0x5c>)
 800fd98:	4809      	ldr	r0, [pc, #36]	@ (800fdc0 <MX_USB_DEVICE_Init+0x54>)
 800fd9a:	f7fe fbf7 	bl	800e58c <USBD_CDC_RegisterInterface>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d001      	beq.n	800fda8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fda4:	f7f1 fe7e 	bl	8001aa4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fda8:	4805      	ldr	r0, [pc, #20]	@ (800fdc0 <MX_USB_DEVICE_Init+0x54>)
 800fdaa:	f7fe fd25 	bl	800e7f8 <USBD_Start>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d001      	beq.n	800fdb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fdb4:	f7f1 fe76 	bl	8001aa4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fdb8:	bf00      	nop
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	200000b0 	.word	0x200000b0
 800fdc0:	2000db68 	.word	0x2000db68
 800fdc4:	2000001c 	.word	0x2000001c
 800fdc8:	2000009c 	.word	0x2000009c

0800fdcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	4905      	ldr	r1, [pc, #20]	@ (800fde8 <CDC_Init_FS+0x1c>)
 800fdd4:	4805      	ldr	r0, [pc, #20]	@ (800fdec <CDC_Init_FS+0x20>)
 800fdd6:	f7fe fbf3 	bl	800e5c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fdda:	4905      	ldr	r1, [pc, #20]	@ (800fdf0 <CDC_Init_FS+0x24>)
 800fddc:	4803      	ldr	r0, [pc, #12]	@ (800fdec <CDC_Init_FS+0x20>)
 800fdde:	f7fe fc11 	bl	800e604 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fde2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	2000e644 	.word	0x2000e644
 800fdec:	2000db68 	.word	0x2000db68
 800fdf0:	2000de44 	.word	0x2000de44

0800fdf4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fdf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	6039      	str	r1, [r7, #0]
 800fe0e:	71fb      	strb	r3, [r7, #7]
 800fe10:	4613      	mov	r3, r2
 800fe12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe14:	79fb      	ldrb	r3, [r7, #7]
 800fe16:	2b23      	cmp	r3, #35	@ 0x23
 800fe18:	d84a      	bhi.n	800feb0 <CDC_Control_FS+0xac>
 800fe1a:	a201      	add	r2, pc, #4	@ (adr r2, 800fe20 <CDC_Control_FS+0x1c>)
 800fe1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe20:	0800feb1 	.word	0x0800feb1
 800fe24:	0800feb1 	.word	0x0800feb1
 800fe28:	0800feb1 	.word	0x0800feb1
 800fe2c:	0800feb1 	.word	0x0800feb1
 800fe30:	0800feb1 	.word	0x0800feb1
 800fe34:	0800feb1 	.word	0x0800feb1
 800fe38:	0800feb1 	.word	0x0800feb1
 800fe3c:	0800feb1 	.word	0x0800feb1
 800fe40:	0800feb1 	.word	0x0800feb1
 800fe44:	0800feb1 	.word	0x0800feb1
 800fe48:	0800feb1 	.word	0x0800feb1
 800fe4c:	0800feb1 	.word	0x0800feb1
 800fe50:	0800feb1 	.word	0x0800feb1
 800fe54:	0800feb1 	.word	0x0800feb1
 800fe58:	0800feb1 	.word	0x0800feb1
 800fe5c:	0800feb1 	.word	0x0800feb1
 800fe60:	0800feb1 	.word	0x0800feb1
 800fe64:	0800feb1 	.word	0x0800feb1
 800fe68:	0800feb1 	.word	0x0800feb1
 800fe6c:	0800feb1 	.word	0x0800feb1
 800fe70:	0800feb1 	.word	0x0800feb1
 800fe74:	0800feb1 	.word	0x0800feb1
 800fe78:	0800feb1 	.word	0x0800feb1
 800fe7c:	0800feb1 	.word	0x0800feb1
 800fe80:	0800feb1 	.word	0x0800feb1
 800fe84:	0800feb1 	.word	0x0800feb1
 800fe88:	0800feb1 	.word	0x0800feb1
 800fe8c:	0800feb1 	.word	0x0800feb1
 800fe90:	0800feb1 	.word	0x0800feb1
 800fe94:	0800feb1 	.word	0x0800feb1
 800fe98:	0800feb1 	.word	0x0800feb1
 800fe9c:	0800feb1 	.word	0x0800feb1
 800fea0:	0800feb1 	.word	0x0800feb1
 800fea4:	0800feb1 	.word	0x0800feb1
 800fea8:	0800feb1 	.word	0x0800feb1
 800feac:	0800feb1 	.word	0x0800feb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800feb0:	bf00      	nop
  }

  return (USBD_OK);
 800feb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800feca:	6879      	ldr	r1, [r7, #4]
 800fecc:	4805      	ldr	r0, [pc, #20]	@ (800fee4 <CDC_Receive_FS+0x24>)
 800fece:	f7fe fb99 	bl	800e604 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fed2:	4804      	ldr	r0, [pc, #16]	@ (800fee4 <CDC_Receive_FS+0x24>)
 800fed4:	f7fe fbf4 	bl	800e6c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fed8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	2000db68 	.word	0x2000db68

0800fee8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	460b      	mov	r3, r1
 800fef2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fef4:	2300      	movs	r3, #0
 800fef6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fef8:	4b0d      	ldr	r3, [pc, #52]	@ (800ff30 <CDC_Transmit_FS+0x48>)
 800fefa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fefe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d001      	beq.n	800ff0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e00b      	b.n	800ff26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ff0e:	887b      	ldrh	r3, [r7, #2]
 800ff10:	461a      	mov	r2, r3
 800ff12:	6879      	ldr	r1, [r7, #4]
 800ff14:	4806      	ldr	r0, [pc, #24]	@ (800ff30 <CDC_Transmit_FS+0x48>)
 800ff16:	f7fe fb53 	bl	800e5c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ff1a:	4805      	ldr	r0, [pc, #20]	@ (800ff30 <CDC_Transmit_FS+0x48>)
 800ff1c:	f7fe fb90 	bl	800e640 <USBD_CDC_TransmitPacket>
 800ff20:	4603      	mov	r3, r0
 800ff22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ff24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3710      	adds	r7, #16
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	2000db68 	.word	0x2000db68

0800ff34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b087      	sub	sp, #28
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	4613      	mov	r3, r2
 800ff40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff42:	2300      	movs	r3, #0
 800ff44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	371c      	adds	r7, #28
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr
	...

0800ff58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	4603      	mov	r3, r0
 800ff60:	6039      	str	r1, [r7, #0]
 800ff62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	2212      	movs	r2, #18
 800ff68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ff6a:	4b03      	ldr	r3, [pc, #12]	@ (800ff78 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr
 800ff78:	200000cc 	.word	0x200000cc

0800ff7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	4603      	mov	r3, r0
 800ff84:	6039      	str	r1, [r7, #0]
 800ff86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	2204      	movs	r2, #4
 800ff8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff8e:	4b03      	ldr	r3, [pc, #12]	@ (800ff9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	370c      	adds	r7, #12
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr
 800ff9c:	200000e0 	.word	0x200000e0

0800ffa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	6039      	str	r1, [r7, #0]
 800ffaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffac:	79fb      	ldrb	r3, [r7, #7]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d105      	bne.n	800ffbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffb2:	683a      	ldr	r2, [r7, #0]
 800ffb4:	4907      	ldr	r1, [pc, #28]	@ (800ffd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffb6:	4808      	ldr	r0, [pc, #32]	@ (800ffd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ffb8:	f7ff fde4 	bl	800fb84 <USBD_GetString>
 800ffbc:	e004      	b.n	800ffc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffbe:	683a      	ldr	r2, [r7, #0]
 800ffc0:	4904      	ldr	r1, [pc, #16]	@ (800ffd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffc2:	4805      	ldr	r0, [pc, #20]	@ (800ffd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ffc4:	f7ff fdde 	bl	800fb84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffc8:	4b02      	ldr	r3, [pc, #8]	@ (800ffd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	2000ee44 	.word	0x2000ee44
 800ffd8:	080134d0 	.word	0x080134d0

0800ffdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	6039      	str	r1, [r7, #0]
 800ffe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ffe8:	683a      	ldr	r2, [r7, #0]
 800ffea:	4904      	ldr	r1, [pc, #16]	@ (800fffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ffec:	4804      	ldr	r0, [pc, #16]	@ (8010000 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ffee:	f7ff fdc9 	bl	800fb84 <USBD_GetString>
  return USBD_StrDesc;
 800fff2:	4b02      	ldr	r3, [pc, #8]	@ (800fffc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	2000ee44 	.word	0x2000ee44
 8010000:	080134e8 	.word	0x080134e8

08010004 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	4603      	mov	r3, r0
 801000c:	6039      	str	r1, [r7, #0]
 801000e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	221a      	movs	r2, #26
 8010014:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010016:	f000 f843 	bl	80100a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801001a:	4b02      	ldr	r3, [pc, #8]	@ (8010024 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801001c:	4618      	mov	r0, r3
 801001e:	3708      	adds	r7, #8
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	200000e4 	.word	0x200000e4

08010028 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	4603      	mov	r3, r0
 8010030:	6039      	str	r1, [r7, #0]
 8010032:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010034:	79fb      	ldrb	r3, [r7, #7]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d105      	bne.n	8010046 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801003a:	683a      	ldr	r2, [r7, #0]
 801003c:	4907      	ldr	r1, [pc, #28]	@ (801005c <USBD_FS_ConfigStrDescriptor+0x34>)
 801003e:	4808      	ldr	r0, [pc, #32]	@ (8010060 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010040:	f7ff fda0 	bl	800fb84 <USBD_GetString>
 8010044:	e004      	b.n	8010050 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010046:	683a      	ldr	r2, [r7, #0]
 8010048:	4904      	ldr	r1, [pc, #16]	@ (801005c <USBD_FS_ConfigStrDescriptor+0x34>)
 801004a:	4805      	ldr	r0, [pc, #20]	@ (8010060 <USBD_FS_ConfigStrDescriptor+0x38>)
 801004c:	f7ff fd9a 	bl	800fb84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010050:	4b02      	ldr	r3, [pc, #8]	@ (801005c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010052:	4618      	mov	r0, r3
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	2000ee44 	.word	0x2000ee44
 8010060:	080134fc 	.word	0x080134fc

08010064 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	4603      	mov	r3, r0
 801006c:	6039      	str	r1, [r7, #0]
 801006e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d105      	bne.n	8010082 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010076:	683a      	ldr	r2, [r7, #0]
 8010078:	4907      	ldr	r1, [pc, #28]	@ (8010098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801007a:	4808      	ldr	r0, [pc, #32]	@ (801009c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801007c:	f7ff fd82 	bl	800fb84 <USBD_GetString>
 8010080:	e004      	b.n	801008c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010082:	683a      	ldr	r2, [r7, #0]
 8010084:	4904      	ldr	r1, [pc, #16]	@ (8010098 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010086:	4805      	ldr	r0, [pc, #20]	@ (801009c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010088:	f7ff fd7c 	bl	800fb84 <USBD_GetString>
  }
  return USBD_StrDesc;
 801008c:	4b02      	ldr	r3, [pc, #8]	@ (8010098 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801008e:	4618      	mov	r0, r3
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	2000ee44 	.word	0x2000ee44
 801009c:	08013508 	.word	0x08013508

080100a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80100a6:	4b0f      	ldr	r3, [pc, #60]	@ (80100e4 <Get_SerialNum+0x44>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80100ac:	4b0e      	ldr	r3, [pc, #56]	@ (80100e8 <Get_SerialNum+0x48>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80100b2:	4b0e      	ldr	r3, [pc, #56]	@ (80100ec <Get_SerialNum+0x4c>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80100b8:	68fa      	ldr	r2, [r7, #12]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4413      	add	r3, r2
 80100be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d009      	beq.n	80100da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80100c6:	2208      	movs	r2, #8
 80100c8:	4909      	ldr	r1, [pc, #36]	@ (80100f0 <Get_SerialNum+0x50>)
 80100ca:	68f8      	ldr	r0, [r7, #12]
 80100cc:	f000 f814 	bl	80100f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80100d0:	2204      	movs	r2, #4
 80100d2:	4908      	ldr	r1, [pc, #32]	@ (80100f4 <Get_SerialNum+0x54>)
 80100d4:	68b8      	ldr	r0, [r7, #8]
 80100d6:	f000 f80f 	bl	80100f8 <IntToUnicode>
  }
}
 80100da:	bf00      	nop
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	1fff7a10 	.word	0x1fff7a10
 80100e8:	1fff7a14 	.word	0x1fff7a14
 80100ec:	1fff7a18 	.word	0x1fff7a18
 80100f0:	200000e6 	.word	0x200000e6
 80100f4:	200000f6 	.word	0x200000f6

080100f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b087      	sub	sp, #28
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	4613      	mov	r3, r2
 8010104:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010106:	2300      	movs	r3, #0
 8010108:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801010a:	2300      	movs	r3, #0
 801010c:	75fb      	strb	r3, [r7, #23]
 801010e:	e027      	b.n	8010160 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	0f1b      	lsrs	r3, r3, #28
 8010114:	2b09      	cmp	r3, #9
 8010116:	d80b      	bhi.n	8010130 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	0f1b      	lsrs	r3, r3, #28
 801011c:	b2da      	uxtb	r2, r3
 801011e:	7dfb      	ldrb	r3, [r7, #23]
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	4619      	mov	r1, r3
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	440b      	add	r3, r1
 8010128:	3230      	adds	r2, #48	@ 0x30
 801012a:	b2d2      	uxtb	r2, r2
 801012c:	701a      	strb	r2, [r3, #0]
 801012e:	e00a      	b.n	8010146 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	0f1b      	lsrs	r3, r3, #28
 8010134:	b2da      	uxtb	r2, r3
 8010136:	7dfb      	ldrb	r3, [r7, #23]
 8010138:	005b      	lsls	r3, r3, #1
 801013a:	4619      	mov	r1, r3
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	440b      	add	r3, r1
 8010140:	3237      	adds	r2, #55	@ 0x37
 8010142:	b2d2      	uxtb	r2, r2
 8010144:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	011b      	lsls	r3, r3, #4
 801014a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801014c:	7dfb      	ldrb	r3, [r7, #23]
 801014e:	005b      	lsls	r3, r3, #1
 8010150:	3301      	adds	r3, #1
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	4413      	add	r3, r2
 8010156:	2200      	movs	r2, #0
 8010158:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801015a:	7dfb      	ldrb	r3, [r7, #23]
 801015c:	3301      	adds	r3, #1
 801015e:	75fb      	strb	r3, [r7, #23]
 8010160:	7dfa      	ldrb	r2, [r7, #23]
 8010162:	79fb      	ldrb	r3, [r7, #7]
 8010164:	429a      	cmp	r2, r3
 8010166:	d3d3      	bcc.n	8010110 <IntToUnicode+0x18>
  }
}
 8010168:	bf00      	nop
 801016a:	bf00      	nop
 801016c:	371c      	adds	r7, #28
 801016e:	46bd      	mov	sp, r7
 8010170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010174:	4770      	bx	lr
	...

08010178 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b08a      	sub	sp, #40	@ 0x28
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010180:	f107 0314 	add.w	r3, r7, #20
 8010184:	2200      	movs	r2, #0
 8010186:	601a      	str	r2, [r3, #0]
 8010188:	605a      	str	r2, [r3, #4]
 801018a:	609a      	str	r2, [r3, #8]
 801018c:	60da      	str	r2, [r3, #12]
 801018e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010198:	d13a      	bne.n	8010210 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801019a:	2300      	movs	r3, #0
 801019c:	613b      	str	r3, [r7, #16]
 801019e:	4b1e      	ldr	r3, [pc, #120]	@ (8010218 <HAL_PCD_MspInit+0xa0>)
 80101a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101a2:	4a1d      	ldr	r2, [pc, #116]	@ (8010218 <HAL_PCD_MspInit+0xa0>)
 80101a4:	f043 0301 	orr.w	r3, r3, #1
 80101a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80101aa:	4b1b      	ldr	r3, [pc, #108]	@ (8010218 <HAL_PCD_MspInit+0xa0>)
 80101ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101ae:	f003 0301 	and.w	r3, r3, #1
 80101b2:	613b      	str	r3, [r7, #16]
 80101b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80101b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80101ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101bc:	2302      	movs	r3, #2
 80101be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101c0:	2300      	movs	r3, #0
 80101c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101c4:	2303      	movs	r3, #3
 80101c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80101c8:	230a      	movs	r3, #10
 80101ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101cc:	f107 0314 	add.w	r3, r7, #20
 80101d0:	4619      	mov	r1, r3
 80101d2:	4812      	ldr	r0, [pc, #72]	@ (801021c <HAL_PCD_MspInit+0xa4>)
 80101d4:	f7f4 fa22 	bl	800461c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80101d8:	4b0f      	ldr	r3, [pc, #60]	@ (8010218 <HAL_PCD_MspInit+0xa0>)
 80101da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101dc:	4a0e      	ldr	r2, [pc, #56]	@ (8010218 <HAL_PCD_MspInit+0xa0>)
 80101de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80101e4:	2300      	movs	r3, #0
 80101e6:	60fb      	str	r3, [r7, #12]
 80101e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010218 <HAL_PCD_MspInit+0xa0>)
 80101ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101ec:	4a0a      	ldr	r2, [pc, #40]	@ (8010218 <HAL_PCD_MspInit+0xa0>)
 80101ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80101f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80101f4:	4b08      	ldr	r3, [pc, #32]	@ (8010218 <HAL_PCD_MspInit+0xa0>)
 80101f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80101fc:	60fb      	str	r3, [r7, #12]
 80101fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010200:	2200      	movs	r2, #0
 8010202:	2105      	movs	r1, #5
 8010204:	2043      	movs	r0, #67	@ 0x43
 8010206:	f7f2 fa10 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801020a:	2043      	movs	r0, #67	@ 0x43
 801020c:	f7f2 fa29 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010210:	bf00      	nop
 8010212:	3728      	adds	r7, #40	@ 0x28
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	40023800 	.word	0x40023800
 801021c:	40020000 	.word	0x40020000

08010220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010234:	4619      	mov	r1, r3
 8010236:	4610      	mov	r0, r2
 8010238:	f7fe fb2b 	bl	800e892 <USBD_LL_SetupStage>
}
 801023c:	bf00      	nop
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	460b      	mov	r3, r1
 801024e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010256:	78fa      	ldrb	r2, [r7, #3]
 8010258:	6879      	ldr	r1, [r7, #4]
 801025a:	4613      	mov	r3, r2
 801025c:	00db      	lsls	r3, r3, #3
 801025e:	4413      	add	r3, r2
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	440b      	add	r3, r1
 8010264:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	78fb      	ldrb	r3, [r7, #3]
 801026c:	4619      	mov	r1, r3
 801026e:	f7fe fb65 	bl	800e93c <USBD_LL_DataOutStage>
}
 8010272:	bf00      	nop
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b082      	sub	sp, #8
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	460b      	mov	r3, r1
 8010284:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801028c:	78fa      	ldrb	r2, [r7, #3]
 801028e:	6879      	ldr	r1, [r7, #4]
 8010290:	4613      	mov	r3, r2
 8010292:	00db      	lsls	r3, r3, #3
 8010294:	4413      	add	r3, r2
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	440b      	add	r3, r1
 801029a:	3320      	adds	r3, #32
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	78fb      	ldrb	r3, [r7, #3]
 80102a0:	4619      	mov	r1, r3
 80102a2:	f7fe fc07 	bl	800eab4 <USBD_LL_DataInStage>
}
 80102a6:	bf00      	nop
 80102a8:	3708      	adds	r7, #8
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b082      	sub	sp, #8
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80102bc:	4618      	mov	r0, r3
 80102be:	f7fe fd4b 	bl	800ed58 <USBD_LL_SOF>
}
 80102c2:	bf00      	nop
 80102c4:	3708      	adds	r7, #8
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b084      	sub	sp, #16
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80102d2:	2301      	movs	r3, #1
 80102d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	79db      	ldrb	r3, [r3, #7]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d102      	bne.n	80102e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80102de:	2300      	movs	r3, #0
 80102e0:	73fb      	strb	r3, [r7, #15]
 80102e2:	e008      	b.n	80102f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	79db      	ldrb	r3, [r3, #7]
 80102e8:	2b02      	cmp	r3, #2
 80102ea:	d102      	bne.n	80102f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80102ec:	2301      	movs	r3, #1
 80102ee:	73fb      	strb	r3, [r7, #15]
 80102f0:	e001      	b.n	80102f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80102f2:	f7f1 fbd7 	bl	8001aa4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80102fc:	7bfa      	ldrb	r2, [r7, #15]
 80102fe:	4611      	mov	r1, r2
 8010300:	4618      	mov	r0, r3
 8010302:	f7fe fce5 	bl	800ecd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801030c:	4618      	mov	r0, r3
 801030e:	f7fe fc8c 	bl	800ec2a <USBD_LL_Reset>
}
 8010312:	bf00      	nop
 8010314:	3710      	adds	r7, #16
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
	...

0801031c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801032a:	4618      	mov	r0, r3
 801032c:	f7fe fce0 	bl	800ecf0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	6812      	ldr	r2, [r2, #0]
 801033e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010342:	f043 0301 	orr.w	r3, r3, #1
 8010346:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	7adb      	ldrb	r3, [r3, #11]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d005      	beq.n	801035c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010350:	4b04      	ldr	r3, [pc, #16]	@ (8010364 <HAL_PCD_SuspendCallback+0x48>)
 8010352:	691b      	ldr	r3, [r3, #16]
 8010354:	4a03      	ldr	r2, [pc, #12]	@ (8010364 <HAL_PCD_SuspendCallback+0x48>)
 8010356:	f043 0306 	orr.w	r3, r3, #6
 801035a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801035c:	bf00      	nop
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}
 8010364:	e000ed00 	.word	0xe000ed00

08010368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010376:	4618      	mov	r0, r3
 8010378:	f7fe fcd6 	bl	800ed28 <USBD_LL_Resume>
}
 801037c:	bf00      	nop
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010396:	78fa      	ldrb	r2, [r7, #3]
 8010398:	4611      	mov	r1, r2
 801039a:	4618      	mov	r0, r3
 801039c:	f7fe fd2e 	bl	800edfc <USBD_LL_IsoOUTIncomplete>
}
 80103a0:	bf00      	nop
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	460b      	mov	r3, r1
 80103b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80103ba:	78fa      	ldrb	r2, [r7, #3]
 80103bc:	4611      	mov	r1, r2
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fe fcea 	bl	800ed98 <USBD_LL_IsoINIncomplete>
}
 80103c4:	bf00      	nop
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fe fd40 	bl	800ee60 <USBD_LL_DevConnected>
}
 80103e0:	bf00      	nop
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fe fd3d 	bl	800ee76 <USBD_LL_DevDisconnected>
}
 80103fc:	bf00      	nop
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d13c      	bne.n	801048e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010414:	4a20      	ldr	r2, [pc, #128]	@ (8010498 <USBD_LL_Init+0x94>)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4a1e      	ldr	r2, [pc, #120]	@ (8010498 <USBD_LL_Init+0x94>)
 8010420:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010424:	4b1c      	ldr	r3, [pc, #112]	@ (8010498 <USBD_LL_Init+0x94>)
 8010426:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801042a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801042c:	4b1a      	ldr	r3, [pc, #104]	@ (8010498 <USBD_LL_Init+0x94>)
 801042e:	2204      	movs	r2, #4
 8010430:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010432:	4b19      	ldr	r3, [pc, #100]	@ (8010498 <USBD_LL_Init+0x94>)
 8010434:	2202      	movs	r2, #2
 8010436:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010438:	4b17      	ldr	r3, [pc, #92]	@ (8010498 <USBD_LL_Init+0x94>)
 801043a:	2200      	movs	r2, #0
 801043c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801043e:	4b16      	ldr	r3, [pc, #88]	@ (8010498 <USBD_LL_Init+0x94>)
 8010440:	2202      	movs	r2, #2
 8010442:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010444:	4b14      	ldr	r3, [pc, #80]	@ (8010498 <USBD_LL_Init+0x94>)
 8010446:	2200      	movs	r2, #0
 8010448:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801044a:	4b13      	ldr	r3, [pc, #76]	@ (8010498 <USBD_LL_Init+0x94>)
 801044c:	2200      	movs	r2, #0
 801044e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010450:	4b11      	ldr	r3, [pc, #68]	@ (8010498 <USBD_LL_Init+0x94>)
 8010452:	2200      	movs	r2, #0
 8010454:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010456:	4b10      	ldr	r3, [pc, #64]	@ (8010498 <USBD_LL_Init+0x94>)
 8010458:	2200      	movs	r2, #0
 801045a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801045c:	4b0e      	ldr	r3, [pc, #56]	@ (8010498 <USBD_LL_Init+0x94>)
 801045e:	2200      	movs	r2, #0
 8010460:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010462:	480d      	ldr	r0, [pc, #52]	@ (8010498 <USBD_LL_Init+0x94>)
 8010464:	f7f4 fd7a 	bl	8004f5c <HAL_PCD_Init>
 8010468:	4603      	mov	r3, r0
 801046a:	2b00      	cmp	r3, #0
 801046c:	d001      	beq.n	8010472 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801046e:	f7f1 fb19 	bl	8001aa4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010472:	2180      	movs	r1, #128	@ 0x80
 8010474:	4808      	ldr	r0, [pc, #32]	@ (8010498 <USBD_LL_Init+0x94>)
 8010476:	f7f5 ffa6 	bl	80063c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801047a:	2240      	movs	r2, #64	@ 0x40
 801047c:	2100      	movs	r1, #0
 801047e:	4806      	ldr	r0, [pc, #24]	@ (8010498 <USBD_LL_Init+0x94>)
 8010480:	f7f5 ff5a 	bl	8006338 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010484:	2280      	movs	r2, #128	@ 0x80
 8010486:	2101      	movs	r1, #1
 8010488:	4803      	ldr	r0, [pc, #12]	@ (8010498 <USBD_LL_Init+0x94>)
 801048a:	f7f5 ff55 	bl	8006338 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801048e:	2300      	movs	r3, #0
}
 8010490:	4618      	mov	r0, r3
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	2000f044 	.word	0x2000f044

0801049c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104a4:	2300      	movs	r3, #0
 80104a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104a8:	2300      	movs	r3, #0
 80104aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7f4 fe61 	bl	800517a <HAL_PCD_Start>
 80104b8:	4603      	mov	r3, r0
 80104ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104bc:	7bfb      	ldrb	r3, [r7, #15]
 80104be:	4618      	mov	r0, r3
 80104c0:	f000 f942 	bl	8010748 <USBD_Get_USB_Status>
 80104c4:	4603      	mov	r3, r0
 80104c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b084      	sub	sp, #16
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	4608      	mov	r0, r1
 80104dc:	4611      	mov	r1, r2
 80104de:	461a      	mov	r2, r3
 80104e0:	4603      	mov	r3, r0
 80104e2:	70fb      	strb	r3, [r7, #3]
 80104e4:	460b      	mov	r3, r1
 80104e6:	70bb      	strb	r3, [r7, #2]
 80104e8:	4613      	mov	r3, r2
 80104ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104ec:	2300      	movs	r3, #0
 80104ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80104fa:	78bb      	ldrb	r3, [r7, #2]
 80104fc:	883a      	ldrh	r2, [r7, #0]
 80104fe:	78f9      	ldrb	r1, [r7, #3]
 8010500:	f7f5 fb35 	bl	8005b6e <HAL_PCD_EP_Open>
 8010504:	4603      	mov	r3, r0
 8010506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010508:	7bfb      	ldrb	r3, [r7, #15]
 801050a:	4618      	mov	r0, r3
 801050c:	f000 f91c 	bl	8010748 <USBD_Get_USB_Status>
 8010510:	4603      	mov	r3, r0
 8010512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010514:	7bbb      	ldrb	r3, [r7, #14]
}
 8010516:	4618      	mov	r0, r3
 8010518:	3710      	adds	r7, #16
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b084      	sub	sp, #16
 8010522:	af00      	add	r7, sp, #0
 8010524:	6078      	str	r0, [r7, #4]
 8010526:	460b      	mov	r3, r1
 8010528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801052a:	2300      	movs	r3, #0
 801052c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801052e:	2300      	movs	r3, #0
 8010530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010538:	78fa      	ldrb	r2, [r7, #3]
 801053a:	4611      	mov	r1, r2
 801053c:	4618      	mov	r0, r3
 801053e:	f7f5 fb80 	bl	8005c42 <HAL_PCD_EP_Close>
 8010542:	4603      	mov	r3, r0
 8010544:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010546:	7bfb      	ldrb	r3, [r7, #15]
 8010548:	4618      	mov	r0, r3
 801054a:	f000 f8fd 	bl	8010748 <USBD_Get_USB_Status>
 801054e:	4603      	mov	r3, r0
 8010550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010552:	7bbb      	ldrb	r3, [r7, #14]
}
 8010554:	4618      	mov	r0, r3
 8010556:	3710      	adds	r7, #16
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	460b      	mov	r3, r1
 8010566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010568:	2300      	movs	r3, #0
 801056a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801056c:	2300      	movs	r3, #0
 801056e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010576:	78fa      	ldrb	r2, [r7, #3]
 8010578:	4611      	mov	r1, r2
 801057a:	4618      	mov	r0, r3
 801057c:	f7f5 fc38 	bl	8005df0 <HAL_PCD_EP_SetStall>
 8010580:	4603      	mov	r3, r0
 8010582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010584:	7bfb      	ldrb	r3, [r7, #15]
 8010586:	4618      	mov	r0, r3
 8010588:	f000 f8de 	bl	8010748 <USBD_Get_USB_Status>
 801058c:	4603      	mov	r3, r0
 801058e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010590:	7bbb      	ldrb	r3, [r7, #14]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b084      	sub	sp, #16
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	460b      	mov	r3, r1
 80105a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105aa:	2300      	movs	r3, #0
 80105ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80105b4:	78fa      	ldrb	r2, [r7, #3]
 80105b6:	4611      	mov	r1, r2
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7f5 fc7c 	bl	8005eb6 <HAL_PCD_EP_ClrStall>
 80105be:	4603      	mov	r3, r0
 80105c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c2:	7bfb      	ldrb	r3, [r7, #15]
 80105c4:	4618      	mov	r0, r3
 80105c6:	f000 f8bf 	bl	8010748 <USBD_Get_USB_Status>
 80105ca:	4603      	mov	r3, r0
 80105cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3710      	adds	r7, #16
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105d8:	b480      	push	{r7}
 80105da:	b085      	sub	sp, #20
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	460b      	mov	r3, r1
 80105e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80105ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80105ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	da0b      	bge.n	801060c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80105f4:	78fb      	ldrb	r3, [r7, #3]
 80105f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80105fa:	68f9      	ldr	r1, [r7, #12]
 80105fc:	4613      	mov	r3, r2
 80105fe:	00db      	lsls	r3, r3, #3
 8010600:	4413      	add	r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	440b      	add	r3, r1
 8010606:	3316      	adds	r3, #22
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	e00b      	b.n	8010624 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801060c:	78fb      	ldrb	r3, [r7, #3]
 801060e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010612:	68f9      	ldr	r1, [r7, #12]
 8010614:	4613      	mov	r3, r2
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	4413      	add	r3, r2
 801061a:	009b      	lsls	r3, r3, #2
 801061c:	440b      	add	r3, r1
 801061e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010622:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010624:	4618      	mov	r0, r3
 8010626:	3714      	adds	r7, #20
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr

08010630 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b084      	sub	sp, #16
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	460b      	mov	r3, r1
 801063a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801063c:	2300      	movs	r3, #0
 801063e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010640:	2300      	movs	r3, #0
 8010642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801064a:	78fa      	ldrb	r2, [r7, #3]
 801064c:	4611      	mov	r1, r2
 801064e:	4618      	mov	r0, r3
 8010650:	f7f5 fa69 	bl	8005b26 <HAL_PCD_SetAddress>
 8010654:	4603      	mov	r3, r0
 8010656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010658:	7bfb      	ldrb	r3, [r7, #15]
 801065a:	4618      	mov	r0, r3
 801065c:	f000 f874 	bl	8010748 <USBD_Get_USB_Status>
 8010660:	4603      	mov	r3, r0
 8010662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010664:	7bbb      	ldrb	r3, [r7, #14]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3710      	adds	r7, #16
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b086      	sub	sp, #24
 8010672:	af00      	add	r7, sp, #0
 8010674:	60f8      	str	r0, [r7, #12]
 8010676:	607a      	str	r2, [r7, #4]
 8010678:	603b      	str	r3, [r7, #0]
 801067a:	460b      	mov	r3, r1
 801067c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010682:	2300      	movs	r3, #0
 8010684:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801068c:	7af9      	ldrb	r1, [r7, #11]
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	f7f5 fb73 	bl	8005d7c <HAL_PCD_EP_Transmit>
 8010696:	4603      	mov	r3, r0
 8010698:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801069a:	7dfb      	ldrb	r3, [r7, #23]
 801069c:	4618      	mov	r0, r3
 801069e:	f000 f853 	bl	8010748 <USBD_Get_USB_Status>
 80106a2:	4603      	mov	r3, r0
 80106a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80106a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3718      	adds	r7, #24
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b086      	sub	sp, #24
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	607a      	str	r2, [r7, #4]
 80106ba:	603b      	str	r3, [r7, #0]
 80106bc:	460b      	mov	r3, r1
 80106be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106c0:	2300      	movs	r3, #0
 80106c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106c4:	2300      	movs	r3, #0
 80106c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80106ce:	7af9      	ldrb	r1, [r7, #11]
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	f7f5 faff 	bl	8005cd6 <HAL_PCD_EP_Receive>
 80106d8:	4603      	mov	r3, r0
 80106da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106dc:	7dfb      	ldrb	r3, [r7, #23]
 80106de:	4618      	mov	r0, r3
 80106e0:	f000 f832 	bl	8010748 <USBD_Get_USB_Status>
 80106e4:	4603      	mov	r3, r0
 80106e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80106e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3718      	adds	r7, #24
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b082      	sub	sp, #8
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
 80106fa:	460b      	mov	r3, r1
 80106fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010704:	78fa      	ldrb	r2, [r7, #3]
 8010706:	4611      	mov	r1, r2
 8010708:	4618      	mov	r0, r3
 801070a:	f7f5 fb1f 	bl	8005d4c <HAL_PCD_EP_GetRxCount>
 801070e:	4603      	mov	r3, r0
}
 8010710:	4618      	mov	r0, r3
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010720:	4b03      	ldr	r3, [pc, #12]	@ (8010730 <USBD_static_malloc+0x18>)
}
 8010722:	4618      	mov	r0, r3
 8010724:	370c      	adds	r7, #12
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	2000f528 	.word	0x2000f528

08010734 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]

}
 801073c:	bf00      	nop
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr

08010748 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	4603      	mov	r3, r0
 8010750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010752:	2300      	movs	r3, #0
 8010754:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010756:	79fb      	ldrb	r3, [r7, #7]
 8010758:	2b03      	cmp	r3, #3
 801075a:	d817      	bhi.n	801078c <USBD_Get_USB_Status+0x44>
 801075c:	a201      	add	r2, pc, #4	@ (adr r2, 8010764 <USBD_Get_USB_Status+0x1c>)
 801075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010762:	bf00      	nop
 8010764:	08010775 	.word	0x08010775
 8010768:	0801077b 	.word	0x0801077b
 801076c:	08010781 	.word	0x08010781
 8010770:	08010787 	.word	0x08010787
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010774:	2300      	movs	r3, #0
 8010776:	73fb      	strb	r3, [r7, #15]
    break;
 8010778:	e00b      	b.n	8010792 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801077a:	2303      	movs	r3, #3
 801077c:	73fb      	strb	r3, [r7, #15]
    break;
 801077e:	e008      	b.n	8010792 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010780:	2301      	movs	r3, #1
 8010782:	73fb      	strb	r3, [r7, #15]
    break;
 8010784:	e005      	b.n	8010792 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010786:	2303      	movs	r3, #3
 8010788:	73fb      	strb	r3, [r7, #15]
    break;
 801078a:	e002      	b.n	8010792 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801078c:	2303      	movs	r3, #3
 801078e:	73fb      	strb	r3, [r7, #15]
    break;
 8010790:	bf00      	nop
  }
  return usb_status;
 8010792:	7bfb      	ldrb	r3, [r7, #15]
}
 8010794:	4618      	mov	r0, r3
 8010796:	3714      	adds	r7, #20
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <__cvt>:
 80107a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107a4:	ec57 6b10 	vmov	r6, r7, d0
 80107a8:	2f00      	cmp	r7, #0
 80107aa:	460c      	mov	r4, r1
 80107ac:	4619      	mov	r1, r3
 80107ae:	463b      	mov	r3, r7
 80107b0:	bfbb      	ittet	lt
 80107b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80107b6:	461f      	movlt	r7, r3
 80107b8:	2300      	movge	r3, #0
 80107ba:	232d      	movlt	r3, #45	@ 0x2d
 80107bc:	700b      	strb	r3, [r1, #0]
 80107be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80107c4:	4691      	mov	r9, r2
 80107c6:	f023 0820 	bic.w	r8, r3, #32
 80107ca:	bfbc      	itt	lt
 80107cc:	4632      	movlt	r2, r6
 80107ce:	4616      	movlt	r6, r2
 80107d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80107d4:	d005      	beq.n	80107e2 <__cvt+0x42>
 80107d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80107da:	d100      	bne.n	80107de <__cvt+0x3e>
 80107dc:	3401      	adds	r4, #1
 80107de:	2102      	movs	r1, #2
 80107e0:	e000      	b.n	80107e4 <__cvt+0x44>
 80107e2:	2103      	movs	r1, #3
 80107e4:	ab03      	add	r3, sp, #12
 80107e6:	9301      	str	r3, [sp, #4]
 80107e8:	ab02      	add	r3, sp, #8
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	ec47 6b10 	vmov	d0, r6, r7
 80107f0:	4653      	mov	r3, sl
 80107f2:	4622      	mov	r2, r4
 80107f4:	f000 ff4c 	bl	8011690 <_dtoa_r>
 80107f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80107fc:	4605      	mov	r5, r0
 80107fe:	d119      	bne.n	8010834 <__cvt+0x94>
 8010800:	f019 0f01 	tst.w	r9, #1
 8010804:	d00e      	beq.n	8010824 <__cvt+0x84>
 8010806:	eb00 0904 	add.w	r9, r0, r4
 801080a:	2200      	movs	r2, #0
 801080c:	2300      	movs	r3, #0
 801080e:	4630      	mov	r0, r6
 8010810:	4639      	mov	r1, r7
 8010812:	f7f0 f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8010816:	b108      	cbz	r0, 801081c <__cvt+0x7c>
 8010818:	f8cd 900c 	str.w	r9, [sp, #12]
 801081c:	2230      	movs	r2, #48	@ 0x30
 801081e:	9b03      	ldr	r3, [sp, #12]
 8010820:	454b      	cmp	r3, r9
 8010822:	d31e      	bcc.n	8010862 <__cvt+0xc2>
 8010824:	9b03      	ldr	r3, [sp, #12]
 8010826:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010828:	1b5b      	subs	r3, r3, r5
 801082a:	4628      	mov	r0, r5
 801082c:	6013      	str	r3, [r2, #0]
 801082e:	b004      	add	sp, #16
 8010830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010834:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010838:	eb00 0904 	add.w	r9, r0, r4
 801083c:	d1e5      	bne.n	801080a <__cvt+0x6a>
 801083e:	7803      	ldrb	r3, [r0, #0]
 8010840:	2b30      	cmp	r3, #48	@ 0x30
 8010842:	d10a      	bne.n	801085a <__cvt+0xba>
 8010844:	2200      	movs	r2, #0
 8010846:	2300      	movs	r3, #0
 8010848:	4630      	mov	r0, r6
 801084a:	4639      	mov	r1, r7
 801084c:	f7f0 f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010850:	b918      	cbnz	r0, 801085a <__cvt+0xba>
 8010852:	f1c4 0401 	rsb	r4, r4, #1
 8010856:	f8ca 4000 	str.w	r4, [sl]
 801085a:	f8da 3000 	ldr.w	r3, [sl]
 801085e:	4499      	add	r9, r3
 8010860:	e7d3      	b.n	801080a <__cvt+0x6a>
 8010862:	1c59      	adds	r1, r3, #1
 8010864:	9103      	str	r1, [sp, #12]
 8010866:	701a      	strb	r2, [r3, #0]
 8010868:	e7d9      	b.n	801081e <__cvt+0x7e>

0801086a <__exponent>:
 801086a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801086c:	2900      	cmp	r1, #0
 801086e:	bfba      	itte	lt
 8010870:	4249      	neglt	r1, r1
 8010872:	232d      	movlt	r3, #45	@ 0x2d
 8010874:	232b      	movge	r3, #43	@ 0x2b
 8010876:	2909      	cmp	r1, #9
 8010878:	7002      	strb	r2, [r0, #0]
 801087a:	7043      	strb	r3, [r0, #1]
 801087c:	dd29      	ble.n	80108d2 <__exponent+0x68>
 801087e:	f10d 0307 	add.w	r3, sp, #7
 8010882:	461d      	mov	r5, r3
 8010884:	270a      	movs	r7, #10
 8010886:	461a      	mov	r2, r3
 8010888:	fbb1 f6f7 	udiv	r6, r1, r7
 801088c:	fb07 1416 	mls	r4, r7, r6, r1
 8010890:	3430      	adds	r4, #48	@ 0x30
 8010892:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010896:	460c      	mov	r4, r1
 8010898:	2c63      	cmp	r4, #99	@ 0x63
 801089a:	f103 33ff 	add.w	r3, r3, #4294967295
 801089e:	4631      	mov	r1, r6
 80108a0:	dcf1      	bgt.n	8010886 <__exponent+0x1c>
 80108a2:	3130      	adds	r1, #48	@ 0x30
 80108a4:	1e94      	subs	r4, r2, #2
 80108a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80108aa:	1c41      	adds	r1, r0, #1
 80108ac:	4623      	mov	r3, r4
 80108ae:	42ab      	cmp	r3, r5
 80108b0:	d30a      	bcc.n	80108c8 <__exponent+0x5e>
 80108b2:	f10d 0309 	add.w	r3, sp, #9
 80108b6:	1a9b      	subs	r3, r3, r2
 80108b8:	42ac      	cmp	r4, r5
 80108ba:	bf88      	it	hi
 80108bc:	2300      	movhi	r3, #0
 80108be:	3302      	adds	r3, #2
 80108c0:	4403      	add	r3, r0
 80108c2:	1a18      	subs	r0, r3, r0
 80108c4:	b003      	add	sp, #12
 80108c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80108cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80108d0:	e7ed      	b.n	80108ae <__exponent+0x44>
 80108d2:	2330      	movs	r3, #48	@ 0x30
 80108d4:	3130      	adds	r1, #48	@ 0x30
 80108d6:	7083      	strb	r3, [r0, #2]
 80108d8:	70c1      	strb	r1, [r0, #3]
 80108da:	1d03      	adds	r3, r0, #4
 80108dc:	e7f1      	b.n	80108c2 <__exponent+0x58>
	...

080108e0 <_printf_float>:
 80108e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e4:	b08d      	sub	sp, #52	@ 0x34
 80108e6:	460c      	mov	r4, r1
 80108e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80108ec:	4616      	mov	r6, r2
 80108ee:	461f      	mov	r7, r3
 80108f0:	4605      	mov	r5, r0
 80108f2:	f000 fdbd 	bl	8011470 <_localeconv_r>
 80108f6:	6803      	ldr	r3, [r0, #0]
 80108f8:	9304      	str	r3, [sp, #16]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7ef fcb8 	bl	8000270 <strlen>
 8010900:	2300      	movs	r3, #0
 8010902:	930a      	str	r3, [sp, #40]	@ 0x28
 8010904:	f8d8 3000 	ldr.w	r3, [r8]
 8010908:	9005      	str	r0, [sp, #20]
 801090a:	3307      	adds	r3, #7
 801090c:	f023 0307 	bic.w	r3, r3, #7
 8010910:	f103 0208 	add.w	r2, r3, #8
 8010914:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010918:	f8d4 b000 	ldr.w	fp, [r4]
 801091c:	f8c8 2000 	str.w	r2, [r8]
 8010920:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010924:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010928:	9307      	str	r3, [sp, #28]
 801092a:	f8cd 8018 	str.w	r8, [sp, #24]
 801092e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010936:	4b9c      	ldr	r3, [pc, #624]	@ (8010ba8 <_printf_float+0x2c8>)
 8010938:	f04f 32ff 	mov.w	r2, #4294967295
 801093c:	f7f0 f8f6 	bl	8000b2c <__aeabi_dcmpun>
 8010940:	bb70      	cbnz	r0, 80109a0 <_printf_float+0xc0>
 8010942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010946:	4b98      	ldr	r3, [pc, #608]	@ (8010ba8 <_printf_float+0x2c8>)
 8010948:	f04f 32ff 	mov.w	r2, #4294967295
 801094c:	f7f0 f8d0 	bl	8000af0 <__aeabi_dcmple>
 8010950:	bb30      	cbnz	r0, 80109a0 <_printf_float+0xc0>
 8010952:	2200      	movs	r2, #0
 8010954:	2300      	movs	r3, #0
 8010956:	4640      	mov	r0, r8
 8010958:	4649      	mov	r1, r9
 801095a:	f7f0 f8bf 	bl	8000adc <__aeabi_dcmplt>
 801095e:	b110      	cbz	r0, 8010966 <_printf_float+0x86>
 8010960:	232d      	movs	r3, #45	@ 0x2d
 8010962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010966:	4a91      	ldr	r2, [pc, #580]	@ (8010bac <_printf_float+0x2cc>)
 8010968:	4b91      	ldr	r3, [pc, #580]	@ (8010bb0 <_printf_float+0x2d0>)
 801096a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801096e:	bf8c      	ite	hi
 8010970:	4690      	movhi	r8, r2
 8010972:	4698      	movls	r8, r3
 8010974:	2303      	movs	r3, #3
 8010976:	6123      	str	r3, [r4, #16]
 8010978:	f02b 0304 	bic.w	r3, fp, #4
 801097c:	6023      	str	r3, [r4, #0]
 801097e:	f04f 0900 	mov.w	r9, #0
 8010982:	9700      	str	r7, [sp, #0]
 8010984:	4633      	mov	r3, r6
 8010986:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010988:	4621      	mov	r1, r4
 801098a:	4628      	mov	r0, r5
 801098c:	f000 f9d2 	bl	8010d34 <_printf_common>
 8010990:	3001      	adds	r0, #1
 8010992:	f040 808d 	bne.w	8010ab0 <_printf_float+0x1d0>
 8010996:	f04f 30ff 	mov.w	r0, #4294967295
 801099a:	b00d      	add	sp, #52	@ 0x34
 801099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a0:	4642      	mov	r2, r8
 80109a2:	464b      	mov	r3, r9
 80109a4:	4640      	mov	r0, r8
 80109a6:	4649      	mov	r1, r9
 80109a8:	f7f0 f8c0 	bl	8000b2c <__aeabi_dcmpun>
 80109ac:	b140      	cbz	r0, 80109c0 <_printf_float+0xe0>
 80109ae:	464b      	mov	r3, r9
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	bfbc      	itt	lt
 80109b4:	232d      	movlt	r3, #45	@ 0x2d
 80109b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80109ba:	4a7e      	ldr	r2, [pc, #504]	@ (8010bb4 <_printf_float+0x2d4>)
 80109bc:	4b7e      	ldr	r3, [pc, #504]	@ (8010bb8 <_printf_float+0x2d8>)
 80109be:	e7d4      	b.n	801096a <_printf_float+0x8a>
 80109c0:	6863      	ldr	r3, [r4, #4]
 80109c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80109c6:	9206      	str	r2, [sp, #24]
 80109c8:	1c5a      	adds	r2, r3, #1
 80109ca:	d13b      	bne.n	8010a44 <_printf_float+0x164>
 80109cc:	2306      	movs	r3, #6
 80109ce:	6063      	str	r3, [r4, #4]
 80109d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80109d4:	2300      	movs	r3, #0
 80109d6:	6022      	str	r2, [r4, #0]
 80109d8:	9303      	str	r3, [sp, #12]
 80109da:	ab0a      	add	r3, sp, #40	@ 0x28
 80109dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80109e0:	ab09      	add	r3, sp, #36	@ 0x24
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	6861      	ldr	r1, [r4, #4]
 80109e6:	ec49 8b10 	vmov	d0, r8, r9
 80109ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80109ee:	4628      	mov	r0, r5
 80109f0:	f7ff fed6 	bl	80107a0 <__cvt>
 80109f4:	9b06      	ldr	r3, [sp, #24]
 80109f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80109f8:	2b47      	cmp	r3, #71	@ 0x47
 80109fa:	4680      	mov	r8, r0
 80109fc:	d129      	bne.n	8010a52 <_printf_float+0x172>
 80109fe:	1cc8      	adds	r0, r1, #3
 8010a00:	db02      	blt.n	8010a08 <_printf_float+0x128>
 8010a02:	6863      	ldr	r3, [r4, #4]
 8010a04:	4299      	cmp	r1, r3
 8010a06:	dd41      	ble.n	8010a8c <_printf_float+0x1ac>
 8010a08:	f1aa 0a02 	sub.w	sl, sl, #2
 8010a0c:	fa5f fa8a 	uxtb.w	sl, sl
 8010a10:	3901      	subs	r1, #1
 8010a12:	4652      	mov	r2, sl
 8010a14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010a18:	9109      	str	r1, [sp, #36]	@ 0x24
 8010a1a:	f7ff ff26 	bl	801086a <__exponent>
 8010a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a20:	1813      	adds	r3, r2, r0
 8010a22:	2a01      	cmp	r2, #1
 8010a24:	4681      	mov	r9, r0
 8010a26:	6123      	str	r3, [r4, #16]
 8010a28:	dc02      	bgt.n	8010a30 <_printf_float+0x150>
 8010a2a:	6822      	ldr	r2, [r4, #0]
 8010a2c:	07d2      	lsls	r2, r2, #31
 8010a2e:	d501      	bpl.n	8010a34 <_printf_float+0x154>
 8010a30:	3301      	adds	r3, #1
 8010a32:	6123      	str	r3, [r4, #16]
 8010a34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d0a2      	beq.n	8010982 <_printf_float+0xa2>
 8010a3c:	232d      	movs	r3, #45	@ 0x2d
 8010a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a42:	e79e      	b.n	8010982 <_printf_float+0xa2>
 8010a44:	9a06      	ldr	r2, [sp, #24]
 8010a46:	2a47      	cmp	r2, #71	@ 0x47
 8010a48:	d1c2      	bne.n	80109d0 <_printf_float+0xf0>
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d1c0      	bne.n	80109d0 <_printf_float+0xf0>
 8010a4e:	2301      	movs	r3, #1
 8010a50:	e7bd      	b.n	80109ce <_printf_float+0xee>
 8010a52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010a56:	d9db      	bls.n	8010a10 <_printf_float+0x130>
 8010a58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010a5c:	d118      	bne.n	8010a90 <_printf_float+0x1b0>
 8010a5e:	2900      	cmp	r1, #0
 8010a60:	6863      	ldr	r3, [r4, #4]
 8010a62:	dd0b      	ble.n	8010a7c <_printf_float+0x19c>
 8010a64:	6121      	str	r1, [r4, #16]
 8010a66:	b913      	cbnz	r3, 8010a6e <_printf_float+0x18e>
 8010a68:	6822      	ldr	r2, [r4, #0]
 8010a6a:	07d0      	lsls	r0, r2, #31
 8010a6c:	d502      	bpl.n	8010a74 <_printf_float+0x194>
 8010a6e:	3301      	adds	r3, #1
 8010a70:	440b      	add	r3, r1
 8010a72:	6123      	str	r3, [r4, #16]
 8010a74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010a76:	f04f 0900 	mov.w	r9, #0
 8010a7a:	e7db      	b.n	8010a34 <_printf_float+0x154>
 8010a7c:	b913      	cbnz	r3, 8010a84 <_printf_float+0x1a4>
 8010a7e:	6822      	ldr	r2, [r4, #0]
 8010a80:	07d2      	lsls	r2, r2, #31
 8010a82:	d501      	bpl.n	8010a88 <_printf_float+0x1a8>
 8010a84:	3302      	adds	r3, #2
 8010a86:	e7f4      	b.n	8010a72 <_printf_float+0x192>
 8010a88:	2301      	movs	r3, #1
 8010a8a:	e7f2      	b.n	8010a72 <_printf_float+0x192>
 8010a8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a92:	4299      	cmp	r1, r3
 8010a94:	db05      	blt.n	8010aa2 <_printf_float+0x1c2>
 8010a96:	6823      	ldr	r3, [r4, #0]
 8010a98:	6121      	str	r1, [r4, #16]
 8010a9a:	07d8      	lsls	r0, r3, #31
 8010a9c:	d5ea      	bpl.n	8010a74 <_printf_float+0x194>
 8010a9e:	1c4b      	adds	r3, r1, #1
 8010aa0:	e7e7      	b.n	8010a72 <_printf_float+0x192>
 8010aa2:	2900      	cmp	r1, #0
 8010aa4:	bfd4      	ite	le
 8010aa6:	f1c1 0202 	rsble	r2, r1, #2
 8010aaa:	2201      	movgt	r2, #1
 8010aac:	4413      	add	r3, r2
 8010aae:	e7e0      	b.n	8010a72 <_printf_float+0x192>
 8010ab0:	6823      	ldr	r3, [r4, #0]
 8010ab2:	055a      	lsls	r2, r3, #21
 8010ab4:	d407      	bmi.n	8010ac6 <_printf_float+0x1e6>
 8010ab6:	6923      	ldr	r3, [r4, #16]
 8010ab8:	4642      	mov	r2, r8
 8010aba:	4631      	mov	r1, r6
 8010abc:	4628      	mov	r0, r5
 8010abe:	47b8      	blx	r7
 8010ac0:	3001      	adds	r0, #1
 8010ac2:	d12b      	bne.n	8010b1c <_printf_float+0x23c>
 8010ac4:	e767      	b.n	8010996 <_printf_float+0xb6>
 8010ac6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010aca:	f240 80dd 	bls.w	8010c88 <_printf_float+0x3a8>
 8010ace:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f7ef fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d033      	beq.n	8010b46 <_printf_float+0x266>
 8010ade:	4a37      	ldr	r2, [pc, #220]	@ (8010bbc <_printf_float+0x2dc>)
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	4631      	mov	r1, r6
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	47b8      	blx	r7
 8010ae8:	3001      	adds	r0, #1
 8010aea:	f43f af54 	beq.w	8010996 <_printf_float+0xb6>
 8010aee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010af2:	4543      	cmp	r3, r8
 8010af4:	db02      	blt.n	8010afc <_printf_float+0x21c>
 8010af6:	6823      	ldr	r3, [r4, #0]
 8010af8:	07d8      	lsls	r0, r3, #31
 8010afa:	d50f      	bpl.n	8010b1c <_printf_float+0x23c>
 8010afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b00:	4631      	mov	r1, r6
 8010b02:	4628      	mov	r0, r5
 8010b04:	47b8      	blx	r7
 8010b06:	3001      	adds	r0, #1
 8010b08:	f43f af45 	beq.w	8010996 <_printf_float+0xb6>
 8010b0c:	f04f 0900 	mov.w	r9, #0
 8010b10:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b14:	f104 0a1a 	add.w	sl, r4, #26
 8010b18:	45c8      	cmp	r8, r9
 8010b1a:	dc09      	bgt.n	8010b30 <_printf_float+0x250>
 8010b1c:	6823      	ldr	r3, [r4, #0]
 8010b1e:	079b      	lsls	r3, r3, #30
 8010b20:	f100 8103 	bmi.w	8010d2a <_printf_float+0x44a>
 8010b24:	68e0      	ldr	r0, [r4, #12]
 8010b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b28:	4298      	cmp	r0, r3
 8010b2a:	bfb8      	it	lt
 8010b2c:	4618      	movlt	r0, r3
 8010b2e:	e734      	b.n	801099a <_printf_float+0xba>
 8010b30:	2301      	movs	r3, #1
 8010b32:	4652      	mov	r2, sl
 8010b34:	4631      	mov	r1, r6
 8010b36:	4628      	mov	r0, r5
 8010b38:	47b8      	blx	r7
 8010b3a:	3001      	adds	r0, #1
 8010b3c:	f43f af2b 	beq.w	8010996 <_printf_float+0xb6>
 8010b40:	f109 0901 	add.w	r9, r9, #1
 8010b44:	e7e8      	b.n	8010b18 <_printf_float+0x238>
 8010b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	dc39      	bgt.n	8010bc0 <_printf_float+0x2e0>
 8010b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8010bbc <_printf_float+0x2dc>)
 8010b4e:	2301      	movs	r3, #1
 8010b50:	4631      	mov	r1, r6
 8010b52:	4628      	mov	r0, r5
 8010b54:	47b8      	blx	r7
 8010b56:	3001      	adds	r0, #1
 8010b58:	f43f af1d 	beq.w	8010996 <_printf_float+0xb6>
 8010b5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010b60:	ea59 0303 	orrs.w	r3, r9, r3
 8010b64:	d102      	bne.n	8010b6c <_printf_float+0x28c>
 8010b66:	6823      	ldr	r3, [r4, #0]
 8010b68:	07d9      	lsls	r1, r3, #31
 8010b6a:	d5d7      	bpl.n	8010b1c <_printf_float+0x23c>
 8010b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b70:	4631      	mov	r1, r6
 8010b72:	4628      	mov	r0, r5
 8010b74:	47b8      	blx	r7
 8010b76:	3001      	adds	r0, #1
 8010b78:	f43f af0d 	beq.w	8010996 <_printf_float+0xb6>
 8010b7c:	f04f 0a00 	mov.w	sl, #0
 8010b80:	f104 0b1a 	add.w	fp, r4, #26
 8010b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b86:	425b      	negs	r3, r3
 8010b88:	4553      	cmp	r3, sl
 8010b8a:	dc01      	bgt.n	8010b90 <_printf_float+0x2b0>
 8010b8c:	464b      	mov	r3, r9
 8010b8e:	e793      	b.n	8010ab8 <_printf_float+0x1d8>
 8010b90:	2301      	movs	r3, #1
 8010b92:	465a      	mov	r2, fp
 8010b94:	4631      	mov	r1, r6
 8010b96:	4628      	mov	r0, r5
 8010b98:	47b8      	blx	r7
 8010b9a:	3001      	adds	r0, #1
 8010b9c:	f43f aefb 	beq.w	8010996 <_printf_float+0xb6>
 8010ba0:	f10a 0a01 	add.w	sl, sl, #1
 8010ba4:	e7ee      	b.n	8010b84 <_printf_float+0x2a4>
 8010ba6:	bf00      	nop
 8010ba8:	7fefffff 	.word	0x7fefffff
 8010bac:	08013604 	.word	0x08013604
 8010bb0:	08013600 	.word	0x08013600
 8010bb4:	0801360c 	.word	0x0801360c
 8010bb8:	08013608 	.word	0x08013608
 8010bbc:	08013610 	.word	0x08013610
 8010bc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010bc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010bc6:	4553      	cmp	r3, sl
 8010bc8:	bfa8      	it	ge
 8010bca:	4653      	movge	r3, sl
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	4699      	mov	r9, r3
 8010bd0:	dc36      	bgt.n	8010c40 <_printf_float+0x360>
 8010bd2:	f04f 0b00 	mov.w	fp, #0
 8010bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010bda:	f104 021a 	add.w	r2, r4, #26
 8010bde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010be0:	9306      	str	r3, [sp, #24]
 8010be2:	eba3 0309 	sub.w	r3, r3, r9
 8010be6:	455b      	cmp	r3, fp
 8010be8:	dc31      	bgt.n	8010c4e <_printf_float+0x36e>
 8010bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bec:	459a      	cmp	sl, r3
 8010bee:	dc3a      	bgt.n	8010c66 <_printf_float+0x386>
 8010bf0:	6823      	ldr	r3, [r4, #0]
 8010bf2:	07da      	lsls	r2, r3, #31
 8010bf4:	d437      	bmi.n	8010c66 <_printf_float+0x386>
 8010bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bf8:	ebaa 0903 	sub.w	r9, sl, r3
 8010bfc:	9b06      	ldr	r3, [sp, #24]
 8010bfe:	ebaa 0303 	sub.w	r3, sl, r3
 8010c02:	4599      	cmp	r9, r3
 8010c04:	bfa8      	it	ge
 8010c06:	4699      	movge	r9, r3
 8010c08:	f1b9 0f00 	cmp.w	r9, #0
 8010c0c:	dc33      	bgt.n	8010c76 <_printf_float+0x396>
 8010c0e:	f04f 0800 	mov.w	r8, #0
 8010c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c16:	f104 0b1a 	add.w	fp, r4, #26
 8010c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8010c20:	eba3 0309 	sub.w	r3, r3, r9
 8010c24:	4543      	cmp	r3, r8
 8010c26:	f77f af79 	ble.w	8010b1c <_printf_float+0x23c>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	465a      	mov	r2, fp
 8010c2e:	4631      	mov	r1, r6
 8010c30:	4628      	mov	r0, r5
 8010c32:	47b8      	blx	r7
 8010c34:	3001      	adds	r0, #1
 8010c36:	f43f aeae 	beq.w	8010996 <_printf_float+0xb6>
 8010c3a:	f108 0801 	add.w	r8, r8, #1
 8010c3e:	e7ec      	b.n	8010c1a <_printf_float+0x33a>
 8010c40:	4642      	mov	r2, r8
 8010c42:	4631      	mov	r1, r6
 8010c44:	4628      	mov	r0, r5
 8010c46:	47b8      	blx	r7
 8010c48:	3001      	adds	r0, #1
 8010c4a:	d1c2      	bne.n	8010bd2 <_printf_float+0x2f2>
 8010c4c:	e6a3      	b.n	8010996 <_printf_float+0xb6>
 8010c4e:	2301      	movs	r3, #1
 8010c50:	4631      	mov	r1, r6
 8010c52:	4628      	mov	r0, r5
 8010c54:	9206      	str	r2, [sp, #24]
 8010c56:	47b8      	blx	r7
 8010c58:	3001      	adds	r0, #1
 8010c5a:	f43f ae9c 	beq.w	8010996 <_printf_float+0xb6>
 8010c5e:	9a06      	ldr	r2, [sp, #24]
 8010c60:	f10b 0b01 	add.w	fp, fp, #1
 8010c64:	e7bb      	b.n	8010bde <_printf_float+0x2fe>
 8010c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c6a:	4631      	mov	r1, r6
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	47b8      	blx	r7
 8010c70:	3001      	adds	r0, #1
 8010c72:	d1c0      	bne.n	8010bf6 <_printf_float+0x316>
 8010c74:	e68f      	b.n	8010996 <_printf_float+0xb6>
 8010c76:	9a06      	ldr	r2, [sp, #24]
 8010c78:	464b      	mov	r3, r9
 8010c7a:	4442      	add	r2, r8
 8010c7c:	4631      	mov	r1, r6
 8010c7e:	4628      	mov	r0, r5
 8010c80:	47b8      	blx	r7
 8010c82:	3001      	adds	r0, #1
 8010c84:	d1c3      	bne.n	8010c0e <_printf_float+0x32e>
 8010c86:	e686      	b.n	8010996 <_printf_float+0xb6>
 8010c88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010c8c:	f1ba 0f01 	cmp.w	sl, #1
 8010c90:	dc01      	bgt.n	8010c96 <_printf_float+0x3b6>
 8010c92:	07db      	lsls	r3, r3, #31
 8010c94:	d536      	bpl.n	8010d04 <_printf_float+0x424>
 8010c96:	2301      	movs	r3, #1
 8010c98:	4642      	mov	r2, r8
 8010c9a:	4631      	mov	r1, r6
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	47b8      	blx	r7
 8010ca0:	3001      	adds	r0, #1
 8010ca2:	f43f ae78 	beq.w	8010996 <_printf_float+0xb6>
 8010ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010caa:	4631      	mov	r1, r6
 8010cac:	4628      	mov	r0, r5
 8010cae:	47b8      	blx	r7
 8010cb0:	3001      	adds	r0, #1
 8010cb2:	f43f ae70 	beq.w	8010996 <_printf_float+0xb6>
 8010cb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010cba:	2200      	movs	r2, #0
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010cc2:	f7ef ff01 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cc6:	b9c0      	cbnz	r0, 8010cfa <_printf_float+0x41a>
 8010cc8:	4653      	mov	r3, sl
 8010cca:	f108 0201 	add.w	r2, r8, #1
 8010cce:	4631      	mov	r1, r6
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	47b8      	blx	r7
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	d10c      	bne.n	8010cf2 <_printf_float+0x412>
 8010cd8:	e65d      	b.n	8010996 <_printf_float+0xb6>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	465a      	mov	r2, fp
 8010cde:	4631      	mov	r1, r6
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	47b8      	blx	r7
 8010ce4:	3001      	adds	r0, #1
 8010ce6:	f43f ae56 	beq.w	8010996 <_printf_float+0xb6>
 8010cea:	f108 0801 	add.w	r8, r8, #1
 8010cee:	45d0      	cmp	r8, sl
 8010cf0:	dbf3      	blt.n	8010cda <_printf_float+0x3fa>
 8010cf2:	464b      	mov	r3, r9
 8010cf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010cf8:	e6df      	b.n	8010aba <_printf_float+0x1da>
 8010cfa:	f04f 0800 	mov.w	r8, #0
 8010cfe:	f104 0b1a 	add.w	fp, r4, #26
 8010d02:	e7f4      	b.n	8010cee <_printf_float+0x40e>
 8010d04:	2301      	movs	r3, #1
 8010d06:	4642      	mov	r2, r8
 8010d08:	e7e1      	b.n	8010cce <_printf_float+0x3ee>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	464a      	mov	r2, r9
 8010d0e:	4631      	mov	r1, r6
 8010d10:	4628      	mov	r0, r5
 8010d12:	47b8      	blx	r7
 8010d14:	3001      	adds	r0, #1
 8010d16:	f43f ae3e 	beq.w	8010996 <_printf_float+0xb6>
 8010d1a:	f108 0801 	add.w	r8, r8, #1
 8010d1e:	68e3      	ldr	r3, [r4, #12]
 8010d20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010d22:	1a5b      	subs	r3, r3, r1
 8010d24:	4543      	cmp	r3, r8
 8010d26:	dcf0      	bgt.n	8010d0a <_printf_float+0x42a>
 8010d28:	e6fc      	b.n	8010b24 <_printf_float+0x244>
 8010d2a:	f04f 0800 	mov.w	r8, #0
 8010d2e:	f104 0919 	add.w	r9, r4, #25
 8010d32:	e7f4      	b.n	8010d1e <_printf_float+0x43e>

08010d34 <_printf_common>:
 8010d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d38:	4616      	mov	r6, r2
 8010d3a:	4698      	mov	r8, r3
 8010d3c:	688a      	ldr	r2, [r1, #8]
 8010d3e:	690b      	ldr	r3, [r1, #16]
 8010d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010d44:	4293      	cmp	r3, r2
 8010d46:	bfb8      	it	lt
 8010d48:	4613      	movlt	r3, r2
 8010d4a:	6033      	str	r3, [r6, #0]
 8010d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010d50:	4607      	mov	r7, r0
 8010d52:	460c      	mov	r4, r1
 8010d54:	b10a      	cbz	r2, 8010d5a <_printf_common+0x26>
 8010d56:	3301      	adds	r3, #1
 8010d58:	6033      	str	r3, [r6, #0]
 8010d5a:	6823      	ldr	r3, [r4, #0]
 8010d5c:	0699      	lsls	r1, r3, #26
 8010d5e:	bf42      	ittt	mi
 8010d60:	6833      	ldrmi	r3, [r6, #0]
 8010d62:	3302      	addmi	r3, #2
 8010d64:	6033      	strmi	r3, [r6, #0]
 8010d66:	6825      	ldr	r5, [r4, #0]
 8010d68:	f015 0506 	ands.w	r5, r5, #6
 8010d6c:	d106      	bne.n	8010d7c <_printf_common+0x48>
 8010d6e:	f104 0a19 	add.w	sl, r4, #25
 8010d72:	68e3      	ldr	r3, [r4, #12]
 8010d74:	6832      	ldr	r2, [r6, #0]
 8010d76:	1a9b      	subs	r3, r3, r2
 8010d78:	42ab      	cmp	r3, r5
 8010d7a:	dc26      	bgt.n	8010dca <_printf_common+0x96>
 8010d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010d80:	6822      	ldr	r2, [r4, #0]
 8010d82:	3b00      	subs	r3, #0
 8010d84:	bf18      	it	ne
 8010d86:	2301      	movne	r3, #1
 8010d88:	0692      	lsls	r2, r2, #26
 8010d8a:	d42b      	bmi.n	8010de4 <_printf_common+0xb0>
 8010d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010d90:	4641      	mov	r1, r8
 8010d92:	4638      	mov	r0, r7
 8010d94:	47c8      	blx	r9
 8010d96:	3001      	adds	r0, #1
 8010d98:	d01e      	beq.n	8010dd8 <_printf_common+0xa4>
 8010d9a:	6823      	ldr	r3, [r4, #0]
 8010d9c:	6922      	ldr	r2, [r4, #16]
 8010d9e:	f003 0306 	and.w	r3, r3, #6
 8010da2:	2b04      	cmp	r3, #4
 8010da4:	bf02      	ittt	eq
 8010da6:	68e5      	ldreq	r5, [r4, #12]
 8010da8:	6833      	ldreq	r3, [r6, #0]
 8010daa:	1aed      	subeq	r5, r5, r3
 8010dac:	68a3      	ldr	r3, [r4, #8]
 8010dae:	bf0c      	ite	eq
 8010db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010db4:	2500      	movne	r5, #0
 8010db6:	4293      	cmp	r3, r2
 8010db8:	bfc4      	itt	gt
 8010dba:	1a9b      	subgt	r3, r3, r2
 8010dbc:	18ed      	addgt	r5, r5, r3
 8010dbe:	2600      	movs	r6, #0
 8010dc0:	341a      	adds	r4, #26
 8010dc2:	42b5      	cmp	r5, r6
 8010dc4:	d11a      	bne.n	8010dfc <_printf_common+0xc8>
 8010dc6:	2000      	movs	r0, #0
 8010dc8:	e008      	b.n	8010ddc <_printf_common+0xa8>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	4652      	mov	r2, sl
 8010dce:	4641      	mov	r1, r8
 8010dd0:	4638      	mov	r0, r7
 8010dd2:	47c8      	blx	r9
 8010dd4:	3001      	adds	r0, #1
 8010dd6:	d103      	bne.n	8010de0 <_printf_common+0xac>
 8010dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010de0:	3501      	adds	r5, #1
 8010de2:	e7c6      	b.n	8010d72 <_printf_common+0x3e>
 8010de4:	18e1      	adds	r1, r4, r3
 8010de6:	1c5a      	adds	r2, r3, #1
 8010de8:	2030      	movs	r0, #48	@ 0x30
 8010dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010dee:	4422      	add	r2, r4
 8010df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010df8:	3302      	adds	r3, #2
 8010dfa:	e7c7      	b.n	8010d8c <_printf_common+0x58>
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	4622      	mov	r2, r4
 8010e00:	4641      	mov	r1, r8
 8010e02:	4638      	mov	r0, r7
 8010e04:	47c8      	blx	r9
 8010e06:	3001      	adds	r0, #1
 8010e08:	d0e6      	beq.n	8010dd8 <_printf_common+0xa4>
 8010e0a:	3601      	adds	r6, #1
 8010e0c:	e7d9      	b.n	8010dc2 <_printf_common+0x8e>
	...

08010e10 <_printf_i>:
 8010e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e14:	7e0f      	ldrb	r7, [r1, #24]
 8010e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010e18:	2f78      	cmp	r7, #120	@ 0x78
 8010e1a:	4691      	mov	r9, r2
 8010e1c:	4680      	mov	r8, r0
 8010e1e:	460c      	mov	r4, r1
 8010e20:	469a      	mov	sl, r3
 8010e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010e26:	d807      	bhi.n	8010e38 <_printf_i+0x28>
 8010e28:	2f62      	cmp	r7, #98	@ 0x62
 8010e2a:	d80a      	bhi.n	8010e42 <_printf_i+0x32>
 8010e2c:	2f00      	cmp	r7, #0
 8010e2e:	f000 80d1 	beq.w	8010fd4 <_printf_i+0x1c4>
 8010e32:	2f58      	cmp	r7, #88	@ 0x58
 8010e34:	f000 80b8 	beq.w	8010fa8 <_printf_i+0x198>
 8010e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010e40:	e03a      	b.n	8010eb8 <_printf_i+0xa8>
 8010e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010e46:	2b15      	cmp	r3, #21
 8010e48:	d8f6      	bhi.n	8010e38 <_printf_i+0x28>
 8010e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8010e50 <_printf_i+0x40>)
 8010e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e50:	08010ea9 	.word	0x08010ea9
 8010e54:	08010ebd 	.word	0x08010ebd
 8010e58:	08010e39 	.word	0x08010e39
 8010e5c:	08010e39 	.word	0x08010e39
 8010e60:	08010e39 	.word	0x08010e39
 8010e64:	08010e39 	.word	0x08010e39
 8010e68:	08010ebd 	.word	0x08010ebd
 8010e6c:	08010e39 	.word	0x08010e39
 8010e70:	08010e39 	.word	0x08010e39
 8010e74:	08010e39 	.word	0x08010e39
 8010e78:	08010e39 	.word	0x08010e39
 8010e7c:	08010fbb 	.word	0x08010fbb
 8010e80:	08010ee7 	.word	0x08010ee7
 8010e84:	08010f75 	.word	0x08010f75
 8010e88:	08010e39 	.word	0x08010e39
 8010e8c:	08010e39 	.word	0x08010e39
 8010e90:	08010fdd 	.word	0x08010fdd
 8010e94:	08010e39 	.word	0x08010e39
 8010e98:	08010ee7 	.word	0x08010ee7
 8010e9c:	08010e39 	.word	0x08010e39
 8010ea0:	08010e39 	.word	0x08010e39
 8010ea4:	08010f7d 	.word	0x08010f7d
 8010ea8:	6833      	ldr	r3, [r6, #0]
 8010eaa:	1d1a      	adds	r2, r3, #4
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	6032      	str	r2, [r6, #0]
 8010eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010eb8:	2301      	movs	r3, #1
 8010eba:	e09c      	b.n	8010ff6 <_printf_i+0x1e6>
 8010ebc:	6833      	ldr	r3, [r6, #0]
 8010ebe:	6820      	ldr	r0, [r4, #0]
 8010ec0:	1d19      	adds	r1, r3, #4
 8010ec2:	6031      	str	r1, [r6, #0]
 8010ec4:	0606      	lsls	r6, r0, #24
 8010ec6:	d501      	bpl.n	8010ecc <_printf_i+0xbc>
 8010ec8:	681d      	ldr	r5, [r3, #0]
 8010eca:	e003      	b.n	8010ed4 <_printf_i+0xc4>
 8010ecc:	0645      	lsls	r5, r0, #25
 8010ece:	d5fb      	bpl.n	8010ec8 <_printf_i+0xb8>
 8010ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010ed4:	2d00      	cmp	r5, #0
 8010ed6:	da03      	bge.n	8010ee0 <_printf_i+0xd0>
 8010ed8:	232d      	movs	r3, #45	@ 0x2d
 8010eda:	426d      	negs	r5, r5
 8010edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ee0:	4858      	ldr	r0, [pc, #352]	@ (8011044 <_printf_i+0x234>)
 8010ee2:	230a      	movs	r3, #10
 8010ee4:	e011      	b.n	8010f0a <_printf_i+0xfa>
 8010ee6:	6821      	ldr	r1, [r4, #0]
 8010ee8:	6833      	ldr	r3, [r6, #0]
 8010eea:	0608      	lsls	r0, r1, #24
 8010eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ef0:	d402      	bmi.n	8010ef8 <_printf_i+0xe8>
 8010ef2:	0649      	lsls	r1, r1, #25
 8010ef4:	bf48      	it	mi
 8010ef6:	b2ad      	uxthmi	r5, r5
 8010ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8010efa:	4852      	ldr	r0, [pc, #328]	@ (8011044 <_printf_i+0x234>)
 8010efc:	6033      	str	r3, [r6, #0]
 8010efe:	bf14      	ite	ne
 8010f00:	230a      	movne	r3, #10
 8010f02:	2308      	moveq	r3, #8
 8010f04:	2100      	movs	r1, #0
 8010f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010f0a:	6866      	ldr	r6, [r4, #4]
 8010f0c:	60a6      	str	r6, [r4, #8]
 8010f0e:	2e00      	cmp	r6, #0
 8010f10:	db05      	blt.n	8010f1e <_printf_i+0x10e>
 8010f12:	6821      	ldr	r1, [r4, #0]
 8010f14:	432e      	orrs	r6, r5
 8010f16:	f021 0104 	bic.w	r1, r1, #4
 8010f1a:	6021      	str	r1, [r4, #0]
 8010f1c:	d04b      	beq.n	8010fb6 <_printf_i+0x1a6>
 8010f1e:	4616      	mov	r6, r2
 8010f20:	fbb5 f1f3 	udiv	r1, r5, r3
 8010f24:	fb03 5711 	mls	r7, r3, r1, r5
 8010f28:	5dc7      	ldrb	r7, [r0, r7]
 8010f2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010f2e:	462f      	mov	r7, r5
 8010f30:	42bb      	cmp	r3, r7
 8010f32:	460d      	mov	r5, r1
 8010f34:	d9f4      	bls.n	8010f20 <_printf_i+0x110>
 8010f36:	2b08      	cmp	r3, #8
 8010f38:	d10b      	bne.n	8010f52 <_printf_i+0x142>
 8010f3a:	6823      	ldr	r3, [r4, #0]
 8010f3c:	07df      	lsls	r7, r3, #31
 8010f3e:	d508      	bpl.n	8010f52 <_printf_i+0x142>
 8010f40:	6923      	ldr	r3, [r4, #16]
 8010f42:	6861      	ldr	r1, [r4, #4]
 8010f44:	4299      	cmp	r1, r3
 8010f46:	bfde      	ittt	le
 8010f48:	2330      	movle	r3, #48	@ 0x30
 8010f4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010f4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010f52:	1b92      	subs	r2, r2, r6
 8010f54:	6122      	str	r2, [r4, #16]
 8010f56:	f8cd a000 	str.w	sl, [sp]
 8010f5a:	464b      	mov	r3, r9
 8010f5c:	aa03      	add	r2, sp, #12
 8010f5e:	4621      	mov	r1, r4
 8010f60:	4640      	mov	r0, r8
 8010f62:	f7ff fee7 	bl	8010d34 <_printf_common>
 8010f66:	3001      	adds	r0, #1
 8010f68:	d14a      	bne.n	8011000 <_printf_i+0x1f0>
 8010f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f6e:	b004      	add	sp, #16
 8010f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f74:	6823      	ldr	r3, [r4, #0]
 8010f76:	f043 0320 	orr.w	r3, r3, #32
 8010f7a:	6023      	str	r3, [r4, #0]
 8010f7c:	4832      	ldr	r0, [pc, #200]	@ (8011048 <_printf_i+0x238>)
 8010f7e:	2778      	movs	r7, #120	@ 0x78
 8010f80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010f84:	6823      	ldr	r3, [r4, #0]
 8010f86:	6831      	ldr	r1, [r6, #0]
 8010f88:	061f      	lsls	r7, r3, #24
 8010f8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8010f8e:	d402      	bmi.n	8010f96 <_printf_i+0x186>
 8010f90:	065f      	lsls	r7, r3, #25
 8010f92:	bf48      	it	mi
 8010f94:	b2ad      	uxthmi	r5, r5
 8010f96:	6031      	str	r1, [r6, #0]
 8010f98:	07d9      	lsls	r1, r3, #31
 8010f9a:	bf44      	itt	mi
 8010f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8010fa0:	6023      	strmi	r3, [r4, #0]
 8010fa2:	b11d      	cbz	r5, 8010fac <_printf_i+0x19c>
 8010fa4:	2310      	movs	r3, #16
 8010fa6:	e7ad      	b.n	8010f04 <_printf_i+0xf4>
 8010fa8:	4826      	ldr	r0, [pc, #152]	@ (8011044 <_printf_i+0x234>)
 8010faa:	e7e9      	b.n	8010f80 <_printf_i+0x170>
 8010fac:	6823      	ldr	r3, [r4, #0]
 8010fae:	f023 0320 	bic.w	r3, r3, #32
 8010fb2:	6023      	str	r3, [r4, #0]
 8010fb4:	e7f6      	b.n	8010fa4 <_printf_i+0x194>
 8010fb6:	4616      	mov	r6, r2
 8010fb8:	e7bd      	b.n	8010f36 <_printf_i+0x126>
 8010fba:	6833      	ldr	r3, [r6, #0]
 8010fbc:	6825      	ldr	r5, [r4, #0]
 8010fbe:	6961      	ldr	r1, [r4, #20]
 8010fc0:	1d18      	adds	r0, r3, #4
 8010fc2:	6030      	str	r0, [r6, #0]
 8010fc4:	062e      	lsls	r6, r5, #24
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	d501      	bpl.n	8010fce <_printf_i+0x1be>
 8010fca:	6019      	str	r1, [r3, #0]
 8010fcc:	e002      	b.n	8010fd4 <_printf_i+0x1c4>
 8010fce:	0668      	lsls	r0, r5, #25
 8010fd0:	d5fb      	bpl.n	8010fca <_printf_i+0x1ba>
 8010fd2:	8019      	strh	r1, [r3, #0]
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	6123      	str	r3, [r4, #16]
 8010fd8:	4616      	mov	r6, r2
 8010fda:	e7bc      	b.n	8010f56 <_printf_i+0x146>
 8010fdc:	6833      	ldr	r3, [r6, #0]
 8010fde:	1d1a      	adds	r2, r3, #4
 8010fe0:	6032      	str	r2, [r6, #0]
 8010fe2:	681e      	ldr	r6, [r3, #0]
 8010fe4:	6862      	ldr	r2, [r4, #4]
 8010fe6:	2100      	movs	r1, #0
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f7ef f8f1 	bl	80001d0 <memchr>
 8010fee:	b108      	cbz	r0, 8010ff4 <_printf_i+0x1e4>
 8010ff0:	1b80      	subs	r0, r0, r6
 8010ff2:	6060      	str	r0, [r4, #4]
 8010ff4:	6863      	ldr	r3, [r4, #4]
 8010ff6:	6123      	str	r3, [r4, #16]
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ffe:	e7aa      	b.n	8010f56 <_printf_i+0x146>
 8011000:	6923      	ldr	r3, [r4, #16]
 8011002:	4632      	mov	r2, r6
 8011004:	4649      	mov	r1, r9
 8011006:	4640      	mov	r0, r8
 8011008:	47d0      	blx	sl
 801100a:	3001      	adds	r0, #1
 801100c:	d0ad      	beq.n	8010f6a <_printf_i+0x15a>
 801100e:	6823      	ldr	r3, [r4, #0]
 8011010:	079b      	lsls	r3, r3, #30
 8011012:	d413      	bmi.n	801103c <_printf_i+0x22c>
 8011014:	68e0      	ldr	r0, [r4, #12]
 8011016:	9b03      	ldr	r3, [sp, #12]
 8011018:	4298      	cmp	r0, r3
 801101a:	bfb8      	it	lt
 801101c:	4618      	movlt	r0, r3
 801101e:	e7a6      	b.n	8010f6e <_printf_i+0x15e>
 8011020:	2301      	movs	r3, #1
 8011022:	4632      	mov	r2, r6
 8011024:	4649      	mov	r1, r9
 8011026:	4640      	mov	r0, r8
 8011028:	47d0      	blx	sl
 801102a:	3001      	adds	r0, #1
 801102c:	d09d      	beq.n	8010f6a <_printf_i+0x15a>
 801102e:	3501      	adds	r5, #1
 8011030:	68e3      	ldr	r3, [r4, #12]
 8011032:	9903      	ldr	r1, [sp, #12]
 8011034:	1a5b      	subs	r3, r3, r1
 8011036:	42ab      	cmp	r3, r5
 8011038:	dcf2      	bgt.n	8011020 <_printf_i+0x210>
 801103a:	e7eb      	b.n	8011014 <_printf_i+0x204>
 801103c:	2500      	movs	r5, #0
 801103e:	f104 0619 	add.w	r6, r4, #25
 8011042:	e7f5      	b.n	8011030 <_printf_i+0x220>
 8011044:	08013612 	.word	0x08013612
 8011048:	08013623 	.word	0x08013623

0801104c <std>:
 801104c:	2300      	movs	r3, #0
 801104e:	b510      	push	{r4, lr}
 8011050:	4604      	mov	r4, r0
 8011052:	e9c0 3300 	strd	r3, r3, [r0]
 8011056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801105a:	6083      	str	r3, [r0, #8]
 801105c:	8181      	strh	r1, [r0, #12]
 801105e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011060:	81c2      	strh	r2, [r0, #14]
 8011062:	6183      	str	r3, [r0, #24]
 8011064:	4619      	mov	r1, r3
 8011066:	2208      	movs	r2, #8
 8011068:	305c      	adds	r0, #92	@ 0x5c
 801106a:	f000 f9f9 	bl	8011460 <memset>
 801106e:	4b0d      	ldr	r3, [pc, #52]	@ (80110a4 <std+0x58>)
 8011070:	6263      	str	r3, [r4, #36]	@ 0x24
 8011072:	4b0d      	ldr	r3, [pc, #52]	@ (80110a8 <std+0x5c>)
 8011074:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011076:	4b0d      	ldr	r3, [pc, #52]	@ (80110ac <std+0x60>)
 8011078:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801107a:	4b0d      	ldr	r3, [pc, #52]	@ (80110b0 <std+0x64>)
 801107c:	6323      	str	r3, [r4, #48]	@ 0x30
 801107e:	4b0d      	ldr	r3, [pc, #52]	@ (80110b4 <std+0x68>)
 8011080:	6224      	str	r4, [r4, #32]
 8011082:	429c      	cmp	r4, r3
 8011084:	d006      	beq.n	8011094 <std+0x48>
 8011086:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801108a:	4294      	cmp	r4, r2
 801108c:	d002      	beq.n	8011094 <std+0x48>
 801108e:	33d0      	adds	r3, #208	@ 0xd0
 8011090:	429c      	cmp	r4, r3
 8011092:	d105      	bne.n	80110a0 <std+0x54>
 8011094:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801109c:	f000 ba5c 	b.w	8011558 <__retarget_lock_init_recursive>
 80110a0:	bd10      	pop	{r4, pc}
 80110a2:	bf00      	nop
 80110a4:	080112b1 	.word	0x080112b1
 80110a8:	080112d3 	.word	0x080112d3
 80110ac:	0801130b 	.word	0x0801130b
 80110b0:	0801132f 	.word	0x0801132f
 80110b4:	2000f748 	.word	0x2000f748

080110b8 <stdio_exit_handler>:
 80110b8:	4a02      	ldr	r2, [pc, #8]	@ (80110c4 <stdio_exit_handler+0xc>)
 80110ba:	4903      	ldr	r1, [pc, #12]	@ (80110c8 <stdio_exit_handler+0x10>)
 80110bc:	4803      	ldr	r0, [pc, #12]	@ (80110cc <stdio_exit_handler+0x14>)
 80110be:	f000 b869 	b.w	8011194 <_fwalk_sglue>
 80110c2:	bf00      	nop
 80110c4:	20000100 	.word	0x20000100
 80110c8:	08012eb1 	.word	0x08012eb1
 80110cc:	20000110 	.word	0x20000110

080110d0 <cleanup_stdio>:
 80110d0:	6841      	ldr	r1, [r0, #4]
 80110d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011104 <cleanup_stdio+0x34>)
 80110d4:	4299      	cmp	r1, r3
 80110d6:	b510      	push	{r4, lr}
 80110d8:	4604      	mov	r4, r0
 80110da:	d001      	beq.n	80110e0 <cleanup_stdio+0x10>
 80110dc:	f001 fee8 	bl	8012eb0 <_fflush_r>
 80110e0:	68a1      	ldr	r1, [r4, #8]
 80110e2:	4b09      	ldr	r3, [pc, #36]	@ (8011108 <cleanup_stdio+0x38>)
 80110e4:	4299      	cmp	r1, r3
 80110e6:	d002      	beq.n	80110ee <cleanup_stdio+0x1e>
 80110e8:	4620      	mov	r0, r4
 80110ea:	f001 fee1 	bl	8012eb0 <_fflush_r>
 80110ee:	68e1      	ldr	r1, [r4, #12]
 80110f0:	4b06      	ldr	r3, [pc, #24]	@ (801110c <cleanup_stdio+0x3c>)
 80110f2:	4299      	cmp	r1, r3
 80110f4:	d004      	beq.n	8011100 <cleanup_stdio+0x30>
 80110f6:	4620      	mov	r0, r4
 80110f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110fc:	f001 bed8 	b.w	8012eb0 <_fflush_r>
 8011100:	bd10      	pop	{r4, pc}
 8011102:	bf00      	nop
 8011104:	2000f748 	.word	0x2000f748
 8011108:	2000f7b0 	.word	0x2000f7b0
 801110c:	2000f818 	.word	0x2000f818

08011110 <global_stdio_init.part.0>:
 8011110:	b510      	push	{r4, lr}
 8011112:	4b0b      	ldr	r3, [pc, #44]	@ (8011140 <global_stdio_init.part.0+0x30>)
 8011114:	4c0b      	ldr	r4, [pc, #44]	@ (8011144 <global_stdio_init.part.0+0x34>)
 8011116:	4a0c      	ldr	r2, [pc, #48]	@ (8011148 <global_stdio_init.part.0+0x38>)
 8011118:	601a      	str	r2, [r3, #0]
 801111a:	4620      	mov	r0, r4
 801111c:	2200      	movs	r2, #0
 801111e:	2104      	movs	r1, #4
 8011120:	f7ff ff94 	bl	801104c <std>
 8011124:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011128:	2201      	movs	r2, #1
 801112a:	2109      	movs	r1, #9
 801112c:	f7ff ff8e 	bl	801104c <std>
 8011130:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011134:	2202      	movs	r2, #2
 8011136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801113a:	2112      	movs	r1, #18
 801113c:	f7ff bf86 	b.w	801104c <std>
 8011140:	2000f880 	.word	0x2000f880
 8011144:	2000f748 	.word	0x2000f748
 8011148:	080110b9 	.word	0x080110b9

0801114c <__sfp_lock_acquire>:
 801114c:	4801      	ldr	r0, [pc, #4]	@ (8011154 <__sfp_lock_acquire+0x8>)
 801114e:	f000 ba04 	b.w	801155a <__retarget_lock_acquire_recursive>
 8011152:	bf00      	nop
 8011154:	2000f889 	.word	0x2000f889

08011158 <__sfp_lock_release>:
 8011158:	4801      	ldr	r0, [pc, #4]	@ (8011160 <__sfp_lock_release+0x8>)
 801115a:	f000 b9ff 	b.w	801155c <__retarget_lock_release_recursive>
 801115e:	bf00      	nop
 8011160:	2000f889 	.word	0x2000f889

08011164 <__sinit>:
 8011164:	b510      	push	{r4, lr}
 8011166:	4604      	mov	r4, r0
 8011168:	f7ff fff0 	bl	801114c <__sfp_lock_acquire>
 801116c:	6a23      	ldr	r3, [r4, #32]
 801116e:	b11b      	cbz	r3, 8011178 <__sinit+0x14>
 8011170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011174:	f7ff bff0 	b.w	8011158 <__sfp_lock_release>
 8011178:	4b04      	ldr	r3, [pc, #16]	@ (801118c <__sinit+0x28>)
 801117a:	6223      	str	r3, [r4, #32]
 801117c:	4b04      	ldr	r3, [pc, #16]	@ (8011190 <__sinit+0x2c>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d1f5      	bne.n	8011170 <__sinit+0xc>
 8011184:	f7ff ffc4 	bl	8011110 <global_stdio_init.part.0>
 8011188:	e7f2      	b.n	8011170 <__sinit+0xc>
 801118a:	bf00      	nop
 801118c:	080110d1 	.word	0x080110d1
 8011190:	2000f880 	.word	0x2000f880

08011194 <_fwalk_sglue>:
 8011194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011198:	4607      	mov	r7, r0
 801119a:	4688      	mov	r8, r1
 801119c:	4614      	mov	r4, r2
 801119e:	2600      	movs	r6, #0
 80111a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111a4:	f1b9 0901 	subs.w	r9, r9, #1
 80111a8:	d505      	bpl.n	80111b6 <_fwalk_sglue+0x22>
 80111aa:	6824      	ldr	r4, [r4, #0]
 80111ac:	2c00      	cmp	r4, #0
 80111ae:	d1f7      	bne.n	80111a0 <_fwalk_sglue+0xc>
 80111b0:	4630      	mov	r0, r6
 80111b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111b6:	89ab      	ldrh	r3, [r5, #12]
 80111b8:	2b01      	cmp	r3, #1
 80111ba:	d907      	bls.n	80111cc <_fwalk_sglue+0x38>
 80111bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111c0:	3301      	adds	r3, #1
 80111c2:	d003      	beq.n	80111cc <_fwalk_sglue+0x38>
 80111c4:	4629      	mov	r1, r5
 80111c6:	4638      	mov	r0, r7
 80111c8:	47c0      	blx	r8
 80111ca:	4306      	orrs	r6, r0
 80111cc:	3568      	adds	r5, #104	@ 0x68
 80111ce:	e7e9      	b.n	80111a4 <_fwalk_sglue+0x10>

080111d0 <iprintf>:
 80111d0:	b40f      	push	{r0, r1, r2, r3}
 80111d2:	b507      	push	{r0, r1, r2, lr}
 80111d4:	4906      	ldr	r1, [pc, #24]	@ (80111f0 <iprintf+0x20>)
 80111d6:	ab04      	add	r3, sp, #16
 80111d8:	6808      	ldr	r0, [r1, #0]
 80111da:	f853 2b04 	ldr.w	r2, [r3], #4
 80111de:	6881      	ldr	r1, [r0, #8]
 80111e0:	9301      	str	r3, [sp, #4]
 80111e2:	f001 fcc9 	bl	8012b78 <_vfiprintf_r>
 80111e6:	b003      	add	sp, #12
 80111e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80111ec:	b004      	add	sp, #16
 80111ee:	4770      	bx	lr
 80111f0:	2000010c 	.word	0x2000010c

080111f4 <_puts_r>:
 80111f4:	6a03      	ldr	r3, [r0, #32]
 80111f6:	b570      	push	{r4, r5, r6, lr}
 80111f8:	6884      	ldr	r4, [r0, #8]
 80111fa:	4605      	mov	r5, r0
 80111fc:	460e      	mov	r6, r1
 80111fe:	b90b      	cbnz	r3, 8011204 <_puts_r+0x10>
 8011200:	f7ff ffb0 	bl	8011164 <__sinit>
 8011204:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011206:	07db      	lsls	r3, r3, #31
 8011208:	d405      	bmi.n	8011216 <_puts_r+0x22>
 801120a:	89a3      	ldrh	r3, [r4, #12]
 801120c:	0598      	lsls	r0, r3, #22
 801120e:	d402      	bmi.n	8011216 <_puts_r+0x22>
 8011210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011212:	f000 f9a2 	bl	801155a <__retarget_lock_acquire_recursive>
 8011216:	89a3      	ldrh	r3, [r4, #12]
 8011218:	0719      	lsls	r1, r3, #28
 801121a:	d502      	bpl.n	8011222 <_puts_r+0x2e>
 801121c:	6923      	ldr	r3, [r4, #16]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d135      	bne.n	801128e <_puts_r+0x9a>
 8011222:	4621      	mov	r1, r4
 8011224:	4628      	mov	r0, r5
 8011226:	f000 f8c5 	bl	80113b4 <__swsetup_r>
 801122a:	b380      	cbz	r0, 801128e <_puts_r+0x9a>
 801122c:	f04f 35ff 	mov.w	r5, #4294967295
 8011230:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011232:	07da      	lsls	r2, r3, #31
 8011234:	d405      	bmi.n	8011242 <_puts_r+0x4e>
 8011236:	89a3      	ldrh	r3, [r4, #12]
 8011238:	059b      	lsls	r3, r3, #22
 801123a:	d402      	bmi.n	8011242 <_puts_r+0x4e>
 801123c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801123e:	f000 f98d 	bl	801155c <__retarget_lock_release_recursive>
 8011242:	4628      	mov	r0, r5
 8011244:	bd70      	pop	{r4, r5, r6, pc}
 8011246:	2b00      	cmp	r3, #0
 8011248:	da04      	bge.n	8011254 <_puts_r+0x60>
 801124a:	69a2      	ldr	r2, [r4, #24]
 801124c:	429a      	cmp	r2, r3
 801124e:	dc17      	bgt.n	8011280 <_puts_r+0x8c>
 8011250:	290a      	cmp	r1, #10
 8011252:	d015      	beq.n	8011280 <_puts_r+0x8c>
 8011254:	6823      	ldr	r3, [r4, #0]
 8011256:	1c5a      	adds	r2, r3, #1
 8011258:	6022      	str	r2, [r4, #0]
 801125a:	7019      	strb	r1, [r3, #0]
 801125c:	68a3      	ldr	r3, [r4, #8]
 801125e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011262:	3b01      	subs	r3, #1
 8011264:	60a3      	str	r3, [r4, #8]
 8011266:	2900      	cmp	r1, #0
 8011268:	d1ed      	bne.n	8011246 <_puts_r+0x52>
 801126a:	2b00      	cmp	r3, #0
 801126c:	da11      	bge.n	8011292 <_puts_r+0x9e>
 801126e:	4622      	mov	r2, r4
 8011270:	210a      	movs	r1, #10
 8011272:	4628      	mov	r0, r5
 8011274:	f000 f85f 	bl	8011336 <__swbuf_r>
 8011278:	3001      	adds	r0, #1
 801127a:	d0d7      	beq.n	801122c <_puts_r+0x38>
 801127c:	250a      	movs	r5, #10
 801127e:	e7d7      	b.n	8011230 <_puts_r+0x3c>
 8011280:	4622      	mov	r2, r4
 8011282:	4628      	mov	r0, r5
 8011284:	f000 f857 	bl	8011336 <__swbuf_r>
 8011288:	3001      	adds	r0, #1
 801128a:	d1e7      	bne.n	801125c <_puts_r+0x68>
 801128c:	e7ce      	b.n	801122c <_puts_r+0x38>
 801128e:	3e01      	subs	r6, #1
 8011290:	e7e4      	b.n	801125c <_puts_r+0x68>
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	1c5a      	adds	r2, r3, #1
 8011296:	6022      	str	r2, [r4, #0]
 8011298:	220a      	movs	r2, #10
 801129a:	701a      	strb	r2, [r3, #0]
 801129c:	e7ee      	b.n	801127c <_puts_r+0x88>
	...

080112a0 <puts>:
 80112a0:	4b02      	ldr	r3, [pc, #8]	@ (80112ac <puts+0xc>)
 80112a2:	4601      	mov	r1, r0
 80112a4:	6818      	ldr	r0, [r3, #0]
 80112a6:	f7ff bfa5 	b.w	80111f4 <_puts_r>
 80112aa:	bf00      	nop
 80112ac:	2000010c 	.word	0x2000010c

080112b0 <__sread>:
 80112b0:	b510      	push	{r4, lr}
 80112b2:	460c      	mov	r4, r1
 80112b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112b8:	f000 f900 	bl	80114bc <_read_r>
 80112bc:	2800      	cmp	r0, #0
 80112be:	bfab      	itete	ge
 80112c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80112c2:	89a3      	ldrhlt	r3, [r4, #12]
 80112c4:	181b      	addge	r3, r3, r0
 80112c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80112ca:	bfac      	ite	ge
 80112cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80112ce:	81a3      	strhlt	r3, [r4, #12]
 80112d0:	bd10      	pop	{r4, pc}

080112d2 <__swrite>:
 80112d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112d6:	461f      	mov	r7, r3
 80112d8:	898b      	ldrh	r3, [r1, #12]
 80112da:	05db      	lsls	r3, r3, #23
 80112dc:	4605      	mov	r5, r0
 80112de:	460c      	mov	r4, r1
 80112e0:	4616      	mov	r6, r2
 80112e2:	d505      	bpl.n	80112f0 <__swrite+0x1e>
 80112e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112e8:	2302      	movs	r3, #2
 80112ea:	2200      	movs	r2, #0
 80112ec:	f000 f8d4 	bl	8011498 <_lseek_r>
 80112f0:	89a3      	ldrh	r3, [r4, #12]
 80112f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80112fa:	81a3      	strh	r3, [r4, #12]
 80112fc:	4632      	mov	r2, r6
 80112fe:	463b      	mov	r3, r7
 8011300:	4628      	mov	r0, r5
 8011302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011306:	f000 b8eb 	b.w	80114e0 <_write_r>

0801130a <__sseek>:
 801130a:	b510      	push	{r4, lr}
 801130c:	460c      	mov	r4, r1
 801130e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011312:	f000 f8c1 	bl	8011498 <_lseek_r>
 8011316:	1c43      	adds	r3, r0, #1
 8011318:	89a3      	ldrh	r3, [r4, #12]
 801131a:	bf15      	itete	ne
 801131c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801131e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011322:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011326:	81a3      	strheq	r3, [r4, #12]
 8011328:	bf18      	it	ne
 801132a:	81a3      	strhne	r3, [r4, #12]
 801132c:	bd10      	pop	{r4, pc}

0801132e <__sclose>:
 801132e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011332:	f000 b8a1 	b.w	8011478 <_close_r>

08011336 <__swbuf_r>:
 8011336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011338:	460e      	mov	r6, r1
 801133a:	4614      	mov	r4, r2
 801133c:	4605      	mov	r5, r0
 801133e:	b118      	cbz	r0, 8011348 <__swbuf_r+0x12>
 8011340:	6a03      	ldr	r3, [r0, #32]
 8011342:	b90b      	cbnz	r3, 8011348 <__swbuf_r+0x12>
 8011344:	f7ff ff0e 	bl	8011164 <__sinit>
 8011348:	69a3      	ldr	r3, [r4, #24]
 801134a:	60a3      	str	r3, [r4, #8]
 801134c:	89a3      	ldrh	r3, [r4, #12]
 801134e:	071a      	lsls	r2, r3, #28
 8011350:	d501      	bpl.n	8011356 <__swbuf_r+0x20>
 8011352:	6923      	ldr	r3, [r4, #16]
 8011354:	b943      	cbnz	r3, 8011368 <__swbuf_r+0x32>
 8011356:	4621      	mov	r1, r4
 8011358:	4628      	mov	r0, r5
 801135a:	f000 f82b 	bl	80113b4 <__swsetup_r>
 801135e:	b118      	cbz	r0, 8011368 <__swbuf_r+0x32>
 8011360:	f04f 37ff 	mov.w	r7, #4294967295
 8011364:	4638      	mov	r0, r7
 8011366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011368:	6823      	ldr	r3, [r4, #0]
 801136a:	6922      	ldr	r2, [r4, #16]
 801136c:	1a98      	subs	r0, r3, r2
 801136e:	6963      	ldr	r3, [r4, #20]
 8011370:	b2f6      	uxtb	r6, r6
 8011372:	4283      	cmp	r3, r0
 8011374:	4637      	mov	r7, r6
 8011376:	dc05      	bgt.n	8011384 <__swbuf_r+0x4e>
 8011378:	4621      	mov	r1, r4
 801137a:	4628      	mov	r0, r5
 801137c:	f001 fd98 	bl	8012eb0 <_fflush_r>
 8011380:	2800      	cmp	r0, #0
 8011382:	d1ed      	bne.n	8011360 <__swbuf_r+0x2a>
 8011384:	68a3      	ldr	r3, [r4, #8]
 8011386:	3b01      	subs	r3, #1
 8011388:	60a3      	str	r3, [r4, #8]
 801138a:	6823      	ldr	r3, [r4, #0]
 801138c:	1c5a      	adds	r2, r3, #1
 801138e:	6022      	str	r2, [r4, #0]
 8011390:	701e      	strb	r6, [r3, #0]
 8011392:	6962      	ldr	r2, [r4, #20]
 8011394:	1c43      	adds	r3, r0, #1
 8011396:	429a      	cmp	r2, r3
 8011398:	d004      	beq.n	80113a4 <__swbuf_r+0x6e>
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	07db      	lsls	r3, r3, #31
 801139e:	d5e1      	bpl.n	8011364 <__swbuf_r+0x2e>
 80113a0:	2e0a      	cmp	r6, #10
 80113a2:	d1df      	bne.n	8011364 <__swbuf_r+0x2e>
 80113a4:	4621      	mov	r1, r4
 80113a6:	4628      	mov	r0, r5
 80113a8:	f001 fd82 	bl	8012eb0 <_fflush_r>
 80113ac:	2800      	cmp	r0, #0
 80113ae:	d0d9      	beq.n	8011364 <__swbuf_r+0x2e>
 80113b0:	e7d6      	b.n	8011360 <__swbuf_r+0x2a>
	...

080113b4 <__swsetup_r>:
 80113b4:	b538      	push	{r3, r4, r5, lr}
 80113b6:	4b29      	ldr	r3, [pc, #164]	@ (801145c <__swsetup_r+0xa8>)
 80113b8:	4605      	mov	r5, r0
 80113ba:	6818      	ldr	r0, [r3, #0]
 80113bc:	460c      	mov	r4, r1
 80113be:	b118      	cbz	r0, 80113c8 <__swsetup_r+0x14>
 80113c0:	6a03      	ldr	r3, [r0, #32]
 80113c2:	b90b      	cbnz	r3, 80113c8 <__swsetup_r+0x14>
 80113c4:	f7ff fece 	bl	8011164 <__sinit>
 80113c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113cc:	0719      	lsls	r1, r3, #28
 80113ce:	d422      	bmi.n	8011416 <__swsetup_r+0x62>
 80113d0:	06da      	lsls	r2, r3, #27
 80113d2:	d407      	bmi.n	80113e4 <__swsetup_r+0x30>
 80113d4:	2209      	movs	r2, #9
 80113d6:	602a      	str	r2, [r5, #0]
 80113d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113dc:	81a3      	strh	r3, [r4, #12]
 80113de:	f04f 30ff 	mov.w	r0, #4294967295
 80113e2:	e033      	b.n	801144c <__swsetup_r+0x98>
 80113e4:	0758      	lsls	r0, r3, #29
 80113e6:	d512      	bpl.n	801140e <__swsetup_r+0x5a>
 80113e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80113ea:	b141      	cbz	r1, 80113fe <__swsetup_r+0x4a>
 80113ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113f0:	4299      	cmp	r1, r3
 80113f2:	d002      	beq.n	80113fa <__swsetup_r+0x46>
 80113f4:	4628      	mov	r0, r5
 80113f6:	f000 ff1b 	bl	8012230 <_free_r>
 80113fa:	2300      	movs	r3, #0
 80113fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80113fe:	89a3      	ldrh	r3, [r4, #12]
 8011400:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011404:	81a3      	strh	r3, [r4, #12]
 8011406:	2300      	movs	r3, #0
 8011408:	6063      	str	r3, [r4, #4]
 801140a:	6923      	ldr	r3, [r4, #16]
 801140c:	6023      	str	r3, [r4, #0]
 801140e:	89a3      	ldrh	r3, [r4, #12]
 8011410:	f043 0308 	orr.w	r3, r3, #8
 8011414:	81a3      	strh	r3, [r4, #12]
 8011416:	6923      	ldr	r3, [r4, #16]
 8011418:	b94b      	cbnz	r3, 801142e <__swsetup_r+0x7a>
 801141a:	89a3      	ldrh	r3, [r4, #12]
 801141c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011424:	d003      	beq.n	801142e <__swsetup_r+0x7a>
 8011426:	4621      	mov	r1, r4
 8011428:	4628      	mov	r0, r5
 801142a:	f001 fd8f 	bl	8012f4c <__smakebuf_r>
 801142e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011432:	f013 0201 	ands.w	r2, r3, #1
 8011436:	d00a      	beq.n	801144e <__swsetup_r+0x9a>
 8011438:	2200      	movs	r2, #0
 801143a:	60a2      	str	r2, [r4, #8]
 801143c:	6962      	ldr	r2, [r4, #20]
 801143e:	4252      	negs	r2, r2
 8011440:	61a2      	str	r2, [r4, #24]
 8011442:	6922      	ldr	r2, [r4, #16]
 8011444:	b942      	cbnz	r2, 8011458 <__swsetup_r+0xa4>
 8011446:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801144a:	d1c5      	bne.n	80113d8 <__swsetup_r+0x24>
 801144c:	bd38      	pop	{r3, r4, r5, pc}
 801144e:	0799      	lsls	r1, r3, #30
 8011450:	bf58      	it	pl
 8011452:	6962      	ldrpl	r2, [r4, #20]
 8011454:	60a2      	str	r2, [r4, #8]
 8011456:	e7f4      	b.n	8011442 <__swsetup_r+0x8e>
 8011458:	2000      	movs	r0, #0
 801145a:	e7f7      	b.n	801144c <__swsetup_r+0x98>
 801145c:	2000010c 	.word	0x2000010c

08011460 <memset>:
 8011460:	4402      	add	r2, r0
 8011462:	4603      	mov	r3, r0
 8011464:	4293      	cmp	r3, r2
 8011466:	d100      	bne.n	801146a <memset+0xa>
 8011468:	4770      	bx	lr
 801146a:	f803 1b01 	strb.w	r1, [r3], #1
 801146e:	e7f9      	b.n	8011464 <memset+0x4>

08011470 <_localeconv_r>:
 8011470:	4800      	ldr	r0, [pc, #0]	@ (8011474 <_localeconv_r+0x4>)
 8011472:	4770      	bx	lr
 8011474:	2000024c 	.word	0x2000024c

08011478 <_close_r>:
 8011478:	b538      	push	{r3, r4, r5, lr}
 801147a:	4d06      	ldr	r5, [pc, #24]	@ (8011494 <_close_r+0x1c>)
 801147c:	2300      	movs	r3, #0
 801147e:	4604      	mov	r4, r0
 8011480:	4608      	mov	r0, r1
 8011482:	602b      	str	r3, [r5, #0]
 8011484:	f7f0 feba 	bl	80021fc <_close>
 8011488:	1c43      	adds	r3, r0, #1
 801148a:	d102      	bne.n	8011492 <_close_r+0x1a>
 801148c:	682b      	ldr	r3, [r5, #0]
 801148e:	b103      	cbz	r3, 8011492 <_close_r+0x1a>
 8011490:	6023      	str	r3, [r4, #0]
 8011492:	bd38      	pop	{r3, r4, r5, pc}
 8011494:	2000f884 	.word	0x2000f884

08011498 <_lseek_r>:
 8011498:	b538      	push	{r3, r4, r5, lr}
 801149a:	4d07      	ldr	r5, [pc, #28]	@ (80114b8 <_lseek_r+0x20>)
 801149c:	4604      	mov	r4, r0
 801149e:	4608      	mov	r0, r1
 80114a0:	4611      	mov	r1, r2
 80114a2:	2200      	movs	r2, #0
 80114a4:	602a      	str	r2, [r5, #0]
 80114a6:	461a      	mov	r2, r3
 80114a8:	f7f0 fecf 	bl	800224a <_lseek>
 80114ac:	1c43      	adds	r3, r0, #1
 80114ae:	d102      	bne.n	80114b6 <_lseek_r+0x1e>
 80114b0:	682b      	ldr	r3, [r5, #0]
 80114b2:	b103      	cbz	r3, 80114b6 <_lseek_r+0x1e>
 80114b4:	6023      	str	r3, [r4, #0]
 80114b6:	bd38      	pop	{r3, r4, r5, pc}
 80114b8:	2000f884 	.word	0x2000f884

080114bc <_read_r>:
 80114bc:	b538      	push	{r3, r4, r5, lr}
 80114be:	4d07      	ldr	r5, [pc, #28]	@ (80114dc <_read_r+0x20>)
 80114c0:	4604      	mov	r4, r0
 80114c2:	4608      	mov	r0, r1
 80114c4:	4611      	mov	r1, r2
 80114c6:	2200      	movs	r2, #0
 80114c8:	602a      	str	r2, [r5, #0]
 80114ca:	461a      	mov	r2, r3
 80114cc:	f7f0 fe5d 	bl	800218a <_read>
 80114d0:	1c43      	adds	r3, r0, #1
 80114d2:	d102      	bne.n	80114da <_read_r+0x1e>
 80114d4:	682b      	ldr	r3, [r5, #0]
 80114d6:	b103      	cbz	r3, 80114da <_read_r+0x1e>
 80114d8:	6023      	str	r3, [r4, #0]
 80114da:	bd38      	pop	{r3, r4, r5, pc}
 80114dc:	2000f884 	.word	0x2000f884

080114e0 <_write_r>:
 80114e0:	b538      	push	{r3, r4, r5, lr}
 80114e2:	4d07      	ldr	r5, [pc, #28]	@ (8011500 <_write_r+0x20>)
 80114e4:	4604      	mov	r4, r0
 80114e6:	4608      	mov	r0, r1
 80114e8:	4611      	mov	r1, r2
 80114ea:	2200      	movs	r2, #0
 80114ec:	602a      	str	r2, [r5, #0]
 80114ee:	461a      	mov	r2, r3
 80114f0:	f7f0 fe68 	bl	80021c4 <_write>
 80114f4:	1c43      	adds	r3, r0, #1
 80114f6:	d102      	bne.n	80114fe <_write_r+0x1e>
 80114f8:	682b      	ldr	r3, [r5, #0]
 80114fa:	b103      	cbz	r3, 80114fe <_write_r+0x1e>
 80114fc:	6023      	str	r3, [r4, #0]
 80114fe:	bd38      	pop	{r3, r4, r5, pc}
 8011500:	2000f884 	.word	0x2000f884

08011504 <__errno>:
 8011504:	4b01      	ldr	r3, [pc, #4]	@ (801150c <__errno+0x8>)
 8011506:	6818      	ldr	r0, [r3, #0]
 8011508:	4770      	bx	lr
 801150a:	bf00      	nop
 801150c:	2000010c 	.word	0x2000010c

08011510 <__libc_init_array>:
 8011510:	b570      	push	{r4, r5, r6, lr}
 8011512:	4d0d      	ldr	r5, [pc, #52]	@ (8011548 <__libc_init_array+0x38>)
 8011514:	4c0d      	ldr	r4, [pc, #52]	@ (801154c <__libc_init_array+0x3c>)
 8011516:	1b64      	subs	r4, r4, r5
 8011518:	10a4      	asrs	r4, r4, #2
 801151a:	2600      	movs	r6, #0
 801151c:	42a6      	cmp	r6, r4
 801151e:	d109      	bne.n	8011534 <__libc_init_array+0x24>
 8011520:	4d0b      	ldr	r5, [pc, #44]	@ (8011550 <__libc_init_array+0x40>)
 8011522:	4c0c      	ldr	r4, [pc, #48]	@ (8011554 <__libc_init_array+0x44>)
 8011524:	f001 fe30 	bl	8013188 <_init>
 8011528:	1b64      	subs	r4, r4, r5
 801152a:	10a4      	asrs	r4, r4, #2
 801152c:	2600      	movs	r6, #0
 801152e:	42a6      	cmp	r6, r4
 8011530:	d105      	bne.n	801153e <__libc_init_array+0x2e>
 8011532:	bd70      	pop	{r4, r5, r6, pc}
 8011534:	f855 3b04 	ldr.w	r3, [r5], #4
 8011538:	4798      	blx	r3
 801153a:	3601      	adds	r6, #1
 801153c:	e7ee      	b.n	801151c <__libc_init_array+0xc>
 801153e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011542:	4798      	blx	r3
 8011544:	3601      	adds	r6, #1
 8011546:	e7f2      	b.n	801152e <__libc_init_array+0x1e>
 8011548:	0801397c 	.word	0x0801397c
 801154c:	0801397c 	.word	0x0801397c
 8011550:	0801397c 	.word	0x0801397c
 8011554:	08013980 	.word	0x08013980

08011558 <__retarget_lock_init_recursive>:
 8011558:	4770      	bx	lr

0801155a <__retarget_lock_acquire_recursive>:
 801155a:	4770      	bx	lr

0801155c <__retarget_lock_release_recursive>:
 801155c:	4770      	bx	lr

0801155e <memcpy>:
 801155e:	440a      	add	r2, r1
 8011560:	4291      	cmp	r1, r2
 8011562:	f100 33ff 	add.w	r3, r0, #4294967295
 8011566:	d100      	bne.n	801156a <memcpy+0xc>
 8011568:	4770      	bx	lr
 801156a:	b510      	push	{r4, lr}
 801156c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011570:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011574:	4291      	cmp	r1, r2
 8011576:	d1f9      	bne.n	801156c <memcpy+0xe>
 8011578:	bd10      	pop	{r4, pc}

0801157a <quorem>:
 801157a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801157e:	6903      	ldr	r3, [r0, #16]
 8011580:	690c      	ldr	r4, [r1, #16]
 8011582:	42a3      	cmp	r3, r4
 8011584:	4607      	mov	r7, r0
 8011586:	db7e      	blt.n	8011686 <quorem+0x10c>
 8011588:	3c01      	subs	r4, #1
 801158a:	f101 0814 	add.w	r8, r1, #20
 801158e:	00a3      	lsls	r3, r4, #2
 8011590:	f100 0514 	add.w	r5, r0, #20
 8011594:	9300      	str	r3, [sp, #0]
 8011596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801159a:	9301      	str	r3, [sp, #4]
 801159c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80115a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115a4:	3301      	adds	r3, #1
 80115a6:	429a      	cmp	r2, r3
 80115a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80115ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80115b0:	d32e      	bcc.n	8011610 <quorem+0x96>
 80115b2:	f04f 0a00 	mov.w	sl, #0
 80115b6:	46c4      	mov	ip, r8
 80115b8:	46ae      	mov	lr, r5
 80115ba:	46d3      	mov	fp, sl
 80115bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80115c0:	b298      	uxth	r0, r3
 80115c2:	fb06 a000 	mla	r0, r6, r0, sl
 80115c6:	0c02      	lsrs	r2, r0, #16
 80115c8:	0c1b      	lsrs	r3, r3, #16
 80115ca:	fb06 2303 	mla	r3, r6, r3, r2
 80115ce:	f8de 2000 	ldr.w	r2, [lr]
 80115d2:	b280      	uxth	r0, r0
 80115d4:	b292      	uxth	r2, r2
 80115d6:	1a12      	subs	r2, r2, r0
 80115d8:	445a      	add	r2, fp
 80115da:	f8de 0000 	ldr.w	r0, [lr]
 80115de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80115e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80115ec:	b292      	uxth	r2, r2
 80115ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80115f2:	45e1      	cmp	r9, ip
 80115f4:	f84e 2b04 	str.w	r2, [lr], #4
 80115f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80115fc:	d2de      	bcs.n	80115bc <quorem+0x42>
 80115fe:	9b00      	ldr	r3, [sp, #0]
 8011600:	58eb      	ldr	r3, [r5, r3]
 8011602:	b92b      	cbnz	r3, 8011610 <quorem+0x96>
 8011604:	9b01      	ldr	r3, [sp, #4]
 8011606:	3b04      	subs	r3, #4
 8011608:	429d      	cmp	r5, r3
 801160a:	461a      	mov	r2, r3
 801160c:	d32f      	bcc.n	801166e <quorem+0xf4>
 801160e:	613c      	str	r4, [r7, #16]
 8011610:	4638      	mov	r0, r7
 8011612:	f001 f97f 	bl	8012914 <__mcmp>
 8011616:	2800      	cmp	r0, #0
 8011618:	db25      	blt.n	8011666 <quorem+0xec>
 801161a:	4629      	mov	r1, r5
 801161c:	2000      	movs	r0, #0
 801161e:	f858 2b04 	ldr.w	r2, [r8], #4
 8011622:	f8d1 c000 	ldr.w	ip, [r1]
 8011626:	fa1f fe82 	uxth.w	lr, r2
 801162a:	fa1f f38c 	uxth.w	r3, ip
 801162e:	eba3 030e 	sub.w	r3, r3, lr
 8011632:	4403      	add	r3, r0
 8011634:	0c12      	lsrs	r2, r2, #16
 8011636:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801163a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801163e:	b29b      	uxth	r3, r3
 8011640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011644:	45c1      	cmp	r9, r8
 8011646:	f841 3b04 	str.w	r3, [r1], #4
 801164a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801164e:	d2e6      	bcs.n	801161e <quorem+0xa4>
 8011650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011658:	b922      	cbnz	r2, 8011664 <quorem+0xea>
 801165a:	3b04      	subs	r3, #4
 801165c:	429d      	cmp	r5, r3
 801165e:	461a      	mov	r2, r3
 8011660:	d30b      	bcc.n	801167a <quorem+0x100>
 8011662:	613c      	str	r4, [r7, #16]
 8011664:	3601      	adds	r6, #1
 8011666:	4630      	mov	r0, r6
 8011668:	b003      	add	sp, #12
 801166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801166e:	6812      	ldr	r2, [r2, #0]
 8011670:	3b04      	subs	r3, #4
 8011672:	2a00      	cmp	r2, #0
 8011674:	d1cb      	bne.n	801160e <quorem+0x94>
 8011676:	3c01      	subs	r4, #1
 8011678:	e7c6      	b.n	8011608 <quorem+0x8e>
 801167a:	6812      	ldr	r2, [r2, #0]
 801167c:	3b04      	subs	r3, #4
 801167e:	2a00      	cmp	r2, #0
 8011680:	d1ef      	bne.n	8011662 <quorem+0xe8>
 8011682:	3c01      	subs	r4, #1
 8011684:	e7ea      	b.n	801165c <quorem+0xe2>
 8011686:	2000      	movs	r0, #0
 8011688:	e7ee      	b.n	8011668 <quorem+0xee>
 801168a:	0000      	movs	r0, r0
 801168c:	0000      	movs	r0, r0
	...

08011690 <_dtoa_r>:
 8011690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011694:	69c7      	ldr	r7, [r0, #28]
 8011696:	b097      	sub	sp, #92	@ 0x5c
 8011698:	ed8d 0b04 	vstr	d0, [sp, #16]
 801169c:	ec55 4b10 	vmov	r4, r5, d0
 80116a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80116a2:	9107      	str	r1, [sp, #28]
 80116a4:	4681      	mov	r9, r0
 80116a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80116a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80116aa:	b97f      	cbnz	r7, 80116cc <_dtoa_r+0x3c>
 80116ac:	2010      	movs	r0, #16
 80116ae:	f000 fe09 	bl	80122c4 <malloc>
 80116b2:	4602      	mov	r2, r0
 80116b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80116b8:	b920      	cbnz	r0, 80116c4 <_dtoa_r+0x34>
 80116ba:	4ba9      	ldr	r3, [pc, #676]	@ (8011960 <_dtoa_r+0x2d0>)
 80116bc:	21ef      	movs	r1, #239	@ 0xef
 80116be:	48a9      	ldr	r0, [pc, #676]	@ (8011964 <_dtoa_r+0x2d4>)
 80116c0:	f001 fcb2 	bl	8013028 <__assert_func>
 80116c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80116c8:	6007      	str	r7, [r0, #0]
 80116ca:	60c7      	str	r7, [r0, #12]
 80116cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80116d0:	6819      	ldr	r1, [r3, #0]
 80116d2:	b159      	cbz	r1, 80116ec <_dtoa_r+0x5c>
 80116d4:	685a      	ldr	r2, [r3, #4]
 80116d6:	604a      	str	r2, [r1, #4]
 80116d8:	2301      	movs	r3, #1
 80116da:	4093      	lsls	r3, r2
 80116dc:	608b      	str	r3, [r1, #8]
 80116de:	4648      	mov	r0, r9
 80116e0:	f000 fee6 	bl	80124b0 <_Bfree>
 80116e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80116e8:	2200      	movs	r2, #0
 80116ea:	601a      	str	r2, [r3, #0]
 80116ec:	1e2b      	subs	r3, r5, #0
 80116ee:	bfb9      	ittee	lt
 80116f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80116f4:	9305      	strlt	r3, [sp, #20]
 80116f6:	2300      	movge	r3, #0
 80116f8:	6033      	strge	r3, [r6, #0]
 80116fa:	9f05      	ldr	r7, [sp, #20]
 80116fc:	4b9a      	ldr	r3, [pc, #616]	@ (8011968 <_dtoa_r+0x2d8>)
 80116fe:	bfbc      	itt	lt
 8011700:	2201      	movlt	r2, #1
 8011702:	6032      	strlt	r2, [r6, #0]
 8011704:	43bb      	bics	r3, r7
 8011706:	d112      	bne.n	801172e <_dtoa_r+0x9e>
 8011708:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801170a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801170e:	6013      	str	r3, [r2, #0]
 8011710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011714:	4323      	orrs	r3, r4
 8011716:	f000 855a 	beq.w	80121ce <_dtoa_r+0xb3e>
 801171a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801171c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801197c <_dtoa_r+0x2ec>
 8011720:	2b00      	cmp	r3, #0
 8011722:	f000 855c 	beq.w	80121de <_dtoa_r+0xb4e>
 8011726:	f10a 0303 	add.w	r3, sl, #3
 801172a:	f000 bd56 	b.w	80121da <_dtoa_r+0xb4a>
 801172e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011732:	2200      	movs	r2, #0
 8011734:	ec51 0b17 	vmov	r0, r1, d7
 8011738:	2300      	movs	r3, #0
 801173a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801173e:	f7ef f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011742:	4680      	mov	r8, r0
 8011744:	b158      	cbz	r0, 801175e <_dtoa_r+0xce>
 8011746:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011748:	2301      	movs	r3, #1
 801174a:	6013      	str	r3, [r2, #0]
 801174c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801174e:	b113      	cbz	r3, 8011756 <_dtoa_r+0xc6>
 8011750:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011752:	4b86      	ldr	r3, [pc, #536]	@ (801196c <_dtoa_r+0x2dc>)
 8011754:	6013      	str	r3, [r2, #0]
 8011756:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011980 <_dtoa_r+0x2f0>
 801175a:	f000 bd40 	b.w	80121de <_dtoa_r+0xb4e>
 801175e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8011762:	aa14      	add	r2, sp, #80	@ 0x50
 8011764:	a915      	add	r1, sp, #84	@ 0x54
 8011766:	4648      	mov	r0, r9
 8011768:	f001 f984 	bl	8012a74 <__d2b>
 801176c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011770:	9002      	str	r0, [sp, #8]
 8011772:	2e00      	cmp	r6, #0
 8011774:	d078      	beq.n	8011868 <_dtoa_r+0x1d8>
 8011776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011778:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801177c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011784:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011788:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801178c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011790:	4619      	mov	r1, r3
 8011792:	2200      	movs	r2, #0
 8011794:	4b76      	ldr	r3, [pc, #472]	@ (8011970 <_dtoa_r+0x2e0>)
 8011796:	f7ee fd77 	bl	8000288 <__aeabi_dsub>
 801179a:	a36b      	add	r3, pc, #428	@ (adr r3, 8011948 <_dtoa_r+0x2b8>)
 801179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a0:	f7ee ff2a 	bl	80005f8 <__aeabi_dmul>
 80117a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8011950 <_dtoa_r+0x2c0>)
 80117a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117aa:	f7ee fd6f 	bl	800028c <__adddf3>
 80117ae:	4604      	mov	r4, r0
 80117b0:	4630      	mov	r0, r6
 80117b2:	460d      	mov	r5, r1
 80117b4:	f7ee feb6 	bl	8000524 <__aeabi_i2d>
 80117b8:	a367      	add	r3, pc, #412	@ (adr r3, 8011958 <_dtoa_r+0x2c8>)
 80117ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117be:	f7ee ff1b 	bl	80005f8 <__aeabi_dmul>
 80117c2:	4602      	mov	r2, r0
 80117c4:	460b      	mov	r3, r1
 80117c6:	4620      	mov	r0, r4
 80117c8:	4629      	mov	r1, r5
 80117ca:	f7ee fd5f 	bl	800028c <__adddf3>
 80117ce:	4604      	mov	r4, r0
 80117d0:	460d      	mov	r5, r1
 80117d2:	f7ef f9c1 	bl	8000b58 <__aeabi_d2iz>
 80117d6:	2200      	movs	r2, #0
 80117d8:	4607      	mov	r7, r0
 80117da:	2300      	movs	r3, #0
 80117dc:	4620      	mov	r0, r4
 80117de:	4629      	mov	r1, r5
 80117e0:	f7ef f97c 	bl	8000adc <__aeabi_dcmplt>
 80117e4:	b140      	cbz	r0, 80117f8 <_dtoa_r+0x168>
 80117e6:	4638      	mov	r0, r7
 80117e8:	f7ee fe9c 	bl	8000524 <__aeabi_i2d>
 80117ec:	4622      	mov	r2, r4
 80117ee:	462b      	mov	r3, r5
 80117f0:	f7ef f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 80117f4:	b900      	cbnz	r0, 80117f8 <_dtoa_r+0x168>
 80117f6:	3f01      	subs	r7, #1
 80117f8:	2f16      	cmp	r7, #22
 80117fa:	d852      	bhi.n	80118a2 <_dtoa_r+0x212>
 80117fc:	4b5d      	ldr	r3, [pc, #372]	@ (8011974 <_dtoa_r+0x2e4>)
 80117fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011806:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801180a:	f7ef f967 	bl	8000adc <__aeabi_dcmplt>
 801180e:	2800      	cmp	r0, #0
 8011810:	d049      	beq.n	80118a6 <_dtoa_r+0x216>
 8011812:	3f01      	subs	r7, #1
 8011814:	2300      	movs	r3, #0
 8011816:	9310      	str	r3, [sp, #64]	@ 0x40
 8011818:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801181a:	1b9b      	subs	r3, r3, r6
 801181c:	1e5a      	subs	r2, r3, #1
 801181e:	bf45      	ittet	mi
 8011820:	f1c3 0301 	rsbmi	r3, r3, #1
 8011824:	9300      	strmi	r3, [sp, #0]
 8011826:	2300      	movpl	r3, #0
 8011828:	2300      	movmi	r3, #0
 801182a:	9206      	str	r2, [sp, #24]
 801182c:	bf54      	ite	pl
 801182e:	9300      	strpl	r3, [sp, #0]
 8011830:	9306      	strmi	r3, [sp, #24]
 8011832:	2f00      	cmp	r7, #0
 8011834:	db39      	blt.n	80118aa <_dtoa_r+0x21a>
 8011836:	9b06      	ldr	r3, [sp, #24]
 8011838:	970d      	str	r7, [sp, #52]	@ 0x34
 801183a:	443b      	add	r3, r7
 801183c:	9306      	str	r3, [sp, #24]
 801183e:	2300      	movs	r3, #0
 8011840:	9308      	str	r3, [sp, #32]
 8011842:	9b07      	ldr	r3, [sp, #28]
 8011844:	2b09      	cmp	r3, #9
 8011846:	d863      	bhi.n	8011910 <_dtoa_r+0x280>
 8011848:	2b05      	cmp	r3, #5
 801184a:	bfc4      	itt	gt
 801184c:	3b04      	subgt	r3, #4
 801184e:	9307      	strgt	r3, [sp, #28]
 8011850:	9b07      	ldr	r3, [sp, #28]
 8011852:	f1a3 0302 	sub.w	r3, r3, #2
 8011856:	bfcc      	ite	gt
 8011858:	2400      	movgt	r4, #0
 801185a:	2401      	movle	r4, #1
 801185c:	2b03      	cmp	r3, #3
 801185e:	d863      	bhi.n	8011928 <_dtoa_r+0x298>
 8011860:	e8df f003 	tbb	[pc, r3]
 8011864:	2b375452 	.word	0x2b375452
 8011868:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801186c:	441e      	add	r6, r3
 801186e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011872:	2b20      	cmp	r3, #32
 8011874:	bfc1      	itttt	gt
 8011876:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801187a:	409f      	lslgt	r7, r3
 801187c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011880:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011884:	bfd6      	itet	le
 8011886:	f1c3 0320 	rsble	r3, r3, #32
 801188a:	ea47 0003 	orrgt.w	r0, r7, r3
 801188e:	fa04 f003 	lslle.w	r0, r4, r3
 8011892:	f7ee fe37 	bl	8000504 <__aeabi_ui2d>
 8011896:	2201      	movs	r2, #1
 8011898:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801189c:	3e01      	subs	r6, #1
 801189e:	9212      	str	r2, [sp, #72]	@ 0x48
 80118a0:	e776      	b.n	8011790 <_dtoa_r+0x100>
 80118a2:	2301      	movs	r3, #1
 80118a4:	e7b7      	b.n	8011816 <_dtoa_r+0x186>
 80118a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80118a8:	e7b6      	b.n	8011818 <_dtoa_r+0x188>
 80118aa:	9b00      	ldr	r3, [sp, #0]
 80118ac:	1bdb      	subs	r3, r3, r7
 80118ae:	9300      	str	r3, [sp, #0]
 80118b0:	427b      	negs	r3, r7
 80118b2:	9308      	str	r3, [sp, #32]
 80118b4:	2300      	movs	r3, #0
 80118b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80118b8:	e7c3      	b.n	8011842 <_dtoa_r+0x1b2>
 80118ba:	2301      	movs	r3, #1
 80118bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80118be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118c0:	eb07 0b03 	add.w	fp, r7, r3
 80118c4:	f10b 0301 	add.w	r3, fp, #1
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	9303      	str	r3, [sp, #12]
 80118cc:	bfb8      	it	lt
 80118ce:	2301      	movlt	r3, #1
 80118d0:	e006      	b.n	80118e0 <_dtoa_r+0x250>
 80118d2:	2301      	movs	r3, #1
 80118d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80118d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118d8:	2b00      	cmp	r3, #0
 80118da:	dd28      	ble.n	801192e <_dtoa_r+0x29e>
 80118dc:	469b      	mov	fp, r3
 80118de:	9303      	str	r3, [sp, #12]
 80118e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80118e4:	2100      	movs	r1, #0
 80118e6:	2204      	movs	r2, #4
 80118e8:	f102 0514 	add.w	r5, r2, #20
 80118ec:	429d      	cmp	r5, r3
 80118ee:	d926      	bls.n	801193e <_dtoa_r+0x2ae>
 80118f0:	6041      	str	r1, [r0, #4]
 80118f2:	4648      	mov	r0, r9
 80118f4:	f000 fd9c 	bl	8012430 <_Balloc>
 80118f8:	4682      	mov	sl, r0
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d142      	bne.n	8011984 <_dtoa_r+0x2f4>
 80118fe:	4b1e      	ldr	r3, [pc, #120]	@ (8011978 <_dtoa_r+0x2e8>)
 8011900:	4602      	mov	r2, r0
 8011902:	f240 11af 	movw	r1, #431	@ 0x1af
 8011906:	e6da      	b.n	80116be <_dtoa_r+0x2e>
 8011908:	2300      	movs	r3, #0
 801190a:	e7e3      	b.n	80118d4 <_dtoa_r+0x244>
 801190c:	2300      	movs	r3, #0
 801190e:	e7d5      	b.n	80118bc <_dtoa_r+0x22c>
 8011910:	2401      	movs	r4, #1
 8011912:	2300      	movs	r3, #0
 8011914:	9307      	str	r3, [sp, #28]
 8011916:	9409      	str	r4, [sp, #36]	@ 0x24
 8011918:	f04f 3bff 	mov.w	fp, #4294967295
 801191c:	2200      	movs	r2, #0
 801191e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011922:	2312      	movs	r3, #18
 8011924:	920c      	str	r2, [sp, #48]	@ 0x30
 8011926:	e7db      	b.n	80118e0 <_dtoa_r+0x250>
 8011928:	2301      	movs	r3, #1
 801192a:	9309      	str	r3, [sp, #36]	@ 0x24
 801192c:	e7f4      	b.n	8011918 <_dtoa_r+0x288>
 801192e:	f04f 0b01 	mov.w	fp, #1
 8011932:	f8cd b00c 	str.w	fp, [sp, #12]
 8011936:	465b      	mov	r3, fp
 8011938:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801193c:	e7d0      	b.n	80118e0 <_dtoa_r+0x250>
 801193e:	3101      	adds	r1, #1
 8011940:	0052      	lsls	r2, r2, #1
 8011942:	e7d1      	b.n	80118e8 <_dtoa_r+0x258>
 8011944:	f3af 8000 	nop.w
 8011948:	636f4361 	.word	0x636f4361
 801194c:	3fd287a7 	.word	0x3fd287a7
 8011950:	8b60c8b3 	.word	0x8b60c8b3
 8011954:	3fc68a28 	.word	0x3fc68a28
 8011958:	509f79fb 	.word	0x509f79fb
 801195c:	3fd34413 	.word	0x3fd34413
 8011960:	08013641 	.word	0x08013641
 8011964:	08013658 	.word	0x08013658
 8011968:	7ff00000 	.word	0x7ff00000
 801196c:	08013611 	.word	0x08013611
 8011970:	3ff80000 	.word	0x3ff80000
 8011974:	080137a8 	.word	0x080137a8
 8011978:	080136b0 	.word	0x080136b0
 801197c:	0801363d 	.word	0x0801363d
 8011980:	08013610 	.word	0x08013610
 8011984:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011988:	6018      	str	r0, [r3, #0]
 801198a:	9b03      	ldr	r3, [sp, #12]
 801198c:	2b0e      	cmp	r3, #14
 801198e:	f200 80a1 	bhi.w	8011ad4 <_dtoa_r+0x444>
 8011992:	2c00      	cmp	r4, #0
 8011994:	f000 809e 	beq.w	8011ad4 <_dtoa_r+0x444>
 8011998:	2f00      	cmp	r7, #0
 801199a:	dd33      	ble.n	8011a04 <_dtoa_r+0x374>
 801199c:	4b9c      	ldr	r3, [pc, #624]	@ (8011c10 <_dtoa_r+0x580>)
 801199e:	f007 020f 	and.w	r2, r7, #15
 80119a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119a6:	ed93 7b00 	vldr	d7, [r3]
 80119aa:	05f8      	lsls	r0, r7, #23
 80119ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80119b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80119b4:	d516      	bpl.n	80119e4 <_dtoa_r+0x354>
 80119b6:	4b97      	ldr	r3, [pc, #604]	@ (8011c14 <_dtoa_r+0x584>)
 80119b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80119bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80119c0:	f7ee ff44 	bl	800084c <__aeabi_ddiv>
 80119c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119c8:	f004 040f 	and.w	r4, r4, #15
 80119cc:	2603      	movs	r6, #3
 80119ce:	4d91      	ldr	r5, [pc, #580]	@ (8011c14 <_dtoa_r+0x584>)
 80119d0:	b954      	cbnz	r4, 80119e8 <_dtoa_r+0x358>
 80119d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80119d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119da:	f7ee ff37 	bl	800084c <__aeabi_ddiv>
 80119de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119e2:	e028      	b.n	8011a36 <_dtoa_r+0x3a6>
 80119e4:	2602      	movs	r6, #2
 80119e6:	e7f2      	b.n	80119ce <_dtoa_r+0x33e>
 80119e8:	07e1      	lsls	r1, r4, #31
 80119ea:	d508      	bpl.n	80119fe <_dtoa_r+0x36e>
 80119ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80119f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80119f4:	f7ee fe00 	bl	80005f8 <__aeabi_dmul>
 80119f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80119fc:	3601      	adds	r6, #1
 80119fe:	1064      	asrs	r4, r4, #1
 8011a00:	3508      	adds	r5, #8
 8011a02:	e7e5      	b.n	80119d0 <_dtoa_r+0x340>
 8011a04:	f000 80af 	beq.w	8011b66 <_dtoa_r+0x4d6>
 8011a08:	427c      	negs	r4, r7
 8011a0a:	4b81      	ldr	r3, [pc, #516]	@ (8011c10 <_dtoa_r+0x580>)
 8011a0c:	4d81      	ldr	r5, [pc, #516]	@ (8011c14 <_dtoa_r+0x584>)
 8011a0e:	f004 020f 	and.w	r2, r4, #15
 8011a12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011a1e:	f7ee fdeb 	bl	80005f8 <__aeabi_dmul>
 8011a22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a26:	1124      	asrs	r4, r4, #4
 8011a28:	2300      	movs	r3, #0
 8011a2a:	2602      	movs	r6, #2
 8011a2c:	2c00      	cmp	r4, #0
 8011a2e:	f040 808f 	bne.w	8011b50 <_dtoa_r+0x4c0>
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d1d3      	bne.n	80119de <_dtoa_r+0x34e>
 8011a36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011a38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	f000 8094 	beq.w	8011b6a <_dtoa_r+0x4da>
 8011a42:	4b75      	ldr	r3, [pc, #468]	@ (8011c18 <_dtoa_r+0x588>)
 8011a44:	2200      	movs	r2, #0
 8011a46:	4620      	mov	r0, r4
 8011a48:	4629      	mov	r1, r5
 8011a4a:	f7ef f847 	bl	8000adc <__aeabi_dcmplt>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	f000 808b 	beq.w	8011b6a <_dtoa_r+0x4da>
 8011a54:	9b03      	ldr	r3, [sp, #12]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	f000 8087 	beq.w	8011b6a <_dtoa_r+0x4da>
 8011a5c:	f1bb 0f00 	cmp.w	fp, #0
 8011a60:	dd34      	ble.n	8011acc <_dtoa_r+0x43c>
 8011a62:	4620      	mov	r0, r4
 8011a64:	4b6d      	ldr	r3, [pc, #436]	@ (8011c1c <_dtoa_r+0x58c>)
 8011a66:	2200      	movs	r2, #0
 8011a68:	4629      	mov	r1, r5
 8011a6a:	f7ee fdc5 	bl	80005f8 <__aeabi_dmul>
 8011a6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a72:	f107 38ff 	add.w	r8, r7, #4294967295
 8011a76:	3601      	adds	r6, #1
 8011a78:	465c      	mov	r4, fp
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	f7ee fd52 	bl	8000524 <__aeabi_i2d>
 8011a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a84:	f7ee fdb8 	bl	80005f8 <__aeabi_dmul>
 8011a88:	4b65      	ldr	r3, [pc, #404]	@ (8011c20 <_dtoa_r+0x590>)
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	f7ee fbfe 	bl	800028c <__adddf3>
 8011a90:	4605      	mov	r5, r0
 8011a92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011a96:	2c00      	cmp	r4, #0
 8011a98:	d16a      	bne.n	8011b70 <_dtoa_r+0x4e0>
 8011a9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a9e:	4b61      	ldr	r3, [pc, #388]	@ (8011c24 <_dtoa_r+0x594>)
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	f7ee fbf1 	bl	8000288 <__aeabi_dsub>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011aae:	462a      	mov	r2, r5
 8011ab0:	4633      	mov	r3, r6
 8011ab2:	f7ef f831 	bl	8000b18 <__aeabi_dcmpgt>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	f040 8298 	bne.w	8011fec <_dtoa_r+0x95c>
 8011abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ac0:	462a      	mov	r2, r5
 8011ac2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011ac6:	f7ef f809 	bl	8000adc <__aeabi_dcmplt>
 8011aca:	bb38      	cbnz	r0, 8011b1c <_dtoa_r+0x48c>
 8011acc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011ad0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011ad4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f2c0 8157 	blt.w	8011d8a <_dtoa_r+0x6fa>
 8011adc:	2f0e      	cmp	r7, #14
 8011ade:	f300 8154 	bgt.w	8011d8a <_dtoa_r+0x6fa>
 8011ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8011c10 <_dtoa_r+0x580>)
 8011ae4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011ae8:	ed93 7b00 	vldr	d7, [r3]
 8011aec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	ed8d 7b00 	vstr	d7, [sp]
 8011af4:	f280 80e5 	bge.w	8011cc2 <_dtoa_r+0x632>
 8011af8:	9b03      	ldr	r3, [sp, #12]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	f300 80e1 	bgt.w	8011cc2 <_dtoa_r+0x632>
 8011b00:	d10c      	bne.n	8011b1c <_dtoa_r+0x48c>
 8011b02:	4b48      	ldr	r3, [pc, #288]	@ (8011c24 <_dtoa_r+0x594>)
 8011b04:	2200      	movs	r2, #0
 8011b06:	ec51 0b17 	vmov	r0, r1, d7
 8011b0a:	f7ee fd75 	bl	80005f8 <__aeabi_dmul>
 8011b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b12:	f7ee fff7 	bl	8000b04 <__aeabi_dcmpge>
 8011b16:	2800      	cmp	r0, #0
 8011b18:	f000 8266 	beq.w	8011fe8 <_dtoa_r+0x958>
 8011b1c:	2400      	movs	r4, #0
 8011b1e:	4625      	mov	r5, r4
 8011b20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b22:	4656      	mov	r6, sl
 8011b24:	ea6f 0803 	mvn.w	r8, r3
 8011b28:	2700      	movs	r7, #0
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	4648      	mov	r0, r9
 8011b2e:	f000 fcbf 	bl	80124b0 <_Bfree>
 8011b32:	2d00      	cmp	r5, #0
 8011b34:	f000 80bd 	beq.w	8011cb2 <_dtoa_r+0x622>
 8011b38:	b12f      	cbz	r7, 8011b46 <_dtoa_r+0x4b6>
 8011b3a:	42af      	cmp	r7, r5
 8011b3c:	d003      	beq.n	8011b46 <_dtoa_r+0x4b6>
 8011b3e:	4639      	mov	r1, r7
 8011b40:	4648      	mov	r0, r9
 8011b42:	f000 fcb5 	bl	80124b0 <_Bfree>
 8011b46:	4629      	mov	r1, r5
 8011b48:	4648      	mov	r0, r9
 8011b4a:	f000 fcb1 	bl	80124b0 <_Bfree>
 8011b4e:	e0b0      	b.n	8011cb2 <_dtoa_r+0x622>
 8011b50:	07e2      	lsls	r2, r4, #31
 8011b52:	d505      	bpl.n	8011b60 <_dtoa_r+0x4d0>
 8011b54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b58:	f7ee fd4e 	bl	80005f8 <__aeabi_dmul>
 8011b5c:	3601      	adds	r6, #1
 8011b5e:	2301      	movs	r3, #1
 8011b60:	1064      	asrs	r4, r4, #1
 8011b62:	3508      	adds	r5, #8
 8011b64:	e762      	b.n	8011a2c <_dtoa_r+0x39c>
 8011b66:	2602      	movs	r6, #2
 8011b68:	e765      	b.n	8011a36 <_dtoa_r+0x3a6>
 8011b6a:	9c03      	ldr	r4, [sp, #12]
 8011b6c:	46b8      	mov	r8, r7
 8011b6e:	e784      	b.n	8011a7a <_dtoa_r+0x3ea>
 8011b70:	4b27      	ldr	r3, [pc, #156]	@ (8011c10 <_dtoa_r+0x580>)
 8011b72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011b7c:	4454      	add	r4, sl
 8011b7e:	2900      	cmp	r1, #0
 8011b80:	d054      	beq.n	8011c2c <_dtoa_r+0x59c>
 8011b82:	4929      	ldr	r1, [pc, #164]	@ (8011c28 <_dtoa_r+0x598>)
 8011b84:	2000      	movs	r0, #0
 8011b86:	f7ee fe61 	bl	800084c <__aeabi_ddiv>
 8011b8a:	4633      	mov	r3, r6
 8011b8c:	462a      	mov	r2, r5
 8011b8e:	f7ee fb7b 	bl	8000288 <__aeabi_dsub>
 8011b92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011b96:	4656      	mov	r6, sl
 8011b98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b9c:	f7ee ffdc 	bl	8000b58 <__aeabi_d2iz>
 8011ba0:	4605      	mov	r5, r0
 8011ba2:	f7ee fcbf 	bl	8000524 <__aeabi_i2d>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	460b      	mov	r3, r1
 8011baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bae:	f7ee fb6b 	bl	8000288 <__aeabi_dsub>
 8011bb2:	3530      	adds	r5, #48	@ 0x30
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011bbc:	f806 5b01 	strb.w	r5, [r6], #1
 8011bc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011bc4:	f7ee ff8a 	bl	8000adc <__aeabi_dcmplt>
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	d172      	bne.n	8011cb2 <_dtoa_r+0x622>
 8011bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bd0:	4911      	ldr	r1, [pc, #68]	@ (8011c18 <_dtoa_r+0x588>)
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	f7ee fb58 	bl	8000288 <__aeabi_dsub>
 8011bd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011bdc:	f7ee ff7e 	bl	8000adc <__aeabi_dcmplt>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	f040 80b4 	bne.w	8011d4e <_dtoa_r+0x6be>
 8011be6:	42a6      	cmp	r6, r4
 8011be8:	f43f af70 	beq.w	8011acc <_dtoa_r+0x43c>
 8011bec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8011c1c <_dtoa_r+0x58c>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	f7ee fd00 	bl	80005f8 <__aeabi_dmul>
 8011bf8:	4b08      	ldr	r3, [pc, #32]	@ (8011c1c <_dtoa_r+0x58c>)
 8011bfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011bfe:	2200      	movs	r2, #0
 8011c00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c04:	f7ee fcf8 	bl	80005f8 <__aeabi_dmul>
 8011c08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c0c:	e7c4      	b.n	8011b98 <_dtoa_r+0x508>
 8011c0e:	bf00      	nop
 8011c10:	080137a8 	.word	0x080137a8
 8011c14:	08013780 	.word	0x08013780
 8011c18:	3ff00000 	.word	0x3ff00000
 8011c1c:	40240000 	.word	0x40240000
 8011c20:	401c0000 	.word	0x401c0000
 8011c24:	40140000 	.word	0x40140000
 8011c28:	3fe00000 	.word	0x3fe00000
 8011c2c:	4631      	mov	r1, r6
 8011c2e:	4628      	mov	r0, r5
 8011c30:	f7ee fce2 	bl	80005f8 <__aeabi_dmul>
 8011c34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011c38:	9413      	str	r4, [sp, #76]	@ 0x4c
 8011c3a:	4656      	mov	r6, sl
 8011c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c40:	f7ee ff8a 	bl	8000b58 <__aeabi_d2iz>
 8011c44:	4605      	mov	r5, r0
 8011c46:	f7ee fc6d 	bl	8000524 <__aeabi_i2d>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	460b      	mov	r3, r1
 8011c4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c52:	f7ee fb19 	bl	8000288 <__aeabi_dsub>
 8011c56:	3530      	adds	r5, #48	@ 0x30
 8011c58:	f806 5b01 	strb.w	r5, [r6], #1
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	460b      	mov	r3, r1
 8011c60:	42a6      	cmp	r6, r4
 8011c62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011c66:	f04f 0200 	mov.w	r2, #0
 8011c6a:	d124      	bne.n	8011cb6 <_dtoa_r+0x626>
 8011c6c:	4baf      	ldr	r3, [pc, #700]	@ (8011f2c <_dtoa_r+0x89c>)
 8011c6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011c72:	f7ee fb0b 	bl	800028c <__adddf3>
 8011c76:	4602      	mov	r2, r0
 8011c78:	460b      	mov	r3, r1
 8011c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c7e:	f7ee ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 8011c82:	2800      	cmp	r0, #0
 8011c84:	d163      	bne.n	8011d4e <_dtoa_r+0x6be>
 8011c86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011c8a:	49a8      	ldr	r1, [pc, #672]	@ (8011f2c <_dtoa_r+0x89c>)
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	f7ee fafb 	bl	8000288 <__aeabi_dsub>
 8011c92:	4602      	mov	r2, r0
 8011c94:	460b      	mov	r3, r1
 8011c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c9a:	f7ee ff1f 	bl	8000adc <__aeabi_dcmplt>
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	f43f af14 	beq.w	8011acc <_dtoa_r+0x43c>
 8011ca4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011ca6:	1e73      	subs	r3, r6, #1
 8011ca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011caa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011cae:	2b30      	cmp	r3, #48	@ 0x30
 8011cb0:	d0f8      	beq.n	8011ca4 <_dtoa_r+0x614>
 8011cb2:	4647      	mov	r7, r8
 8011cb4:	e03b      	b.n	8011d2e <_dtoa_r+0x69e>
 8011cb6:	4b9e      	ldr	r3, [pc, #632]	@ (8011f30 <_dtoa_r+0x8a0>)
 8011cb8:	f7ee fc9e 	bl	80005f8 <__aeabi_dmul>
 8011cbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011cc0:	e7bc      	b.n	8011c3c <_dtoa_r+0x5ac>
 8011cc2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011cc6:	4656      	mov	r6, sl
 8011cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ccc:	4620      	mov	r0, r4
 8011cce:	4629      	mov	r1, r5
 8011cd0:	f7ee fdbc 	bl	800084c <__aeabi_ddiv>
 8011cd4:	f7ee ff40 	bl	8000b58 <__aeabi_d2iz>
 8011cd8:	4680      	mov	r8, r0
 8011cda:	f7ee fc23 	bl	8000524 <__aeabi_i2d>
 8011cde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ce2:	f7ee fc89 	bl	80005f8 <__aeabi_dmul>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4620      	mov	r0, r4
 8011cec:	4629      	mov	r1, r5
 8011cee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011cf2:	f7ee fac9 	bl	8000288 <__aeabi_dsub>
 8011cf6:	f806 4b01 	strb.w	r4, [r6], #1
 8011cfa:	9d03      	ldr	r5, [sp, #12]
 8011cfc:	eba6 040a 	sub.w	r4, r6, sl
 8011d00:	42a5      	cmp	r5, r4
 8011d02:	4602      	mov	r2, r0
 8011d04:	460b      	mov	r3, r1
 8011d06:	d133      	bne.n	8011d70 <_dtoa_r+0x6e0>
 8011d08:	f7ee fac0 	bl	800028c <__adddf3>
 8011d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d10:	4604      	mov	r4, r0
 8011d12:	460d      	mov	r5, r1
 8011d14:	f7ee ff00 	bl	8000b18 <__aeabi_dcmpgt>
 8011d18:	b9c0      	cbnz	r0, 8011d4c <_dtoa_r+0x6bc>
 8011d1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d1e:	4620      	mov	r0, r4
 8011d20:	4629      	mov	r1, r5
 8011d22:	f7ee fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d26:	b110      	cbz	r0, 8011d2e <_dtoa_r+0x69e>
 8011d28:	f018 0f01 	tst.w	r8, #1
 8011d2c:	d10e      	bne.n	8011d4c <_dtoa_r+0x6bc>
 8011d2e:	9902      	ldr	r1, [sp, #8]
 8011d30:	4648      	mov	r0, r9
 8011d32:	f000 fbbd 	bl	80124b0 <_Bfree>
 8011d36:	2300      	movs	r3, #0
 8011d38:	7033      	strb	r3, [r6, #0]
 8011d3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011d3c:	3701      	adds	r7, #1
 8011d3e:	601f      	str	r7, [r3, #0]
 8011d40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	f000 824b 	beq.w	80121de <_dtoa_r+0xb4e>
 8011d48:	601e      	str	r6, [r3, #0]
 8011d4a:	e248      	b.n	80121de <_dtoa_r+0xb4e>
 8011d4c:	46b8      	mov	r8, r7
 8011d4e:	4633      	mov	r3, r6
 8011d50:	461e      	mov	r6, r3
 8011d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d56:	2a39      	cmp	r2, #57	@ 0x39
 8011d58:	d106      	bne.n	8011d68 <_dtoa_r+0x6d8>
 8011d5a:	459a      	cmp	sl, r3
 8011d5c:	d1f8      	bne.n	8011d50 <_dtoa_r+0x6c0>
 8011d5e:	2230      	movs	r2, #48	@ 0x30
 8011d60:	f108 0801 	add.w	r8, r8, #1
 8011d64:	f88a 2000 	strb.w	r2, [sl]
 8011d68:	781a      	ldrb	r2, [r3, #0]
 8011d6a:	3201      	adds	r2, #1
 8011d6c:	701a      	strb	r2, [r3, #0]
 8011d6e:	e7a0      	b.n	8011cb2 <_dtoa_r+0x622>
 8011d70:	4b6f      	ldr	r3, [pc, #444]	@ (8011f30 <_dtoa_r+0x8a0>)
 8011d72:	2200      	movs	r2, #0
 8011d74:	f7ee fc40 	bl	80005f8 <__aeabi_dmul>
 8011d78:	2200      	movs	r2, #0
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	460d      	mov	r5, r1
 8011d80:	f7ee fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d84:	2800      	cmp	r0, #0
 8011d86:	d09f      	beq.n	8011cc8 <_dtoa_r+0x638>
 8011d88:	e7d1      	b.n	8011d2e <_dtoa_r+0x69e>
 8011d8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d8c:	2a00      	cmp	r2, #0
 8011d8e:	f000 80ea 	beq.w	8011f66 <_dtoa_r+0x8d6>
 8011d92:	9a07      	ldr	r2, [sp, #28]
 8011d94:	2a01      	cmp	r2, #1
 8011d96:	f300 80cd 	bgt.w	8011f34 <_dtoa_r+0x8a4>
 8011d9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011d9c:	2a00      	cmp	r2, #0
 8011d9e:	f000 80c1 	beq.w	8011f24 <_dtoa_r+0x894>
 8011da2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011da6:	9c08      	ldr	r4, [sp, #32]
 8011da8:	9e00      	ldr	r6, [sp, #0]
 8011daa:	9a00      	ldr	r2, [sp, #0]
 8011dac:	441a      	add	r2, r3
 8011dae:	9200      	str	r2, [sp, #0]
 8011db0:	9a06      	ldr	r2, [sp, #24]
 8011db2:	2101      	movs	r1, #1
 8011db4:	441a      	add	r2, r3
 8011db6:	4648      	mov	r0, r9
 8011db8:	9206      	str	r2, [sp, #24]
 8011dba:	f000 fc2d 	bl	8012618 <__i2b>
 8011dbe:	4605      	mov	r5, r0
 8011dc0:	b166      	cbz	r6, 8011ddc <_dtoa_r+0x74c>
 8011dc2:	9b06      	ldr	r3, [sp, #24]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	dd09      	ble.n	8011ddc <_dtoa_r+0x74c>
 8011dc8:	42b3      	cmp	r3, r6
 8011dca:	9a00      	ldr	r2, [sp, #0]
 8011dcc:	bfa8      	it	ge
 8011dce:	4633      	movge	r3, r6
 8011dd0:	1ad2      	subs	r2, r2, r3
 8011dd2:	9200      	str	r2, [sp, #0]
 8011dd4:	9a06      	ldr	r2, [sp, #24]
 8011dd6:	1af6      	subs	r6, r6, r3
 8011dd8:	1ad3      	subs	r3, r2, r3
 8011dda:	9306      	str	r3, [sp, #24]
 8011ddc:	9b08      	ldr	r3, [sp, #32]
 8011dde:	b30b      	cbz	r3, 8011e24 <_dtoa_r+0x794>
 8011de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	f000 80c6 	beq.w	8011f74 <_dtoa_r+0x8e4>
 8011de8:	2c00      	cmp	r4, #0
 8011dea:	f000 80c0 	beq.w	8011f6e <_dtoa_r+0x8de>
 8011dee:	4629      	mov	r1, r5
 8011df0:	4622      	mov	r2, r4
 8011df2:	4648      	mov	r0, r9
 8011df4:	f000 fcc8 	bl	8012788 <__pow5mult>
 8011df8:	9a02      	ldr	r2, [sp, #8]
 8011dfa:	4601      	mov	r1, r0
 8011dfc:	4605      	mov	r5, r0
 8011dfe:	4648      	mov	r0, r9
 8011e00:	f000 fc20 	bl	8012644 <__multiply>
 8011e04:	9902      	ldr	r1, [sp, #8]
 8011e06:	4680      	mov	r8, r0
 8011e08:	4648      	mov	r0, r9
 8011e0a:	f000 fb51 	bl	80124b0 <_Bfree>
 8011e0e:	9b08      	ldr	r3, [sp, #32]
 8011e10:	1b1b      	subs	r3, r3, r4
 8011e12:	9308      	str	r3, [sp, #32]
 8011e14:	f000 80b1 	beq.w	8011f7a <_dtoa_r+0x8ea>
 8011e18:	9a08      	ldr	r2, [sp, #32]
 8011e1a:	4641      	mov	r1, r8
 8011e1c:	4648      	mov	r0, r9
 8011e1e:	f000 fcb3 	bl	8012788 <__pow5mult>
 8011e22:	9002      	str	r0, [sp, #8]
 8011e24:	2101      	movs	r1, #1
 8011e26:	4648      	mov	r0, r9
 8011e28:	f000 fbf6 	bl	8012618 <__i2b>
 8011e2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e2e:	4604      	mov	r4, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	f000 81d8 	beq.w	80121e6 <_dtoa_r+0xb56>
 8011e36:	461a      	mov	r2, r3
 8011e38:	4601      	mov	r1, r0
 8011e3a:	4648      	mov	r0, r9
 8011e3c:	f000 fca4 	bl	8012788 <__pow5mult>
 8011e40:	9b07      	ldr	r3, [sp, #28]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	4604      	mov	r4, r0
 8011e46:	f300 809f 	bgt.w	8011f88 <_dtoa_r+0x8f8>
 8011e4a:	9b04      	ldr	r3, [sp, #16]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f040 8097 	bne.w	8011f80 <_dtoa_r+0x8f0>
 8011e52:	9b05      	ldr	r3, [sp, #20]
 8011e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	f040 8093 	bne.w	8011f84 <_dtoa_r+0x8f4>
 8011e5e:	9b05      	ldr	r3, [sp, #20]
 8011e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011e64:	0d1b      	lsrs	r3, r3, #20
 8011e66:	051b      	lsls	r3, r3, #20
 8011e68:	b133      	cbz	r3, 8011e78 <_dtoa_r+0x7e8>
 8011e6a:	9b00      	ldr	r3, [sp, #0]
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	9b06      	ldr	r3, [sp, #24]
 8011e72:	3301      	adds	r3, #1
 8011e74:	9306      	str	r3, [sp, #24]
 8011e76:	2301      	movs	r3, #1
 8011e78:	9308      	str	r3, [sp, #32]
 8011e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	f000 81b8 	beq.w	80121f2 <_dtoa_r+0xb62>
 8011e82:	6923      	ldr	r3, [r4, #16]
 8011e84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011e88:	6918      	ldr	r0, [r3, #16]
 8011e8a:	f000 fb79 	bl	8012580 <__hi0bits>
 8011e8e:	f1c0 0020 	rsb	r0, r0, #32
 8011e92:	9b06      	ldr	r3, [sp, #24]
 8011e94:	4418      	add	r0, r3
 8011e96:	f010 001f 	ands.w	r0, r0, #31
 8011e9a:	f000 8082 	beq.w	8011fa2 <_dtoa_r+0x912>
 8011e9e:	f1c0 0320 	rsb	r3, r0, #32
 8011ea2:	2b04      	cmp	r3, #4
 8011ea4:	dd73      	ble.n	8011f8e <_dtoa_r+0x8fe>
 8011ea6:	9b00      	ldr	r3, [sp, #0]
 8011ea8:	f1c0 001c 	rsb	r0, r0, #28
 8011eac:	4403      	add	r3, r0
 8011eae:	9300      	str	r3, [sp, #0]
 8011eb0:	9b06      	ldr	r3, [sp, #24]
 8011eb2:	4403      	add	r3, r0
 8011eb4:	4406      	add	r6, r0
 8011eb6:	9306      	str	r3, [sp, #24]
 8011eb8:	9b00      	ldr	r3, [sp, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	dd05      	ble.n	8011eca <_dtoa_r+0x83a>
 8011ebe:	9902      	ldr	r1, [sp, #8]
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	4648      	mov	r0, r9
 8011ec4:	f000 fcba 	bl	801283c <__lshift>
 8011ec8:	9002      	str	r0, [sp, #8]
 8011eca:	9b06      	ldr	r3, [sp, #24]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	dd05      	ble.n	8011edc <_dtoa_r+0x84c>
 8011ed0:	4621      	mov	r1, r4
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	4648      	mov	r0, r9
 8011ed6:	f000 fcb1 	bl	801283c <__lshift>
 8011eda:	4604      	mov	r4, r0
 8011edc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d061      	beq.n	8011fa6 <_dtoa_r+0x916>
 8011ee2:	9802      	ldr	r0, [sp, #8]
 8011ee4:	4621      	mov	r1, r4
 8011ee6:	f000 fd15 	bl	8012914 <__mcmp>
 8011eea:	2800      	cmp	r0, #0
 8011eec:	da5b      	bge.n	8011fa6 <_dtoa_r+0x916>
 8011eee:	2300      	movs	r3, #0
 8011ef0:	9902      	ldr	r1, [sp, #8]
 8011ef2:	220a      	movs	r2, #10
 8011ef4:	4648      	mov	r0, r9
 8011ef6:	f000 fafd 	bl	80124f4 <__multadd>
 8011efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011efc:	9002      	str	r0, [sp, #8]
 8011efe:	f107 38ff 	add.w	r8, r7, #4294967295
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	f000 8177 	beq.w	80121f6 <_dtoa_r+0xb66>
 8011f08:	4629      	mov	r1, r5
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	220a      	movs	r2, #10
 8011f0e:	4648      	mov	r0, r9
 8011f10:	f000 faf0 	bl	80124f4 <__multadd>
 8011f14:	f1bb 0f00 	cmp.w	fp, #0
 8011f18:	4605      	mov	r5, r0
 8011f1a:	dc6f      	bgt.n	8011ffc <_dtoa_r+0x96c>
 8011f1c:	9b07      	ldr	r3, [sp, #28]
 8011f1e:	2b02      	cmp	r3, #2
 8011f20:	dc49      	bgt.n	8011fb6 <_dtoa_r+0x926>
 8011f22:	e06b      	b.n	8011ffc <_dtoa_r+0x96c>
 8011f24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011f26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011f2a:	e73c      	b.n	8011da6 <_dtoa_r+0x716>
 8011f2c:	3fe00000 	.word	0x3fe00000
 8011f30:	40240000 	.word	0x40240000
 8011f34:	9b03      	ldr	r3, [sp, #12]
 8011f36:	1e5c      	subs	r4, r3, #1
 8011f38:	9b08      	ldr	r3, [sp, #32]
 8011f3a:	42a3      	cmp	r3, r4
 8011f3c:	db09      	blt.n	8011f52 <_dtoa_r+0x8c2>
 8011f3e:	1b1c      	subs	r4, r3, r4
 8011f40:	9b03      	ldr	r3, [sp, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f6bf af30 	bge.w	8011da8 <_dtoa_r+0x718>
 8011f48:	9b00      	ldr	r3, [sp, #0]
 8011f4a:	9a03      	ldr	r2, [sp, #12]
 8011f4c:	1a9e      	subs	r6, r3, r2
 8011f4e:	2300      	movs	r3, #0
 8011f50:	e72b      	b.n	8011daa <_dtoa_r+0x71a>
 8011f52:	9b08      	ldr	r3, [sp, #32]
 8011f54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f56:	9408      	str	r4, [sp, #32]
 8011f58:	1ae3      	subs	r3, r4, r3
 8011f5a:	441a      	add	r2, r3
 8011f5c:	9e00      	ldr	r6, [sp, #0]
 8011f5e:	9b03      	ldr	r3, [sp, #12]
 8011f60:	920d      	str	r2, [sp, #52]	@ 0x34
 8011f62:	2400      	movs	r4, #0
 8011f64:	e721      	b.n	8011daa <_dtoa_r+0x71a>
 8011f66:	9c08      	ldr	r4, [sp, #32]
 8011f68:	9e00      	ldr	r6, [sp, #0]
 8011f6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011f6c:	e728      	b.n	8011dc0 <_dtoa_r+0x730>
 8011f6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011f72:	e751      	b.n	8011e18 <_dtoa_r+0x788>
 8011f74:	9a08      	ldr	r2, [sp, #32]
 8011f76:	9902      	ldr	r1, [sp, #8]
 8011f78:	e750      	b.n	8011e1c <_dtoa_r+0x78c>
 8011f7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8011f7e:	e751      	b.n	8011e24 <_dtoa_r+0x794>
 8011f80:	2300      	movs	r3, #0
 8011f82:	e779      	b.n	8011e78 <_dtoa_r+0x7e8>
 8011f84:	9b04      	ldr	r3, [sp, #16]
 8011f86:	e777      	b.n	8011e78 <_dtoa_r+0x7e8>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	9308      	str	r3, [sp, #32]
 8011f8c:	e779      	b.n	8011e82 <_dtoa_r+0x7f2>
 8011f8e:	d093      	beq.n	8011eb8 <_dtoa_r+0x828>
 8011f90:	9a00      	ldr	r2, [sp, #0]
 8011f92:	331c      	adds	r3, #28
 8011f94:	441a      	add	r2, r3
 8011f96:	9200      	str	r2, [sp, #0]
 8011f98:	9a06      	ldr	r2, [sp, #24]
 8011f9a:	441a      	add	r2, r3
 8011f9c:	441e      	add	r6, r3
 8011f9e:	9206      	str	r2, [sp, #24]
 8011fa0:	e78a      	b.n	8011eb8 <_dtoa_r+0x828>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	e7f4      	b.n	8011f90 <_dtoa_r+0x900>
 8011fa6:	9b03      	ldr	r3, [sp, #12]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	46b8      	mov	r8, r7
 8011fac:	dc20      	bgt.n	8011ff0 <_dtoa_r+0x960>
 8011fae:	469b      	mov	fp, r3
 8011fb0:	9b07      	ldr	r3, [sp, #28]
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	dd1e      	ble.n	8011ff4 <_dtoa_r+0x964>
 8011fb6:	f1bb 0f00 	cmp.w	fp, #0
 8011fba:	f47f adb1 	bne.w	8011b20 <_dtoa_r+0x490>
 8011fbe:	4621      	mov	r1, r4
 8011fc0:	465b      	mov	r3, fp
 8011fc2:	2205      	movs	r2, #5
 8011fc4:	4648      	mov	r0, r9
 8011fc6:	f000 fa95 	bl	80124f4 <__multadd>
 8011fca:	4601      	mov	r1, r0
 8011fcc:	4604      	mov	r4, r0
 8011fce:	9802      	ldr	r0, [sp, #8]
 8011fd0:	f000 fca0 	bl	8012914 <__mcmp>
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	f77f ada3 	ble.w	8011b20 <_dtoa_r+0x490>
 8011fda:	4656      	mov	r6, sl
 8011fdc:	2331      	movs	r3, #49	@ 0x31
 8011fde:	f806 3b01 	strb.w	r3, [r6], #1
 8011fe2:	f108 0801 	add.w	r8, r8, #1
 8011fe6:	e59f      	b.n	8011b28 <_dtoa_r+0x498>
 8011fe8:	9c03      	ldr	r4, [sp, #12]
 8011fea:	46b8      	mov	r8, r7
 8011fec:	4625      	mov	r5, r4
 8011fee:	e7f4      	b.n	8011fda <_dtoa_r+0x94a>
 8011ff0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8011ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f000 8101 	beq.w	80121fe <_dtoa_r+0xb6e>
 8011ffc:	2e00      	cmp	r6, #0
 8011ffe:	dd05      	ble.n	801200c <_dtoa_r+0x97c>
 8012000:	4629      	mov	r1, r5
 8012002:	4632      	mov	r2, r6
 8012004:	4648      	mov	r0, r9
 8012006:	f000 fc19 	bl	801283c <__lshift>
 801200a:	4605      	mov	r5, r0
 801200c:	9b08      	ldr	r3, [sp, #32]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d05c      	beq.n	80120cc <_dtoa_r+0xa3c>
 8012012:	6869      	ldr	r1, [r5, #4]
 8012014:	4648      	mov	r0, r9
 8012016:	f000 fa0b 	bl	8012430 <_Balloc>
 801201a:	4606      	mov	r6, r0
 801201c:	b928      	cbnz	r0, 801202a <_dtoa_r+0x99a>
 801201e:	4b82      	ldr	r3, [pc, #520]	@ (8012228 <_dtoa_r+0xb98>)
 8012020:	4602      	mov	r2, r0
 8012022:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012026:	f7ff bb4a 	b.w	80116be <_dtoa_r+0x2e>
 801202a:	692a      	ldr	r2, [r5, #16]
 801202c:	3202      	adds	r2, #2
 801202e:	0092      	lsls	r2, r2, #2
 8012030:	f105 010c 	add.w	r1, r5, #12
 8012034:	300c      	adds	r0, #12
 8012036:	f7ff fa92 	bl	801155e <memcpy>
 801203a:	2201      	movs	r2, #1
 801203c:	4631      	mov	r1, r6
 801203e:	4648      	mov	r0, r9
 8012040:	f000 fbfc 	bl	801283c <__lshift>
 8012044:	f10a 0301 	add.w	r3, sl, #1
 8012048:	9300      	str	r3, [sp, #0]
 801204a:	eb0a 030b 	add.w	r3, sl, fp
 801204e:	9308      	str	r3, [sp, #32]
 8012050:	9b04      	ldr	r3, [sp, #16]
 8012052:	f003 0301 	and.w	r3, r3, #1
 8012056:	462f      	mov	r7, r5
 8012058:	9306      	str	r3, [sp, #24]
 801205a:	4605      	mov	r5, r0
 801205c:	9b00      	ldr	r3, [sp, #0]
 801205e:	9802      	ldr	r0, [sp, #8]
 8012060:	4621      	mov	r1, r4
 8012062:	f103 3bff 	add.w	fp, r3, #4294967295
 8012066:	f7ff fa88 	bl	801157a <quorem>
 801206a:	4603      	mov	r3, r0
 801206c:	3330      	adds	r3, #48	@ 0x30
 801206e:	9003      	str	r0, [sp, #12]
 8012070:	4639      	mov	r1, r7
 8012072:	9802      	ldr	r0, [sp, #8]
 8012074:	9309      	str	r3, [sp, #36]	@ 0x24
 8012076:	f000 fc4d 	bl	8012914 <__mcmp>
 801207a:	462a      	mov	r2, r5
 801207c:	9004      	str	r0, [sp, #16]
 801207e:	4621      	mov	r1, r4
 8012080:	4648      	mov	r0, r9
 8012082:	f000 fc63 	bl	801294c <__mdiff>
 8012086:	68c2      	ldr	r2, [r0, #12]
 8012088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801208a:	4606      	mov	r6, r0
 801208c:	bb02      	cbnz	r2, 80120d0 <_dtoa_r+0xa40>
 801208e:	4601      	mov	r1, r0
 8012090:	9802      	ldr	r0, [sp, #8]
 8012092:	f000 fc3f 	bl	8012914 <__mcmp>
 8012096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012098:	4602      	mov	r2, r0
 801209a:	4631      	mov	r1, r6
 801209c:	4648      	mov	r0, r9
 801209e:	920c      	str	r2, [sp, #48]	@ 0x30
 80120a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80120a2:	f000 fa05 	bl	80124b0 <_Bfree>
 80120a6:	9b07      	ldr	r3, [sp, #28]
 80120a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80120aa:	9e00      	ldr	r6, [sp, #0]
 80120ac:	ea42 0103 	orr.w	r1, r2, r3
 80120b0:	9b06      	ldr	r3, [sp, #24]
 80120b2:	4319      	orrs	r1, r3
 80120b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120b6:	d10d      	bne.n	80120d4 <_dtoa_r+0xa44>
 80120b8:	2b39      	cmp	r3, #57	@ 0x39
 80120ba:	d027      	beq.n	801210c <_dtoa_r+0xa7c>
 80120bc:	9a04      	ldr	r2, [sp, #16]
 80120be:	2a00      	cmp	r2, #0
 80120c0:	dd01      	ble.n	80120c6 <_dtoa_r+0xa36>
 80120c2:	9b03      	ldr	r3, [sp, #12]
 80120c4:	3331      	adds	r3, #49	@ 0x31
 80120c6:	f88b 3000 	strb.w	r3, [fp]
 80120ca:	e52e      	b.n	8011b2a <_dtoa_r+0x49a>
 80120cc:	4628      	mov	r0, r5
 80120ce:	e7b9      	b.n	8012044 <_dtoa_r+0x9b4>
 80120d0:	2201      	movs	r2, #1
 80120d2:	e7e2      	b.n	801209a <_dtoa_r+0xa0a>
 80120d4:	9904      	ldr	r1, [sp, #16]
 80120d6:	2900      	cmp	r1, #0
 80120d8:	db04      	blt.n	80120e4 <_dtoa_r+0xa54>
 80120da:	9807      	ldr	r0, [sp, #28]
 80120dc:	4301      	orrs	r1, r0
 80120de:	9806      	ldr	r0, [sp, #24]
 80120e0:	4301      	orrs	r1, r0
 80120e2:	d120      	bne.n	8012126 <_dtoa_r+0xa96>
 80120e4:	2a00      	cmp	r2, #0
 80120e6:	ddee      	ble.n	80120c6 <_dtoa_r+0xa36>
 80120e8:	9902      	ldr	r1, [sp, #8]
 80120ea:	9300      	str	r3, [sp, #0]
 80120ec:	2201      	movs	r2, #1
 80120ee:	4648      	mov	r0, r9
 80120f0:	f000 fba4 	bl	801283c <__lshift>
 80120f4:	4621      	mov	r1, r4
 80120f6:	9002      	str	r0, [sp, #8]
 80120f8:	f000 fc0c 	bl	8012914 <__mcmp>
 80120fc:	2800      	cmp	r0, #0
 80120fe:	9b00      	ldr	r3, [sp, #0]
 8012100:	dc02      	bgt.n	8012108 <_dtoa_r+0xa78>
 8012102:	d1e0      	bne.n	80120c6 <_dtoa_r+0xa36>
 8012104:	07da      	lsls	r2, r3, #31
 8012106:	d5de      	bpl.n	80120c6 <_dtoa_r+0xa36>
 8012108:	2b39      	cmp	r3, #57	@ 0x39
 801210a:	d1da      	bne.n	80120c2 <_dtoa_r+0xa32>
 801210c:	2339      	movs	r3, #57	@ 0x39
 801210e:	f88b 3000 	strb.w	r3, [fp]
 8012112:	4633      	mov	r3, r6
 8012114:	461e      	mov	r6, r3
 8012116:	3b01      	subs	r3, #1
 8012118:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801211c:	2a39      	cmp	r2, #57	@ 0x39
 801211e:	d04e      	beq.n	80121be <_dtoa_r+0xb2e>
 8012120:	3201      	adds	r2, #1
 8012122:	701a      	strb	r2, [r3, #0]
 8012124:	e501      	b.n	8011b2a <_dtoa_r+0x49a>
 8012126:	2a00      	cmp	r2, #0
 8012128:	dd03      	ble.n	8012132 <_dtoa_r+0xaa2>
 801212a:	2b39      	cmp	r3, #57	@ 0x39
 801212c:	d0ee      	beq.n	801210c <_dtoa_r+0xa7c>
 801212e:	3301      	adds	r3, #1
 8012130:	e7c9      	b.n	80120c6 <_dtoa_r+0xa36>
 8012132:	9a00      	ldr	r2, [sp, #0]
 8012134:	9908      	ldr	r1, [sp, #32]
 8012136:	f802 3c01 	strb.w	r3, [r2, #-1]
 801213a:	428a      	cmp	r2, r1
 801213c:	d028      	beq.n	8012190 <_dtoa_r+0xb00>
 801213e:	9902      	ldr	r1, [sp, #8]
 8012140:	2300      	movs	r3, #0
 8012142:	220a      	movs	r2, #10
 8012144:	4648      	mov	r0, r9
 8012146:	f000 f9d5 	bl	80124f4 <__multadd>
 801214a:	42af      	cmp	r7, r5
 801214c:	9002      	str	r0, [sp, #8]
 801214e:	f04f 0300 	mov.w	r3, #0
 8012152:	f04f 020a 	mov.w	r2, #10
 8012156:	4639      	mov	r1, r7
 8012158:	4648      	mov	r0, r9
 801215a:	d107      	bne.n	801216c <_dtoa_r+0xadc>
 801215c:	f000 f9ca 	bl	80124f4 <__multadd>
 8012160:	4607      	mov	r7, r0
 8012162:	4605      	mov	r5, r0
 8012164:	9b00      	ldr	r3, [sp, #0]
 8012166:	3301      	adds	r3, #1
 8012168:	9300      	str	r3, [sp, #0]
 801216a:	e777      	b.n	801205c <_dtoa_r+0x9cc>
 801216c:	f000 f9c2 	bl	80124f4 <__multadd>
 8012170:	4629      	mov	r1, r5
 8012172:	4607      	mov	r7, r0
 8012174:	2300      	movs	r3, #0
 8012176:	220a      	movs	r2, #10
 8012178:	4648      	mov	r0, r9
 801217a:	f000 f9bb 	bl	80124f4 <__multadd>
 801217e:	4605      	mov	r5, r0
 8012180:	e7f0      	b.n	8012164 <_dtoa_r+0xad4>
 8012182:	f1bb 0f00 	cmp.w	fp, #0
 8012186:	bfcc      	ite	gt
 8012188:	465e      	movgt	r6, fp
 801218a:	2601      	movle	r6, #1
 801218c:	4456      	add	r6, sl
 801218e:	2700      	movs	r7, #0
 8012190:	9902      	ldr	r1, [sp, #8]
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	2201      	movs	r2, #1
 8012196:	4648      	mov	r0, r9
 8012198:	f000 fb50 	bl	801283c <__lshift>
 801219c:	4621      	mov	r1, r4
 801219e:	9002      	str	r0, [sp, #8]
 80121a0:	f000 fbb8 	bl	8012914 <__mcmp>
 80121a4:	2800      	cmp	r0, #0
 80121a6:	dcb4      	bgt.n	8012112 <_dtoa_r+0xa82>
 80121a8:	d102      	bne.n	80121b0 <_dtoa_r+0xb20>
 80121aa:	9b00      	ldr	r3, [sp, #0]
 80121ac:	07db      	lsls	r3, r3, #31
 80121ae:	d4b0      	bmi.n	8012112 <_dtoa_r+0xa82>
 80121b0:	4633      	mov	r3, r6
 80121b2:	461e      	mov	r6, r3
 80121b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121b8:	2a30      	cmp	r2, #48	@ 0x30
 80121ba:	d0fa      	beq.n	80121b2 <_dtoa_r+0xb22>
 80121bc:	e4b5      	b.n	8011b2a <_dtoa_r+0x49a>
 80121be:	459a      	cmp	sl, r3
 80121c0:	d1a8      	bne.n	8012114 <_dtoa_r+0xa84>
 80121c2:	2331      	movs	r3, #49	@ 0x31
 80121c4:	f108 0801 	add.w	r8, r8, #1
 80121c8:	f88a 3000 	strb.w	r3, [sl]
 80121cc:	e4ad      	b.n	8011b2a <_dtoa_r+0x49a>
 80121ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80121d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801222c <_dtoa_r+0xb9c>
 80121d4:	b11b      	cbz	r3, 80121de <_dtoa_r+0xb4e>
 80121d6:	f10a 0308 	add.w	r3, sl, #8
 80121da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80121dc:	6013      	str	r3, [r2, #0]
 80121de:	4650      	mov	r0, sl
 80121e0:	b017      	add	sp, #92	@ 0x5c
 80121e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e6:	9b07      	ldr	r3, [sp, #28]
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	f77f ae2e 	ble.w	8011e4a <_dtoa_r+0x7ba>
 80121ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80121f0:	9308      	str	r3, [sp, #32]
 80121f2:	2001      	movs	r0, #1
 80121f4:	e64d      	b.n	8011e92 <_dtoa_r+0x802>
 80121f6:	f1bb 0f00 	cmp.w	fp, #0
 80121fa:	f77f aed9 	ble.w	8011fb0 <_dtoa_r+0x920>
 80121fe:	4656      	mov	r6, sl
 8012200:	9802      	ldr	r0, [sp, #8]
 8012202:	4621      	mov	r1, r4
 8012204:	f7ff f9b9 	bl	801157a <quorem>
 8012208:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801220c:	f806 3b01 	strb.w	r3, [r6], #1
 8012210:	eba6 020a 	sub.w	r2, r6, sl
 8012214:	4593      	cmp	fp, r2
 8012216:	ddb4      	ble.n	8012182 <_dtoa_r+0xaf2>
 8012218:	9902      	ldr	r1, [sp, #8]
 801221a:	2300      	movs	r3, #0
 801221c:	220a      	movs	r2, #10
 801221e:	4648      	mov	r0, r9
 8012220:	f000 f968 	bl	80124f4 <__multadd>
 8012224:	9002      	str	r0, [sp, #8]
 8012226:	e7eb      	b.n	8012200 <_dtoa_r+0xb70>
 8012228:	080136b0 	.word	0x080136b0
 801222c:	08013634 	.word	0x08013634

08012230 <_free_r>:
 8012230:	b538      	push	{r3, r4, r5, lr}
 8012232:	4605      	mov	r5, r0
 8012234:	2900      	cmp	r1, #0
 8012236:	d041      	beq.n	80122bc <_free_r+0x8c>
 8012238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801223c:	1f0c      	subs	r4, r1, #4
 801223e:	2b00      	cmp	r3, #0
 8012240:	bfb8      	it	lt
 8012242:	18e4      	addlt	r4, r4, r3
 8012244:	f000 f8e8 	bl	8012418 <__malloc_lock>
 8012248:	4a1d      	ldr	r2, [pc, #116]	@ (80122c0 <_free_r+0x90>)
 801224a:	6813      	ldr	r3, [r2, #0]
 801224c:	b933      	cbnz	r3, 801225c <_free_r+0x2c>
 801224e:	6063      	str	r3, [r4, #4]
 8012250:	6014      	str	r4, [r2, #0]
 8012252:	4628      	mov	r0, r5
 8012254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012258:	f000 b8e4 	b.w	8012424 <__malloc_unlock>
 801225c:	42a3      	cmp	r3, r4
 801225e:	d908      	bls.n	8012272 <_free_r+0x42>
 8012260:	6820      	ldr	r0, [r4, #0]
 8012262:	1821      	adds	r1, r4, r0
 8012264:	428b      	cmp	r3, r1
 8012266:	bf01      	itttt	eq
 8012268:	6819      	ldreq	r1, [r3, #0]
 801226a:	685b      	ldreq	r3, [r3, #4]
 801226c:	1809      	addeq	r1, r1, r0
 801226e:	6021      	streq	r1, [r4, #0]
 8012270:	e7ed      	b.n	801224e <_free_r+0x1e>
 8012272:	461a      	mov	r2, r3
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	b10b      	cbz	r3, 801227c <_free_r+0x4c>
 8012278:	42a3      	cmp	r3, r4
 801227a:	d9fa      	bls.n	8012272 <_free_r+0x42>
 801227c:	6811      	ldr	r1, [r2, #0]
 801227e:	1850      	adds	r0, r2, r1
 8012280:	42a0      	cmp	r0, r4
 8012282:	d10b      	bne.n	801229c <_free_r+0x6c>
 8012284:	6820      	ldr	r0, [r4, #0]
 8012286:	4401      	add	r1, r0
 8012288:	1850      	adds	r0, r2, r1
 801228a:	4283      	cmp	r3, r0
 801228c:	6011      	str	r1, [r2, #0]
 801228e:	d1e0      	bne.n	8012252 <_free_r+0x22>
 8012290:	6818      	ldr	r0, [r3, #0]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	6053      	str	r3, [r2, #4]
 8012296:	4408      	add	r0, r1
 8012298:	6010      	str	r0, [r2, #0]
 801229a:	e7da      	b.n	8012252 <_free_r+0x22>
 801229c:	d902      	bls.n	80122a4 <_free_r+0x74>
 801229e:	230c      	movs	r3, #12
 80122a0:	602b      	str	r3, [r5, #0]
 80122a2:	e7d6      	b.n	8012252 <_free_r+0x22>
 80122a4:	6820      	ldr	r0, [r4, #0]
 80122a6:	1821      	adds	r1, r4, r0
 80122a8:	428b      	cmp	r3, r1
 80122aa:	bf04      	itt	eq
 80122ac:	6819      	ldreq	r1, [r3, #0]
 80122ae:	685b      	ldreq	r3, [r3, #4]
 80122b0:	6063      	str	r3, [r4, #4]
 80122b2:	bf04      	itt	eq
 80122b4:	1809      	addeq	r1, r1, r0
 80122b6:	6021      	streq	r1, [r4, #0]
 80122b8:	6054      	str	r4, [r2, #4]
 80122ba:	e7ca      	b.n	8012252 <_free_r+0x22>
 80122bc:	bd38      	pop	{r3, r4, r5, pc}
 80122be:	bf00      	nop
 80122c0:	2000f890 	.word	0x2000f890

080122c4 <malloc>:
 80122c4:	4b02      	ldr	r3, [pc, #8]	@ (80122d0 <malloc+0xc>)
 80122c6:	4601      	mov	r1, r0
 80122c8:	6818      	ldr	r0, [r3, #0]
 80122ca:	f000 b825 	b.w	8012318 <_malloc_r>
 80122ce:	bf00      	nop
 80122d0:	2000010c 	.word	0x2000010c

080122d4 <sbrk_aligned>:
 80122d4:	b570      	push	{r4, r5, r6, lr}
 80122d6:	4e0f      	ldr	r6, [pc, #60]	@ (8012314 <sbrk_aligned+0x40>)
 80122d8:	460c      	mov	r4, r1
 80122da:	6831      	ldr	r1, [r6, #0]
 80122dc:	4605      	mov	r5, r0
 80122de:	b911      	cbnz	r1, 80122e6 <sbrk_aligned+0x12>
 80122e0:	f000 fe92 	bl	8013008 <_sbrk_r>
 80122e4:	6030      	str	r0, [r6, #0]
 80122e6:	4621      	mov	r1, r4
 80122e8:	4628      	mov	r0, r5
 80122ea:	f000 fe8d 	bl	8013008 <_sbrk_r>
 80122ee:	1c43      	adds	r3, r0, #1
 80122f0:	d103      	bne.n	80122fa <sbrk_aligned+0x26>
 80122f2:	f04f 34ff 	mov.w	r4, #4294967295
 80122f6:	4620      	mov	r0, r4
 80122f8:	bd70      	pop	{r4, r5, r6, pc}
 80122fa:	1cc4      	adds	r4, r0, #3
 80122fc:	f024 0403 	bic.w	r4, r4, #3
 8012300:	42a0      	cmp	r0, r4
 8012302:	d0f8      	beq.n	80122f6 <sbrk_aligned+0x22>
 8012304:	1a21      	subs	r1, r4, r0
 8012306:	4628      	mov	r0, r5
 8012308:	f000 fe7e 	bl	8013008 <_sbrk_r>
 801230c:	3001      	adds	r0, #1
 801230e:	d1f2      	bne.n	80122f6 <sbrk_aligned+0x22>
 8012310:	e7ef      	b.n	80122f2 <sbrk_aligned+0x1e>
 8012312:	bf00      	nop
 8012314:	2000f88c 	.word	0x2000f88c

08012318 <_malloc_r>:
 8012318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801231c:	1ccd      	adds	r5, r1, #3
 801231e:	f025 0503 	bic.w	r5, r5, #3
 8012322:	3508      	adds	r5, #8
 8012324:	2d0c      	cmp	r5, #12
 8012326:	bf38      	it	cc
 8012328:	250c      	movcc	r5, #12
 801232a:	2d00      	cmp	r5, #0
 801232c:	4606      	mov	r6, r0
 801232e:	db01      	blt.n	8012334 <_malloc_r+0x1c>
 8012330:	42a9      	cmp	r1, r5
 8012332:	d904      	bls.n	801233e <_malloc_r+0x26>
 8012334:	230c      	movs	r3, #12
 8012336:	6033      	str	r3, [r6, #0]
 8012338:	2000      	movs	r0, #0
 801233a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801233e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012414 <_malloc_r+0xfc>
 8012342:	f000 f869 	bl	8012418 <__malloc_lock>
 8012346:	f8d8 3000 	ldr.w	r3, [r8]
 801234a:	461c      	mov	r4, r3
 801234c:	bb44      	cbnz	r4, 80123a0 <_malloc_r+0x88>
 801234e:	4629      	mov	r1, r5
 8012350:	4630      	mov	r0, r6
 8012352:	f7ff ffbf 	bl	80122d4 <sbrk_aligned>
 8012356:	1c43      	adds	r3, r0, #1
 8012358:	4604      	mov	r4, r0
 801235a:	d158      	bne.n	801240e <_malloc_r+0xf6>
 801235c:	f8d8 4000 	ldr.w	r4, [r8]
 8012360:	4627      	mov	r7, r4
 8012362:	2f00      	cmp	r7, #0
 8012364:	d143      	bne.n	80123ee <_malloc_r+0xd6>
 8012366:	2c00      	cmp	r4, #0
 8012368:	d04b      	beq.n	8012402 <_malloc_r+0xea>
 801236a:	6823      	ldr	r3, [r4, #0]
 801236c:	4639      	mov	r1, r7
 801236e:	4630      	mov	r0, r6
 8012370:	eb04 0903 	add.w	r9, r4, r3
 8012374:	f000 fe48 	bl	8013008 <_sbrk_r>
 8012378:	4581      	cmp	r9, r0
 801237a:	d142      	bne.n	8012402 <_malloc_r+0xea>
 801237c:	6821      	ldr	r1, [r4, #0]
 801237e:	1a6d      	subs	r5, r5, r1
 8012380:	4629      	mov	r1, r5
 8012382:	4630      	mov	r0, r6
 8012384:	f7ff ffa6 	bl	80122d4 <sbrk_aligned>
 8012388:	3001      	adds	r0, #1
 801238a:	d03a      	beq.n	8012402 <_malloc_r+0xea>
 801238c:	6823      	ldr	r3, [r4, #0]
 801238e:	442b      	add	r3, r5
 8012390:	6023      	str	r3, [r4, #0]
 8012392:	f8d8 3000 	ldr.w	r3, [r8]
 8012396:	685a      	ldr	r2, [r3, #4]
 8012398:	bb62      	cbnz	r2, 80123f4 <_malloc_r+0xdc>
 801239a:	f8c8 7000 	str.w	r7, [r8]
 801239e:	e00f      	b.n	80123c0 <_malloc_r+0xa8>
 80123a0:	6822      	ldr	r2, [r4, #0]
 80123a2:	1b52      	subs	r2, r2, r5
 80123a4:	d420      	bmi.n	80123e8 <_malloc_r+0xd0>
 80123a6:	2a0b      	cmp	r2, #11
 80123a8:	d917      	bls.n	80123da <_malloc_r+0xc2>
 80123aa:	1961      	adds	r1, r4, r5
 80123ac:	42a3      	cmp	r3, r4
 80123ae:	6025      	str	r5, [r4, #0]
 80123b0:	bf18      	it	ne
 80123b2:	6059      	strne	r1, [r3, #4]
 80123b4:	6863      	ldr	r3, [r4, #4]
 80123b6:	bf08      	it	eq
 80123b8:	f8c8 1000 	streq.w	r1, [r8]
 80123bc:	5162      	str	r2, [r4, r5]
 80123be:	604b      	str	r3, [r1, #4]
 80123c0:	4630      	mov	r0, r6
 80123c2:	f000 f82f 	bl	8012424 <__malloc_unlock>
 80123c6:	f104 000b 	add.w	r0, r4, #11
 80123ca:	1d23      	adds	r3, r4, #4
 80123cc:	f020 0007 	bic.w	r0, r0, #7
 80123d0:	1ac2      	subs	r2, r0, r3
 80123d2:	bf1c      	itt	ne
 80123d4:	1a1b      	subne	r3, r3, r0
 80123d6:	50a3      	strne	r3, [r4, r2]
 80123d8:	e7af      	b.n	801233a <_malloc_r+0x22>
 80123da:	6862      	ldr	r2, [r4, #4]
 80123dc:	42a3      	cmp	r3, r4
 80123de:	bf0c      	ite	eq
 80123e0:	f8c8 2000 	streq.w	r2, [r8]
 80123e4:	605a      	strne	r2, [r3, #4]
 80123e6:	e7eb      	b.n	80123c0 <_malloc_r+0xa8>
 80123e8:	4623      	mov	r3, r4
 80123ea:	6864      	ldr	r4, [r4, #4]
 80123ec:	e7ae      	b.n	801234c <_malloc_r+0x34>
 80123ee:	463c      	mov	r4, r7
 80123f0:	687f      	ldr	r7, [r7, #4]
 80123f2:	e7b6      	b.n	8012362 <_malloc_r+0x4a>
 80123f4:	461a      	mov	r2, r3
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	42a3      	cmp	r3, r4
 80123fa:	d1fb      	bne.n	80123f4 <_malloc_r+0xdc>
 80123fc:	2300      	movs	r3, #0
 80123fe:	6053      	str	r3, [r2, #4]
 8012400:	e7de      	b.n	80123c0 <_malloc_r+0xa8>
 8012402:	230c      	movs	r3, #12
 8012404:	6033      	str	r3, [r6, #0]
 8012406:	4630      	mov	r0, r6
 8012408:	f000 f80c 	bl	8012424 <__malloc_unlock>
 801240c:	e794      	b.n	8012338 <_malloc_r+0x20>
 801240e:	6005      	str	r5, [r0, #0]
 8012410:	e7d6      	b.n	80123c0 <_malloc_r+0xa8>
 8012412:	bf00      	nop
 8012414:	2000f890 	.word	0x2000f890

08012418 <__malloc_lock>:
 8012418:	4801      	ldr	r0, [pc, #4]	@ (8012420 <__malloc_lock+0x8>)
 801241a:	f7ff b89e 	b.w	801155a <__retarget_lock_acquire_recursive>
 801241e:	bf00      	nop
 8012420:	2000f888 	.word	0x2000f888

08012424 <__malloc_unlock>:
 8012424:	4801      	ldr	r0, [pc, #4]	@ (801242c <__malloc_unlock+0x8>)
 8012426:	f7ff b899 	b.w	801155c <__retarget_lock_release_recursive>
 801242a:	bf00      	nop
 801242c:	2000f888 	.word	0x2000f888

08012430 <_Balloc>:
 8012430:	b570      	push	{r4, r5, r6, lr}
 8012432:	69c6      	ldr	r6, [r0, #28]
 8012434:	4604      	mov	r4, r0
 8012436:	460d      	mov	r5, r1
 8012438:	b976      	cbnz	r6, 8012458 <_Balloc+0x28>
 801243a:	2010      	movs	r0, #16
 801243c:	f7ff ff42 	bl	80122c4 <malloc>
 8012440:	4602      	mov	r2, r0
 8012442:	61e0      	str	r0, [r4, #28]
 8012444:	b920      	cbnz	r0, 8012450 <_Balloc+0x20>
 8012446:	4b18      	ldr	r3, [pc, #96]	@ (80124a8 <_Balloc+0x78>)
 8012448:	4818      	ldr	r0, [pc, #96]	@ (80124ac <_Balloc+0x7c>)
 801244a:	216b      	movs	r1, #107	@ 0x6b
 801244c:	f000 fdec 	bl	8013028 <__assert_func>
 8012450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012454:	6006      	str	r6, [r0, #0]
 8012456:	60c6      	str	r6, [r0, #12]
 8012458:	69e6      	ldr	r6, [r4, #28]
 801245a:	68f3      	ldr	r3, [r6, #12]
 801245c:	b183      	cbz	r3, 8012480 <_Balloc+0x50>
 801245e:	69e3      	ldr	r3, [r4, #28]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012466:	b9b8      	cbnz	r0, 8012498 <_Balloc+0x68>
 8012468:	2101      	movs	r1, #1
 801246a:	fa01 f605 	lsl.w	r6, r1, r5
 801246e:	1d72      	adds	r2, r6, #5
 8012470:	0092      	lsls	r2, r2, #2
 8012472:	4620      	mov	r0, r4
 8012474:	f000 fdf6 	bl	8013064 <_calloc_r>
 8012478:	b160      	cbz	r0, 8012494 <_Balloc+0x64>
 801247a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801247e:	e00e      	b.n	801249e <_Balloc+0x6e>
 8012480:	2221      	movs	r2, #33	@ 0x21
 8012482:	2104      	movs	r1, #4
 8012484:	4620      	mov	r0, r4
 8012486:	f000 fded 	bl	8013064 <_calloc_r>
 801248a:	69e3      	ldr	r3, [r4, #28]
 801248c:	60f0      	str	r0, [r6, #12]
 801248e:	68db      	ldr	r3, [r3, #12]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d1e4      	bne.n	801245e <_Balloc+0x2e>
 8012494:	2000      	movs	r0, #0
 8012496:	bd70      	pop	{r4, r5, r6, pc}
 8012498:	6802      	ldr	r2, [r0, #0]
 801249a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801249e:	2300      	movs	r3, #0
 80124a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80124a4:	e7f7      	b.n	8012496 <_Balloc+0x66>
 80124a6:	bf00      	nop
 80124a8:	08013641 	.word	0x08013641
 80124ac:	080136c1 	.word	0x080136c1

080124b0 <_Bfree>:
 80124b0:	b570      	push	{r4, r5, r6, lr}
 80124b2:	69c6      	ldr	r6, [r0, #28]
 80124b4:	4605      	mov	r5, r0
 80124b6:	460c      	mov	r4, r1
 80124b8:	b976      	cbnz	r6, 80124d8 <_Bfree+0x28>
 80124ba:	2010      	movs	r0, #16
 80124bc:	f7ff ff02 	bl	80122c4 <malloc>
 80124c0:	4602      	mov	r2, r0
 80124c2:	61e8      	str	r0, [r5, #28]
 80124c4:	b920      	cbnz	r0, 80124d0 <_Bfree+0x20>
 80124c6:	4b09      	ldr	r3, [pc, #36]	@ (80124ec <_Bfree+0x3c>)
 80124c8:	4809      	ldr	r0, [pc, #36]	@ (80124f0 <_Bfree+0x40>)
 80124ca:	218f      	movs	r1, #143	@ 0x8f
 80124cc:	f000 fdac 	bl	8013028 <__assert_func>
 80124d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124d4:	6006      	str	r6, [r0, #0]
 80124d6:	60c6      	str	r6, [r0, #12]
 80124d8:	b13c      	cbz	r4, 80124ea <_Bfree+0x3a>
 80124da:	69eb      	ldr	r3, [r5, #28]
 80124dc:	6862      	ldr	r2, [r4, #4]
 80124de:	68db      	ldr	r3, [r3, #12]
 80124e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80124e4:	6021      	str	r1, [r4, #0]
 80124e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80124ea:	bd70      	pop	{r4, r5, r6, pc}
 80124ec:	08013641 	.word	0x08013641
 80124f0:	080136c1 	.word	0x080136c1

080124f4 <__multadd>:
 80124f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f8:	690d      	ldr	r5, [r1, #16]
 80124fa:	4607      	mov	r7, r0
 80124fc:	460c      	mov	r4, r1
 80124fe:	461e      	mov	r6, r3
 8012500:	f101 0c14 	add.w	ip, r1, #20
 8012504:	2000      	movs	r0, #0
 8012506:	f8dc 3000 	ldr.w	r3, [ip]
 801250a:	b299      	uxth	r1, r3
 801250c:	fb02 6101 	mla	r1, r2, r1, r6
 8012510:	0c1e      	lsrs	r6, r3, #16
 8012512:	0c0b      	lsrs	r3, r1, #16
 8012514:	fb02 3306 	mla	r3, r2, r6, r3
 8012518:	b289      	uxth	r1, r1
 801251a:	3001      	adds	r0, #1
 801251c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012520:	4285      	cmp	r5, r0
 8012522:	f84c 1b04 	str.w	r1, [ip], #4
 8012526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801252a:	dcec      	bgt.n	8012506 <__multadd+0x12>
 801252c:	b30e      	cbz	r6, 8012572 <__multadd+0x7e>
 801252e:	68a3      	ldr	r3, [r4, #8]
 8012530:	42ab      	cmp	r3, r5
 8012532:	dc19      	bgt.n	8012568 <__multadd+0x74>
 8012534:	6861      	ldr	r1, [r4, #4]
 8012536:	4638      	mov	r0, r7
 8012538:	3101      	adds	r1, #1
 801253a:	f7ff ff79 	bl	8012430 <_Balloc>
 801253e:	4680      	mov	r8, r0
 8012540:	b928      	cbnz	r0, 801254e <__multadd+0x5a>
 8012542:	4602      	mov	r2, r0
 8012544:	4b0c      	ldr	r3, [pc, #48]	@ (8012578 <__multadd+0x84>)
 8012546:	480d      	ldr	r0, [pc, #52]	@ (801257c <__multadd+0x88>)
 8012548:	21ba      	movs	r1, #186	@ 0xba
 801254a:	f000 fd6d 	bl	8013028 <__assert_func>
 801254e:	6922      	ldr	r2, [r4, #16]
 8012550:	3202      	adds	r2, #2
 8012552:	f104 010c 	add.w	r1, r4, #12
 8012556:	0092      	lsls	r2, r2, #2
 8012558:	300c      	adds	r0, #12
 801255a:	f7ff f800 	bl	801155e <memcpy>
 801255e:	4621      	mov	r1, r4
 8012560:	4638      	mov	r0, r7
 8012562:	f7ff ffa5 	bl	80124b0 <_Bfree>
 8012566:	4644      	mov	r4, r8
 8012568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801256c:	3501      	adds	r5, #1
 801256e:	615e      	str	r6, [r3, #20]
 8012570:	6125      	str	r5, [r4, #16]
 8012572:	4620      	mov	r0, r4
 8012574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012578:	080136b0 	.word	0x080136b0
 801257c:	080136c1 	.word	0x080136c1

08012580 <__hi0bits>:
 8012580:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012584:	4603      	mov	r3, r0
 8012586:	bf36      	itet	cc
 8012588:	0403      	lslcc	r3, r0, #16
 801258a:	2000      	movcs	r0, #0
 801258c:	2010      	movcc	r0, #16
 801258e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012592:	bf3c      	itt	cc
 8012594:	021b      	lslcc	r3, r3, #8
 8012596:	3008      	addcc	r0, #8
 8012598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801259c:	bf3c      	itt	cc
 801259e:	011b      	lslcc	r3, r3, #4
 80125a0:	3004      	addcc	r0, #4
 80125a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125a6:	bf3c      	itt	cc
 80125a8:	009b      	lslcc	r3, r3, #2
 80125aa:	3002      	addcc	r0, #2
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	db05      	blt.n	80125bc <__hi0bits+0x3c>
 80125b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80125b4:	f100 0001 	add.w	r0, r0, #1
 80125b8:	bf08      	it	eq
 80125ba:	2020      	moveq	r0, #32
 80125bc:	4770      	bx	lr

080125be <__lo0bits>:
 80125be:	6803      	ldr	r3, [r0, #0]
 80125c0:	4602      	mov	r2, r0
 80125c2:	f013 0007 	ands.w	r0, r3, #7
 80125c6:	d00b      	beq.n	80125e0 <__lo0bits+0x22>
 80125c8:	07d9      	lsls	r1, r3, #31
 80125ca:	d421      	bmi.n	8012610 <__lo0bits+0x52>
 80125cc:	0798      	lsls	r0, r3, #30
 80125ce:	bf49      	itett	mi
 80125d0:	085b      	lsrmi	r3, r3, #1
 80125d2:	089b      	lsrpl	r3, r3, #2
 80125d4:	2001      	movmi	r0, #1
 80125d6:	6013      	strmi	r3, [r2, #0]
 80125d8:	bf5c      	itt	pl
 80125da:	6013      	strpl	r3, [r2, #0]
 80125dc:	2002      	movpl	r0, #2
 80125de:	4770      	bx	lr
 80125e0:	b299      	uxth	r1, r3
 80125e2:	b909      	cbnz	r1, 80125e8 <__lo0bits+0x2a>
 80125e4:	0c1b      	lsrs	r3, r3, #16
 80125e6:	2010      	movs	r0, #16
 80125e8:	b2d9      	uxtb	r1, r3
 80125ea:	b909      	cbnz	r1, 80125f0 <__lo0bits+0x32>
 80125ec:	3008      	adds	r0, #8
 80125ee:	0a1b      	lsrs	r3, r3, #8
 80125f0:	0719      	lsls	r1, r3, #28
 80125f2:	bf04      	itt	eq
 80125f4:	091b      	lsreq	r3, r3, #4
 80125f6:	3004      	addeq	r0, #4
 80125f8:	0799      	lsls	r1, r3, #30
 80125fa:	bf04      	itt	eq
 80125fc:	089b      	lsreq	r3, r3, #2
 80125fe:	3002      	addeq	r0, #2
 8012600:	07d9      	lsls	r1, r3, #31
 8012602:	d403      	bmi.n	801260c <__lo0bits+0x4e>
 8012604:	085b      	lsrs	r3, r3, #1
 8012606:	f100 0001 	add.w	r0, r0, #1
 801260a:	d003      	beq.n	8012614 <__lo0bits+0x56>
 801260c:	6013      	str	r3, [r2, #0]
 801260e:	4770      	bx	lr
 8012610:	2000      	movs	r0, #0
 8012612:	4770      	bx	lr
 8012614:	2020      	movs	r0, #32
 8012616:	4770      	bx	lr

08012618 <__i2b>:
 8012618:	b510      	push	{r4, lr}
 801261a:	460c      	mov	r4, r1
 801261c:	2101      	movs	r1, #1
 801261e:	f7ff ff07 	bl	8012430 <_Balloc>
 8012622:	4602      	mov	r2, r0
 8012624:	b928      	cbnz	r0, 8012632 <__i2b+0x1a>
 8012626:	4b05      	ldr	r3, [pc, #20]	@ (801263c <__i2b+0x24>)
 8012628:	4805      	ldr	r0, [pc, #20]	@ (8012640 <__i2b+0x28>)
 801262a:	f240 1145 	movw	r1, #325	@ 0x145
 801262e:	f000 fcfb 	bl	8013028 <__assert_func>
 8012632:	2301      	movs	r3, #1
 8012634:	6144      	str	r4, [r0, #20]
 8012636:	6103      	str	r3, [r0, #16]
 8012638:	bd10      	pop	{r4, pc}
 801263a:	bf00      	nop
 801263c:	080136b0 	.word	0x080136b0
 8012640:	080136c1 	.word	0x080136c1

08012644 <__multiply>:
 8012644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012648:	4617      	mov	r7, r2
 801264a:	690a      	ldr	r2, [r1, #16]
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	429a      	cmp	r2, r3
 8012650:	bfa8      	it	ge
 8012652:	463b      	movge	r3, r7
 8012654:	4689      	mov	r9, r1
 8012656:	bfa4      	itt	ge
 8012658:	460f      	movge	r7, r1
 801265a:	4699      	movge	r9, r3
 801265c:	693d      	ldr	r5, [r7, #16]
 801265e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	6879      	ldr	r1, [r7, #4]
 8012666:	eb05 060a 	add.w	r6, r5, sl
 801266a:	42b3      	cmp	r3, r6
 801266c:	b085      	sub	sp, #20
 801266e:	bfb8      	it	lt
 8012670:	3101      	addlt	r1, #1
 8012672:	f7ff fedd 	bl	8012430 <_Balloc>
 8012676:	b930      	cbnz	r0, 8012686 <__multiply+0x42>
 8012678:	4602      	mov	r2, r0
 801267a:	4b41      	ldr	r3, [pc, #260]	@ (8012780 <__multiply+0x13c>)
 801267c:	4841      	ldr	r0, [pc, #260]	@ (8012784 <__multiply+0x140>)
 801267e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012682:	f000 fcd1 	bl	8013028 <__assert_func>
 8012686:	f100 0414 	add.w	r4, r0, #20
 801268a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801268e:	4623      	mov	r3, r4
 8012690:	2200      	movs	r2, #0
 8012692:	4573      	cmp	r3, lr
 8012694:	d320      	bcc.n	80126d8 <__multiply+0x94>
 8012696:	f107 0814 	add.w	r8, r7, #20
 801269a:	f109 0114 	add.w	r1, r9, #20
 801269e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80126a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80126a6:	9302      	str	r3, [sp, #8]
 80126a8:	1beb      	subs	r3, r5, r7
 80126aa:	3b15      	subs	r3, #21
 80126ac:	f023 0303 	bic.w	r3, r3, #3
 80126b0:	3304      	adds	r3, #4
 80126b2:	3715      	adds	r7, #21
 80126b4:	42bd      	cmp	r5, r7
 80126b6:	bf38      	it	cc
 80126b8:	2304      	movcc	r3, #4
 80126ba:	9301      	str	r3, [sp, #4]
 80126bc:	9b02      	ldr	r3, [sp, #8]
 80126be:	9103      	str	r1, [sp, #12]
 80126c0:	428b      	cmp	r3, r1
 80126c2:	d80c      	bhi.n	80126de <__multiply+0x9a>
 80126c4:	2e00      	cmp	r6, #0
 80126c6:	dd03      	ble.n	80126d0 <__multiply+0x8c>
 80126c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d055      	beq.n	801277c <__multiply+0x138>
 80126d0:	6106      	str	r6, [r0, #16]
 80126d2:	b005      	add	sp, #20
 80126d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d8:	f843 2b04 	str.w	r2, [r3], #4
 80126dc:	e7d9      	b.n	8012692 <__multiply+0x4e>
 80126de:	f8b1 a000 	ldrh.w	sl, [r1]
 80126e2:	f1ba 0f00 	cmp.w	sl, #0
 80126e6:	d01f      	beq.n	8012728 <__multiply+0xe4>
 80126e8:	46c4      	mov	ip, r8
 80126ea:	46a1      	mov	r9, r4
 80126ec:	2700      	movs	r7, #0
 80126ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 80126f2:	f8d9 3000 	ldr.w	r3, [r9]
 80126f6:	fa1f fb82 	uxth.w	fp, r2
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8012700:	443b      	add	r3, r7
 8012702:	f8d9 7000 	ldr.w	r7, [r9]
 8012706:	0c12      	lsrs	r2, r2, #16
 8012708:	0c3f      	lsrs	r7, r7, #16
 801270a:	fb0a 7202 	mla	r2, sl, r2, r7
 801270e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8012712:	b29b      	uxth	r3, r3
 8012714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012718:	4565      	cmp	r5, ip
 801271a:	f849 3b04 	str.w	r3, [r9], #4
 801271e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012722:	d8e4      	bhi.n	80126ee <__multiply+0xaa>
 8012724:	9b01      	ldr	r3, [sp, #4]
 8012726:	50e7      	str	r7, [r4, r3]
 8012728:	9b03      	ldr	r3, [sp, #12]
 801272a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801272e:	3104      	adds	r1, #4
 8012730:	f1b9 0f00 	cmp.w	r9, #0
 8012734:	d020      	beq.n	8012778 <__multiply+0x134>
 8012736:	6823      	ldr	r3, [r4, #0]
 8012738:	4647      	mov	r7, r8
 801273a:	46a4      	mov	ip, r4
 801273c:	f04f 0a00 	mov.w	sl, #0
 8012740:	f8b7 b000 	ldrh.w	fp, [r7]
 8012744:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012748:	fb09 220b 	mla	r2, r9, fp, r2
 801274c:	4452      	add	r2, sl
 801274e:	b29b      	uxth	r3, r3
 8012750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012754:	f84c 3b04 	str.w	r3, [ip], #4
 8012758:	f857 3b04 	ldr.w	r3, [r7], #4
 801275c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012760:	f8bc 3000 	ldrh.w	r3, [ip]
 8012764:	fb09 330a 	mla	r3, r9, sl, r3
 8012768:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801276c:	42bd      	cmp	r5, r7
 801276e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012772:	d8e5      	bhi.n	8012740 <__multiply+0xfc>
 8012774:	9a01      	ldr	r2, [sp, #4]
 8012776:	50a3      	str	r3, [r4, r2]
 8012778:	3404      	adds	r4, #4
 801277a:	e79f      	b.n	80126bc <__multiply+0x78>
 801277c:	3e01      	subs	r6, #1
 801277e:	e7a1      	b.n	80126c4 <__multiply+0x80>
 8012780:	080136b0 	.word	0x080136b0
 8012784:	080136c1 	.word	0x080136c1

08012788 <__pow5mult>:
 8012788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801278c:	4615      	mov	r5, r2
 801278e:	f012 0203 	ands.w	r2, r2, #3
 8012792:	4607      	mov	r7, r0
 8012794:	460e      	mov	r6, r1
 8012796:	d007      	beq.n	80127a8 <__pow5mult+0x20>
 8012798:	4c25      	ldr	r4, [pc, #148]	@ (8012830 <__pow5mult+0xa8>)
 801279a:	3a01      	subs	r2, #1
 801279c:	2300      	movs	r3, #0
 801279e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80127a2:	f7ff fea7 	bl	80124f4 <__multadd>
 80127a6:	4606      	mov	r6, r0
 80127a8:	10ad      	asrs	r5, r5, #2
 80127aa:	d03d      	beq.n	8012828 <__pow5mult+0xa0>
 80127ac:	69fc      	ldr	r4, [r7, #28]
 80127ae:	b97c      	cbnz	r4, 80127d0 <__pow5mult+0x48>
 80127b0:	2010      	movs	r0, #16
 80127b2:	f7ff fd87 	bl	80122c4 <malloc>
 80127b6:	4602      	mov	r2, r0
 80127b8:	61f8      	str	r0, [r7, #28]
 80127ba:	b928      	cbnz	r0, 80127c8 <__pow5mult+0x40>
 80127bc:	4b1d      	ldr	r3, [pc, #116]	@ (8012834 <__pow5mult+0xac>)
 80127be:	481e      	ldr	r0, [pc, #120]	@ (8012838 <__pow5mult+0xb0>)
 80127c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80127c4:	f000 fc30 	bl	8013028 <__assert_func>
 80127c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80127cc:	6004      	str	r4, [r0, #0]
 80127ce:	60c4      	str	r4, [r0, #12]
 80127d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80127d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80127d8:	b94c      	cbnz	r4, 80127ee <__pow5mult+0x66>
 80127da:	f240 2171 	movw	r1, #625	@ 0x271
 80127de:	4638      	mov	r0, r7
 80127e0:	f7ff ff1a 	bl	8012618 <__i2b>
 80127e4:	2300      	movs	r3, #0
 80127e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80127ea:	4604      	mov	r4, r0
 80127ec:	6003      	str	r3, [r0, #0]
 80127ee:	f04f 0900 	mov.w	r9, #0
 80127f2:	07eb      	lsls	r3, r5, #31
 80127f4:	d50a      	bpl.n	801280c <__pow5mult+0x84>
 80127f6:	4631      	mov	r1, r6
 80127f8:	4622      	mov	r2, r4
 80127fa:	4638      	mov	r0, r7
 80127fc:	f7ff ff22 	bl	8012644 <__multiply>
 8012800:	4631      	mov	r1, r6
 8012802:	4680      	mov	r8, r0
 8012804:	4638      	mov	r0, r7
 8012806:	f7ff fe53 	bl	80124b0 <_Bfree>
 801280a:	4646      	mov	r6, r8
 801280c:	106d      	asrs	r5, r5, #1
 801280e:	d00b      	beq.n	8012828 <__pow5mult+0xa0>
 8012810:	6820      	ldr	r0, [r4, #0]
 8012812:	b938      	cbnz	r0, 8012824 <__pow5mult+0x9c>
 8012814:	4622      	mov	r2, r4
 8012816:	4621      	mov	r1, r4
 8012818:	4638      	mov	r0, r7
 801281a:	f7ff ff13 	bl	8012644 <__multiply>
 801281e:	6020      	str	r0, [r4, #0]
 8012820:	f8c0 9000 	str.w	r9, [r0]
 8012824:	4604      	mov	r4, r0
 8012826:	e7e4      	b.n	80127f2 <__pow5mult+0x6a>
 8012828:	4630      	mov	r0, r6
 801282a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801282e:	bf00      	nop
 8012830:	08013774 	.word	0x08013774
 8012834:	08013641 	.word	0x08013641
 8012838:	080136c1 	.word	0x080136c1

0801283c <__lshift>:
 801283c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012840:	460c      	mov	r4, r1
 8012842:	6849      	ldr	r1, [r1, #4]
 8012844:	6923      	ldr	r3, [r4, #16]
 8012846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801284a:	68a3      	ldr	r3, [r4, #8]
 801284c:	4607      	mov	r7, r0
 801284e:	4691      	mov	r9, r2
 8012850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012854:	f108 0601 	add.w	r6, r8, #1
 8012858:	42b3      	cmp	r3, r6
 801285a:	db0b      	blt.n	8012874 <__lshift+0x38>
 801285c:	4638      	mov	r0, r7
 801285e:	f7ff fde7 	bl	8012430 <_Balloc>
 8012862:	4605      	mov	r5, r0
 8012864:	b948      	cbnz	r0, 801287a <__lshift+0x3e>
 8012866:	4602      	mov	r2, r0
 8012868:	4b28      	ldr	r3, [pc, #160]	@ (801290c <__lshift+0xd0>)
 801286a:	4829      	ldr	r0, [pc, #164]	@ (8012910 <__lshift+0xd4>)
 801286c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012870:	f000 fbda 	bl	8013028 <__assert_func>
 8012874:	3101      	adds	r1, #1
 8012876:	005b      	lsls	r3, r3, #1
 8012878:	e7ee      	b.n	8012858 <__lshift+0x1c>
 801287a:	2300      	movs	r3, #0
 801287c:	f100 0114 	add.w	r1, r0, #20
 8012880:	f100 0210 	add.w	r2, r0, #16
 8012884:	4618      	mov	r0, r3
 8012886:	4553      	cmp	r3, sl
 8012888:	db33      	blt.n	80128f2 <__lshift+0xb6>
 801288a:	6920      	ldr	r0, [r4, #16]
 801288c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012890:	f104 0314 	add.w	r3, r4, #20
 8012894:	f019 091f 	ands.w	r9, r9, #31
 8012898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801289c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80128a0:	d02b      	beq.n	80128fa <__lshift+0xbe>
 80128a2:	f1c9 0e20 	rsb	lr, r9, #32
 80128a6:	468a      	mov	sl, r1
 80128a8:	2200      	movs	r2, #0
 80128aa:	6818      	ldr	r0, [r3, #0]
 80128ac:	fa00 f009 	lsl.w	r0, r0, r9
 80128b0:	4310      	orrs	r0, r2
 80128b2:	f84a 0b04 	str.w	r0, [sl], #4
 80128b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80128ba:	459c      	cmp	ip, r3
 80128bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80128c0:	d8f3      	bhi.n	80128aa <__lshift+0x6e>
 80128c2:	ebac 0304 	sub.w	r3, ip, r4
 80128c6:	3b15      	subs	r3, #21
 80128c8:	f023 0303 	bic.w	r3, r3, #3
 80128cc:	3304      	adds	r3, #4
 80128ce:	f104 0015 	add.w	r0, r4, #21
 80128d2:	4560      	cmp	r0, ip
 80128d4:	bf88      	it	hi
 80128d6:	2304      	movhi	r3, #4
 80128d8:	50ca      	str	r2, [r1, r3]
 80128da:	b10a      	cbz	r2, 80128e0 <__lshift+0xa4>
 80128dc:	f108 0602 	add.w	r6, r8, #2
 80128e0:	3e01      	subs	r6, #1
 80128e2:	4638      	mov	r0, r7
 80128e4:	612e      	str	r6, [r5, #16]
 80128e6:	4621      	mov	r1, r4
 80128e8:	f7ff fde2 	bl	80124b0 <_Bfree>
 80128ec:	4628      	mov	r0, r5
 80128ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80128f6:	3301      	adds	r3, #1
 80128f8:	e7c5      	b.n	8012886 <__lshift+0x4a>
 80128fa:	3904      	subs	r1, #4
 80128fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012900:	f841 2f04 	str.w	r2, [r1, #4]!
 8012904:	459c      	cmp	ip, r3
 8012906:	d8f9      	bhi.n	80128fc <__lshift+0xc0>
 8012908:	e7ea      	b.n	80128e0 <__lshift+0xa4>
 801290a:	bf00      	nop
 801290c:	080136b0 	.word	0x080136b0
 8012910:	080136c1 	.word	0x080136c1

08012914 <__mcmp>:
 8012914:	690a      	ldr	r2, [r1, #16]
 8012916:	4603      	mov	r3, r0
 8012918:	6900      	ldr	r0, [r0, #16]
 801291a:	1a80      	subs	r0, r0, r2
 801291c:	b530      	push	{r4, r5, lr}
 801291e:	d10e      	bne.n	801293e <__mcmp+0x2a>
 8012920:	3314      	adds	r3, #20
 8012922:	3114      	adds	r1, #20
 8012924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801292c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012934:	4295      	cmp	r5, r2
 8012936:	d003      	beq.n	8012940 <__mcmp+0x2c>
 8012938:	d205      	bcs.n	8012946 <__mcmp+0x32>
 801293a:	f04f 30ff 	mov.w	r0, #4294967295
 801293e:	bd30      	pop	{r4, r5, pc}
 8012940:	42a3      	cmp	r3, r4
 8012942:	d3f3      	bcc.n	801292c <__mcmp+0x18>
 8012944:	e7fb      	b.n	801293e <__mcmp+0x2a>
 8012946:	2001      	movs	r0, #1
 8012948:	e7f9      	b.n	801293e <__mcmp+0x2a>
	...

0801294c <__mdiff>:
 801294c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012950:	4689      	mov	r9, r1
 8012952:	4606      	mov	r6, r0
 8012954:	4611      	mov	r1, r2
 8012956:	4648      	mov	r0, r9
 8012958:	4614      	mov	r4, r2
 801295a:	f7ff ffdb 	bl	8012914 <__mcmp>
 801295e:	1e05      	subs	r5, r0, #0
 8012960:	d112      	bne.n	8012988 <__mdiff+0x3c>
 8012962:	4629      	mov	r1, r5
 8012964:	4630      	mov	r0, r6
 8012966:	f7ff fd63 	bl	8012430 <_Balloc>
 801296a:	4602      	mov	r2, r0
 801296c:	b928      	cbnz	r0, 801297a <__mdiff+0x2e>
 801296e:	4b3f      	ldr	r3, [pc, #252]	@ (8012a6c <__mdiff+0x120>)
 8012970:	f240 2137 	movw	r1, #567	@ 0x237
 8012974:	483e      	ldr	r0, [pc, #248]	@ (8012a70 <__mdiff+0x124>)
 8012976:	f000 fb57 	bl	8013028 <__assert_func>
 801297a:	2301      	movs	r3, #1
 801297c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012980:	4610      	mov	r0, r2
 8012982:	b003      	add	sp, #12
 8012984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012988:	bfbc      	itt	lt
 801298a:	464b      	movlt	r3, r9
 801298c:	46a1      	movlt	r9, r4
 801298e:	4630      	mov	r0, r6
 8012990:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012994:	bfba      	itte	lt
 8012996:	461c      	movlt	r4, r3
 8012998:	2501      	movlt	r5, #1
 801299a:	2500      	movge	r5, #0
 801299c:	f7ff fd48 	bl	8012430 <_Balloc>
 80129a0:	4602      	mov	r2, r0
 80129a2:	b918      	cbnz	r0, 80129ac <__mdiff+0x60>
 80129a4:	4b31      	ldr	r3, [pc, #196]	@ (8012a6c <__mdiff+0x120>)
 80129a6:	f240 2145 	movw	r1, #581	@ 0x245
 80129aa:	e7e3      	b.n	8012974 <__mdiff+0x28>
 80129ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80129b0:	6926      	ldr	r6, [r4, #16]
 80129b2:	60c5      	str	r5, [r0, #12]
 80129b4:	f109 0310 	add.w	r3, r9, #16
 80129b8:	f109 0514 	add.w	r5, r9, #20
 80129bc:	f104 0e14 	add.w	lr, r4, #20
 80129c0:	f100 0b14 	add.w	fp, r0, #20
 80129c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80129c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80129cc:	9301      	str	r3, [sp, #4]
 80129ce:	46d9      	mov	r9, fp
 80129d0:	f04f 0c00 	mov.w	ip, #0
 80129d4:	9b01      	ldr	r3, [sp, #4]
 80129d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80129da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80129de:	9301      	str	r3, [sp, #4]
 80129e0:	fa1f f38a 	uxth.w	r3, sl
 80129e4:	4619      	mov	r1, r3
 80129e6:	b283      	uxth	r3, r0
 80129e8:	1acb      	subs	r3, r1, r3
 80129ea:	0c00      	lsrs	r0, r0, #16
 80129ec:	4463      	add	r3, ip
 80129ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80129f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80129f6:	b29b      	uxth	r3, r3
 80129f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80129fc:	4576      	cmp	r6, lr
 80129fe:	f849 3b04 	str.w	r3, [r9], #4
 8012a02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012a06:	d8e5      	bhi.n	80129d4 <__mdiff+0x88>
 8012a08:	1b33      	subs	r3, r6, r4
 8012a0a:	3b15      	subs	r3, #21
 8012a0c:	f023 0303 	bic.w	r3, r3, #3
 8012a10:	3415      	adds	r4, #21
 8012a12:	3304      	adds	r3, #4
 8012a14:	42a6      	cmp	r6, r4
 8012a16:	bf38      	it	cc
 8012a18:	2304      	movcc	r3, #4
 8012a1a:	441d      	add	r5, r3
 8012a1c:	445b      	add	r3, fp
 8012a1e:	461e      	mov	r6, r3
 8012a20:	462c      	mov	r4, r5
 8012a22:	4544      	cmp	r4, r8
 8012a24:	d30e      	bcc.n	8012a44 <__mdiff+0xf8>
 8012a26:	f108 0103 	add.w	r1, r8, #3
 8012a2a:	1b49      	subs	r1, r1, r5
 8012a2c:	f021 0103 	bic.w	r1, r1, #3
 8012a30:	3d03      	subs	r5, #3
 8012a32:	45a8      	cmp	r8, r5
 8012a34:	bf38      	it	cc
 8012a36:	2100      	movcc	r1, #0
 8012a38:	440b      	add	r3, r1
 8012a3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a3e:	b191      	cbz	r1, 8012a66 <__mdiff+0x11a>
 8012a40:	6117      	str	r7, [r2, #16]
 8012a42:	e79d      	b.n	8012980 <__mdiff+0x34>
 8012a44:	f854 1b04 	ldr.w	r1, [r4], #4
 8012a48:	46e6      	mov	lr, ip
 8012a4a:	0c08      	lsrs	r0, r1, #16
 8012a4c:	fa1c fc81 	uxtah	ip, ip, r1
 8012a50:	4471      	add	r1, lr
 8012a52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012a56:	b289      	uxth	r1, r1
 8012a58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012a5c:	f846 1b04 	str.w	r1, [r6], #4
 8012a60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012a64:	e7dd      	b.n	8012a22 <__mdiff+0xd6>
 8012a66:	3f01      	subs	r7, #1
 8012a68:	e7e7      	b.n	8012a3a <__mdiff+0xee>
 8012a6a:	bf00      	nop
 8012a6c:	080136b0 	.word	0x080136b0
 8012a70:	080136c1 	.word	0x080136c1

08012a74 <__d2b>:
 8012a74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012a78:	460f      	mov	r7, r1
 8012a7a:	2101      	movs	r1, #1
 8012a7c:	ec59 8b10 	vmov	r8, r9, d0
 8012a80:	4616      	mov	r6, r2
 8012a82:	f7ff fcd5 	bl	8012430 <_Balloc>
 8012a86:	4604      	mov	r4, r0
 8012a88:	b930      	cbnz	r0, 8012a98 <__d2b+0x24>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	4b23      	ldr	r3, [pc, #140]	@ (8012b1c <__d2b+0xa8>)
 8012a8e:	4824      	ldr	r0, [pc, #144]	@ (8012b20 <__d2b+0xac>)
 8012a90:	f240 310f 	movw	r1, #783	@ 0x30f
 8012a94:	f000 fac8 	bl	8013028 <__assert_func>
 8012a98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012a9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012aa0:	b10d      	cbz	r5, 8012aa6 <__d2b+0x32>
 8012aa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012aa6:	9301      	str	r3, [sp, #4]
 8012aa8:	f1b8 0300 	subs.w	r3, r8, #0
 8012aac:	d023      	beq.n	8012af6 <__d2b+0x82>
 8012aae:	4668      	mov	r0, sp
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	f7ff fd84 	bl	80125be <__lo0bits>
 8012ab6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012aba:	b1d0      	cbz	r0, 8012af2 <__d2b+0x7e>
 8012abc:	f1c0 0320 	rsb	r3, r0, #32
 8012ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8012ac4:	430b      	orrs	r3, r1
 8012ac6:	40c2      	lsrs	r2, r0
 8012ac8:	6163      	str	r3, [r4, #20]
 8012aca:	9201      	str	r2, [sp, #4]
 8012acc:	9b01      	ldr	r3, [sp, #4]
 8012ace:	61a3      	str	r3, [r4, #24]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	bf0c      	ite	eq
 8012ad4:	2201      	moveq	r2, #1
 8012ad6:	2202      	movne	r2, #2
 8012ad8:	6122      	str	r2, [r4, #16]
 8012ada:	b1a5      	cbz	r5, 8012b06 <__d2b+0x92>
 8012adc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012ae0:	4405      	add	r5, r0
 8012ae2:	603d      	str	r5, [r7, #0]
 8012ae4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012ae8:	6030      	str	r0, [r6, #0]
 8012aea:	4620      	mov	r0, r4
 8012aec:	b003      	add	sp, #12
 8012aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012af2:	6161      	str	r1, [r4, #20]
 8012af4:	e7ea      	b.n	8012acc <__d2b+0x58>
 8012af6:	a801      	add	r0, sp, #4
 8012af8:	f7ff fd61 	bl	80125be <__lo0bits>
 8012afc:	9b01      	ldr	r3, [sp, #4]
 8012afe:	6163      	str	r3, [r4, #20]
 8012b00:	3020      	adds	r0, #32
 8012b02:	2201      	movs	r2, #1
 8012b04:	e7e8      	b.n	8012ad8 <__d2b+0x64>
 8012b06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012b0e:	6038      	str	r0, [r7, #0]
 8012b10:	6918      	ldr	r0, [r3, #16]
 8012b12:	f7ff fd35 	bl	8012580 <__hi0bits>
 8012b16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012b1a:	e7e5      	b.n	8012ae8 <__d2b+0x74>
 8012b1c:	080136b0 	.word	0x080136b0
 8012b20:	080136c1 	.word	0x080136c1

08012b24 <__sfputc_r>:
 8012b24:	6893      	ldr	r3, [r2, #8]
 8012b26:	3b01      	subs	r3, #1
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	b410      	push	{r4}
 8012b2c:	6093      	str	r3, [r2, #8]
 8012b2e:	da08      	bge.n	8012b42 <__sfputc_r+0x1e>
 8012b30:	6994      	ldr	r4, [r2, #24]
 8012b32:	42a3      	cmp	r3, r4
 8012b34:	db01      	blt.n	8012b3a <__sfputc_r+0x16>
 8012b36:	290a      	cmp	r1, #10
 8012b38:	d103      	bne.n	8012b42 <__sfputc_r+0x1e>
 8012b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b3e:	f7fe bbfa 	b.w	8011336 <__swbuf_r>
 8012b42:	6813      	ldr	r3, [r2, #0]
 8012b44:	1c58      	adds	r0, r3, #1
 8012b46:	6010      	str	r0, [r2, #0]
 8012b48:	7019      	strb	r1, [r3, #0]
 8012b4a:	4608      	mov	r0, r1
 8012b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b50:	4770      	bx	lr

08012b52 <__sfputs_r>:
 8012b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b54:	4606      	mov	r6, r0
 8012b56:	460f      	mov	r7, r1
 8012b58:	4614      	mov	r4, r2
 8012b5a:	18d5      	adds	r5, r2, r3
 8012b5c:	42ac      	cmp	r4, r5
 8012b5e:	d101      	bne.n	8012b64 <__sfputs_r+0x12>
 8012b60:	2000      	movs	r0, #0
 8012b62:	e007      	b.n	8012b74 <__sfputs_r+0x22>
 8012b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b68:	463a      	mov	r2, r7
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	f7ff ffda 	bl	8012b24 <__sfputc_r>
 8012b70:	1c43      	adds	r3, r0, #1
 8012b72:	d1f3      	bne.n	8012b5c <__sfputs_r+0xa>
 8012b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b78 <_vfiprintf_r>:
 8012b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7c:	460d      	mov	r5, r1
 8012b7e:	b09d      	sub	sp, #116	@ 0x74
 8012b80:	4614      	mov	r4, r2
 8012b82:	4698      	mov	r8, r3
 8012b84:	4606      	mov	r6, r0
 8012b86:	b118      	cbz	r0, 8012b90 <_vfiprintf_r+0x18>
 8012b88:	6a03      	ldr	r3, [r0, #32]
 8012b8a:	b90b      	cbnz	r3, 8012b90 <_vfiprintf_r+0x18>
 8012b8c:	f7fe faea 	bl	8011164 <__sinit>
 8012b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b92:	07d9      	lsls	r1, r3, #31
 8012b94:	d405      	bmi.n	8012ba2 <_vfiprintf_r+0x2a>
 8012b96:	89ab      	ldrh	r3, [r5, #12]
 8012b98:	059a      	lsls	r2, r3, #22
 8012b9a:	d402      	bmi.n	8012ba2 <_vfiprintf_r+0x2a>
 8012b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b9e:	f7fe fcdc 	bl	801155a <__retarget_lock_acquire_recursive>
 8012ba2:	89ab      	ldrh	r3, [r5, #12]
 8012ba4:	071b      	lsls	r3, r3, #28
 8012ba6:	d501      	bpl.n	8012bac <_vfiprintf_r+0x34>
 8012ba8:	692b      	ldr	r3, [r5, #16]
 8012baa:	b99b      	cbnz	r3, 8012bd4 <_vfiprintf_r+0x5c>
 8012bac:	4629      	mov	r1, r5
 8012bae:	4630      	mov	r0, r6
 8012bb0:	f7fe fc00 	bl	80113b4 <__swsetup_r>
 8012bb4:	b170      	cbz	r0, 8012bd4 <_vfiprintf_r+0x5c>
 8012bb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012bb8:	07dc      	lsls	r4, r3, #31
 8012bba:	d504      	bpl.n	8012bc6 <_vfiprintf_r+0x4e>
 8012bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc0:	b01d      	add	sp, #116	@ 0x74
 8012bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bc6:	89ab      	ldrh	r3, [r5, #12]
 8012bc8:	0598      	lsls	r0, r3, #22
 8012bca:	d4f7      	bmi.n	8012bbc <_vfiprintf_r+0x44>
 8012bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012bce:	f7fe fcc5 	bl	801155c <__retarget_lock_release_recursive>
 8012bd2:	e7f3      	b.n	8012bbc <_vfiprintf_r+0x44>
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bd8:	2320      	movs	r3, #32
 8012bda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8012be2:	2330      	movs	r3, #48	@ 0x30
 8012be4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012d94 <_vfiprintf_r+0x21c>
 8012be8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012bec:	f04f 0901 	mov.w	r9, #1
 8012bf0:	4623      	mov	r3, r4
 8012bf2:	469a      	mov	sl, r3
 8012bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bf8:	b10a      	cbz	r2, 8012bfe <_vfiprintf_r+0x86>
 8012bfa:	2a25      	cmp	r2, #37	@ 0x25
 8012bfc:	d1f9      	bne.n	8012bf2 <_vfiprintf_r+0x7a>
 8012bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8012c02:	d00b      	beq.n	8012c1c <_vfiprintf_r+0xa4>
 8012c04:	465b      	mov	r3, fp
 8012c06:	4622      	mov	r2, r4
 8012c08:	4629      	mov	r1, r5
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	f7ff ffa1 	bl	8012b52 <__sfputs_r>
 8012c10:	3001      	adds	r0, #1
 8012c12:	f000 80a7 	beq.w	8012d64 <_vfiprintf_r+0x1ec>
 8012c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c18:	445a      	add	r2, fp
 8012c1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	f000 809f 	beq.w	8012d64 <_vfiprintf_r+0x1ec>
 8012c26:	2300      	movs	r3, #0
 8012c28:	f04f 32ff 	mov.w	r2, #4294967295
 8012c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c30:	f10a 0a01 	add.w	sl, sl, #1
 8012c34:	9304      	str	r3, [sp, #16]
 8012c36:	9307      	str	r3, [sp, #28]
 8012c38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c3e:	4654      	mov	r4, sl
 8012c40:	2205      	movs	r2, #5
 8012c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c46:	4853      	ldr	r0, [pc, #332]	@ (8012d94 <_vfiprintf_r+0x21c>)
 8012c48:	f7ed fac2 	bl	80001d0 <memchr>
 8012c4c:	9a04      	ldr	r2, [sp, #16]
 8012c4e:	b9d8      	cbnz	r0, 8012c88 <_vfiprintf_r+0x110>
 8012c50:	06d1      	lsls	r1, r2, #27
 8012c52:	bf44      	itt	mi
 8012c54:	2320      	movmi	r3, #32
 8012c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c5a:	0713      	lsls	r3, r2, #28
 8012c5c:	bf44      	itt	mi
 8012c5e:	232b      	movmi	r3, #43	@ 0x2b
 8012c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c64:	f89a 3000 	ldrb.w	r3, [sl]
 8012c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c6a:	d015      	beq.n	8012c98 <_vfiprintf_r+0x120>
 8012c6c:	9a07      	ldr	r2, [sp, #28]
 8012c6e:	4654      	mov	r4, sl
 8012c70:	2000      	movs	r0, #0
 8012c72:	f04f 0c0a 	mov.w	ip, #10
 8012c76:	4621      	mov	r1, r4
 8012c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c7c:	3b30      	subs	r3, #48	@ 0x30
 8012c7e:	2b09      	cmp	r3, #9
 8012c80:	d94b      	bls.n	8012d1a <_vfiprintf_r+0x1a2>
 8012c82:	b1b0      	cbz	r0, 8012cb2 <_vfiprintf_r+0x13a>
 8012c84:	9207      	str	r2, [sp, #28]
 8012c86:	e014      	b.n	8012cb2 <_vfiprintf_r+0x13a>
 8012c88:	eba0 0308 	sub.w	r3, r0, r8
 8012c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8012c90:	4313      	orrs	r3, r2
 8012c92:	9304      	str	r3, [sp, #16]
 8012c94:	46a2      	mov	sl, r4
 8012c96:	e7d2      	b.n	8012c3e <_vfiprintf_r+0xc6>
 8012c98:	9b03      	ldr	r3, [sp, #12]
 8012c9a:	1d19      	adds	r1, r3, #4
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	9103      	str	r1, [sp, #12]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	bfbb      	ittet	lt
 8012ca4:	425b      	neglt	r3, r3
 8012ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8012caa:	9307      	strge	r3, [sp, #28]
 8012cac:	9307      	strlt	r3, [sp, #28]
 8012cae:	bfb8      	it	lt
 8012cb0:	9204      	strlt	r2, [sp, #16]
 8012cb2:	7823      	ldrb	r3, [r4, #0]
 8012cb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8012cb6:	d10a      	bne.n	8012cce <_vfiprintf_r+0x156>
 8012cb8:	7863      	ldrb	r3, [r4, #1]
 8012cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cbc:	d132      	bne.n	8012d24 <_vfiprintf_r+0x1ac>
 8012cbe:	9b03      	ldr	r3, [sp, #12]
 8012cc0:	1d1a      	adds	r2, r3, #4
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	9203      	str	r2, [sp, #12]
 8012cc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012cca:	3402      	adds	r4, #2
 8012ccc:	9305      	str	r3, [sp, #20]
 8012cce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012da4 <_vfiprintf_r+0x22c>
 8012cd2:	7821      	ldrb	r1, [r4, #0]
 8012cd4:	2203      	movs	r2, #3
 8012cd6:	4650      	mov	r0, sl
 8012cd8:	f7ed fa7a 	bl	80001d0 <memchr>
 8012cdc:	b138      	cbz	r0, 8012cee <_vfiprintf_r+0x176>
 8012cde:	9b04      	ldr	r3, [sp, #16]
 8012ce0:	eba0 000a 	sub.w	r0, r0, sl
 8012ce4:	2240      	movs	r2, #64	@ 0x40
 8012ce6:	4082      	lsls	r2, r0
 8012ce8:	4313      	orrs	r3, r2
 8012cea:	3401      	adds	r4, #1
 8012cec:	9304      	str	r3, [sp, #16]
 8012cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cf2:	4829      	ldr	r0, [pc, #164]	@ (8012d98 <_vfiprintf_r+0x220>)
 8012cf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012cf8:	2206      	movs	r2, #6
 8012cfa:	f7ed fa69 	bl	80001d0 <memchr>
 8012cfe:	2800      	cmp	r0, #0
 8012d00:	d03f      	beq.n	8012d82 <_vfiprintf_r+0x20a>
 8012d02:	4b26      	ldr	r3, [pc, #152]	@ (8012d9c <_vfiprintf_r+0x224>)
 8012d04:	bb1b      	cbnz	r3, 8012d4e <_vfiprintf_r+0x1d6>
 8012d06:	9b03      	ldr	r3, [sp, #12]
 8012d08:	3307      	adds	r3, #7
 8012d0a:	f023 0307 	bic.w	r3, r3, #7
 8012d0e:	3308      	adds	r3, #8
 8012d10:	9303      	str	r3, [sp, #12]
 8012d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d14:	443b      	add	r3, r7
 8012d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d18:	e76a      	b.n	8012bf0 <_vfiprintf_r+0x78>
 8012d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d1e:	460c      	mov	r4, r1
 8012d20:	2001      	movs	r0, #1
 8012d22:	e7a8      	b.n	8012c76 <_vfiprintf_r+0xfe>
 8012d24:	2300      	movs	r3, #0
 8012d26:	3401      	adds	r4, #1
 8012d28:	9305      	str	r3, [sp, #20]
 8012d2a:	4619      	mov	r1, r3
 8012d2c:	f04f 0c0a 	mov.w	ip, #10
 8012d30:	4620      	mov	r0, r4
 8012d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d36:	3a30      	subs	r2, #48	@ 0x30
 8012d38:	2a09      	cmp	r2, #9
 8012d3a:	d903      	bls.n	8012d44 <_vfiprintf_r+0x1cc>
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d0c6      	beq.n	8012cce <_vfiprintf_r+0x156>
 8012d40:	9105      	str	r1, [sp, #20]
 8012d42:	e7c4      	b.n	8012cce <_vfiprintf_r+0x156>
 8012d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d48:	4604      	mov	r4, r0
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	e7f0      	b.n	8012d30 <_vfiprintf_r+0x1b8>
 8012d4e:	ab03      	add	r3, sp, #12
 8012d50:	9300      	str	r3, [sp, #0]
 8012d52:	462a      	mov	r2, r5
 8012d54:	4b12      	ldr	r3, [pc, #72]	@ (8012da0 <_vfiprintf_r+0x228>)
 8012d56:	a904      	add	r1, sp, #16
 8012d58:	4630      	mov	r0, r6
 8012d5a:	f7fd fdc1 	bl	80108e0 <_printf_float>
 8012d5e:	4607      	mov	r7, r0
 8012d60:	1c78      	adds	r0, r7, #1
 8012d62:	d1d6      	bne.n	8012d12 <_vfiprintf_r+0x19a>
 8012d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d66:	07d9      	lsls	r1, r3, #31
 8012d68:	d405      	bmi.n	8012d76 <_vfiprintf_r+0x1fe>
 8012d6a:	89ab      	ldrh	r3, [r5, #12]
 8012d6c:	059a      	lsls	r2, r3, #22
 8012d6e:	d402      	bmi.n	8012d76 <_vfiprintf_r+0x1fe>
 8012d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d72:	f7fe fbf3 	bl	801155c <__retarget_lock_release_recursive>
 8012d76:	89ab      	ldrh	r3, [r5, #12]
 8012d78:	065b      	lsls	r3, r3, #25
 8012d7a:	f53f af1f 	bmi.w	8012bbc <_vfiprintf_r+0x44>
 8012d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d80:	e71e      	b.n	8012bc0 <_vfiprintf_r+0x48>
 8012d82:	ab03      	add	r3, sp, #12
 8012d84:	9300      	str	r3, [sp, #0]
 8012d86:	462a      	mov	r2, r5
 8012d88:	4b05      	ldr	r3, [pc, #20]	@ (8012da0 <_vfiprintf_r+0x228>)
 8012d8a:	a904      	add	r1, sp, #16
 8012d8c:	4630      	mov	r0, r6
 8012d8e:	f7fe f83f 	bl	8010e10 <_printf_i>
 8012d92:	e7e4      	b.n	8012d5e <_vfiprintf_r+0x1e6>
 8012d94:	0801371a 	.word	0x0801371a
 8012d98:	08013724 	.word	0x08013724
 8012d9c:	080108e1 	.word	0x080108e1
 8012da0:	08012b53 	.word	0x08012b53
 8012da4:	08013720 	.word	0x08013720

08012da8 <__sflush_r>:
 8012da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012db0:	0716      	lsls	r6, r2, #28
 8012db2:	4605      	mov	r5, r0
 8012db4:	460c      	mov	r4, r1
 8012db6:	d454      	bmi.n	8012e62 <__sflush_r+0xba>
 8012db8:	684b      	ldr	r3, [r1, #4]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	dc02      	bgt.n	8012dc4 <__sflush_r+0x1c>
 8012dbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	dd48      	ble.n	8012e56 <__sflush_r+0xae>
 8012dc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012dc6:	2e00      	cmp	r6, #0
 8012dc8:	d045      	beq.n	8012e56 <__sflush_r+0xae>
 8012dca:	2300      	movs	r3, #0
 8012dcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012dd0:	682f      	ldr	r7, [r5, #0]
 8012dd2:	6a21      	ldr	r1, [r4, #32]
 8012dd4:	602b      	str	r3, [r5, #0]
 8012dd6:	d030      	beq.n	8012e3a <__sflush_r+0x92>
 8012dd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012dda:	89a3      	ldrh	r3, [r4, #12]
 8012ddc:	0759      	lsls	r1, r3, #29
 8012dde:	d505      	bpl.n	8012dec <__sflush_r+0x44>
 8012de0:	6863      	ldr	r3, [r4, #4]
 8012de2:	1ad2      	subs	r2, r2, r3
 8012de4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012de6:	b10b      	cbz	r3, 8012dec <__sflush_r+0x44>
 8012de8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012dea:	1ad2      	subs	r2, r2, r3
 8012dec:	2300      	movs	r3, #0
 8012dee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012df0:	6a21      	ldr	r1, [r4, #32]
 8012df2:	4628      	mov	r0, r5
 8012df4:	47b0      	blx	r6
 8012df6:	1c43      	adds	r3, r0, #1
 8012df8:	89a3      	ldrh	r3, [r4, #12]
 8012dfa:	d106      	bne.n	8012e0a <__sflush_r+0x62>
 8012dfc:	6829      	ldr	r1, [r5, #0]
 8012dfe:	291d      	cmp	r1, #29
 8012e00:	d82b      	bhi.n	8012e5a <__sflush_r+0xb2>
 8012e02:	4a2a      	ldr	r2, [pc, #168]	@ (8012eac <__sflush_r+0x104>)
 8012e04:	40ca      	lsrs	r2, r1
 8012e06:	07d6      	lsls	r6, r2, #31
 8012e08:	d527      	bpl.n	8012e5a <__sflush_r+0xb2>
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	6062      	str	r2, [r4, #4]
 8012e0e:	04d9      	lsls	r1, r3, #19
 8012e10:	6922      	ldr	r2, [r4, #16]
 8012e12:	6022      	str	r2, [r4, #0]
 8012e14:	d504      	bpl.n	8012e20 <__sflush_r+0x78>
 8012e16:	1c42      	adds	r2, r0, #1
 8012e18:	d101      	bne.n	8012e1e <__sflush_r+0x76>
 8012e1a:	682b      	ldr	r3, [r5, #0]
 8012e1c:	b903      	cbnz	r3, 8012e20 <__sflush_r+0x78>
 8012e1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e22:	602f      	str	r7, [r5, #0]
 8012e24:	b1b9      	cbz	r1, 8012e56 <__sflush_r+0xae>
 8012e26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e2a:	4299      	cmp	r1, r3
 8012e2c:	d002      	beq.n	8012e34 <__sflush_r+0x8c>
 8012e2e:	4628      	mov	r0, r5
 8012e30:	f7ff f9fe 	bl	8012230 <_free_r>
 8012e34:	2300      	movs	r3, #0
 8012e36:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e38:	e00d      	b.n	8012e56 <__sflush_r+0xae>
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	47b0      	blx	r6
 8012e40:	4602      	mov	r2, r0
 8012e42:	1c50      	adds	r0, r2, #1
 8012e44:	d1c9      	bne.n	8012dda <__sflush_r+0x32>
 8012e46:	682b      	ldr	r3, [r5, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d0c6      	beq.n	8012dda <__sflush_r+0x32>
 8012e4c:	2b1d      	cmp	r3, #29
 8012e4e:	d001      	beq.n	8012e54 <__sflush_r+0xac>
 8012e50:	2b16      	cmp	r3, #22
 8012e52:	d11e      	bne.n	8012e92 <__sflush_r+0xea>
 8012e54:	602f      	str	r7, [r5, #0]
 8012e56:	2000      	movs	r0, #0
 8012e58:	e022      	b.n	8012ea0 <__sflush_r+0xf8>
 8012e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e5e:	b21b      	sxth	r3, r3
 8012e60:	e01b      	b.n	8012e9a <__sflush_r+0xf2>
 8012e62:	690f      	ldr	r7, [r1, #16]
 8012e64:	2f00      	cmp	r7, #0
 8012e66:	d0f6      	beq.n	8012e56 <__sflush_r+0xae>
 8012e68:	0793      	lsls	r3, r2, #30
 8012e6a:	680e      	ldr	r6, [r1, #0]
 8012e6c:	bf08      	it	eq
 8012e6e:	694b      	ldreq	r3, [r1, #20]
 8012e70:	600f      	str	r7, [r1, #0]
 8012e72:	bf18      	it	ne
 8012e74:	2300      	movne	r3, #0
 8012e76:	eba6 0807 	sub.w	r8, r6, r7
 8012e7a:	608b      	str	r3, [r1, #8]
 8012e7c:	f1b8 0f00 	cmp.w	r8, #0
 8012e80:	dde9      	ble.n	8012e56 <__sflush_r+0xae>
 8012e82:	6a21      	ldr	r1, [r4, #32]
 8012e84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012e86:	4643      	mov	r3, r8
 8012e88:	463a      	mov	r2, r7
 8012e8a:	4628      	mov	r0, r5
 8012e8c:	47b0      	blx	r6
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	dc08      	bgt.n	8012ea4 <__sflush_r+0xfc>
 8012e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e9a:	81a3      	strh	r3, [r4, #12]
 8012e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea4:	4407      	add	r7, r0
 8012ea6:	eba8 0800 	sub.w	r8, r8, r0
 8012eaa:	e7e7      	b.n	8012e7c <__sflush_r+0xd4>
 8012eac:	20400001 	.word	0x20400001

08012eb0 <_fflush_r>:
 8012eb0:	b538      	push	{r3, r4, r5, lr}
 8012eb2:	690b      	ldr	r3, [r1, #16]
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	460c      	mov	r4, r1
 8012eb8:	b913      	cbnz	r3, 8012ec0 <_fflush_r+0x10>
 8012eba:	2500      	movs	r5, #0
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	bd38      	pop	{r3, r4, r5, pc}
 8012ec0:	b118      	cbz	r0, 8012eca <_fflush_r+0x1a>
 8012ec2:	6a03      	ldr	r3, [r0, #32]
 8012ec4:	b90b      	cbnz	r3, 8012eca <_fflush_r+0x1a>
 8012ec6:	f7fe f94d 	bl	8011164 <__sinit>
 8012eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d0f3      	beq.n	8012eba <_fflush_r+0xa>
 8012ed2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012ed4:	07d0      	lsls	r0, r2, #31
 8012ed6:	d404      	bmi.n	8012ee2 <_fflush_r+0x32>
 8012ed8:	0599      	lsls	r1, r3, #22
 8012eda:	d402      	bmi.n	8012ee2 <_fflush_r+0x32>
 8012edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ede:	f7fe fb3c 	bl	801155a <__retarget_lock_acquire_recursive>
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	4621      	mov	r1, r4
 8012ee6:	f7ff ff5f 	bl	8012da8 <__sflush_r>
 8012eea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012eec:	07da      	lsls	r2, r3, #31
 8012eee:	4605      	mov	r5, r0
 8012ef0:	d4e4      	bmi.n	8012ebc <_fflush_r+0xc>
 8012ef2:	89a3      	ldrh	r3, [r4, #12]
 8012ef4:	059b      	lsls	r3, r3, #22
 8012ef6:	d4e1      	bmi.n	8012ebc <_fflush_r+0xc>
 8012ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012efa:	f7fe fb2f 	bl	801155c <__retarget_lock_release_recursive>
 8012efe:	e7dd      	b.n	8012ebc <_fflush_r+0xc>

08012f00 <__swhatbuf_r>:
 8012f00:	b570      	push	{r4, r5, r6, lr}
 8012f02:	460c      	mov	r4, r1
 8012f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f08:	2900      	cmp	r1, #0
 8012f0a:	b096      	sub	sp, #88	@ 0x58
 8012f0c:	4615      	mov	r5, r2
 8012f0e:	461e      	mov	r6, r3
 8012f10:	da0d      	bge.n	8012f2e <__swhatbuf_r+0x2e>
 8012f12:	89a3      	ldrh	r3, [r4, #12]
 8012f14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012f18:	f04f 0100 	mov.w	r1, #0
 8012f1c:	bf14      	ite	ne
 8012f1e:	2340      	movne	r3, #64	@ 0x40
 8012f20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012f24:	2000      	movs	r0, #0
 8012f26:	6031      	str	r1, [r6, #0]
 8012f28:	602b      	str	r3, [r5, #0]
 8012f2a:	b016      	add	sp, #88	@ 0x58
 8012f2c:	bd70      	pop	{r4, r5, r6, pc}
 8012f2e:	466a      	mov	r2, sp
 8012f30:	f000 f848 	bl	8012fc4 <_fstat_r>
 8012f34:	2800      	cmp	r0, #0
 8012f36:	dbec      	blt.n	8012f12 <__swhatbuf_r+0x12>
 8012f38:	9901      	ldr	r1, [sp, #4]
 8012f3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012f3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012f42:	4259      	negs	r1, r3
 8012f44:	4159      	adcs	r1, r3
 8012f46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012f4a:	e7eb      	b.n	8012f24 <__swhatbuf_r+0x24>

08012f4c <__smakebuf_r>:
 8012f4c:	898b      	ldrh	r3, [r1, #12]
 8012f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f50:	079d      	lsls	r5, r3, #30
 8012f52:	4606      	mov	r6, r0
 8012f54:	460c      	mov	r4, r1
 8012f56:	d507      	bpl.n	8012f68 <__smakebuf_r+0x1c>
 8012f58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012f5c:	6023      	str	r3, [r4, #0]
 8012f5e:	6123      	str	r3, [r4, #16]
 8012f60:	2301      	movs	r3, #1
 8012f62:	6163      	str	r3, [r4, #20]
 8012f64:	b003      	add	sp, #12
 8012f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f68:	ab01      	add	r3, sp, #4
 8012f6a:	466a      	mov	r2, sp
 8012f6c:	f7ff ffc8 	bl	8012f00 <__swhatbuf_r>
 8012f70:	9f00      	ldr	r7, [sp, #0]
 8012f72:	4605      	mov	r5, r0
 8012f74:	4639      	mov	r1, r7
 8012f76:	4630      	mov	r0, r6
 8012f78:	f7ff f9ce 	bl	8012318 <_malloc_r>
 8012f7c:	b948      	cbnz	r0, 8012f92 <__smakebuf_r+0x46>
 8012f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f82:	059a      	lsls	r2, r3, #22
 8012f84:	d4ee      	bmi.n	8012f64 <__smakebuf_r+0x18>
 8012f86:	f023 0303 	bic.w	r3, r3, #3
 8012f8a:	f043 0302 	orr.w	r3, r3, #2
 8012f8e:	81a3      	strh	r3, [r4, #12]
 8012f90:	e7e2      	b.n	8012f58 <__smakebuf_r+0xc>
 8012f92:	89a3      	ldrh	r3, [r4, #12]
 8012f94:	6020      	str	r0, [r4, #0]
 8012f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f9a:	81a3      	strh	r3, [r4, #12]
 8012f9c:	9b01      	ldr	r3, [sp, #4]
 8012f9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012fa2:	b15b      	cbz	r3, 8012fbc <__smakebuf_r+0x70>
 8012fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fa8:	4630      	mov	r0, r6
 8012faa:	f000 f81d 	bl	8012fe8 <_isatty_r>
 8012fae:	b128      	cbz	r0, 8012fbc <__smakebuf_r+0x70>
 8012fb0:	89a3      	ldrh	r3, [r4, #12]
 8012fb2:	f023 0303 	bic.w	r3, r3, #3
 8012fb6:	f043 0301 	orr.w	r3, r3, #1
 8012fba:	81a3      	strh	r3, [r4, #12]
 8012fbc:	89a3      	ldrh	r3, [r4, #12]
 8012fbe:	431d      	orrs	r5, r3
 8012fc0:	81a5      	strh	r5, [r4, #12]
 8012fc2:	e7cf      	b.n	8012f64 <__smakebuf_r+0x18>

08012fc4 <_fstat_r>:
 8012fc4:	b538      	push	{r3, r4, r5, lr}
 8012fc6:	4d07      	ldr	r5, [pc, #28]	@ (8012fe4 <_fstat_r+0x20>)
 8012fc8:	2300      	movs	r3, #0
 8012fca:	4604      	mov	r4, r0
 8012fcc:	4608      	mov	r0, r1
 8012fce:	4611      	mov	r1, r2
 8012fd0:	602b      	str	r3, [r5, #0]
 8012fd2:	f7ef f91f 	bl	8002214 <_fstat>
 8012fd6:	1c43      	adds	r3, r0, #1
 8012fd8:	d102      	bne.n	8012fe0 <_fstat_r+0x1c>
 8012fda:	682b      	ldr	r3, [r5, #0]
 8012fdc:	b103      	cbz	r3, 8012fe0 <_fstat_r+0x1c>
 8012fde:	6023      	str	r3, [r4, #0]
 8012fe0:	bd38      	pop	{r3, r4, r5, pc}
 8012fe2:	bf00      	nop
 8012fe4:	2000f884 	.word	0x2000f884

08012fe8 <_isatty_r>:
 8012fe8:	b538      	push	{r3, r4, r5, lr}
 8012fea:	4d06      	ldr	r5, [pc, #24]	@ (8013004 <_isatty_r+0x1c>)
 8012fec:	2300      	movs	r3, #0
 8012fee:	4604      	mov	r4, r0
 8012ff0:	4608      	mov	r0, r1
 8012ff2:	602b      	str	r3, [r5, #0]
 8012ff4:	f7ef f91e 	bl	8002234 <_isatty>
 8012ff8:	1c43      	adds	r3, r0, #1
 8012ffa:	d102      	bne.n	8013002 <_isatty_r+0x1a>
 8012ffc:	682b      	ldr	r3, [r5, #0]
 8012ffe:	b103      	cbz	r3, 8013002 <_isatty_r+0x1a>
 8013000:	6023      	str	r3, [r4, #0]
 8013002:	bd38      	pop	{r3, r4, r5, pc}
 8013004:	2000f884 	.word	0x2000f884

08013008 <_sbrk_r>:
 8013008:	b538      	push	{r3, r4, r5, lr}
 801300a:	4d06      	ldr	r5, [pc, #24]	@ (8013024 <_sbrk_r+0x1c>)
 801300c:	2300      	movs	r3, #0
 801300e:	4604      	mov	r4, r0
 8013010:	4608      	mov	r0, r1
 8013012:	602b      	str	r3, [r5, #0]
 8013014:	f7ef f926 	bl	8002264 <_sbrk>
 8013018:	1c43      	adds	r3, r0, #1
 801301a:	d102      	bne.n	8013022 <_sbrk_r+0x1a>
 801301c:	682b      	ldr	r3, [r5, #0]
 801301e:	b103      	cbz	r3, 8013022 <_sbrk_r+0x1a>
 8013020:	6023      	str	r3, [r4, #0]
 8013022:	bd38      	pop	{r3, r4, r5, pc}
 8013024:	2000f884 	.word	0x2000f884

08013028 <__assert_func>:
 8013028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801302a:	4614      	mov	r4, r2
 801302c:	461a      	mov	r2, r3
 801302e:	4b09      	ldr	r3, [pc, #36]	@ (8013054 <__assert_func+0x2c>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	4605      	mov	r5, r0
 8013034:	68d8      	ldr	r0, [r3, #12]
 8013036:	b14c      	cbz	r4, 801304c <__assert_func+0x24>
 8013038:	4b07      	ldr	r3, [pc, #28]	@ (8013058 <__assert_func+0x30>)
 801303a:	9100      	str	r1, [sp, #0]
 801303c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013040:	4906      	ldr	r1, [pc, #24]	@ (801305c <__assert_func+0x34>)
 8013042:	462b      	mov	r3, r5
 8013044:	f000 f842 	bl	80130cc <fiprintf>
 8013048:	f000 f852 	bl	80130f0 <abort>
 801304c:	4b04      	ldr	r3, [pc, #16]	@ (8013060 <__assert_func+0x38>)
 801304e:	461c      	mov	r4, r3
 8013050:	e7f3      	b.n	801303a <__assert_func+0x12>
 8013052:	bf00      	nop
 8013054:	2000010c 	.word	0x2000010c
 8013058:	08013735 	.word	0x08013735
 801305c:	08013742 	.word	0x08013742
 8013060:	08013770 	.word	0x08013770

08013064 <_calloc_r>:
 8013064:	b570      	push	{r4, r5, r6, lr}
 8013066:	fba1 5402 	umull	r5, r4, r1, r2
 801306a:	b934      	cbnz	r4, 801307a <_calloc_r+0x16>
 801306c:	4629      	mov	r1, r5
 801306e:	f7ff f953 	bl	8012318 <_malloc_r>
 8013072:	4606      	mov	r6, r0
 8013074:	b928      	cbnz	r0, 8013082 <_calloc_r+0x1e>
 8013076:	4630      	mov	r0, r6
 8013078:	bd70      	pop	{r4, r5, r6, pc}
 801307a:	220c      	movs	r2, #12
 801307c:	6002      	str	r2, [r0, #0]
 801307e:	2600      	movs	r6, #0
 8013080:	e7f9      	b.n	8013076 <_calloc_r+0x12>
 8013082:	462a      	mov	r2, r5
 8013084:	4621      	mov	r1, r4
 8013086:	f7fe f9eb 	bl	8011460 <memset>
 801308a:	e7f4      	b.n	8013076 <_calloc_r+0x12>

0801308c <__ascii_mbtowc>:
 801308c:	b082      	sub	sp, #8
 801308e:	b901      	cbnz	r1, 8013092 <__ascii_mbtowc+0x6>
 8013090:	a901      	add	r1, sp, #4
 8013092:	b142      	cbz	r2, 80130a6 <__ascii_mbtowc+0x1a>
 8013094:	b14b      	cbz	r3, 80130aa <__ascii_mbtowc+0x1e>
 8013096:	7813      	ldrb	r3, [r2, #0]
 8013098:	600b      	str	r3, [r1, #0]
 801309a:	7812      	ldrb	r2, [r2, #0]
 801309c:	1e10      	subs	r0, r2, #0
 801309e:	bf18      	it	ne
 80130a0:	2001      	movne	r0, #1
 80130a2:	b002      	add	sp, #8
 80130a4:	4770      	bx	lr
 80130a6:	4610      	mov	r0, r2
 80130a8:	e7fb      	b.n	80130a2 <__ascii_mbtowc+0x16>
 80130aa:	f06f 0001 	mvn.w	r0, #1
 80130ae:	e7f8      	b.n	80130a2 <__ascii_mbtowc+0x16>

080130b0 <__ascii_wctomb>:
 80130b0:	4603      	mov	r3, r0
 80130b2:	4608      	mov	r0, r1
 80130b4:	b141      	cbz	r1, 80130c8 <__ascii_wctomb+0x18>
 80130b6:	2aff      	cmp	r2, #255	@ 0xff
 80130b8:	d904      	bls.n	80130c4 <__ascii_wctomb+0x14>
 80130ba:	228a      	movs	r2, #138	@ 0x8a
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	f04f 30ff 	mov.w	r0, #4294967295
 80130c2:	4770      	bx	lr
 80130c4:	700a      	strb	r2, [r1, #0]
 80130c6:	2001      	movs	r0, #1
 80130c8:	4770      	bx	lr
	...

080130cc <fiprintf>:
 80130cc:	b40e      	push	{r1, r2, r3}
 80130ce:	b503      	push	{r0, r1, lr}
 80130d0:	4601      	mov	r1, r0
 80130d2:	ab03      	add	r3, sp, #12
 80130d4:	4805      	ldr	r0, [pc, #20]	@ (80130ec <fiprintf+0x20>)
 80130d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80130da:	6800      	ldr	r0, [r0, #0]
 80130dc:	9301      	str	r3, [sp, #4]
 80130de:	f7ff fd4b 	bl	8012b78 <_vfiprintf_r>
 80130e2:	b002      	add	sp, #8
 80130e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80130e8:	b003      	add	sp, #12
 80130ea:	4770      	bx	lr
 80130ec:	2000010c 	.word	0x2000010c

080130f0 <abort>:
 80130f0:	b508      	push	{r3, lr}
 80130f2:	2006      	movs	r0, #6
 80130f4:	f000 f82c 	bl	8013150 <raise>
 80130f8:	2001      	movs	r0, #1
 80130fa:	f7ef f83b 	bl	8002174 <_exit>

080130fe <_raise_r>:
 80130fe:	291f      	cmp	r1, #31
 8013100:	b538      	push	{r3, r4, r5, lr}
 8013102:	4605      	mov	r5, r0
 8013104:	460c      	mov	r4, r1
 8013106:	d904      	bls.n	8013112 <_raise_r+0x14>
 8013108:	2316      	movs	r3, #22
 801310a:	6003      	str	r3, [r0, #0]
 801310c:	f04f 30ff 	mov.w	r0, #4294967295
 8013110:	bd38      	pop	{r3, r4, r5, pc}
 8013112:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013114:	b112      	cbz	r2, 801311c <_raise_r+0x1e>
 8013116:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801311a:	b94b      	cbnz	r3, 8013130 <_raise_r+0x32>
 801311c:	4628      	mov	r0, r5
 801311e:	f000 f831 	bl	8013184 <_getpid_r>
 8013122:	4622      	mov	r2, r4
 8013124:	4601      	mov	r1, r0
 8013126:	4628      	mov	r0, r5
 8013128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801312c:	f000 b818 	b.w	8013160 <_kill_r>
 8013130:	2b01      	cmp	r3, #1
 8013132:	d00a      	beq.n	801314a <_raise_r+0x4c>
 8013134:	1c59      	adds	r1, r3, #1
 8013136:	d103      	bne.n	8013140 <_raise_r+0x42>
 8013138:	2316      	movs	r3, #22
 801313a:	6003      	str	r3, [r0, #0]
 801313c:	2001      	movs	r0, #1
 801313e:	e7e7      	b.n	8013110 <_raise_r+0x12>
 8013140:	2100      	movs	r1, #0
 8013142:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013146:	4620      	mov	r0, r4
 8013148:	4798      	blx	r3
 801314a:	2000      	movs	r0, #0
 801314c:	e7e0      	b.n	8013110 <_raise_r+0x12>
	...

08013150 <raise>:
 8013150:	4b02      	ldr	r3, [pc, #8]	@ (801315c <raise+0xc>)
 8013152:	4601      	mov	r1, r0
 8013154:	6818      	ldr	r0, [r3, #0]
 8013156:	f7ff bfd2 	b.w	80130fe <_raise_r>
 801315a:	bf00      	nop
 801315c:	2000010c 	.word	0x2000010c

08013160 <_kill_r>:
 8013160:	b538      	push	{r3, r4, r5, lr}
 8013162:	4d07      	ldr	r5, [pc, #28]	@ (8013180 <_kill_r+0x20>)
 8013164:	2300      	movs	r3, #0
 8013166:	4604      	mov	r4, r0
 8013168:	4608      	mov	r0, r1
 801316a:	4611      	mov	r1, r2
 801316c:	602b      	str	r3, [r5, #0]
 801316e:	f7ee fff1 	bl	8002154 <_kill>
 8013172:	1c43      	adds	r3, r0, #1
 8013174:	d102      	bne.n	801317c <_kill_r+0x1c>
 8013176:	682b      	ldr	r3, [r5, #0]
 8013178:	b103      	cbz	r3, 801317c <_kill_r+0x1c>
 801317a:	6023      	str	r3, [r4, #0]
 801317c:	bd38      	pop	{r3, r4, r5, pc}
 801317e:	bf00      	nop
 8013180:	2000f884 	.word	0x2000f884

08013184 <_getpid_r>:
 8013184:	f7ee bfde 	b.w	8002144 <_getpid>

08013188 <_init>:
 8013188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801318a:	bf00      	nop
 801318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801318e:	bc08      	pop	{r3}
 8013190:	469e      	mov	lr, r3
 8013192:	4770      	bx	lr

08013194 <_fini>:
 8013194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013196:	bf00      	nop
 8013198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801319a:	bc08      	pop	{r3}
 801319c:	469e      	mov	lr, r3
 801319e:	4770      	bx	lr
