
Camera_trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800dd90  0800dd90  0000ed90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e178  0800e178  0001015c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e178  0800e178  0000f178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e180  0800e180  0001015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e180  0800e180  0000f180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e184  0800e184  0000f184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800e188  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001015c  2**0
                  CONTENTS
 10 .bss          00005fe4  2000015c  2000015c  0001015c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006140  20006140  0001015c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f37a  00000000  00000000  0001018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005596  00000000  00000000  0002f506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  00034aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013be  00000000  00000000  00036488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028744  00000000  00000000  00037846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002793a  00000000  00000000  0005ff8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d765e  00000000  00000000  000878c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015ef22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071b0  00000000  00000000  0015ef68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00166118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd78 	.word	0x0800dd78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800dd78 	.word	0x0800dd78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005bc:	2b80      	cmp	r3, #128	@ 0x80
 80005be:	bf0c      	ite	eq
 80005c0:	2301      	moveq	r3, #1
 80005c2:	2300      	movne	r3, #0
 80005c4:	b2db      	uxtb	r3, r3
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	bf0c      	ite	eq
 80005e6:	2301      	moveq	r3, #1
 80005e8:	2300      	movne	r3, #0
 80005ea:	b2db      	uxtb	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	2b01      	cmp	r3, #1
 800060a:	bf0c      	ite	eq
 800060c:	2301      	moveq	r3, #1
 800060e:	2300      	movne	r3, #0
 8000610:	b2db      	uxtb	r3, r3
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	2b02      	cmp	r3, #2
 8000630:	bf0c      	ite	eq
 8000632:	2301      	moveq	r3, #1
 8000634:	2300      	movne	r3, #0
 8000636:	b2db      	uxtb	r3, r3
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	601a      	str	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	611a      	str	r2, [r3, #16]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <SCCB_write_reg>:
   {0x4b, 0x01},
};


bool SCCB_write_reg(uint8_t reg_addr, uint8_t value)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	460a      	mov	r2, r1
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
    uint32_t timeout;

    printf("loaded data %d %d\r\n", reg_addr, value);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	4619      	mov	r1, r3
 80006c2:	483c      	ldr	r0, [pc, #240]	@ (80007b4 <SCCB_write_reg+0x108>)
 80006c4:	f00c fc80 	bl	800cfc8 <iprintf>

    LL_I2C_GenerateStartCondition(I2C1);
 80006c8:	483b      	ldr	r0, [pc, #236]	@ (80007b8 <SCCB_write_reg+0x10c>)
 80006ca:	f7ff ffbb 	bl	8000644 <LL_I2C_GenerateStartCondition>

    timeout = 0xFFFF;
 80006ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006d2:	60fb      	str	r3, [r7, #12]
    while (!LL_I2C_IsActiveFlag_SB(I2C1)) {
 80006d4:	e007      	b.n	80006e6 <SCCB_write_reg+0x3a>
        if (--timeout == 0) return true;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3b01      	subs	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <SCCB_write_reg+0x3a>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e061      	b.n	80007aa <SCCB_write_reg+0xfe>
    while (!LL_I2C_IsActiveFlag_SB(I2C1)) {
 80006e6:	4834      	ldr	r0, [pc, #208]	@ (80007b8 <SCCB_write_reg+0x10c>)
 80006e8:	f7ff ff86 	bl	80005f8 <LL_I2C_IsActiveFlag_SB>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f1      	beq.n	80006d6 <SCCB_write_reg+0x2a>
    }

    LL_I2C_TransmitData8(I2C1, OV7670_I2C_ADDR << 1);  // write mode
 80006f2:	2142      	movs	r1, #66	@ 0x42
 80006f4:	4830      	ldr	r0, [pc, #192]	@ (80007b8 <SCCB_write_reg+0x10c>)
 80006f6:	f7ff ffc5 	bl	8000684 <LL_I2C_TransmitData8>

    timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	60fb      	str	r3, [r7, #12]
    while (!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 8000700:	e007      	b.n	8000712 <SCCB_write_reg+0x66>
        if (--timeout == 0) return true;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3b01      	subs	r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <SCCB_write_reg+0x66>
 800070e:	2301      	movs	r3, #1
 8000710:	e04b      	b.n	80007aa <SCCB_write_reg+0xfe>
    while (!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 8000712:	4829      	ldr	r0, [pc, #164]	@ (80007b8 <SCCB_write_reg+0x10c>)
 8000714:	f7ff ff83 	bl	800061e <LL_I2C_IsActiveFlag_ADDR>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0f1      	beq.n	8000702 <SCCB_write_reg+0x56>
    }
    (void)I2C1->SR2;  // clear ADDR flag
 800071e:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <SCCB_write_reg+0x10c>)
 8000720:	699b      	ldr	r3, [r3, #24]

    LL_I2C_TransmitData8(I2C1, reg_addr);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4619      	mov	r1, r3
 8000726:	4824      	ldr	r0, [pc, #144]	@ (80007b8 <SCCB_write_reg+0x10c>)
 8000728:	f7ff ffac 	bl	8000684 <LL_I2C_TransmitData8>
    timeout = 0xFFFF;
 800072c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000730:	60fb      	str	r3, [r7, #12]
    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 8000732:	e007      	b.n	8000744 <SCCB_write_reg+0x98>
        if (--timeout == 0) return true;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3b01      	subs	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d101      	bne.n	8000744 <SCCB_write_reg+0x98>
 8000740:	2301      	movs	r3, #1
 8000742:	e032      	b.n	80007aa <SCCB_write_reg+0xfe>
    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 8000744:	481c      	ldr	r0, [pc, #112]	@ (80007b8 <SCCB_write_reg+0x10c>)
 8000746:	f7ff ff31 	bl	80005ac <LL_I2C_IsActiveFlag_TXE>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0f1      	beq.n	8000734 <SCCB_write_reg+0x88>
    }

    LL_I2C_TransmitData8(I2C1, value);
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	4619      	mov	r1, r3
 8000754:	4818      	ldr	r0, [pc, #96]	@ (80007b8 <SCCB_write_reg+0x10c>)
 8000756:	f7ff ff95 	bl	8000684 <LL_I2C_TransmitData8>
    timeout = 0xFFFF;
 800075a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075e:	60fb      	str	r3, [r7, #12]
    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 8000760:	e007      	b.n	8000772 <SCCB_write_reg+0xc6>
        if (--timeout == 0) return true;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3b01      	subs	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <SCCB_write_reg+0xc6>
 800076e:	2301      	movs	r3, #1
 8000770:	e01b      	b.n	80007aa <SCCB_write_reg+0xfe>
    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 8000772:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <SCCB_write_reg+0x10c>)
 8000774:	f7ff ff1a 	bl	80005ac <LL_I2C_IsActiveFlag_TXE>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f1      	beq.n	8000762 <SCCB_write_reg+0xb6>
    }

    timeout = 0xFFFF;
 800077e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000782:	60fb      	str	r3, [r7, #12]
    while (!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 8000784:	e007      	b.n	8000796 <SCCB_write_reg+0xea>
        if (--timeout == 0) return true;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3b01      	subs	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <SCCB_write_reg+0xea>
 8000792:	2301      	movs	r3, #1
 8000794:	e009      	b.n	80007aa <SCCB_write_reg+0xfe>
    while (!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 8000796:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <SCCB_write_reg+0x10c>)
 8000798:	f7ff ff1b 	bl	80005d2 <LL_I2C_IsActiveFlag_BTF>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f1      	beq.n	8000786 <SCCB_write_reg+0xda>
    }

    LL_I2C_GenerateStopCondition(I2C1);
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <SCCB_write_reg+0x10c>)
 80007a4:	f7ff ff5e 	bl	8000664 <LL_I2C_GenerateStopCondition>
    return false;  // false = success, true = error
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	0800dd90 	.word	0x0800dd90
 80007b8:	40005400 	.word	0x40005400

080007bc <OV7670_init>:


bool OV7670_init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
   uint8_t data, i = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
   bool err = false;
 80007c6:	2300      	movs	r3, #0
 80007c8:	73bb      	strb	r3, [r7, #14]
   for(i = 0; i <OV7670_REG_NUM; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e08c      	b.n	80008ea <OV7670_init+0x12e>
      data = OV7670_reg[i][1];
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	4a4a      	ldr	r2, [pc, #296]	@ (80008fc <OV7670_init+0x140>)
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	71fb      	strb	r3, [r7, #7]
      // Note the direct passing of 'data', not its address
      uint32_t timeout;

      printf("loaded data %d %d\r\n", OV7670_reg[i][0], data);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	4a47      	ldr	r2, [pc, #284]	@ (80008fc <OV7670_init+0x140>)
 80007e0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80007e4:	4619      	mov	r1, r3
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4845      	ldr	r0, [pc, #276]	@ (8000900 <OV7670_init+0x144>)
 80007ec:	f00c fbec 	bl	800cfc8 <iprintf>

      LL_I2C_GenerateStartCondition(I2C1);
 80007f0:	4844      	ldr	r0, [pc, #272]	@ (8000904 <OV7670_init+0x148>)
 80007f2:	f7ff ff27 	bl	8000644 <LL_I2C_GenerateStartCondition>

      timeout = 0xFFFF;
 80007f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007fa:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_SB(I2C1)) {
 80007fc:	e007      	b.n	800080e <OV7670_init+0x52>
          if (--timeout == 0) return true;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	3b01      	subs	r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d101      	bne.n	800080e <OV7670_init+0x52>
 800080a:	2301      	movs	r3, #1
 800080c:	e072      	b.n	80008f4 <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_SB(I2C1)) {
 800080e:	483d      	ldr	r0, [pc, #244]	@ (8000904 <OV7670_init+0x148>)
 8000810:	f7ff fef2 	bl	80005f8 <LL_I2C_IsActiveFlag_SB>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f1      	beq.n	80007fe <OV7670_init+0x42>
      }

      LL_I2C_TransmitData8(I2C1, OV7670_I2C_ADDR << 1);  // write mode
 800081a:	2142      	movs	r1, #66	@ 0x42
 800081c:	4839      	ldr	r0, [pc, #228]	@ (8000904 <OV7670_init+0x148>)
 800081e:	f7ff ff31 	bl	8000684 <LL_I2C_TransmitData8>

      timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000826:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 8000828:	e007      	b.n	800083a <OV7670_init+0x7e>
          if (--timeout == 0) return true;
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	3b01      	subs	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d101      	bne.n	800083a <OV7670_init+0x7e>
 8000836:	2301      	movs	r3, #1
 8000838:	e05c      	b.n	80008f4 <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_ADDR(I2C1)) {
 800083a:	4832      	ldr	r0, [pc, #200]	@ (8000904 <OV7670_init+0x148>)
 800083c:	f7ff feef 	bl	800061e <LL_I2C_IsActiveFlag_ADDR>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f1      	beq.n	800082a <OV7670_init+0x6e>
      }
      (void)I2C1->SR2;  // clear ADDR flag
 8000846:	4b2f      	ldr	r3, [pc, #188]	@ (8000904 <OV7670_init+0x148>)
 8000848:	699b      	ldr	r3, [r3, #24]

      LL_I2C_TransmitData8(I2C1, OV7670_reg[i][0]);
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	4a2b      	ldr	r2, [pc, #172]	@ (80008fc <OV7670_init+0x140>)
 800084e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000852:	4619      	mov	r1, r3
 8000854:	482b      	ldr	r0, [pc, #172]	@ (8000904 <OV7670_init+0x148>)
 8000856:	f7ff ff15 	bl	8000684 <LL_I2C_TransmitData8>
      timeout = 0xFFFF;
 800085a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800085e:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 8000860:	e007      	b.n	8000872 <OV7670_init+0xb6>
          if (--timeout == 0) return true;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3b01      	subs	r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d101      	bne.n	8000872 <OV7670_init+0xb6>
 800086e:	2301      	movs	r3, #1
 8000870:	e040      	b.n	80008f4 <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 8000872:	4824      	ldr	r0, [pc, #144]	@ (8000904 <OV7670_init+0x148>)
 8000874:	f7ff fe9a 	bl	80005ac <LL_I2C_IsActiveFlag_TXE>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f1      	beq.n	8000862 <OV7670_init+0xa6>
      }

      LL_I2C_TransmitData8(I2C1, data);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4619      	mov	r1, r3
 8000882:	4820      	ldr	r0, [pc, #128]	@ (8000904 <OV7670_init+0x148>)
 8000884:	f7ff fefe 	bl	8000684 <LL_I2C_TransmitData8>
      timeout = 0xFFFF;
 8000888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800088c:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 800088e:	e007      	b.n	80008a0 <OV7670_init+0xe4>
          if (--timeout == 0) return true;
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	3b01      	subs	r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d101      	bne.n	80008a0 <OV7670_init+0xe4>
 800089c:	2301      	movs	r3, #1
 800089e:	e029      	b.n	80008f4 <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {
 80008a0:	4818      	ldr	r0, [pc, #96]	@ (8000904 <OV7670_init+0x148>)
 80008a2:	f7ff fe83 	bl	80005ac <LL_I2C_IsActiveFlag_TXE>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0f1      	beq.n	8000890 <OV7670_init+0xd4>
      }

      timeout = 0xFFFF;
 80008ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008b0:	60bb      	str	r3, [r7, #8]
      while (!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 80008b2:	e007      	b.n	80008c4 <OV7670_init+0x108>
          if (--timeout == 0) return true;
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d101      	bne.n	80008c4 <OV7670_init+0x108>
 80008c0:	2301      	movs	r3, #1
 80008c2:	e017      	b.n	80008f4 <OV7670_init+0x138>
      while (!LL_I2C_IsActiveFlag_BTF(I2C1)) {
 80008c4:	480f      	ldr	r0, [pc, #60]	@ (8000904 <OV7670_init+0x148>)
 80008c6:	f7ff fe84 	bl	80005d2 <LL_I2C_IsActiveFlag_BTF>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0f1      	beq.n	80008b4 <OV7670_init+0xf8>
      }

      LL_I2C_GenerateStopCondition(I2C1);
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <OV7670_init+0x148>)
 80008d2:	f7ff fec7 	bl	8000664 <LL_I2C_GenerateStopCondition>
      err=false;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73bb      	strb	r3, [r7, #14]
      printf("i: %d\r\n",i);
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	4619      	mov	r1, r3
 80008de:	480a      	ldr	r0, [pc, #40]	@ (8000908 <OV7670_init+0x14c>)
 80008e0:	f00c fb72 	bl	800cfc8 <iprintf>
   for(i = 0; i <OV7670_REG_NUM; i++) {
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	3301      	adds	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	2b58      	cmp	r3, #88	@ 0x58
 80008ee:	f67f af6f 	bls.w	80007d0 <OV7670_init+0x14>
   }
   return err;
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	0800e070 	.word	0x0800e070
 8000900:	0800dd90 	.word	0x0800dd90
 8000904:	40005400 	.word	0x40005400
 8000908:	0800dda4 	.word	0x0800dda4

0800090c <USBCommandTask>:
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
    return (USBD_OK);
}


void USBCommandTask(void *pvParameters) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    USBCommand cmd;
    while (1) {
    	printf("USBTaskRunning");
 8000914:	481e      	ldr	r0, [pc, #120]	@ (8000990 <USBCommandTask+0x84>)
 8000916:	f00c fb57 	bl	800cfc8 <iprintf>
        if (xQueueReceive(xUSBCommandQueue, &cmd, portMAX_DELAY) == pdPASS) {
 800091a:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <USBCommandTask+0x88>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f107 010c 	add.w	r1, r7, #12
 8000922:	f04f 32ff 	mov.w	r2, #4294967295
 8000926:	4618      	mov	r0, r3
 8000928:	f008 fa06 	bl	8008d38 <xQueueReceive>
 800092c:	4603      	mov	r3, r0
 800092e:	2b01      	cmp	r3, #1
 8000930:	d1f0      	bne.n	8000914 <USBCommandTask+0x8>
            switch(cmd.type) {
 8000932:	7b3b      	ldrb	r3, [r7, #12]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d014      	beq.n	8000962 <USBCommandTask+0x56>
 8000938:	2b02      	cmp	r3, #2
 800093a:	dceb      	bgt.n	8000914 <USBCommandTask+0x8>
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <USBCommandTask+0x3a>
 8000940:	2b01      	cmp	r3, #1
 8000942:	d007      	beq.n	8000954 <USBCommandTask+0x48>
 8000944:	e022      	b.n	800098c <USBCommandTask+0x80>
                case CMD_START_STREAM:
                    xEventGroupSetBits(xSystemEvents, STREAM_ENABLED);
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <USBCommandTask+0x8c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2101      	movs	r1, #1
 800094c:	4618      	mov	r0, r3
 800094e:	f007 fabd 	bl	8007ecc <xEventGroupSetBits>
                    break;
 8000952:	e01b      	b.n	800098c <USBCommandTask+0x80>

                case CMD_STOP_STREAM:
                    xEventGroupClearBits(xSystemEvents, STREAM_ENABLED);
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <USBCommandTask+0x8c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2101      	movs	r1, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fa7d 	bl	8007e5a <xEventGroupClearBits>
                    break;
 8000960:	e014      	b.n	800098c <USBCommandTask+0x80>

                case CMD_SET_REGISTER:
                    xSemaphoreTake(xI2CSemaphore, portMAX_DELAY);
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <USBCommandTask+0x90>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f04f 31ff 	mov.w	r1, #4294967295
 800096a:	4618      	mov	r0, r3
 800096c:	f008 fac6 	bl	8008efc <xQueueSemaphoreTake>
                    SCCB_write_reg(cmd.reg_addr, cmd.value);
 8000970:	7b7b      	ldrb	r3, [r7, #13]
 8000972:	7bba      	ldrb	r2, [r7, #14]
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe98 	bl	80006ac <SCCB_write_reg>
                    xSemaphoreGive(xI2CSemaphore);
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <USBCommandTask+0x90>)
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	2300      	movs	r3, #0
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	f008 f8d5 	bl	8008b34 <xQueueGenericSend>
                    break;
 800098a:	bf00      	nop
    	printf("USBTaskRunning");
 800098c:	e7c2      	b.n	8000914 <USBCommandTask+0x8>
 800098e:	bf00      	nop
 8000990:	0800ddac 	.word	0x0800ddac
 8000994:	200003dc 	.word	0x200003dc
 8000998:	200003d4 	.word	0x200003d4
 800099c:	200003e0 	.word	0x200003e0

080009a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <vApplicationGetIdleTaskMemory+0x2c>)
 80009b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	4a06      	ldr	r2, [pc, #24]	@ (80009d0 <vApplicationGetIdleTaskMemory+0x30>)
 80009b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000178 	.word	0x20000178
 80009d0:	200001cc 	.word	0x200001cc

080009d4 <FrameProcessingTask>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void FrameProcessingTask(void *pvParameters) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    FrameChunk chunk;
    printf(".. FrameProcessingTask started\r\n");
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <FrameProcessingTask+0x40>)
 80009de:	f00c fb5b 	bl	800d098 <puts>
    while(1) {
        // Wait indefinitely for a frame chunk to arrive in the queue
        if(xQueueReceive(xFrameQueue, &chunk, portMAX_DELAY) == pdPASS) {
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <FrameProcessingTask+0x44>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f107 0108 	add.w	r1, r7, #8
 80009ea:	f04f 32ff 	mov.w	r2, #4294967295
 80009ee:	4618      	mov	r0, r3
 80009f0:	f008 f9a2 	bl	8008d38 <xQueueReceive>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d1f3      	bne.n	80009e2 <FrameProcessingTask+0xe>
            // Uncomment the line below for very verbose logging
            printf(".. Processing frame chunk of size %ld bytes\r\n", chunk.size_in_bytes);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4619      	mov	r1, r3
 80009fe:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <FrameProcessingTask+0x48>)
 8000a00:	f00c fae2 	bl	800cfc8 <iprintf>

            // Check if the streaming bit is set in the event group
            if(xEventGroupGetBits(xSystemEvents) & STREAM_ENABLED) {
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <FrameProcessingTask+0x4c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f007 fa25 	bl	8007e5a <xEventGroupClearBits>
        if(xQueueReceive(xFrameQueue, &chunk, portMAX_DELAY) == pdPASS) {
 8000a10:	e7e7      	b.n	80009e2 <FrameProcessingTask+0xe>
 8000a12:	bf00      	nop
 8000a14:	0800ddbc 	.word	0x0800ddbc
 8000a18:	200003d8 	.word	0x200003d8
 8000a1c:	0800dddc 	.word	0x0800dddc
 8000a20:	200003d4 	.word	0x200003d4

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b5b0      	push	{r4, r5, r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 fd5d 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f8e5 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f000 f9f1 	bl	8000e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a36:	f000 f9cf 	bl	8000dd8 <MX_DMA_Init>
  MX_DCMI_Init();
 8000a3a:	f000 f94d 	bl	8000cd8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000a3e:	f000 f973 	bl	8000d28 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000a42:	f000 f99f 	bl	8000d84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("\r\n--- UART Test Only ---\r\n");
 8000a46:	4852      	ldr	r0, [pc, #328]	@ (8000b90 <main+0x16c>)
 8000a48:	f00c fb26 	bl	800d098 <puts>
  printf("Clock, GPIO, and UART Initialized.\r\n");
 8000a4c:	4851      	ldr	r0, [pc, #324]	@ (8000b94 <main+0x170>)
 8000a4e:	f00c fb23 	bl	800d098 <puts>


  xSystemEvents = xEventGroupCreate();
 8000a52:	f007 f9e8 	bl	8007e26 <xEventGroupCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a4f      	ldr	r2, [pc, #316]	@ (8000b98 <main+0x174>)
 8000a5a:	6013      	str	r3, [r2, #0]
  xFrameQueue = xQueueCreate(2, sizeof(FrameChunk)); // Queue can hold 2 chunk pointers
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2108      	movs	r1, #8
 8000a60:	2002      	movs	r0, #2
 8000a62:	f007 ffdb 	bl	8008a1c <xQueueGenericCreate>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4a4c      	ldr	r2, [pc, #304]	@ (8000b9c <main+0x178>)
 8000a6a:	6013      	str	r3, [r2, #0]
  xUSBCommandQueue = xQueueCreate(10, sizeof(USBCommand)); // Defined in usb_cdc_handler
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2103      	movs	r1, #3
 8000a70:	200a      	movs	r0, #10
 8000a72:	f007 ffd3 	bl	8008a1c <xQueueGenericCreate>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a49      	ldr	r2, [pc, #292]	@ (8000ba0 <main+0x17c>)
 8000a7a:	6013      	str	r3, [r2, #0]
  xI2CSemaphore = xSemaphoreCreateMutex();
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f008 f841 	bl	8008b04 <xQueueCreateMutex>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a47      	ldr	r2, [pc, #284]	@ (8000ba4 <main+0x180>)
 8000a86:	6013      	str	r3, [r2, #0]

  if(xSystemEvents && xFrameQueue && xUSBCommandQueue && xI2CSemaphore) {
 8000a88:	4b43      	ldr	r3, [pc, #268]	@ (8000b98 <main+0x174>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00f      	beq.n	8000ab0 <main+0x8c>
 8000a90:	4b42      	ldr	r3, [pc, #264]	@ (8000b9c <main+0x178>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00b      	beq.n	8000ab0 <main+0x8c>
 8000a98:	4b41      	ldr	r3, [pc, #260]	@ (8000ba0 <main+0x17c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d007      	beq.n	8000ab0 <main+0x8c>
 8000aa0:	4b40      	ldr	r3, [pc, #256]	@ (8000ba4 <main+0x180>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <main+0x8c>
      printf("RTOS objects created successfully.\r\n");
 8000aa8:	483f      	ldr	r0, [pc, #252]	@ (8000ba8 <main+0x184>)
 8000aaa:	f00c faf5 	bl	800d098 <puts>
 8000aae:	e004      	b.n	8000aba <main+0x96>
  } else {
      printf("Error: Failed to create RTOS objects!\r\n");
 8000ab0:	483e      	ldr	r0, [pc, #248]	@ (8000bac <main+0x188>)
 8000ab2:	f00c faf1 	bl	800d098 <puts>
      Error_Handler();
 8000ab6:	f000 fa31 	bl	8000f1c <Error_Handler>
  }
	  if (HAL_I2C_IsDeviceReady(&hi2c1, OV7670_I2C_ADDR << 1, 3, 100) == HAL_OK) {
 8000aba:	2364      	movs	r3, #100	@ 0x64
 8000abc:	2203      	movs	r2, #3
 8000abe:	2142      	movs	r1, #66	@ 0x42
 8000ac0:	483b      	ldr	r0, [pc, #236]	@ (8000bb0 <main+0x18c>)
 8000ac2:	f003 f91d 	bl	8003d00 <HAL_I2C_IsDeviceReady>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <main+0xb0>
		  printf("OV7670 detected\r\n");
 8000acc:	4839      	ldr	r0, [pc, #228]	@ (8000bb4 <main+0x190>)
 8000ace:	f00c fae3 	bl	800d098 <puts>
 8000ad2:	e002      	b.n	8000ada <main+0xb6>
	  } else {
		  printf("OV7670 not found\r\n");
 8000ad4:	4838      	ldr	r0, [pc, #224]	@ (8000bb8 <main+0x194>)
 8000ad6:	f00c fadf 	bl	800d098 <puts>
	  }


    // --- Initialize camera ---
    printf("Initializing OV7670 cameraaaa...\r\n");
 8000ada:	4838      	ldr	r0, [pc, #224]	@ (8000bbc <main+0x198>)
 8000adc:	f00c fadc 	bl	800d098 <puts>
    bool error = OV7670_init();
 8000ae0:	f7ff fe6c 	bl	80007bc <OV7670_init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	77fb      	strb	r3, [r7, #31]

    if(!error) {
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	f083 0301 	eor.w	r3, r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d012      	beq.n	8000b22 <main+0xfe>
      printf("OV7670 Camera Initialized Successfully.\r\n");
 8000afc:	4830      	ldr	r0, [pc, #192]	@ (8000bc0 <main+0x19c>)
 8000afe:	f00c facb 	bl	800d098 <puts>
  	  xEventGroupSetBits(xSystemEvents, CAMERA_READY);
 8000b02:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <main+0x174>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2102      	movs	r1, #2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 f9df 	bl	8007ecc <xEventGroupSetBits>
        // NEW: Start DCMI DMA in circular mode. This happens only once.
        // The length is the total number of pixels, as DMA is configured for Half Word memory transfers.
        HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)frame_buffer, IMG_COLUMNS * IMG_ROWS);
 8000b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc4 <main+0x1a0>)
 8000b10:	23c8      	movs	r3, #200	@ 0xc8
 8000b12:	2100      	movs	r1, #0
 8000b14:	482c      	ldr	r0, [pc, #176]	@ (8000bc8 <main+0x1a4>)
 8000b16:	f000 fe8f 	bl	8001838 <HAL_DCMI_Start_DMA>
        printf("DCMI DMA started in continuous mode.\r\n");
 8000b1a:	482c      	ldr	r0, [pc, #176]	@ (8000bcc <main+0x1a8>)
 8000b1c:	f00c fabc 	bl	800d098 <puts>
 8000b20:	e004      	b.n	8000b2c <main+0x108>
    } else {
        printf("Error: OV7670 Camera Failed to Initialize!\r\n");
 8000b22:	482b      	ldr	r0, [pc, #172]	@ (8000bd0 <main+0x1ac>)
 8000b24:	f00c fab8 	bl	800d098 <puts>
        Error_Handler(); // Camera failed
 8000b28:	f000 f9f8 	bl	8000f1c <Error_Handler>
    }

    // --- Create tasks ---
    printf("Creating RTOS tasks...\r\n");
 8000b2c:	4829      	ldr	r0, [pc, #164]	@ (8000bd4 <main+0x1b0>)
 8000b2e:	f00c fab3 	bl	800d098 <puts>
    // REMOVED: CameraTask is no longer needed with DMA circular mode.
    xTaskCreate(USBCommandTask, "USBCommand", 256, NULL, 3, &xUSBCommandTaskHandle);
 8000b32:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <main+0x1b4>)
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2303      	movs	r3, #3
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b40:	4926      	ldr	r1, [pc, #152]	@ (8000bdc <main+0x1b8>)
 8000b42:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <main+0x1bc>)
 8000b44:	f008 fc72 	bl	800942c <xTaskCreate>
    xTaskCreate(FrameProcessingTask, "FrameProcess", 384, NULL, 2, &xFrameTaskHandle);
 8000b48:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <main+0x1c0>)
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2300      	movs	r3, #0
 8000b52:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b56:	4924      	ldr	r1, [pc, #144]	@ (8000be8 <main+0x1c4>)
 8000b58:	4824      	ldr	r0, [pc, #144]	@ (8000bec <main+0x1c8>)
 8000b5a:	f008 fc67 	bl	800942c <xTaskCreate>
    // Default task for USB is created by CubeMX, we don't need to add it again.
    printf("Tasks created.\r\n");
 8000b5e:	4824      	ldr	r0, [pc, #144]	@ (8000bf0 <main+0x1cc>)
 8000b60:	f00c fa9a 	bl	800d098 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <main+0x1d0>)
 8000b66:	463c      	mov	r4, r7
 8000b68:	461d      	mov	r5, r3
 8000b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b76:	463b      	mov	r3, r7
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f007 f8f3 	bl	8007d66 <osThreadCreate>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <main+0x1d4>)
 8000b84:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b86:	f007 f8e7 	bl	8007d58 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b8a:	bf00      	nop
 8000b8c:	e7fd      	b.n	8000b8a <main+0x166>
 8000b8e:	bf00      	nop
 8000b90:	0800de0c 	.word	0x0800de0c
 8000b94:	0800de28 	.word	0x0800de28
 8000b98:	200003d4 	.word	0x200003d4
 8000b9c:	200003d8 	.word	0x200003d8
 8000ba0:	200003dc 	.word	0x200003dc
 8000ba4:	200003e0 	.word	0x200003e0
 8000ba8:	0800de4c 	.word	0x0800de4c
 8000bac:	0800de70 	.word	0x0800de70
 8000bb0:	20000614 	.word	0x20000614
 8000bb4:	0800de98 	.word	0x0800de98
 8000bb8:	0800deac 	.word	0x0800deac
 8000bbc:	0800dec0 	.word	0x0800dec0
 8000bc0:	0800dee4 	.word	0x0800dee4
 8000bc4:	200003e4 	.word	0x200003e4
 8000bc8:	20000574 	.word	0x20000574
 8000bcc:	0800df10 	.word	0x0800df10
 8000bd0:	0800df38 	.word	0x0800df38
 8000bd4:	0800df64 	.word	0x0800df64
 8000bd8:	200003d0 	.word	0x200003d0
 8000bdc:	0800df7c 	.word	0x0800df7c
 8000be0:	0800090d 	.word	0x0800090d
 8000be4:	200003cc 	.word	0x200003cc
 8000be8:	0800df88 	.word	0x0800df88
 8000bec:	080009d5 	.word	0x080009d5
 8000bf0:	0800df98 	.word	0x0800df98
 8000bf4:	0800dfb4 	.word	0x0800dfb4
 8000bf8:	200006b0 	.word	0x200006b0

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	@ 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	@ 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f00c fb24 	bl	800d258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <SystemClock_Config+0xd4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c28:	4a29      	ldr	r2, [pc, #164]	@ (8000cd0 <SystemClock_Config+0xd4>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c30:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <SystemClock_Config+0xd4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <SystemClock_Config+0xd8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a23      	ldr	r2, [pc, #140]	@ (8000cd4 <SystemClock_Config+0xd8>)
 8000c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <SystemClock_Config+0xd8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	2310      	movs	r3, #16
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c64:	2302      	movs	r3, #2
 8000c66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c70:	23c0      	movs	r3, #192	@ 0xc0
 8000c72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fc37 	bl	80054f4 <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c8c:	f000 f946 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	230f      	movs	r3, #15
 8000c92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2302      	movs	r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c9c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ca0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ca2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ca6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2103      	movs	r1, #3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f004 fe98 	bl	80059e4 <HAL_RCC_ClockConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cba:	f000 f92f 	bl	8000f1c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f004 ff74 	bl	8005bb0 <HAL_RCC_MCOConfig>
}
 8000cc8:	bf00      	nop
 8000cca:	3750      	adds	r7, #80	@ 0x50
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000cdc:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <MX_DCMI_Init+0x48>)
 8000cde:	4a11      	ldr	r2, [pc, #68]	@ (8000d24 <MX_DCMI_Init+0x4c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_DCMI_Init+0x48>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <MX_DCMI_Init+0x48>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_DCMI_Init+0x48>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_DCMI_Init+0x48>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_DCMI_Init+0x48>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <MX_DCMI_Init+0x48>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_DCMI_Init+0x48>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_DCMI_Init+0x48>)
 8000d0e:	f000 ff8f 	bl	8001c30 <HAL_DCMI_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000d18:	f000 f900 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000574 	.word	0x20000574
 8000d24:	50050000 	.word	0x50050000

08000d28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d2e:	4a13      	ldr	r2, [pc, #76]	@ (8000d7c <MX_I2C1_Init+0x54>)
 8000d30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d34:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <MX_I2C1_Init+0x58>)
 8000d36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	@ (8000d78 <MX_I2C1_Init+0x50>)
 8000d66:	f002 fe87 	bl	8003a78 <HAL_I2C_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d70:	f000 f8d4 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000614 	.word	0x20000614
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	000186a0 	.word	0x000186a0

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <MX_USART2_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f005 f85a 	bl	8005e74 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f000 f8a9 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000668 	.word	0x20000668
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_DMA_Init+0x3c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a0b      	ldr	r2, [pc, #44]	@ (8000e14 <MX_DMA_Init+0x3c>)
 8000de8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_DMA_Init+0x3c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	2039      	movs	r0, #57	@ 0x39
 8000e00:	f000 fce3 	bl	80017ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e04:	2039      	movs	r0, #57	@ 0x39
 8000e06:	f000 fcfc 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a24      	ldr	r2, [pc, #144]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a16      	ldr	r2, [pc, #88]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <MX_GPIO_Init+0xb0>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <MX_GPIO_Init+0xb4>)
 8000ebc:	f002 fc40 	bl	8003740 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // NOTE: UART GPIO init is handled by HAL_UART_MspInit in stm32f4xx_hal_msp.c
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	@ 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_DCMI_FrameEventCallback>:

  // USER CODE END 5


void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    // This is called at the end of every frame (VSYNC)
    // In continuous mode, this signals that the DMA has wrapped around to the beginning.
    // We can use the half/full complete callbacks for processing chunks.
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000eec:	f00b fa90 	bl	800c410 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	const char *message = "Hello, USB via FreeRTOS!\r\n";
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <StartDefaultTask+0x34>)
 8000ef2:	60fb      	str	r3, [r7, #12]
	//printf("StartDefaultTask is working!\r\n");
	CDC_Transmit_FS((uint8_t*)message, strlen(message));
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff f96b 	bl	80001d0 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4619      	mov	r1, r3
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f00b fb44 	bl	800c58c <CDC_Transmit_FS>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8000f04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f08:	f008 fbc8 	bl	800969c <vTaskDelay>
    osDelay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f006 ff76 	bl	8007dfe <osDelay>
  {
 8000f12:	bf00      	nop
 8000f14:	e7ec      	b.n	8000ef0 <StartDefaultTask+0xc>
 8000f16:	bf00      	nop
 8000f18:	0800dfd0 	.word	0x0800dfd0

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("\r\n!!! SYSTEM ERROR !!!\r\nEntering Error_Handler...\r\n");
 8000f20:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <Error_Handler+0x14>)
 8000f22:	f00c f8b9 	bl	800d098 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f26:	b672      	cpsid	i
}
 8000f28:	bf00      	nop
  __disable_irq();
  while (1)
 8000f2a:	bf00      	nop
 8000f2c:	e7fd      	b.n	8000f2a <Error_Handler+0xe>
 8000f2e:	bf00      	nop
 8000f30:	0800dfec 	.word	0x0800dfec

08000f34 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f3c:	1d39      	adds	r1, r7, #4
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	2201      	movs	r2, #1
 8000f44:	4803      	ldr	r0, [pc, #12]	@ (8000f54 <__io_putchar+0x20>)
 8000f46:	f004 ffe5 	bl	8005f14 <HAL_UART_Transmit>
    return ch;
 8000f4a:	687b      	ldr	r3, [r7, #4]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000668 	.word	0x20000668

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_MspInit+0x54>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <HAL_MspInit+0x54>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <HAL_MspInit+0x54>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_MspInit+0x54>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_MspInit+0x54>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_MspInit+0x54>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	210f      	movs	r1, #15
 8000f9a:	f06f 0001 	mvn.w	r0, #1
 8000f9e:	f000 fc14 	bl	80017ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	@ 0x30
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a63      	ldr	r2, [pc, #396]	@ (800115c <HAL_DCMI_MspInit+0x1ac>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	f040 80c0 	bne.w	8001154 <HAL_DCMI_MspInit+0x1a4>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	4b61      	ldr	r3, [pc, #388]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8000fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fdc:	4a60      	ldr	r2, [pc, #384]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	4b5a      	ldr	r3, [pc, #360]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff8:	4a59      	ldr	r2, [pc, #356]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001000:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	4b53      	ldr	r3, [pc, #332]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001014:	4a52      	ldr	r2, [pc, #328]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	@ 0x30
 800101c:	4b50      	ldr	r3, [pc, #320]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b4c      	ldr	r3, [pc, #304]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001030:	4a4b      	ldr	r2, [pc, #300]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6313      	str	r3, [r2, #48]	@ 0x30
 8001038:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	4a44      	ldr	r2, [pc, #272]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6313      	str	r3, [r2, #48]	@ 0x30
 8001054:	4b42      	ldr	r3, [pc, #264]	@ (8001160 <HAL_DCMI_MspInit+0x1b0>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001060:	2370      	movs	r3, #112	@ 0x70
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001070:	230d      	movs	r3, #13
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	483a      	ldr	r0, [pc, #232]	@ (8001164 <HAL_DCMI_MspInit+0x1b4>)
 800107c:	f002 fb60 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001080:	2350      	movs	r3, #80	@ 0x50
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001090:	230d      	movs	r3, #13
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4833      	ldr	r0, [pc, #204]	@ (8001168 <HAL_DCMI_MspInit+0x1b8>)
 800109c:	f002 fb50 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010a0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010b2:	230d      	movs	r3, #13
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	482b      	ldr	r0, [pc, #172]	@ (800116c <HAL_DCMI_MspInit+0x1bc>)
 80010be:	f002 fb3f 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c2:	23c0      	movs	r3, #192	@ 0xc0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010d2:	230d      	movs	r3, #13
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4824      	ldr	r0, [pc, #144]	@ (8001170 <HAL_DCMI_MspInit+0x1c0>)
 80010de:	f002 fb2f 	bl	8003740 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80010e2:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 80010e4:	4a24      	ldr	r2, [pc, #144]	@ (8001178 <HAL_DCMI_MspInit+0x1c8>)
 80010e6:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80010e8:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 80010ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f0:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 80010fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001102:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 8001106:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800110a:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 800110e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001112:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 800111c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001120:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001122:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001128:	4812      	ldr	r0, [pc, #72]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 800112a:	f000 fdef 	bl	8001d0c <HAL_DMA_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_DCMI_MspInit+0x188>
    {
      Error_Handler();
 8001134:	f7ff fef2 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 800113c:	639a      	str	r2, [r3, #56]	@ 0x38
 800113e:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <HAL_DCMI_MspInit+0x1c4>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2105      	movs	r1, #5
 8001148:	204e      	movs	r0, #78	@ 0x4e
 800114a:	f000 fb3e 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800114e:	204e      	movs	r0, #78	@ 0x4e
 8001150:	f000 fb57 	bl	8001802 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001154:	bf00      	nop
 8001156:	3730      	adds	r7, #48	@ 0x30
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	50050000 	.word	0x50050000
 8001160:	40023800 	.word	0x40023800
 8001164:	40021000 	.word	0x40021000
 8001168:	40020000 	.word	0x40020000
 800116c:	40020800 	.word	0x40020800
 8001170:	40020400 	.word	0x40020400
 8001174:	200005b4 	.word	0x200005b4
 8001178:	40026428 	.word	0x40026428

0800117c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_I2C_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12c      	bne.n	80011f8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c0:	2312      	movs	r3, #18
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011cc:	2304      	movs	r3, #4
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <HAL_I2C_MspInit+0x8c>)
 80011d8:	f002 fab2 	bl	8003740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	4a07      	ldr	r2, [pc, #28]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40005400 	.word	0x40005400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400

0800120c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	@ (8001290 <HAL_UART_MspInit+0x84>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12b      	bne.n	8001286 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a10      	ldr	r2, [pc, #64]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_UART_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001266:	230c      	movs	r3, #12
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001276:	2307      	movs	r3, #7
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <HAL_UART_MspInit+0x8c>)
 8001282:	f002 fa5d 	bl	8003740 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40004400 	.word	0x40004400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <NMI_Handler+0x4>

080012a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f959 	bl	800158c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012da:	f008 fe83 	bl	8009fe4 <xTaskGetSchedulerState>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d001      	beq.n	80012e8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012e4:	f007 fae0 	bl	80088a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <DMA2_Stream1_IRQHandler+0x10>)
 80012f2:	f000 fe33 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200005b4 	.word	0x200005b4

08001300 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <OTG_FS_IRQHandler+0x10>)
 8001306:	f002 ffe7 	bl	80042d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200058f0 	.word	0x200058f0

08001314 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <DCMI_IRQHandler+0x10>)
 800131a:	f000 fb31 	bl	8001980 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000574 	.word	0x20000574

08001328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e00a      	b.n	8001350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133a:	f3af 8000 	nop.w
 800133e:	4601      	mov	r1, r0
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	b2ca      	uxtb	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf0      	blt.n	800133a <_read+0x12>
  }

  return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e009      	b.n	8001388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fdd9 	bl	8000f34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbf1      	blt.n	8001374 <_write+0x12>
  }
  return len;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_close>:

int _close(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c2:	605a      	str	r2, [r3, #4]
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_isatty>:

int _isatty(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <_sbrk+0x5c>)
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <_sbrk+0x60>)
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <_sbrk+0x64>)
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <_sbrk+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001434:	f00b ff5e 	bl	800d2f4 <__errno>
 8001438:	4603      	mov	r3, r0
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	e009      	b.n	8001458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <_sbrk+0x64>)
 8001454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20020000 	.word	0x20020000
 8001464:	00000400 	.word	0x00000400
 8001468:	200006b4 	.word	0x200006b4
 800146c:	20006140 	.word	0x20006140

08001470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001498:	f7ff ffea 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149e:	490d      	ldr	r1, [pc, #52]	@ (80014d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a0:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b4:	4c0a      	ldr	r4, [pc, #40]	@ (80014e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c2:	f00b ff1d 	bl	800d300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff faad 	bl	8000a24 <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80014d8:	0800e188 	.word	0x0800e188
  ldr r2, =_sbss
 80014dc:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80014e0:	20006140 	.word	0x20006140

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_Init+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <HAL_Init+0x40>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_Init+0x40>)
 80014fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_Init+0x40>)
 800150a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 f94f 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	200f      	movs	r0, #15
 8001518:	f000 f808 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fd1c 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00

0800152c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_InitTick+0x54>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f967 	bl	800181e <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e00e      	b.n	8001578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d80a      	bhi.n	8001576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f000 f92f 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800156c:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <HAL_InitTick+0x5c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000000 	.word	0x20000000
 8001584:	20000008 	.word	0x20000008
 8001588:	20000004 	.word	0x20000004

0800158c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000008 	.word	0x20000008
 80015b0:	200006b8 	.word	0x200006b8

080015b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	200006b8 	.word	0x200006b8

080015cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d005      	beq.n	80015f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_Delay+0x44>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015f2:	bf00      	nop
 80015f4:	f7ff ffde 	bl	80015b4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f7      	bhi.n	80015f4 <HAL_Delay+0x28>
  {
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	4907      	ldr	r1, [pc, #28]	@ (80016b0 <__NVIC_EnableIRQ+0x38>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2001      	movs	r0, #1
 800169a:	fa00 f202 	lsl.w	r2, r0, r2
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	@ (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	@ (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	@ 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff8e 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff29 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff3e 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff8e 	bl	8001708 <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff31 	bl	8001678 <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa2 	bl	8001770 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af02      	add	r7, sp, #8
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_DCMI_Start_DMA+0x20>
 8001854:	2302      	movs	r3, #2
 8001856:	e08a      	b.n	800196e <HAL_DCMI_Start_DMA+0x136>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001876:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0202 	bic.w	r2, r2, #2
 8001886:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6819      	ldr	r1, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189c:	4a36      	ldr	r2, [pc, #216]	@ (8001978 <HAL_DCMI_Start_DMA+0x140>)
 800189e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a4:	4a35      	ldr	r2, [pc, #212]	@ (800197c <HAL_DCMI_Start_DMA+0x144>)
 80018a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ac:	2200      	movs	r2, #0
 80018ae:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi->XferTransferNumber = 0U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	@ 0x30

  if(Length <= 0xFFFFU)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c2:	d20c      	bcs.n	80018de <HAL_DCMI_Start_DMA+0xa6>
  {
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3328      	adds	r3, #40	@ 0x28
 80018ce:	4619      	mov	r1, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	f000 fac8 	bl	8001e68 <HAL_DMA_Start_IT>
 80018d8:	4603      	mov	r3, r0
 80018da:	75fb      	strb	r3, [r7, #23]
 80018dc:	e03a      	b.n	8001954 <HAL_DCMI_Start_DMA+0x11c>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e2:	4a25      	ldr	r2, [pc, #148]	@ (8001978 <HAL_DCMI_Start_DMA+0x140>)
 80018e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferSize = Length;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdcmi->pBuffPtr = pData;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 80018f8:	e009      	b.n	800190e <HAL_DCMI_Start_DMA+0xd6>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fe:	085a      	lsrs	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	62da      	str	r2, [r3, #44]	@ 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	005a      	lsls	r2, r3, #1
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001916:	d2f0      	bcs.n	80018fa <HAL_DCMI_Start_DMA+0xc2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191c:	1e9a      	subs	r2, r3, #2
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	629a      	str	r2, [r3, #40]	@ 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	613b      	str	r3, [r7, #16]

    /* Start DMA multi buffer transfer */
    status = HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3328      	adds	r3, #40	@ 0x28
 8001940:	4619      	mov	r1, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	f000 fd70 	bl	8002430 <HAL_DMAEx_MultiBufferStart_IT>
 8001950:	4603      	mov	r3, r0
 8001952:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Return function status */
  return status;
 800196c:	7dfb      	ldrb	r3, [r7, #23]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	08001ad9 	.word	0x08001ad9
 800197c:	08001c03 	.word	0x08001c03

08001980 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01e      	beq.n	80019d8 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2204      	movs	r2, #4
 80019b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ba:	4a37      	ldr	r2, [pc, #220]	@ (8001a98 <HAL_DCMI_IRQHandler+0x118>)
 80019bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 faa8 	bl	8001f18 <HAL_DMA_Abort_IT>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f915 	bl	8001c02 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01e      	beq.n	8001a20 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2202      	movs	r2, #2
 80019e8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2204      	movs	r2, #4
 80019fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a02:	4a25      	ldr	r2, [pc, #148]	@ (8001a98 <HAL_DCMI_IRQHandler+0x118>)
 8001a04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fa84 	bl	8001f18 <HAL_DMA_Abort_IT>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f8f1 	bl	8001c02 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2210      	movs	r2, #16
 8001a30:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f83c 	bl	8001ab0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2208      	movs	r2, #8
 8001a48:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f83a 	bl	8001ac4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d019      	beq.n	8001a8e <HAL_DCMI_IRQHandler+0x10e>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d107      	bne.n	8001a78 <HAL_DCMI_IRQHandler+0xf8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 021e 	bic.w	r2, r2, #30
 8001a76:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fa21 	bl	8000ed0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	08001c03 	.word	0x08001c03

08001a9c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ae8:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d043      	beq.n	8001b7a <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001afe:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d118      	bne.n	8001b3e <DCMI_DMAXferCplt+0x66>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d015      	beq.n	8001b3e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	00da      	lsls	r2, r3, #3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f001 fdc7 	bl	80036c0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b36:	1e5a      	subs	r2, r3, #1
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b3c:	e044      	b.n	8001bc8 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d13c      	bne.n	8001bc8 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b60:	00da      	lsls	r2, r3, #3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	2201      	movs	r2, #1
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f001 fda9 	bl	80036c0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b72:	1e5a      	subs	r2, r3, #1
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b78:	e026      	b.n	8001bc8 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	e017      	b.n	8001bc8 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10f      	bne.n	8001bc8 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bac:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	0099      	lsls	r1, r3, #2
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	440a      	add	r2, r1
 8001bbe:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d112      	bne.n	8001bfa <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d103      	bne.n	8001bfa <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d003      	beq.n	8001c22 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff ff3a 	bl	8001a9c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e05f      	b.n	8001d02 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff f9aa 	bl	8000fb0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff f9a7 	bl	8000fb0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001c78:	f023 0308 	bic.w	r3, r3, #8
 8001c7c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001c92:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001c9e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001caa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b10      	cmp	r3, #16
 8001cba:	d112      	bne.n	8001ce2 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7f1b      	ldrb	r3, [r3, #28]
 8001cc0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7f5b      	ldrb	r3, [r3, #29]
 8001cc6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001cc8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7f9b      	ldrb	r3, [r3, #30]
 8001cce:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001cd0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7fdb      	ldrb	r3, [r3, #31]
 8001cd8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001cde:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001ce0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 021e 	orr.w	r2, r2, #30
 8001cf0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff fc4c 	bl	80015b4 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e099      	b.n	8001e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d48:	e00f      	b.n	8001d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4a:	f7ff fc33 	bl	80015b4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d908      	bls.n	8001d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e078      	b.n	8001e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e8      	bne.n	8001d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <HAL_DMA_Init+0x158>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d107      	bne.n	8001dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f023 0307 	bic.w	r3, r3, #7
 8001dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d117      	bne.n	8001e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00e      	beq.n	8001e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa91 	bl	8002338 <DMA_CheckFifoParam>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2240      	movs	r2, #64	@ 0x40
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e016      	b.n	8001e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fa48 	bl	80022cc <DMA_CalcBaseAndBitshift>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e44:	223f      	movs	r2, #63	@ 0x3f
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	f010803f 	.word	0xf010803f

08001e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_DMA_Start_IT+0x26>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e040      	b.n	8001f10 <HAL_DMA_Start_IT+0xa8>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d12f      	bne.n	8001f02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f9da 	bl	8002270 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec0:	223f      	movs	r2, #63	@ 0x3f
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0216 	orr.w	r2, r2, #22
 8001ed6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e005      	b.n	8001f0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d004      	beq.n	8001f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2280      	movs	r2, #128	@ 0x80
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00c      	b.n	8001f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2205      	movs	r2, #5
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f68:	4b8e      	ldr	r3, [pc, #568]	@ (80021a4 <HAL_DMA_IRQHandler+0x248>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a8e      	ldr	r2, [pc, #568]	@ (80021a8 <HAL_DMA_IRQHandler+0x24c>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f86:	2208      	movs	r2, #8
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01a      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0204 	bic.w	r2, r2, #4
 8001fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fcc:	2201      	movs	r2, #1
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d012      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fea:	2201      	movs	r2, #1
 8001fec:	409a      	lsls	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff6:	f043 0202 	orr.w	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002002:	2204      	movs	r2, #4
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002020:	2204      	movs	r2, #4
 8002022:	409a      	lsls	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202c:	f043 0204 	orr.w	r2, r3, #4
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002038:	2210      	movs	r2, #16
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d043      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03c      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002056:	2210      	movs	r2, #16
 8002058:	409a      	lsls	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d018      	beq.n	800209e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d024      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
 800208a:	e01f      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
 800209c:	e016      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0208 	bic.w	r2, r2, #8
 80020ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	2220      	movs	r2, #32
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 808f 	beq.w	80021fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8087 	beq.w	80021fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f2:	2220      	movs	r2, #32
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b05      	cmp	r3, #5
 8002104:	d136      	bne.n	8002174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0216 	bic.w	r2, r2, #22
 8002114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <HAL_DMA_IRQHandler+0x1da>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0208 	bic.w	r2, r2, #8
 8002144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214a:	223f      	movs	r2, #63	@ 0x3f
 800214c:	409a      	lsls	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002166:	2b00      	cmp	r3, #0
 8002168:	d07e      	beq.n	8002268 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
        }
        return;
 8002172:	e079      	b.n	8002268 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01d      	beq.n	80021be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10d      	bne.n	80021ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	2b00      	cmp	r3, #0
 8002196:	d031      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e02c      	b.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000
 80021a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
 80021bc:	e01e      	b.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10f      	bne.n	80021ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0210 	bic.w	r2, r2, #16
 80021da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	2b00      	cmp	r3, #0
 8002202:	d032      	beq.n	800226a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d022      	beq.n	8002256 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2205      	movs	r2, #5
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3301      	adds	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	d307      	bcc.n	8002244 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f2      	bne.n	8002228 <HAL_DMA_IRQHandler+0x2cc>
 8002242:	e000      	b.n	8002246 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002244:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
 8002266:	e000      	b.n	800226a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002268:	bf00      	nop
    }
  }
}
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800228c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b40      	cmp	r3, #64	@ 0x40
 800229c:	d108      	bne.n	80022b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ae:	e007      	b.n	80022c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b10      	subs	r3, #16
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <DMA_CalcBaseAndBitshift+0x64>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e6:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <DMA_CalcBaseAndBitshift+0x68>)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d909      	bls.n	800230e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	@ 0x58
 800230c:	e007      	b.n	800231e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	aaaaaaab 	.word	0xaaaaaaab
 8002334:	0800e13c 	.word	0x0800e13c

08002338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11f      	bne.n	8002392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d856      	bhi.n	8002406 <DMA_CheckFifoParam+0xce>
 8002358:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <DMA_CheckFifoParam+0x28>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002371 	.word	0x08002371
 8002364:	08002383 	.word	0x08002383
 8002368:	08002371 	.word	0x08002371
 800236c:	08002407 	.word	0x08002407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d046      	beq.n	800240a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002380:	e043      	b.n	800240a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002386:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800238a:	d140      	bne.n	800240e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e03d      	b.n	800240e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800239a:	d121      	bne.n	80023e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d837      	bhi.n	8002412 <DMA_CheckFifoParam+0xda>
 80023a2:	a201      	add	r2, pc, #4	@ (adr r2, 80023a8 <DMA_CheckFifoParam+0x70>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023bf 	.word	0x080023bf
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	080023d1 	.word	0x080023d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e030      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d025      	beq.n	8002416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e022      	b.n	8002416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023de:	e01c      	b.n	800241a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d903      	bls.n	80023ee <DMA_CheckFifoParam+0xb6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ec:	e018      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      break;
 80023f2:	e015      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      break;
 8002404:	e00b      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 8002406:	bf00      	nop
 8002408:	e00a      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e008      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e006      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e004      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;   
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
    }
  } 
  
  return status; 
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop

08002430 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b80      	cmp	r3, #128	@ 0x80
 8002448:	d106      	bne.n	8002458 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	f001 b911 	b.w	800367a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2240      	movs	r2, #64	@ 0x40
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f001 b8ff 	b.w	800367a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002486:	2302      	movs	r3, #2
 8002488:	f001 b8f7 	b.w	800367a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	f041 80e5 	bne.w	800366c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80024be:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f001 f910 	bl	80036f4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b8d      	ldr	r3, [pc, #564]	@ (8002710 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80024dc:	429a      	cmp	r2, r3
 80024de:	d960      	bls.n	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a8b      	ldr	r2, [pc, #556]	@ (8002714 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d057      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a8a      	ldr	r2, [pc, #552]	@ (8002718 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d050      	beq.n	8002596 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a88      	ldr	r2, [pc, #544]	@ (800271c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d049      	beq.n	8002592 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a87      	ldr	r2, [pc, #540]	@ (8002720 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d042      	beq.n	800258e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a85      	ldr	r2, [pc, #532]	@ (8002724 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d03a      	beq.n	8002588 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a84      	ldr	r2, [pc, #528]	@ (8002728 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d032      	beq.n	8002582 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a82      	ldr	r2, [pc, #520]	@ (800272c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02a      	beq.n	800257c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a81      	ldr	r2, [pc, #516]	@ (8002730 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7f      	ldr	r2, [pc, #508]	@ (8002734 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01a      	beq.n	8002570 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7e      	ldr	r2, [pc, #504]	@ (8002738 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d012      	beq.n	800256a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7c      	ldr	r2, [pc, #496]	@ (800273c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00a      	beq.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7b      	ldr	r2, [pc, #492]	@ (8002740 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d102      	bne.n	800255e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002558:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800255c:	e01e      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800255e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002562:	e01b      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002564:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002568:	e018      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800256a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800256e:	e015      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002570:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002574:	e012      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002576:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800257a:	e00f      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800257c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002580:	e00c      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002582:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002586:	e009      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002588:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800258c:	e006      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800258e:	2320      	movs	r3, #32
 8002590:	e004      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002592:	2320      	movs	r3, #32
 8002594:	e002      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002596:	2320      	movs	r3, #32
 8002598:	e000      	b.n	800259c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800259a:	2320      	movs	r3, #32
 800259c:	4a69      	ldr	r2, [pc, #420]	@ (8002744 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800259e:	60d3      	str	r3, [r2, #12]
 80025a0:	e14f      	b.n	8002842 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b67      	ldr	r3, [pc, #412]	@ (8002748 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d960      	bls.n	8002670 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d057      	beq.n	8002668 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a56      	ldr	r2, [pc, #344]	@ (8002718 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d050      	beq.n	8002664 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a55      	ldr	r2, [pc, #340]	@ (800271c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d049      	beq.n	8002660 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a53      	ldr	r2, [pc, #332]	@ (8002720 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d042      	beq.n	800265c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a52      	ldr	r2, [pc, #328]	@ (8002724 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d03a      	beq.n	8002656 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a50      	ldr	r2, [pc, #320]	@ (8002728 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d032      	beq.n	8002650 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4f      	ldr	r2, [pc, #316]	@ (800272c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d02a      	beq.n	800264a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002730 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d022      	beq.n	8002644 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a4c      	ldr	r2, [pc, #304]	@ (8002734 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d01a      	beq.n	800263e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a4a      	ldr	r2, [pc, #296]	@ (8002738 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d012      	beq.n	8002638 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a49      	ldr	r2, [pc, #292]	@ (800273c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00a      	beq.n	8002632 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a47      	ldr	r2, [pc, #284]	@ (8002740 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d102      	bne.n	800262c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002626:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800262a:	e01e      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800262c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002630:	e01b      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002632:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002636:	e018      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002638:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800263c:	e015      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800263e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002642:	e012      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002644:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002648:	e00f      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800264a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800264e:	e00c      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002650:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002654:	e009      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002656:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800265a:	e006      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800265c:	2320      	movs	r3, #32
 800265e:	e004      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002660:	2320      	movs	r3, #32
 8002662:	e002      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002664:	2320      	movs	r3, #32
 8002666:	e000      	b.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002668:	2320      	movs	r3, #32
 800266a:	4a36      	ldr	r2, [pc, #216]	@ (8002744 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800266c:	6093      	str	r3, [r2, #8]
 800266e:	e0e8      	b.n	8002842 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b35      	ldr	r3, [pc, #212]	@ (800274c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002678:	429a      	cmp	r2, r3
 800267a:	f240 8082 	bls.w	8002782 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a24      	ldr	r2, [pc, #144]	@ (8002714 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d078      	beq.n	800277a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d071      	beq.n	8002776 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a21      	ldr	r2, [pc, #132]	@ (800271c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d06a      	beq.n	8002772 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d063      	beq.n	800276e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002724 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d05b      	beq.n	8002768 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002728 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d053      	beq.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1b      	ldr	r2, [pc, #108]	@ (800272c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d04b      	beq.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a19      	ldr	r2, [pc, #100]	@ (8002730 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d043      	beq.n	8002756 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a18      	ldr	r2, [pc, #96]	@ (8002734 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d03b      	beq.n	8002750 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a16      	ldr	r2, [pc, #88]	@ (8002738 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d012      	beq.n	8002708 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a15      	ldr	r2, [pc, #84]	@ (800273c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00a      	beq.n	8002702 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a13      	ldr	r2, [pc, #76]	@ (8002740 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d102      	bne.n	80026fc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80026f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80026fa:	e03f      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80026fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002700:	e03c      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002702:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002706:	e039      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002708:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800270c:	e036      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800270e:	bf00      	nop
 8002710:	40026458 	.word	0x40026458
 8002714:	40026010 	.word	0x40026010
 8002718:	40026410 	.word	0x40026410
 800271c:	40026070 	.word	0x40026070
 8002720:	40026470 	.word	0x40026470
 8002724:	40026028 	.word	0x40026028
 8002728:	40026428 	.word	0x40026428
 800272c:	40026088 	.word	0x40026088
 8002730:	40026488 	.word	0x40026488
 8002734:	40026040 	.word	0x40026040
 8002738:	40026440 	.word	0x40026440
 800273c:	400260a0 	.word	0x400260a0
 8002740:	400264a0 	.word	0x400264a0
 8002744:	40026400 	.word	0x40026400
 8002748:	400260b8 	.word	0x400260b8
 800274c:	40026058 	.word	0x40026058
 8002750:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002754:	e012      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002756:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800275a:	e00f      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800275c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002760:	e00c      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002762:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002766:	e009      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002768:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800276c:	e006      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800276e:	2320      	movs	r3, #32
 8002770:	e004      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002772:	2320      	movs	r3, #32
 8002774:	e002      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002776:	2320      	movs	r3, #32
 8002778:	e000      	b.n	800277c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800277a:	2320      	movs	r3, #32
 800277c:	4a8c      	ldr	r2, [pc, #560]	@ (80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800277e:	60d3      	str	r3, [r2, #12]
 8002780:	e05f      	b.n	8002842 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a8b      	ldr	r2, [pc, #556]	@ (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d057      	beq.n	800283c <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a89      	ldr	r2, [pc, #548]	@ (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d050      	beq.n	8002838 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a88      	ldr	r2, [pc, #544]	@ (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d049      	beq.n	8002834 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a86      	ldr	r2, [pc, #536]	@ (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d042      	beq.n	8002830 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a85      	ldr	r2, [pc, #532]	@ (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d03a      	beq.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a83      	ldr	r2, [pc, #524]	@ (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d032      	beq.n	8002824 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a82      	ldr	r2, [pc, #520]	@ (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d02a      	beq.n	800281e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a80      	ldr	r2, [pc, #512]	@ (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d022      	beq.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7f      	ldr	r2, [pc, #508]	@ (80029d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d01a      	beq.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a7d      	ldr	r2, [pc, #500]	@ (80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d012      	beq.n	800280c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7c      	ldr	r2, [pc, #496]	@ (80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00a      	beq.n	8002806 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a7a      	ldr	r2, [pc, #488]	@ (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d102      	bne.n	8002800 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80027fa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027fe:	e01e      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002800:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002804:	e01b      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002806:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800280a:	e018      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800280c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002810:	e015      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002812:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002816:	e012      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002818:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800281c:	e00f      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800281e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002822:	e00c      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002824:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002828:	e009      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800282a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800282e:	e006      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002830:	2320      	movs	r3, #32
 8002832:	e004      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002834:	2320      	movs	r3, #32
 8002836:	e002      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002838:	2320      	movs	r3, #32
 800283a:	e000      	b.n	800283e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800283c:	2320      	movs	r3, #32
 800283e:	4a5c      	ldr	r2, [pc, #368]	@ (80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002840:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	4b66      	ldr	r3, [pc, #408]	@ (80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800284a:	429a      	cmp	r2, r3
 800284c:	d960      	bls.n	8002910 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a58      	ldr	r2, [pc, #352]	@ (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d057      	beq.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a56      	ldr	r2, [pc, #344]	@ (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d050      	beq.n	8002904 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a55      	ldr	r2, [pc, #340]	@ (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d049      	beq.n	8002900 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a53      	ldr	r2, [pc, #332]	@ (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d042      	beq.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a52      	ldr	r2, [pc, #328]	@ (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d03a      	beq.n	80028f6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a50      	ldr	r2, [pc, #320]	@ (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d032      	beq.n	80028f0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a4f      	ldr	r2, [pc, #316]	@ (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d02a      	beq.n	80028ea <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a4d      	ldr	r2, [pc, #308]	@ (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d022      	beq.n	80028e4 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4c      	ldr	r2, [pc, #304]	@ (80029d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d01a      	beq.n	80028de <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4a      	ldr	r2, [pc, #296]	@ (80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d012      	beq.n	80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a49      	ldr	r2, [pc, #292]	@ (80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00a      	beq.n	80028d2 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a47      	ldr	r2, [pc, #284]	@ (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d102      	bne.n	80028cc <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80028c6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028ca:	e01e      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028d0:	e01b      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028d2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028d6:	e018      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028dc:	e015      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028e2:	e012      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028e8:	e00f      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028ee:	e00c      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028f4:	e009      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028fa:	e006      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80028fc:	2310      	movs	r3, #16
 80028fe:	e004      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002900:	2310      	movs	r3, #16
 8002902:	e002      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002904:	2310      	movs	r3, #16
 8002906:	e000      	b.n	800290a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002908:	2310      	movs	r3, #16
 800290a:	4a37      	ldr	r2, [pc, #220]	@ (80029e8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800290c:	60d3      	str	r3, [r2, #12]
 800290e:	e14f      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b35      	ldr	r3, [pc, #212]	@ (80029ec <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002918:	429a      	cmp	r2, r3
 800291a:	f240 8082 	bls.w	8002a22 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a24      	ldr	r2, [pc, #144]	@ (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d078      	beq.n	8002a1a <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a22      	ldr	r2, [pc, #136]	@ (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d071      	beq.n	8002a16 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d06a      	beq.n	8002a12 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1f      	ldr	r2, [pc, #124]	@ (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d063      	beq.n	8002a0e <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d05b      	beq.n	8002a08 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1c      	ldr	r2, [pc, #112]	@ (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d053      	beq.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1b      	ldr	r2, [pc, #108]	@ (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d04b      	beq.n	80029fc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a19      	ldr	r2, [pc, #100]	@ (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d043      	beq.n	80029f6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a18      	ldr	r2, [pc, #96]	@ (80029d4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d03b      	beq.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d012      	beq.n	80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a15      	ldr	r2, [pc, #84]	@ (80029dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00a      	beq.n	80029a2 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a13      	ldr	r2, [pc, #76]	@ (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d102      	bne.n	800299c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002996:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800299a:	e03f      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800299c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029a0:	e03c      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029a2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029a6:	e039      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029ac:	e036      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029ae:	bf00      	nop
 80029b0:	40026000 	.word	0x40026000
 80029b4:	40026010 	.word	0x40026010
 80029b8:	40026410 	.word	0x40026410
 80029bc:	40026070 	.word	0x40026070
 80029c0:	40026470 	.word	0x40026470
 80029c4:	40026028 	.word	0x40026028
 80029c8:	40026428 	.word	0x40026428
 80029cc:	40026088 	.word	0x40026088
 80029d0:	40026488 	.word	0x40026488
 80029d4:	40026040 	.word	0x40026040
 80029d8:	40026440 	.word	0x40026440
 80029dc:	400260a0 	.word	0x400260a0
 80029e0:	400264a0 	.word	0x400264a0
 80029e4:	40026458 	.word	0x40026458
 80029e8:	40026400 	.word	0x40026400
 80029ec:	400260b8 	.word	0x400260b8
 80029f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029f4:	e012      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029fa:	e00f      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80029fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a00:	e00c      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a06:	e009      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a0c:	e006      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a0e:	2310      	movs	r3, #16
 8002a10:	e004      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a12:	2310      	movs	r3, #16
 8002a14:	e002      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a16:	2310      	movs	r3, #16
 8002a18:	e000      	b.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	4a8c      	ldr	r2, [pc, #560]	@ (8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	e0c6      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b8a      	ldr	r3, [pc, #552]	@ (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d960      	bls.n	8002af0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a89      	ldr	r2, [pc, #548]	@ (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d057      	beq.n	8002ae8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a87      	ldr	r2, [pc, #540]	@ (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d050      	beq.n	8002ae4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a86      	ldr	r2, [pc, #536]	@ (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d049      	beq.n	8002ae0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a84      	ldr	r2, [pc, #528]	@ (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d042      	beq.n	8002adc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a83      	ldr	r2, [pc, #524]	@ (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d03a      	beq.n	8002ad6 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a81      	ldr	r2, [pc, #516]	@ (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d032      	beq.n	8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a80      	ldr	r2, [pc, #512]	@ (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d02a      	beq.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a7e      	ldr	r2, [pc, #504]	@ (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a7d      	ldr	r2, [pc, #500]	@ (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01a      	beq.n	8002abe <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a7b      	ldr	r2, [pc, #492]	@ (8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d012      	beq.n	8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7a      	ldr	r2, [pc, #488]	@ (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a78      	ldr	r2, [pc, #480]	@ (8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d102      	bne.n	8002aac <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002aa6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002aaa:	e01e      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002aac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ab0:	e01b      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ab2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ab6:	e018      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ab8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002abc:	e015      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002abe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ac2:	e012      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ac8:	e00f      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ace:	e00c      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ad4:	e009      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ada:	e006      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002adc:	2310      	movs	r3, #16
 8002ade:	e004      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	e002      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	e000      	b.n	8002aea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ae8:	2310      	movs	r3, #16
 8002aea:	4a67      	ldr	r2, [pc, #412]	@ (8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002aec:	60d3      	str	r3, [r2, #12]
 8002aee:	e05f      	b.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a58      	ldr	r2, [pc, #352]	@ (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d057      	beq.n	8002baa <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a57      	ldr	r2, [pc, #348]	@ (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d050      	beq.n	8002ba6 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a55      	ldr	r2, [pc, #340]	@ (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d049      	beq.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a54      	ldr	r2, [pc, #336]	@ (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d042      	beq.n	8002b9e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	@ (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d03a      	beq.n	8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a51      	ldr	r2, [pc, #324]	@ (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d032      	beq.n	8002b92 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a4f      	ldr	r2, [pc, #316]	@ (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d02a      	beq.n	8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a4c      	ldr	r2, [pc, #304]	@ (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01a      	beq.n	8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a4b      	ldr	r2, [pc, #300]	@ (8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d012      	beq.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a49      	ldr	r2, [pc, #292]	@ (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00a      	beq.n	8002b74 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a48      	ldr	r2, [pc, #288]	@ (8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d102      	bne.n	8002b6e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002b68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b6c:	e01e      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b72:	e01b      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b78:	e018      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b7a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b7e:	e015      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b80:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b84:	e012      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b8a:	e00f      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b90:	e00c      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b96:	e009      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b9c:	e006      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002b9e:	2310      	movs	r3, #16
 8002ba0:	e004      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002ba2:	2310      	movs	r3, #16
 8002ba4:	e002      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002ba6:	2310      	movs	r3, #16
 8002ba8:	e000      	b.n	8002bac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002baa:	2310      	movs	r3, #16
 8002bac:	4a36      	ldr	r2, [pc, #216]	@ (8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002bae:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b35      	ldr	r3, [pc, #212]	@ (8002c8c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f240 8082 	bls.w	8002cc2 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a25      	ldr	r2, [pc, #148]	@ (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d078      	beq.n	8002cba <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a23      	ldr	r2, [pc, #140]	@ (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d071      	beq.n	8002cb6 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a22      	ldr	r2, [pc, #136]	@ (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d06a      	beq.n	8002cb2 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a20      	ldr	r2, [pc, #128]	@ (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d063      	beq.n	8002cae <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1f      	ldr	r2, [pc, #124]	@ (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d05b      	beq.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d053      	beq.n	8002ca2 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d04b      	beq.n	8002c9c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1a      	ldr	r2, [pc, #104]	@ (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d043      	beq.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a19      	ldr	r2, [pc, #100]	@ (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d03b      	beq.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d012      	beq.n	8002c48 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00a      	beq.n	8002c42 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a14      	ldr	r2, [pc, #80]	@ (8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d102      	bne.n	8002c3c <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002c36:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002c3a:	e03f      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c40:	e03c      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c42:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002c46:	e039      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002c4c:	e036      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c4e:	bf00      	nop
 8002c50:	40026400 	.word	0x40026400
 8002c54:	40026058 	.word	0x40026058
 8002c58:	40026010 	.word	0x40026010
 8002c5c:	40026410 	.word	0x40026410
 8002c60:	40026070 	.word	0x40026070
 8002c64:	40026470 	.word	0x40026470
 8002c68:	40026028 	.word	0x40026028
 8002c6c:	40026428 	.word	0x40026428
 8002c70:	40026088 	.word	0x40026088
 8002c74:	40026488 	.word	0x40026488
 8002c78:	40026040 	.word	0x40026040
 8002c7c:	40026440 	.word	0x40026440
 8002c80:	400260a0 	.word	0x400260a0
 8002c84:	400264a0 	.word	0x400264a0
 8002c88:	40026000 	.word	0x40026000
 8002c8c:	40026458 	.word	0x40026458
 8002c90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002c94:	e012      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c9a:	e00f      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ca0:	e00c      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ca6:	e009      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cac:	e006      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002cae:	2308      	movs	r3, #8
 8002cb0:	e004      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	e002      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	e000      	b.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002cba:	2308      	movs	r3, #8
 8002cbc:	4a8c      	ldr	r2, [pc, #560]	@ (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002cbe:	60d3      	str	r3, [r2, #12]
 8002cc0:	e14e      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d960      	bls.n	8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a89      	ldr	r2, [pc, #548]	@ (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d057      	beq.n	8002d88 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a87      	ldr	r2, [pc, #540]	@ (8002efc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d050      	beq.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a86      	ldr	r2, [pc, #536]	@ (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d049      	beq.n	8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a84      	ldr	r2, [pc, #528]	@ (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d042      	beq.n	8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a83      	ldr	r2, [pc, #524]	@ (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d03a      	beq.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a81      	ldr	r2, [pc, #516]	@ (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d032      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a80      	ldr	r2, [pc, #512]	@ (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d02a      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a7e      	ldr	r2, [pc, #504]	@ (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d022      	beq.n	8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7d      	ldr	r2, [pc, #500]	@ (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d01a      	beq.n	8002d5e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a7b      	ldr	r2, [pc, #492]	@ (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d012      	beq.n	8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7a      	ldr	r2, [pc, #488]	@ (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00a      	beq.n	8002d52 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a78      	ldr	r2, [pc, #480]	@ (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d102      	bne.n	8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002d46:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002d4a:	e01e      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d50:	e01b      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d52:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002d56:	e018      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002d5c:	e015      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d5e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002d62:	e012      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d68:	e00f      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d6e:	e00c      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d74:	e009      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d7a:	e006      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	e004      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d80:	2308      	movs	r3, #8
 8002d82:	e002      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d84:	2308      	movs	r3, #8
 8002d86:	e000      	b.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002d88:	2308      	movs	r3, #8
 8002d8a:	4a59      	ldr	r2, [pc, #356]	@ (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002d8c:	6093      	str	r3, [r2, #8]
 8002d8e:	e0e7      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b64      	ldr	r3, [pc, #400]	@ (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d960      	bls.n	8002e5e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a55      	ldr	r2, [pc, #340]	@ (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d057      	beq.n	8002e56 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a54      	ldr	r2, [pc, #336]	@ (8002efc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d050      	beq.n	8002e52 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a52      	ldr	r2, [pc, #328]	@ (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d049      	beq.n	8002e4e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a51      	ldr	r2, [pc, #324]	@ (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d042      	beq.n	8002e4a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d03a      	beq.n	8002e44 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a4e      	ldr	r2, [pc, #312]	@ (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d032      	beq.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d02a      	beq.n	8002e38 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a4b      	ldr	r2, [pc, #300]	@ (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d022      	beq.n	8002e32 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a49      	ldr	r2, [pc, #292]	@ (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01a      	beq.n	8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a48      	ldr	r2, [pc, #288]	@ (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d012      	beq.n	8002e26 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a46      	ldr	r2, [pc, #280]	@ (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00a      	beq.n	8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a45      	ldr	r2, [pc, #276]	@ (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d102      	bne.n	8002e1a <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002e14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e18:	e01e      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1e:	e01b      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e24:	e018      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e26:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e2a:	e015      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e30:	e012      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e36:	e00f      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e3c:	e00c      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e42:	e009      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e48:	e006      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	e004      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	e002      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e52:	2308      	movs	r3, #8
 8002e54:	e000      	b.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002e56:	2308      	movs	r3, #8
 8002e58:	4a34      	ldr	r2, [pc, #208]	@ (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002e5a:	60d3      	str	r3, [r2, #12]
 8002e5c:	e080      	b.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a25      	ldr	r2, [pc, #148]	@ (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d078      	beq.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d071      	beq.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a22      	ldr	r2, [pc, #136]	@ (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d06a      	beq.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a20      	ldr	r2, [pc, #128]	@ (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d063      	beq.n	8002f4e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d05b      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d053      	beq.n	8002f42 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d04b      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d043      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a19      	ldr	r2, [pc, #100]	@ (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d03b      	beq.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a17      	ldr	r2, [pc, #92]	@ (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d012      	beq.n	8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	@ (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00a      	beq.n	8002ee2 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d102      	bne.n	8002edc <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002ed6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002eda:	e03f      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002edc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ee0:	e03c      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ee2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002ee6:	e039      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ee8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002eec:	e036      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002eee:	bf00      	nop
 8002ef0:	40026400 	.word	0x40026400
 8002ef4:	400260b8 	.word	0x400260b8
 8002ef8:	40026010 	.word	0x40026010
 8002efc:	40026410 	.word	0x40026410
 8002f00:	40026070 	.word	0x40026070
 8002f04:	40026470 	.word	0x40026470
 8002f08:	40026028 	.word	0x40026028
 8002f0c:	40026428 	.word	0x40026428
 8002f10:	40026088 	.word	0x40026088
 8002f14:	40026488 	.word	0x40026488
 8002f18:	40026040 	.word	0x40026040
 8002f1c:	40026440 	.word	0x40026440
 8002f20:	400260a0 	.word	0x400260a0
 8002f24:	400264a0 	.word	0x400264a0
 8002f28:	40026058 	.word	0x40026058
 8002f2c:	40026000 	.word	0x40026000
 8002f30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f34:	e012      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f3a:	e00f      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f40:	e00c      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f46:	e009      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f4c:	e006      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	e004      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f52:	2308      	movs	r3, #8
 8002f54:	e002      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f56:	2308      	movs	r3, #8
 8002f58:	e000      	b.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	4a8a      	ldr	r2, [pc, #552]	@ (8003188 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8002f5e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b89      	ldr	r3, [pc, #548]	@ (800318c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d960      	bls.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a87      	ldr	r2, [pc, #540]	@ (8003190 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d057      	beq.n	8003026 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a86      	ldr	r2, [pc, #536]	@ (8003194 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d050      	beq.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a84      	ldr	r2, [pc, #528]	@ (8003198 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d049      	beq.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a83      	ldr	r2, [pc, #524]	@ (800319c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d042      	beq.n	800301a <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a81      	ldr	r2, [pc, #516]	@ (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d03a      	beq.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a80      	ldr	r2, [pc, #512]	@ (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d032      	beq.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7e      	ldr	r2, [pc, #504]	@ (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02a      	beq.n	8003008 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a7d      	ldr	r2, [pc, #500]	@ (80031ac <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a7b      	ldr	r2, [pc, #492]	@ (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01a      	beq.n	8002ffc <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a7a      	ldr	r2, [pc, #488]	@ (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d012      	beq.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a78      	ldr	r2, [pc, #480]	@ (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a77      	ldr	r2, [pc, #476]	@ (80031bc <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d102      	bne.n	8002fea <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8002fe4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002fe8:	e01e      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002fea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fee:	e01b      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002ff0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ff4:	e018      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002ff6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ffa:	e015      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002ffc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003000:	e012      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003006:	e00f      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003008:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800300c:	e00c      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800300e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003012:	e009      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003018:	e006      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800301a:	2304      	movs	r3, #4
 800301c:	e004      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800301e:	2304      	movs	r3, #4
 8003020:	e002      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003022:	2304      	movs	r3, #4
 8003024:	e000      	b.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003026:	2304      	movs	r3, #4
 8003028:	4a65      	ldr	r2, [pc, #404]	@ (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800302a:	60d3      	str	r3, [r2, #12]
 800302c:	e150      	b.n	80032d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	4b63      	ldr	r3, [pc, #396]	@ (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003036:	429a      	cmp	r2, r3
 8003038:	d960      	bls.n	80030fc <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a54      	ldr	r2, [pc, #336]	@ (8003190 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d057      	beq.n	80030f4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a52      	ldr	r2, [pc, #328]	@ (8003194 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d050      	beq.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a51      	ldr	r2, [pc, #324]	@ (8003198 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d049      	beq.n	80030ec <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a4f      	ldr	r2, [pc, #316]	@ (800319c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d042      	beq.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4e      	ldr	r2, [pc, #312]	@ (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d03a      	beq.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a4c      	ldr	r2, [pc, #304]	@ (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d032      	beq.n	80030dc <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a4b      	ldr	r2, [pc, #300]	@ (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d02a      	beq.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a49      	ldr	r2, [pc, #292]	@ (80031ac <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d022      	beq.n	80030d0 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a48      	ldr	r2, [pc, #288]	@ (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d01a      	beq.n	80030ca <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a46      	ldr	r2, [pc, #280]	@ (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d012      	beq.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a45      	ldr	r2, [pc, #276]	@ (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00a      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a43      	ldr	r2, [pc, #268]	@ (80031bc <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d102      	bne.n	80030b8 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80030b2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030b6:	e01e      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030bc:	e01b      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030be:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030c2:	e018      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030c8:	e015      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030ca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030ce:	e012      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030d4:	e00f      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030da:	e00c      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030e0:	e009      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030e6:	e006      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e004      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030ec:	2304      	movs	r3, #4
 80030ee:	e002      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030f0:	2304      	movs	r3, #4
 80030f2:	e000      	b.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80030f4:	2304      	movs	r3, #4
 80030f6:	4a32      	ldr	r2, [pc, #200]	@ (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80030f8:	6093      	str	r3, [r2, #8]
 80030fa:	e0e9      	b.n	80032d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	4b31      	ldr	r3, [pc, #196]	@ (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003104:	429a      	cmp	r2, r3
 8003106:	f240 8083 	bls.w	8003210 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a20      	ldr	r2, [pc, #128]	@ (8003190 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d079      	beq.n	8003208 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d072      	beq.n	8003204 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d06b      	beq.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1b      	ldr	r2, [pc, #108]	@ (800319c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d064      	beq.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1a      	ldr	r2, [pc, #104]	@ (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d05c      	beq.n	80031f6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a18      	ldr	r2, [pc, #96]	@ (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d054      	beq.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a17      	ldr	r2, [pc, #92]	@ (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d04c      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a15      	ldr	r2, [pc, #84]	@ (80031ac <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d044      	beq.n	80031e4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a14      	ldr	r2, [pc, #80]	@ (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d03c      	beq.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a12      	ldr	r2, [pc, #72]	@ (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d034      	beq.n	80031d8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a11      	ldr	r2, [pc, #68]	@ (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d02c      	beq.n	80031d2 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0f      	ldr	r2, [pc, #60]	@ (80031bc <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d124      	bne.n	80031cc <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003182:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003186:	e040      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003188:	40026000 	.word	0x40026000
 800318c:	40026458 	.word	0x40026458
 8003190:	40026010 	.word	0x40026010
 8003194:	40026410 	.word	0x40026410
 8003198:	40026070 	.word	0x40026070
 800319c:	40026470 	.word	0x40026470
 80031a0:	40026028 	.word	0x40026028
 80031a4:	40026428 	.word	0x40026428
 80031a8:	40026088 	.word	0x40026088
 80031ac:	40026488 	.word	0x40026488
 80031b0:	40026040 	.word	0x40026040
 80031b4:	40026440 	.word	0x40026440
 80031b8:	400260a0 	.word	0x400260a0
 80031bc:	400264a0 	.word	0x400264a0
 80031c0:	40026400 	.word	0x40026400
 80031c4:	400260b8 	.word	0x400260b8
 80031c8:	40026058 	.word	0x40026058
 80031cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031d0:	e01b      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031d2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031d6:	e018      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031dc:	e015      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031de:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031e2:	e012      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031e8:	e00f      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031ee:	e00c      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031f4:	e009      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031fa:	e006      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80031fc:	2304      	movs	r3, #4
 80031fe:	e004      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003200:	2304      	movs	r3, #4
 8003202:	e002      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003204:	2304      	movs	r3, #4
 8003206:	e000      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003208:	2304      	movs	r3, #4
 800320a:	4a8b      	ldr	r2, [pc, #556]	@ (8003438 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800320c:	60d3      	str	r3, [r2, #12]
 800320e:	e05f      	b.n	80032d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a89      	ldr	r2, [pc, #548]	@ (800343c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d057      	beq.n	80032ca <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a88      	ldr	r2, [pc, #544]	@ (8003440 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d050      	beq.n	80032c6 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a86      	ldr	r2, [pc, #536]	@ (8003444 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d049      	beq.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a85      	ldr	r2, [pc, #532]	@ (8003448 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d042      	beq.n	80032be <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a83      	ldr	r2, [pc, #524]	@ (800344c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d03a      	beq.n	80032b8 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a82      	ldr	r2, [pc, #520]	@ (8003450 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d032      	beq.n	80032b2 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a80      	ldr	r2, [pc, #512]	@ (8003454 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02a      	beq.n	80032ac <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7f      	ldr	r2, [pc, #508]	@ (8003458 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d022      	beq.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a7d      	ldr	r2, [pc, #500]	@ (800345c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01a      	beq.n	80032a0 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7c      	ldr	r2, [pc, #496]	@ (8003460 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d012      	beq.n	800329a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a7a      	ldr	r2, [pc, #488]	@ (8003464 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00a      	beq.n	8003294 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a79      	ldr	r2, [pc, #484]	@ (8003468 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d102      	bne.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003288:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800328c:	e01e      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800328e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003292:	e01b      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003294:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003298:	e018      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800329a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800329e:	e015      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80032a0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032a4:	e012      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80032a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032aa:	e00f      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80032ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032b0:	e00c      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80032b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032b6:	e009      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80032b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032bc:	e006      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80032be:	2304      	movs	r3, #4
 80032c0:	e004      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e002      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80032c6:	2304      	movs	r3, #4
 80032c8:	e000      	b.n	80032cc <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80032ca:	2304      	movs	r3, #4
 80032cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003438 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80032ce:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b65      	ldr	r3, [pc, #404]	@ (800346c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80032d8:	429a      	cmp	r2, r3
 80032da:	d95c      	bls.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a56      	ldr	r2, [pc, #344]	@ (800343c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d053      	beq.n	800338e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a55      	ldr	r2, [pc, #340]	@ (8003440 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d04c      	beq.n	800338a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a53      	ldr	r2, [pc, #332]	@ (8003444 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d045      	beq.n	8003386 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a52      	ldr	r2, [pc, #328]	@ (8003448 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d03e      	beq.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a50      	ldr	r2, [pc, #320]	@ (800344c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d037      	beq.n	800337e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4f      	ldr	r2, [pc, #316]	@ (8003450 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d030      	beq.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4d      	ldr	r2, [pc, #308]	@ (8003454 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d029      	beq.n	8003376 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4c      	ldr	r2, [pc, #304]	@ (8003458 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d022      	beq.n	8003372 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4a      	ldr	r2, [pc, #296]	@ (800345c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d01a      	beq.n	800336c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a49      	ldr	r2, [pc, #292]	@ (8003460 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d012      	beq.n	8003366 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a47      	ldr	r2, [pc, #284]	@ (8003464 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00a      	beq.n	8003360 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a46      	ldr	r2, [pc, #280]	@ (8003468 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d102      	bne.n	800335a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003358:	e01a      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800335a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800335e:	e017      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003360:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003364:	e014      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003366:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800336a:	e011      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800336c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003370:	e00e      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003372:	2340      	movs	r3, #64	@ 0x40
 8003374:	e00c      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003376:	2340      	movs	r3, #64	@ 0x40
 8003378:	e00a      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800337a:	2340      	movs	r3, #64	@ 0x40
 800337c:	e008      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800337e:	2340      	movs	r3, #64	@ 0x40
 8003380:	e006      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003382:	2301      	movs	r3, #1
 8003384:	e004      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003386:	2301      	movs	r3, #1
 8003388:	e002      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800338e:	2301      	movs	r3, #1
 8003390:	4a37      	ldr	r2, [pc, #220]	@ (8003470 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003392:	60d3      	str	r3, [r2, #12]
 8003394:	e141      	b.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	4b35      	ldr	r3, [pc, #212]	@ (8003474 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800339e:	429a      	cmp	r2, r3
 80033a0:	d97c      	bls.n	800349c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a25      	ldr	r2, [pc, #148]	@ (800343c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d073      	beq.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a23      	ldr	r2, [pc, #140]	@ (8003440 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d06c      	beq.n	8003490 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a22      	ldr	r2, [pc, #136]	@ (8003444 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d065      	beq.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a20      	ldr	r2, [pc, #128]	@ (8003448 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d05e      	beq.n	8003488 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1f      	ldr	r2, [pc, #124]	@ (800344c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d057      	beq.n	8003484 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003450 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d050      	beq.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003454 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d049      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003458 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d042      	beq.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d01a      	beq.n	8003432 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a17      	ldr	r2, [pc, #92]	@ (8003460 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d012      	beq.n	800342c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	@ (8003464 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00a      	beq.n	8003426 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a14      	ldr	r2, [pc, #80]	@ (8003468 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d102      	bne.n	8003420 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800341a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800341e:	e03a      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003420:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003424:	e037      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003426:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800342a:	e034      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800342c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003430:	e031      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003432:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003436:	e02e      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003438:	40026000 	.word	0x40026000
 800343c:	40026010 	.word	0x40026010
 8003440:	40026410 	.word	0x40026410
 8003444:	40026070 	.word	0x40026070
 8003448:	40026470 	.word	0x40026470
 800344c:	40026028 	.word	0x40026028
 8003450:	40026428 	.word	0x40026428
 8003454:	40026088 	.word	0x40026088
 8003458:	40026488 	.word	0x40026488
 800345c:	40026040 	.word	0x40026040
 8003460:	40026440 	.word	0x40026440
 8003464:	400260a0 	.word	0x400260a0
 8003468:	400264a0 	.word	0x400264a0
 800346c:	40026458 	.word	0x40026458
 8003470:	40026400 	.word	0x40026400
 8003474:	400260b8 	.word	0x400260b8
 8003478:	2340      	movs	r3, #64	@ 0x40
 800347a:	e00c      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800347c:	2340      	movs	r3, #64	@ 0x40
 800347e:	e00a      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003480:	2340      	movs	r3, #64	@ 0x40
 8003482:	e008      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003484:	2340      	movs	r3, #64	@ 0x40
 8003486:	e006      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003488:	2301      	movs	r3, #1
 800348a:	e004      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800348c:	2301      	movs	r3, #1
 800348e:	e002      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003494:	2301      	movs	r3, #1
 8003496:	4a7b      	ldr	r2, [pc, #492]	@ (8003684 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003498:	6093      	str	r3, [r2, #8]
 800349a:	e0be      	b.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b79      	ldr	r3, [pc, #484]	@ (8003688 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d95c      	bls.n	8003562 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a77      	ldr	r2, [pc, #476]	@ (800368c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d053      	beq.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a76      	ldr	r2, [pc, #472]	@ (8003690 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d04c      	beq.n	8003556 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a74      	ldr	r2, [pc, #464]	@ (8003694 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d045      	beq.n	8003552 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a73      	ldr	r2, [pc, #460]	@ (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d03e      	beq.n	800354e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a71      	ldr	r2, [pc, #452]	@ (800369c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d037      	beq.n	800354a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a70      	ldr	r2, [pc, #448]	@ (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d030      	beq.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6e      	ldr	r2, [pc, #440]	@ (80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d029      	beq.n	8003542 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6d      	ldr	r2, [pc, #436]	@ (80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6b      	ldr	r2, [pc, #428]	@ (80036ac <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01a      	beq.n	8003538 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6a      	ldr	r2, [pc, #424]	@ (80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d012      	beq.n	8003532 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a68      	ldr	r2, [pc, #416]	@ (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00a      	beq.n	800352c <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a67      	ldr	r2, [pc, #412]	@ (80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d102      	bne.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003520:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003524:	e01a      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003526:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800352a:	e017      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800352c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003530:	e014      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003532:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003536:	e011      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003538:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800353c:	e00e      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800353e:	2340      	movs	r3, #64	@ 0x40
 8003540:	e00c      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003542:	2340      	movs	r3, #64	@ 0x40
 8003544:	e00a      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003546:	2340      	movs	r3, #64	@ 0x40
 8003548:	e008      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800354a:	2340      	movs	r3, #64	@ 0x40
 800354c:	e006      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800354e:	2301      	movs	r3, #1
 8003550:	e004      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003552:	2301      	movs	r3, #1
 8003554:	e002      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800355a:	2301      	movs	r3, #1
 800355c:	4a57      	ldr	r2, [pc, #348]	@ (80036bc <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800355e:	60d3      	str	r3, [r2, #12]
 8003560:	e05b      	b.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a49      	ldr	r2, [pc, #292]	@ (800368c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d053      	beq.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a47      	ldr	r2, [pc, #284]	@ (8003690 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d04c      	beq.n	8003610 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a46      	ldr	r2, [pc, #280]	@ (8003694 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d045      	beq.n	800360c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a44      	ldr	r2, [pc, #272]	@ (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d03e      	beq.n	8003608 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a43      	ldr	r2, [pc, #268]	@ (800369c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d037      	beq.n	8003604 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a41      	ldr	r2, [pc, #260]	@ (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d030      	beq.n	8003600 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a40      	ldr	r2, [pc, #256]	@ (80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d029      	beq.n	80035fc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a3e      	ldr	r2, [pc, #248]	@ (80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d022      	beq.n	80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a3d      	ldr	r2, [pc, #244]	@ (80036ac <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01a      	beq.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3b      	ldr	r2, [pc, #236]	@ (80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d012      	beq.n	80035ec <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3a      	ldr	r2, [pc, #232]	@ (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00a      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a38      	ldr	r2, [pc, #224]	@ (80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d102      	bne.n	80035e0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80035da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035de:	e01a      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035e4:	e017      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035ea:	e014      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035f0:	e011      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035f6:	e00e      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035f8:	2340      	movs	r3, #64	@ 0x40
 80035fa:	e00c      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80035fc:	2340      	movs	r3, #64	@ 0x40
 80035fe:	e00a      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003600:	2340      	movs	r3, #64	@ 0x40
 8003602:	e008      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003604:	2340      	movs	r3, #64	@ 0x40
 8003606:	e006      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003608:	2301      	movs	r3, #1
 800360a:	e004      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800360c:	2301      	movs	r3, #1
 800360e:	e002      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003614:	2301      	movs	r3, #1
 8003616:	4a29      	ldr	r2, [pc, #164]	@ (80036bc <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003618:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0216 	orr.w	r2, r2, #22
 8003628:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003638:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0208 	orr.w	r2, r2, #8
 8003658:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e005      	b.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003674:	2302      	movs	r3, #2
 8003676:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003678:	7dfb      	ldrb	r3, [r7, #23]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40026400 	.word	0x40026400
 8003688:	40026058 	.word	0x40026058
 800368c:	40026010 	.word	0x40026010
 8003690:	40026410 	.word	0x40026410
 8003694:	40026070 	.word	0x40026070
 8003698:	40026470 	.word	0x40026470
 800369c:	40026028 	.word	0x40026028
 80036a0:	40026428 	.word	0x40026428
 80036a4:	40026088 	.word	0x40026088
 80036a8:	40026488 	.word	0x40026488
 80036ac:	40026040 	.word	0x40026040
 80036b0:	40026440 	.word	0x40026440
 80036b4:	400260a0 	.word	0x400260a0
 80036b8:	400264a0 	.word	0x400264a0
 80036bc:	40026000 	.word	0x40026000

080036c0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	4613      	mov	r3, r2
 80036cc:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d104      	bne.n	80036de <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	60da      	str	r2, [r3, #12]
 80036dc:	e003      	b.n	80036e6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b40      	cmp	r3, #64	@ 0x40
 8003710:	d108      	bne.n	8003724 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003722:	e007      	b.n	8003734 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	@ 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	e16b      	b.n	8003a34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	f040 815a 	bne.w	8003a2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d005      	beq.n	8003792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378e:	2b02      	cmp	r3, #2
 8003790:	d130      	bne.n	80037f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c8:	2201      	movs	r2, #1
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 0201 	and.w	r2, r3, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d017      	beq.n	8003830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d123      	bne.n	8003884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	08da      	lsrs	r2, r3, #3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3208      	adds	r2, #8
 8003844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	220f      	movs	r2, #15
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	08da      	lsrs	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3208      	adds	r2, #8
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0203 	and.w	r2, r3, #3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80b4 	beq.w	8003a2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b60      	ldr	r3, [pc, #384]	@ (8003a4c <HAL_GPIO_Init+0x30c>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	4a5f      	ldr	r2, [pc, #380]	@ (8003a4c <HAL_GPIO_Init+0x30c>)
 80038d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038d6:	4b5d      	ldr	r3, [pc, #372]	@ (8003a4c <HAL_GPIO_Init+0x30c>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a50 <HAL_GPIO_Init+0x310>)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a52      	ldr	r2, [pc, #328]	@ (8003a54 <HAL_GPIO_Init+0x314>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02b      	beq.n	8003966 <HAL_GPIO_Init+0x226>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a51      	ldr	r2, [pc, #324]	@ (8003a58 <HAL_GPIO_Init+0x318>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d025      	beq.n	8003962 <HAL_GPIO_Init+0x222>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a50      	ldr	r2, [pc, #320]	@ (8003a5c <HAL_GPIO_Init+0x31c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01f      	beq.n	800395e <HAL_GPIO_Init+0x21e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4f      	ldr	r2, [pc, #316]	@ (8003a60 <HAL_GPIO_Init+0x320>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d019      	beq.n	800395a <HAL_GPIO_Init+0x21a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4e      	ldr	r2, [pc, #312]	@ (8003a64 <HAL_GPIO_Init+0x324>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_GPIO_Init+0x216>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4d      	ldr	r2, [pc, #308]	@ (8003a68 <HAL_GPIO_Init+0x328>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00d      	beq.n	8003952 <HAL_GPIO_Init+0x212>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4c      	ldr	r2, [pc, #304]	@ (8003a6c <HAL_GPIO_Init+0x32c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <HAL_GPIO_Init+0x20e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4b      	ldr	r2, [pc, #300]	@ (8003a70 <HAL_GPIO_Init+0x330>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_GPIO_Init+0x20a>
 8003946:	2307      	movs	r3, #7
 8003948:	e00e      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800394a:	2308      	movs	r3, #8
 800394c:	e00c      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800394e:	2306      	movs	r3, #6
 8003950:	e00a      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003952:	2305      	movs	r3, #5
 8003954:	e008      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003956:	2304      	movs	r3, #4
 8003958:	e006      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800395a:	2303      	movs	r3, #3
 800395c:	e004      	b.n	8003968 <HAL_GPIO_Init+0x228>
 800395e:	2302      	movs	r3, #2
 8003960:	e002      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_GPIO_Init+0x228>
 8003966:	2300      	movs	r3, #0
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	f002 0203 	and.w	r2, r2, #3
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	4093      	lsls	r3, r2
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003978:	4935      	ldr	r1, [pc, #212]	@ (8003a50 <HAL_GPIO_Init+0x310>)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	3302      	adds	r3, #2
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003986:	4b3b      	ldr	r3, [pc, #236]	@ (8003a74 <HAL_GPIO_Init+0x334>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039aa:	4a32      	ldr	r2, [pc, #200]	@ (8003a74 <HAL_GPIO_Init+0x334>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b0:	4b30      	ldr	r3, [pc, #192]	@ (8003a74 <HAL_GPIO_Init+0x334>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039d4:	4a27      	ldr	r2, [pc, #156]	@ (8003a74 <HAL_GPIO_Init+0x334>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039da:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <HAL_GPIO_Init+0x334>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003a74 <HAL_GPIO_Init+0x334>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a04:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <HAL_GPIO_Init+0x334>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a28:	4a12      	ldr	r2, [pc, #72]	@ (8003a74 <HAL_GPIO_Init+0x334>)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3301      	adds	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	f67f ae90 	bls.w	800375c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3724      	adds	r7, #36	@ 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40013800 	.word	0x40013800
 8003a54:	40020000 	.word	0x40020000
 8003a58:	40020400 	.word	0x40020400
 8003a5c:	40020800 	.word	0x40020800
 8003a60:	40020c00 	.word	0x40020c00
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40021400 	.word	0x40021400
 8003a6c:	40021800 	.word	0x40021800
 8003a70:	40021c00 	.word	0x40021c00
 8003a74:	40013c00 	.word	0x40013c00

08003a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t pclk1;

  /* Check the I2C handle allocation */


  if (hi2c == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e12b      	b.n	8003ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fb6c 	bl	800117c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	@ 0x24
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003adc:	f002 f9a2 	bl	8005e24 <HAL_RCC_GetPCLK1Freq>
 8003ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4a81      	ldr	r2, [pc, #516]	@ (8003cec <HAL_I2C_Init+0x274>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d807      	bhi.n	8003afc <HAL_I2C_Init+0x84>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a80      	ldr	r2, [pc, #512]	@ (8003cf0 <HAL_I2C_Init+0x278>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bf94      	ite	ls
 8003af4:	2301      	movls	r3, #1
 8003af6:	2300      	movhi	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e006      	b.n	8003b0a <HAL_I2C_Init+0x92>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a7d      	ldr	r2, [pc, #500]	@ (8003cf4 <HAL_I2C_Init+0x27c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	bf94      	ite	ls
 8003b04:	2301      	movls	r3, #1
 8003b06:	2300      	movhi	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0e7      	b.n	8003ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4a78      	ldr	r2, [pc, #480]	@ (8003cf8 <HAL_I2C_Init+0x280>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0c9b      	lsrs	r3, r3, #18
 8003b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a6a      	ldr	r2, [pc, #424]	@ (8003cec <HAL_I2C_Init+0x274>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d802      	bhi.n	8003b4c <HAL_I2C_Init+0xd4>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	e009      	b.n	8003b60 <HAL_I2C_Init+0xe8>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	4a69      	ldr	r2, [pc, #420]	@ (8003cfc <HAL_I2C_Init+0x284>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	3301      	adds	r3, #1
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	495c      	ldr	r1, [pc, #368]	@ (8003cec <HAL_I2C_Init+0x274>)
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	d819      	bhi.n	8003bb4 <HAL_I2C_Init+0x13c>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1e59      	subs	r1, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8e:	1c59      	adds	r1, r3, #1
 8003b90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b94:	400b      	ands	r3, r1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_I2C_Init+0x138>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1e59      	subs	r1, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bae:	e051      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	e04f      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <HAL_I2C_Init+0x168>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e012      	b.n	8003c06 <HAL_I2C_Init+0x18e>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	0099      	lsls	r1, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Init+0x196>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e022      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10e      	bne.n	8003c34 <HAL_I2C_Init+0x1bc>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1e58      	subs	r0, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	440b      	add	r3, r1
 8003c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c32:	e00f      	b.n	8003c54 <HAL_I2C_Init+0x1dc>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	0099      	lsls	r1, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	6809      	ldr	r1, [r1, #0]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6911      	ldr	r1, [r2, #16]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	000186a0 	.word	0x000186a0
 8003cf0:	001e847f 	.word	0x001e847f
 8003cf4:	003d08ff 	.word	0x003d08ff
 8003cf8:	431bde83 	.word	0x431bde83
 8003cfc:	10624dd3 	.word	0x10624dd3

08003d00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7fd fc50 	bl	80015b4 <HAL_GetTick>
 8003d14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	f040 8111 	bne.w	8003f4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2319      	movs	r3, #25
 8003d2e:	2201      	movs	r2, #1
 8003d30:	4988      	ldr	r1, [pc, #544]	@ (8003f54 <HAL_I2C_IsDeviceReady+0x254>)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f912 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e104      	b.n	8003f4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2C_IsDeviceReady+0x50>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e0fd      	b.n	8003f4c <HAL_I2C_IsDeviceReady+0x24c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d007      	beq.n	8003d76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2224      	movs	r2, #36	@ 0x24
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a70      	ldr	r2, [pc, #448]	@ (8003f58 <HAL_I2C_IsDeviceReady+0x258>)
 8003d98:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8d0 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dd0:	d103      	bne.n	8003dda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0b6      	b.n	8003f4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dde:	897b      	ldrh	r3, [r7, #10]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003dee:	f7fd fbe1 	bl	80015b4 <HAL_GetTick>
 8003df2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e22:	e025      	b.n	8003e70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e24:	f7fd fbc6 	bl	80015b4 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <HAL_I2C_IsDeviceReady+0x13a>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	22a0      	movs	r2, #160	@ 0xa0
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e7a:	d005      	beq.n	8003e88 <HAL_I2C_IsDeviceReady+0x188>
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_I2C_IsDeviceReady+0x188>
 8003e82:	7dbb      	ldrb	r3, [r7, #22]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0cd      	beq.n	8003e24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d129      	bne.n	8003ef2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	2319      	movs	r3, #25
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4921      	ldr	r1, [pc, #132]	@ (8003f54 <HAL_I2C_IsDeviceReady+0x254>)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f844 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e036      	b.n	8003f4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e02c      	b.n	8003f4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2319      	movs	r3, #25
 8003f12:	2201      	movs	r2, #1
 8003f14:	490f      	ldr	r1, [pc, #60]	@ (8003f54 <HAL_I2C_IsDeviceReady+0x254>)
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f820 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e012      	b.n	8003f4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	f4ff af32 	bcc.w	8003d9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
  }
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	00100002 	.word	0x00100002
 8003f58:	ffff0000 	.word	0xffff0000

08003f5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f6c:	e048      	b.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d044      	beq.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fd fb1d 	bl	80015b4 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d139      	bne.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d10d      	bne.n	8003fb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	e00c      	b.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	43da      	mvns	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d116      	bne.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e023      	b.n	8004048 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10d      	bne.n	8004026 <I2C_WaitOnFlagUntilTimeout+0xca>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	43da      	mvns	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	e00c      	b.n	8004040 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	43da      	mvns	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	429a      	cmp	r2, r3
 8004044:	d093      	beq.n	8003f6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af02      	add	r7, sp, #8
 8004056:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e101      	b.n	8004266 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f008 fbcd 	bl	800c81c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2203      	movs	r2, #3
 8004086:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004090:	d102      	bne.n	8004098 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f002 fc0c 	bl	80068ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	7c1a      	ldrb	r2, [r3, #16]
 80040aa:	f88d 2000 	strb.w	r2, [sp]
 80040ae:	3304      	adds	r3, #4
 80040b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040b2:	f002 faeb 	bl	800668c <USB_CoreInit>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0ce      	b.n	8004266 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 fc04 	bl	80068dc <USB_SetCurrentMode>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0bf      	b.n	8004266 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	e04a      	b.n	8004182 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	3315      	adds	r3, #21
 80040fc:	2201      	movs	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3314      	adds	r3, #20
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	b298      	uxth	r0, r3
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	332e      	adds	r3, #46	@ 0x2e
 8004128:	4602      	mov	r2, r0
 800412a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3318      	adds	r3, #24
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	331c      	adds	r3, #28
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3320      	adds	r3, #32
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3324      	adds	r3, #36	@ 0x24
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	3301      	adds	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	791b      	ldrb	r3, [r3, #4]
 8004186:	7bfa      	ldrb	r2, [r7, #15]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3af      	bcc.n	80040ec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e044      	b.n	800421c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	3301      	adds	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	429a      	cmp	r2, r3
 8004224:	d3b5      	bcc.n	8004192 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	7c1a      	ldrb	r2, [r3, #16]
 800422e:	f88d 2000 	strb.w	r2, [sp]
 8004232:	3304      	adds	r3, #4
 8004234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004236:	f002 fb9d 	bl	8006974 <USB_DevInit>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e00c      	b.n	8004266 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f003 fbe7 	bl	8007a32 <USB_DevDisconnect>

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_PCD_Start+0x1c>
 8004286:	2302      	movs	r3, #2
 8004288:	e022      	b.n	80042d0 <HAL_PCD_Start+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f002 faee 	bl	8006898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f003 fb95 	bl	80079f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b08d      	sub	sp, #52	@ 0x34
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f003 fc53 	bl	8007b9a <USB_GetMode>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 848c 	bne.w	8004c14 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f003 fbb7 	bl	8007a74 <USB_ReadInterrupts>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8482 	beq.w	8004c12 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f003 fba4 	bl	8007a74 <USB_ReadInterrupts>
 800432c:	4603      	mov	r3, r0
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b02      	cmp	r3, #2
 8004334:	d107      	bne.n	8004346 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f002 0202 	and.w	r2, r2, #2
 8004344:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f003 fb92 	bl	8007a74 <USB_ReadInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b10      	cmp	r3, #16
 8004358:	d161      	bne.n	800441e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699a      	ldr	r2, [r3, #24]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0210 	bic.w	r2, r2, #16
 8004368:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	3304      	adds	r3, #4
 8004388:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004390:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004394:	d124      	bne.n	80043e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d035      	beq.n	800440e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	6a38      	ldr	r0, [r7, #32]
 80043b6:	f003 f9c9 	bl	800774c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043c6:	441a      	add	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d8:	441a      	add	r2, r3
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	615a      	str	r2, [r3, #20]
 80043de:	e016      	b.n	800440e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80043e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80043ea:	d110      	bne.n	800440e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043f2:	2208      	movs	r2, #8
 80043f4:	4619      	mov	r1, r3
 80043f6:	6a38      	ldr	r0, [r7, #32]
 80043f8:	f003 f9a8 	bl	800774c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004408:	441a      	add	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699a      	ldr	r2, [r3, #24]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0210 	orr.w	r2, r2, #16
 800441c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f003 fb26 	bl	8007a74 <USB_ReadInterrupts>
 8004428:	4603      	mov	r3, r0
 800442a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800442e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004432:	f040 80a7 	bne.w	8004584 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f003 fb2b 	bl	8007a9a <USB_ReadDevAllOutEpInterrupt>
 8004444:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004446:	e099      	b.n	800457c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 808e 	beq.w	8004570 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f003 fb4f 	bl	8007b02 <USB_ReadDevOutEPInterrupt>
 8004464:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00c      	beq.n	800448a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800447c:	461a      	mov	r2, r3
 800447e:	2301      	movs	r3, #1
 8004480:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004482:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fea3 	bl	80051d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00c      	beq.n	80044ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a0:	461a      	mov	r2, r3
 80044a2:	2308      	movs	r3, #8
 80044a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 ff79 	bl	80053a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c4:	461a      	mov	r2, r3
 80044c6:	2310      	movs	r3, #16
 80044c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d030      	beq.n	8004536 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044dc:	2b80      	cmp	r3, #128	@ 0x80
 80044de:	d109      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80044f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	3304      	adds	r3, #4
 8004508:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	78db      	ldrb	r3, [r3, #3]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d108      	bne.n	8004524 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	b2db      	uxtb	r3, r3
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f008 fa82 	bl	800ca28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004530:	461a      	mov	r2, r3
 8004532:	2302      	movs	r3, #2
 8004534:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800454c:	461a      	mov	r2, r3
 800454e:	2320      	movs	r3, #32
 8004550:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d009      	beq.n	8004570 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004568:	461a      	mov	r2, r3
 800456a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800456e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	3301      	adds	r3, #1
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800457c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457e:	2b00      	cmp	r3, #0
 8004580:	f47f af62 	bne.w	8004448 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f003 fa73 	bl	8007a74 <USB_ReadInterrupts>
 800458e:	4603      	mov	r3, r0
 8004590:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004594:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004598:	f040 80db 	bne.w	8004752 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f003 fa94 	bl	8007ace <USB_ReadDevAllInEpInterrupt>
 80045a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80045ac:	e0cd      	b.n	800474a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80c2 	beq.w	800473e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f003 faba 	bl	8007b3e <USB_ReadDevInEPInterrupt>
 80045ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d057      	beq.n	8004686 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	2201      	movs	r2, #1
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69f9      	ldr	r1, [r7, #28]
 80045f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045f6:	4013      	ands	r3, r2
 80045f8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004606:	461a      	mov	r2, r3
 8004608:	2301      	movs	r3, #1
 800460a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	799b      	ldrb	r3, [r3, #6]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d132      	bne.n	800467a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	3320      	adds	r3, #32
 8004624:	6819      	ldr	r1, [r3, #0]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4403      	add	r3, r0
 8004634:	331c      	adds	r3, #28
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4419      	add	r1, r3
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4403      	add	r3, r0
 8004648:	3320      	adds	r3, #32
 800464a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	2b00      	cmp	r3, #0
 8004650:	d113      	bne.n	800467a <HAL_PCD_IRQHandler+0x3a2>
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	3324      	adds	r3, #36	@ 0x24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d108      	bne.n	800467a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004672:	461a      	mov	r2, r3
 8004674:	2101      	movs	r1, #1
 8004676:	f003 fac1 	bl	8007bfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	b2db      	uxtb	r3, r3
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f008 f94c 	bl	800c91e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800469c:	461a      	mov	r2, r3
 800469e:	2308      	movs	r3, #8
 80046a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b8:	461a      	mov	r2, r3
 80046ba:	2310      	movs	r3, #16
 80046bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d4:	461a      	mov	r2, r3
 80046d6:	2340      	movs	r3, #64	@ 0x40
 80046d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d023      	beq.n	800472c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046e6:	6a38      	ldr	r0, [r7, #32]
 80046e8:	f002 faa8 	bl	8006c3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	3310      	adds	r3, #16
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	4413      	add	r3, r2
 80046fc:	3304      	adds	r3, #4
 80046fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	78db      	ldrb	r3, [r3, #3]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d108      	bne.n	800471a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	b2db      	uxtb	r3, r3
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f008 f999 	bl	800ca4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004726:	461a      	mov	r2, r3
 8004728:	2302      	movs	r3, #2
 800472a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004736:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fcbd 	bl	80050b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	3301      	adds	r3, #1
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800474a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	f47f af2e 	bne.w	80045ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f003 f98c 	bl	8007a74 <USB_ReadInterrupts>
 800475c:	4603      	mov	r3, r0
 800475e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004762:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004766:	d122      	bne.n	80047ae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004782:	2b01      	cmp	r3, #1
 8004784:	d108      	bne.n	8004798 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800478e:	2100      	movs	r1, #0
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fea3 	bl	80054dc <HAL_PCDEx_LPM_Callback>
 8004796:	e002      	b.n	800479e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f008 f937 	bl	800ca0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80047ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f003 f95e 	bl	8007a74 <USB_ReadInterrupts>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c2:	d112      	bne.n	80047ea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d102      	bne.n	80047da <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f008 f8f3 	bl	800c9c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80047e8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f003 f940 	bl	8007a74 <USB_ReadInterrupts>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047fe:	f040 80b7 	bne.w	8004970 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2110      	movs	r1, #16
 800481c:	4618      	mov	r0, r3
 800481e:	f002 fa0d 	bl	8006c3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004822:	2300      	movs	r3, #0
 8004824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004826:	e046      	b.n	80048b6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004834:	461a      	mov	r2, r3
 8004836:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800483a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004856:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800485a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800485c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004868:	461a      	mov	r2, r3
 800486a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800486e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800488a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800488e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b2:	3301      	adds	r3, #1
 80048b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	791b      	ldrb	r3, [r3, #4]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048be:	4293      	cmp	r3, r2
 80048c0:	d3b2      	bcc.n	8004828 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048d0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80048d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	7bdb      	ldrb	r3, [r3, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048ee:	f043 030b 	orr.w	r3, r3, #11
 80048f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004904:	f043 030b 	orr.w	r3, r3, #11
 8004908:	6453      	str	r3, [r2, #68]	@ 0x44
 800490a:	e015      	b.n	8004938 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800491a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800491e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004922:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004932:	f043 030b 	orr.w	r3, r3, #11
 8004936:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004946:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800494a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800495a:	461a      	mov	r2, r3
 800495c:	f003 f94e 	bl	8007bfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800496e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f003 f87d 	bl	8007a74 <USB_ReadInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004984:	d123      	bne.n	80049ce <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f003 f913 	bl	8007bb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f002 f9ca 	bl	8006d2e <USB_GetDevSpeed>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681c      	ldr	r4, [r3, #0]
 80049a6:	f001 fa31 	bl	8005e0c <HAL_RCC_GetHCLKFreq>
 80049aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049b0:	461a      	mov	r2, r3
 80049b2:	4620      	mov	r0, r4
 80049b4:	f001 fece 	bl	8006754 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f007 ffd8 	bl	800c96e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80049cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f003 f84e 	bl	8007a74 <USB_ReadInterrupts>
 80049d8:	4603      	mov	r3, r0
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d10a      	bne.n	80049f8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f007 ffb5 	bl	800c952 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f002 0208 	and.w	r2, r2, #8
 80049f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f003 f839 	bl	8007a74 <USB_ReadInterrupts>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a08:	2b80      	cmp	r3, #128	@ 0x80
 8004a0a:	d123      	bne.n	8004a54 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a18:	2301      	movs	r3, #1
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a1c:	e014      	b.n	8004a48 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d105      	bne.n	8004a42 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fb0a 	bl	8005056 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	3301      	adds	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	791b      	ldrb	r3, [r3, #4]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d3e4      	bcc.n	8004a1e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f003 f80b 	bl	8007a74 <USB_ReadInterrupts>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a68:	d13c      	bne.n	8004ae4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a6e:	e02b      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	3318      	adds	r3, #24
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d115      	bne.n	8004ac2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a96:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	da12      	bge.n	8004ac2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	3317      	adds	r3, #23
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 faca 	bl	8005056 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	791b      	ldrb	r3, [r3, #4]
 8004acc:	461a      	mov	r2, r3
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d3cd      	bcc.n	8004a70 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f002 ffc3 	bl	8007a74 <USB_ReadInterrupts>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004af4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004af8:	d156      	bne.n	8004ba8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004afa:	2301      	movs	r3, #1
 8004afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afe:	e045      	b.n	8004b8c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d12e      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b28:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da2b      	bge.n	8004b86 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	0c1a      	lsrs	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004b38:	4053      	eors	r3, r2
 8004b3a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d121      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b82:	6053      	str	r3, [r2, #4]
            break;
 8004b84:	e008      	b.n	8004b98 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	3301      	adds	r3, #1
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	791b      	ldrb	r3, [r3, #4]
 8004b90:	461a      	mov	r2, r3
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d3b3      	bcc.n	8004b00 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f002 ff61 	bl	8007a74 <USB_ReadInterrupts>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bbc:	d10a      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f007 ff56 	bl	800ca70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f002 ff4b 	bl	8007a74 <USB_ReadInterrupts>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d115      	bne.n	8004c14 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f007 ff46 	bl	800ca8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	e000      	b.n	8004c14 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004c12:	bf00      	nop
    }
  }
}
 8004c14:	3734      	adds	r7, #52	@ 0x34
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd90      	pop	{r4, r7, pc}

08004c1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_PCD_SetAddress+0x1a>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e012      	b.n	8004c5a <HAL_PCD_SetAddress+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f002 feaa 	bl	80079a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	4608      	mov	r0, r1
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4603      	mov	r3, r0
 8004c72:	70fb      	strb	r3, [r7, #3]
 8004c74:	460b      	mov	r3, r1
 8004c76:	803b      	strh	r3, [r7, #0]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	da0f      	bge.n	8004ca8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	f003 020f 	and.w	r2, r3, #15
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	3310      	adds	r3, #16
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	705a      	strb	r2, [r3, #1]
 8004ca6:	e00f      	b.n	8004cc8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 020f 	and.w	r2, r3, #15
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004cd4:	883b      	ldrh	r3, [r7, #0]
 8004cd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	78ba      	ldrb	r2, [r7, #2]
 8004ce2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cf6:	78bb      	ldrb	r3, [r7, #2]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d102      	bne.n	8004d02 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_PCD_EP_Open+0xae>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e00e      	b.n	8004d2e <HAL_PCD_EP_Open+0xcc>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f002 f82a 	bl	8006d78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004d2c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	da0f      	bge.n	8004d6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	f003 020f 	and.w	r2, r3, #15
 8004d50:	4613      	mov	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	3310      	adds	r3, #16
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3304      	adds	r3, #4
 8004d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	705a      	strb	r2, [r3, #1]
 8004d68:	e00f      	b.n	8004d8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	4613      	mov	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4413      	add	r3, r2
 8004d80:	3304      	adds	r3, #4
 8004d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_PCD_EP_Close+0x6e>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e00e      	b.n	8004dc2 <HAL_PCD_EP_Close+0x8c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68f9      	ldr	r1, [r7, #12]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f002 f868 	bl	8006e88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b086      	sub	sp, #24
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dda:	7afb      	ldrb	r3, [r7, #11]
 8004ddc:	f003 020f 	and.w	r2, r3, #15
 8004de0:	4613      	mov	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	3304      	adds	r3, #4
 8004df2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e0c:	7afb      	ldrb	r3, [r7, #11]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	799b      	ldrb	r3, [r3, #6]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d102      	bne.n	8004e26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	799b      	ldrb	r3, [r3, #6]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	f002 f905 	bl	8007040 <USB_EPStartXfer>

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	f003 020f 	and.w	r2, r3, #15
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004e62:	681b      	ldr	r3, [r3, #0]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e80:	7afb      	ldrb	r3, [r7, #11]
 8004e82:	f003 020f 	and.w	r2, r3, #15
 8004e86:	4613      	mov	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	3310      	adds	r3, #16
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	3304      	adds	r3, #4
 8004e96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2201      	movs	r2, #1
 8004eae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eb0:	7afb      	ldrb	r3, [r7, #11]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	799b      	ldrb	r3, [r3, #6]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d102      	bne.n	8004eca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	799b      	ldrb	r3, [r3, #6]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6979      	ldr	r1, [r7, #20]
 8004ed6:	f002 f8b3 	bl	8007040 <USB_EPStartXfer>

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	7912      	ldrb	r2, [r2, #4]
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e04f      	b.n	8004fa2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	da0f      	bge.n	8004f2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f003 020f 	and.w	r2, r3, #15
 8004f10:	4613      	mov	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	3310      	adds	r3, #16
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	3304      	adds	r3, #4
 8004f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	705a      	strb	r2, [r3, #1]
 8004f28:	e00d      	b.n	8004f46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_PCD_EP_SetStall+0x82>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e01d      	b.n	8004fa2 <HAL_PCD_EP_SetStall+0xbe>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f002 fc41 	bl	80077fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	7999      	ldrb	r1, [r3, #6]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f92:	461a      	mov	r2, r3
 8004f94:	f002 fe32 	bl	8007bfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	7912      	ldrb	r2, [r2, #4]
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e042      	b.n	800504e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	da0f      	bge.n	8004ff0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	f003 020f 	and.w	r2, r3, #15
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	3310      	adds	r3, #16
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	705a      	strb	r2, [r3, #1]
 8004fee:	e00f      	b.n	8005010 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	f003 020f 	and.w	r2, r3, #15
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4413      	add	r3, r2
 8005006:	3304      	adds	r3, #4
 8005008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	b2da      	uxtb	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_PCD_EP_ClrStall+0x86>
 800502c:	2302      	movs	r3, #2
 800502e:	e00e      	b.n	800504e <HAL_PCD_EP_ClrStall+0xa4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68f9      	ldr	r1, [r7, #12]
 800503e:	4618      	mov	r0, r3
 8005040:	f002 fc4a 	bl	80078d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005066:	2b00      	cmp	r3, #0
 8005068:	da0c      	bge.n	8005084 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	f003 020f 	and.w	r2, r3, #15
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	3310      	adds	r3, #16
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	3304      	adds	r3, #4
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e00c      	b.n	800509e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	f003 020f 	and.w	r2, r3, #15
 800508a:	4613      	mov	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	3304      	adds	r3, #4
 800509c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f002 fa69 	bl	800757c <USB_EPStopXfer>
 80050aa:	4603      	mov	r3, r0
 80050ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80050ae:	7afb      	ldrb	r3, [r7, #11]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	@ 0x28
 80050bc:	af02      	add	r7, sp, #8
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	3310      	adds	r3, #16
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4413      	add	r3, r2
 80050dc:	3304      	adds	r3, #4
 80050de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d901      	bls.n	80050f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e06b      	b.n	80051c8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	429a      	cmp	r2, r3
 8005104:	d902      	bls.n	800510c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	3303      	adds	r3, #3
 8005110:	089b      	lsrs	r3, r3, #2
 8005112:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005114:	e02a      	b.n	800516c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	429a      	cmp	r2, r3
 800512a:	d902      	bls.n	8005132 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3303      	adds	r3, #3
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	68d9      	ldr	r1, [r3, #12]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	4603      	mov	r3, r0
 800514e:	6978      	ldr	r0, [r7, #20]
 8005150:	f002 fabe 	bl	80076d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	441a      	add	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	441a      	add	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	429a      	cmp	r2, r3
 8005180:	d809      	bhi.n	8005196 <PCD_WriteEmptyTxFifo+0xde>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	695a      	ldr	r2, [r3, #20]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800518a:	429a      	cmp	r2, r3
 800518c:	d203      	bcs.n	8005196 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1bf      	bne.n	8005116 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d811      	bhi.n	80051c6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	2201      	movs	r2, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	6939      	ldr	r1, [r7, #16]
 80051be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051c2:	4013      	ands	r3, r2
 80051c4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	333c      	adds	r3, #60	@ 0x3c
 80051e8:	3304      	adds	r3, #4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	799b      	ldrb	r3, [r3, #6]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d17b      	bne.n	80052fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d015      	beq.n	800523c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	4a61      	ldr	r2, [pc, #388]	@ (8005398 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	f240 80b9 	bls.w	800538c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80b3 	beq.w	800538c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005232:	461a      	mov	r2, r3
 8005234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005238:	6093      	str	r3, [r2, #8]
 800523a:	e0a7      	b.n	800538c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005252:	461a      	mov	r2, r3
 8005254:	2320      	movs	r3, #32
 8005256:	6093      	str	r3, [r2, #8]
 8005258:	e098      	b.n	800538c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	f040 8093 	bne.w	800538c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	4a4b      	ldr	r2, [pc, #300]	@ (8005398 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d90f      	bls.n	800528e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005284:	461a      	mov	r2, r3
 8005286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800528a:	6093      	str	r3, [r2, #8]
 800528c:	e07e      	b.n	800538c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4413      	add	r3, r2
 80052a0:	3304      	adds	r3, #4
 80052a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	0159      	lsls	r1, r3, #5
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	440b      	add	r3, r1
 80052b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d114      	bne.n	80052f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052d8:	461a      	mov	r2, r3
 80052da:	2101      	movs	r1, #1
 80052dc:	f002 fc8e 	bl	8007bfc <USB_EP0_OutStart>
 80052e0:	e006      	b.n	80052f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	441a      	add	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f007 faf6 	bl	800c8e8 <HAL_PCD_DataOutStageCallback>
 80052fc:	e046      	b.n	800538c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	4a26      	ldr	r2, [pc, #152]	@ (800539c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d124      	bne.n	8005350 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800531c:	461a      	mov	r2, r3
 800531e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005322:	6093      	str	r3, [r2, #8]
 8005324:	e032      	b.n	800538c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533c:	461a      	mov	r2, r3
 800533e:	2320      	movs	r3, #32
 8005340:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f007 facd 	bl	800c8e8 <HAL_PCD_DataOutStageCallback>
 800534e:	e01d      	b.n	800538c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d114      	bne.n	8005380 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	4613      	mov	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d108      	bne.n	8005380 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005378:	461a      	mov	r2, r3
 800537a:	2100      	movs	r1, #0
 800537c:	f002 fc3e 	bl	8007bfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f007 faae 	bl	800c8e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	4f54300a 	.word	0x4f54300a
 800539c:	4f54310a 	.word	0x4f54310a

080053a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	333c      	adds	r3, #60	@ 0x3c
 80053b8:	3304      	adds	r3, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a15      	ldr	r2, [pc, #84]	@ (8005428 <PCD_EP_OutSetupPacket_int+0x88>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d90e      	bls.n	80053f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d009      	beq.n	80053f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ec:	461a      	mov	r2, r3
 80053ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f007 fa65 	bl	800c8c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005428 <PCD_EP_OutSetupPacket_int+0x88>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d90c      	bls.n	800541c <PCD_EP_OutSetupPacket_int+0x7c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	799b      	ldrb	r3, [r3, #6]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d108      	bne.n	800541c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005414:	461a      	mov	r2, r3
 8005416:	2101      	movs	r1, #1
 8005418:	f002 fbf0 	bl	8007bfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	4f54300a 	.word	0x4f54300a

0800542c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
 8005438:	4613      	mov	r3, r2
 800543a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d107      	bne.n	800545a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800544a:	883b      	ldrh	r3, [r7, #0]
 800544c:	0419      	lsls	r1, r3, #16
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	430a      	orrs	r2, r1
 8005456:	629a      	str	r2, [r3, #40]	@ 0x28
 8005458:	e028      	b.n	80054ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4413      	add	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005468:	2300      	movs	r3, #0
 800546a:	73fb      	strb	r3, [r7, #15]
 800546c:	e00d      	b.n	800548a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	3340      	adds	r3, #64	@ 0x40
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4413      	add	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	3301      	adds	r3, #1
 8005488:	73fb      	strb	r3, [r7, #15]
 800548a:	7bfa      	ldrb	r2, [r7, #15]
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	3b01      	subs	r3, #1
 8005490:	429a      	cmp	r2, r3
 8005492:	d3ec      	bcc.n	800546e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005494:	883b      	ldrh	r3, [r7, #0]
 8005496:	0418      	lsls	r0, r3, #16
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	3b01      	subs	r3, #1
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	4302      	orrs	r2, r0
 80054a4:	3340      	adds	r3, #64	@ 0x40
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	460b      	mov	r3, r1
 80054c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	887a      	ldrh	r2, [r7, #2]
 80054cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e267      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d075      	beq.n	80055fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005512:	4b88      	ldr	r3, [pc, #544]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b04      	cmp	r3, #4
 800551c:	d00c      	beq.n	8005538 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551e:	4b85      	ldr	r3, [pc, #532]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005526:	2b08      	cmp	r3, #8
 8005528:	d112      	bne.n	8005550 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800552a:	4b82      	ldr	r3, [pc, #520]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005536:	d10b      	bne.n	8005550 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005538:	4b7e      	ldr	r3, [pc, #504]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d05b      	beq.n	80055fc <HAL_RCC_OscConfig+0x108>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d157      	bne.n	80055fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e242      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005558:	d106      	bne.n	8005568 <HAL_RCC_OscConfig+0x74>
 800555a:	4b76      	ldr	r3, [pc, #472]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a75      	ldr	r2, [pc, #468]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e01d      	b.n	80055a4 <HAL_RCC_OscConfig+0xb0>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0x98>
 8005572:	4b70      	ldr	r3, [pc, #448]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6f      	ldr	r2, [pc, #444]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4b6d      	ldr	r3, [pc, #436]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a6c      	ldr	r2, [pc, #432]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e00b      	b.n	80055a4 <HAL_RCC_OscConfig+0xb0>
 800558c:	4b69      	ldr	r3, [pc, #420]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a68      	ldr	r2, [pc, #416]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b66      	ldr	r3, [pc, #408]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a65      	ldr	r2, [pc, #404]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 800559e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fc f802 	bl	80015b4 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fb fffe 	bl	80015b4 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	@ 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e207      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0xc0>
 80055d2:	e014      	b.n	80055fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d4:	f7fb ffee 	bl	80015b4 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055dc:	f7fb ffea 	bl	80015b4 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	@ 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e1f3      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ee:	4b51      	ldr	r3, [pc, #324]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0xe8>
 80055fa:	e000      	b.n	80055fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d063      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800560a:	4b4a      	ldr	r3, [pc, #296]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005616:	4b47      	ldr	r3, [pc, #284]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800561e:	2b08      	cmp	r3, #8
 8005620:	d11c      	bne.n	800565c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005622:	4b44      	ldr	r3, [pc, #272]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d116      	bne.n	800565c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562e:	4b41      	ldr	r3, [pc, #260]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_RCC_OscConfig+0x152>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d001      	beq.n	8005646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e1c7      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005646:	4b3b      	ldr	r3, [pc, #236]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	4937      	ldr	r1, [pc, #220]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565a:	e03a      	b.n	80056d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d020      	beq.n	80056a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005664:	4b34      	ldr	r3, [pc, #208]	@ (8005738 <HAL_RCC_OscConfig+0x244>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fb ffa3 	bl	80015b4 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005672:	f7fb ff9f 	bl	80015b4 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e1a8      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005684:	4b2b      	ldr	r3, [pc, #172]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005690:	4b28      	ldr	r3, [pc, #160]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4925      	ldr	r1, [pc, #148]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
 80056a4:	e015      	b.n	80056d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a6:	4b24      	ldr	r3, [pc, #144]	@ (8005738 <HAL_RCC_OscConfig+0x244>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fb ff82 	bl	80015b4 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b4:	f7fb ff7e 	bl	80015b4 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e187      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d036      	beq.n	800574c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d016      	beq.n	8005714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e6:	4b15      	ldr	r3, [pc, #84]	@ (800573c <HAL_RCC_OscConfig+0x248>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ec:	f7fb ff62 	bl	80015b4 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f4:	f7fb ff5e 	bl	80015b4 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e167      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005706:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <HAL_RCC_OscConfig+0x240>)
 8005708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x200>
 8005712:	e01b      	b.n	800574c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005714:	4b09      	ldr	r3, [pc, #36]	@ (800573c <HAL_RCC_OscConfig+0x248>)
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571a:	f7fb ff4b 	bl	80015b4 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005720:	e00e      	b.n	8005740 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005722:	f7fb ff47 	bl	80015b4 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d907      	bls.n	8005740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e150      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
 8005734:	40023800 	.word	0x40023800
 8005738:	42470000 	.word	0x42470000
 800573c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005740:	4b88      	ldr	r3, [pc, #544]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ea      	bne.n	8005722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8097 	beq.w	8005888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800575e:	4b81      	ldr	r3, [pc, #516]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	4b7d      	ldr	r3, [pc, #500]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	4a7c      	ldr	r2, [pc, #496]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005778:	6413      	str	r3, [r2, #64]	@ 0x40
 800577a:	4b7a      	ldr	r3, [pc, #488]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005786:	2301      	movs	r3, #1
 8005788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578a:	4b77      	ldr	r3, [pc, #476]	@ (8005968 <HAL_RCC_OscConfig+0x474>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d118      	bne.n	80057c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005796:	4b74      	ldr	r3, [pc, #464]	@ (8005968 <HAL_RCC_OscConfig+0x474>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a73      	ldr	r2, [pc, #460]	@ (8005968 <HAL_RCC_OscConfig+0x474>)
 800579c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a2:	f7fb ff07 	bl	80015b4 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057aa:	f7fb ff03 	bl	80015b4 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e10c      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005968 <HAL_RCC_OscConfig+0x474>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <HAL_RCC_OscConfig+0x2ea>
 80057d0:	4b64      	ldr	r3, [pc, #400]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d4:	4a63      	ldr	r2, [pc, #396]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	6713      	str	r3, [r2, #112]	@ 0x70
 80057dc:	e01c      	b.n	8005818 <HAL_RCC_OscConfig+0x324>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0x30c>
 80057e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 80057ec:	f043 0304 	orr.w	r3, r3, #4
 80057f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f6:	4a5b      	ldr	r2, [pc, #364]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057fe:	e00b      	b.n	8005818 <HAL_RCC_OscConfig+0x324>
 8005800:	4b58      	ldr	r3, [pc, #352]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005804:	4a57      	ldr	r2, [pc, #348]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	6713      	str	r3, [r2, #112]	@ 0x70
 800580c:	4b55      	ldr	r3, [pc, #340]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005810:	4a54      	ldr	r2, [pc, #336]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005812:	f023 0304 	bic.w	r3, r3, #4
 8005816:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d015      	beq.n	800584c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fb fec8 	bl	80015b4 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005826:	e00a      	b.n	800583e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005828:	f7fb fec4 	bl	80015b4 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e0cb      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583e:	4b49      	ldr	r3, [pc, #292]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0ee      	beq.n	8005828 <HAL_RCC_OscConfig+0x334>
 800584a:	e014      	b.n	8005876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800584c:	f7fb feb2 	bl	80015b4 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005852:	e00a      	b.n	800586a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005854:	f7fb feae 	bl	80015b4 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0b5      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586a:	4b3e      	ldr	r3, [pc, #248]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1ee      	bne.n	8005854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d105      	bne.n	8005888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800587c:	4b39      	ldr	r3, [pc, #228]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 800587e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005880:	4a38      	ldr	r2, [pc, #224]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005886:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80a1 	beq.w	80059d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005892:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b08      	cmp	r3, #8
 800589c:	d05c      	beq.n	8005958 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d141      	bne.n	800592a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a6:	4b31      	ldr	r3, [pc, #196]	@ (800596c <HAL_RCC_OscConfig+0x478>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fb fe82 	bl	80015b4 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b4:	f7fb fe7e 	bl	80015b4 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e087      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c6:	4b27      	ldr	r3, [pc, #156]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69da      	ldr	r2, [r3, #28]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	3b01      	subs	r3, #1
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	491b      	ldr	r1, [pc, #108]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058fc:	4b1b      	ldr	r3, [pc, #108]	@ (800596c <HAL_RCC_OscConfig+0x478>)
 80058fe:	2201      	movs	r2, #1
 8005900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005902:	f7fb fe57 	bl	80015b4 <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590a:	f7fb fe53 	bl	80015b4 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e05c      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591c:	4b11      	ldr	r3, [pc, #68]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f0      	beq.n	800590a <HAL_RCC_OscConfig+0x416>
 8005928:	e054      	b.n	80059d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592a:	4b10      	ldr	r3, [pc, #64]	@ (800596c <HAL_RCC_OscConfig+0x478>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fb fe40 	bl	80015b4 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005938:	f7fb fe3c 	bl	80015b4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e045      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594a:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <HAL_RCC_OscConfig+0x470>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x444>
 8005956:	e03d      	b.n	80059d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d107      	bne.n	8005970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e038      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
 8005964:	40023800 	.word	0x40023800
 8005968:	40007000 	.word	0x40007000
 800596c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005970:	4b1b      	ldr	r3, [pc, #108]	@ (80059e0 <HAL_RCC_OscConfig+0x4ec>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d028      	beq.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d121      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d11a      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d111      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	3b01      	subs	r3, #1
 80059ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d107      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d001      	beq.n	80059d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40023800 	.word	0x40023800

080059e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0cc      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059f8:	4b68      	ldr	r3, [pc, #416]	@ (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d90c      	bls.n	8005a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a06:	4b65      	ldr	r3, [pc, #404]	@ (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b63      	ldr	r3, [pc, #396]	@ (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0b8      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d020      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a38:	4b59      	ldr	r3, [pc, #356]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4a58      	ldr	r2, [pc, #352]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a50:	4b53      	ldr	r3, [pc, #332]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4a52      	ldr	r2, [pc, #328]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a5c:	4b50      	ldr	r3, [pc, #320]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	494d      	ldr	r1, [pc, #308]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d044      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a82:	4b47      	ldr	r3, [pc, #284]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d119      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e07f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d003      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d107      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e06f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e067      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ac2:	4b37      	ldr	r3, [pc, #220]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f023 0203 	bic.w	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	4934      	ldr	r1, [pc, #208]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ad4:	f7fb fd6e 	bl	80015b4 <HAL_GetTick>
 8005ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ada:	e00a      	b.n	8005af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005adc:	f7fb fd6a 	bl	80015b4 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e04f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af2:	4b2b      	ldr	r3, [pc, #172]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 020c 	and.w	r2, r3, #12
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d1eb      	bne.n	8005adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b04:	4b25      	ldr	r3, [pc, #148]	@ (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d20c      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b22      	ldr	r3, [pc, #136]	@ (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b20      	ldr	r3, [pc, #128]	@ (8005b9c <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e032      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b38:	4b19      	ldr	r3, [pc, #100]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4916      	ldr	r1, [pc, #88]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b56:	4b12      	ldr	r3, [pc, #72]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	490e      	ldr	r1, [pc, #56]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b6a:	f000 f889 	bl	8005c80 <HAL_RCC_GetSysClockFreq>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	490a      	ldr	r1, [pc, #40]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b7c:	5ccb      	ldrb	r3, [r1, r3]
 8005b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b82:	4a09      	ldr	r2, [pc, #36]	@ (8005ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b86:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <HAL_RCC_ClockConfig+0x1c8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fb fcce 	bl	800152c <HAL_InitTick>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40023c00 	.word	0x40023c00
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	0800e124 	.word	0x0800e124
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	20000004 	.word	0x20000004

08005bb0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08c      	sub	sp, #48	@ 0x30
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d129      	bne.n	8005c16 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	4a2a      	ldr	r2, [pc, #168]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bd2:	4b28      	ldr	r3, [pc, #160]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005bde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be4:	2302      	movs	r3, #2
 8005be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be8:	2303      	movs	r3, #3
 8005bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005bf4:	f107 031c 	add.w	r3, r7, #28
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	481f      	ldr	r0, [pc, #124]	@ (8005c78 <HAL_RCC_MCOConfig+0xc8>)
 8005bfc:	f7fd fda0 	bl	8003740 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005c00:	4b1c      	ldr	r3, [pc, #112]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	4919      	ldr	r1, [pc, #100]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005c14:	e029      	b.n	8005c6a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	4b16      	ldr	r3, [pc, #88]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	4a15      	ldr	r2, [pc, #84]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005c20:	f043 0304 	orr.w	r3, r3, #4
 8005c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c26:	4b13      	ldr	r3, [pc, #76]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005c44:	2300      	movs	r3, #0
 8005c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005c48:	f107 031c 	add.w	r3, r7, #28
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	480b      	ldr	r0, [pc, #44]	@ (8005c7c <HAL_RCC_MCOConfig+0xcc>)
 8005c50:	f7fd fd76 	bl	8003740 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005c54:	4b07      	ldr	r3, [pc, #28]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	00d9      	lsls	r1, r3, #3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	430b      	orrs	r3, r1
 8005c64:	4903      	ldr	r1, [pc, #12]	@ (8005c74 <HAL_RCC_MCOConfig+0xc4>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	608b      	str	r3, [r1, #8]
}
 8005c6a:	bf00      	nop
 8005c6c:	3730      	adds	r7, #48	@ 0x30
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40023800 	.word	0x40023800
 8005c78:	40020000 	.word	0x40020000
 8005c7c:	40020800 	.word	0x40020800

08005c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c84:	b090      	sub	sp, #64	@ 0x40
 8005c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c98:	4b59      	ldr	r3, [pc, #356]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 030c 	and.w	r3, r3, #12
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d00d      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	f200 80a1 	bhi.w	8005dec <HAL_RCC_GetSysClockFreq+0x16c>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0x3a>
 8005cb2:	e09b      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cb4:	4b53      	ldr	r3, [pc, #332]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cb8:	e09b      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cba:	4b53      	ldr	r3, [pc, #332]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cbe:	e098      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cca:	4b4d      	ldr	r3, [pc, #308]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d028      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	099b      	lsrs	r3, r3, #6
 8005cdc:	2200      	movs	r2, #0
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4b47      	ldr	r3, [pc, #284]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cec:	fb03 f201 	mul.w	r2, r3, r1
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	fb00 f303 	mul.w	r3, r0, r3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	4a43      	ldr	r2, [pc, #268]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cfa:	fba0 1202 	umull	r1, r2, r0, r2
 8005cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d00:	460a      	mov	r2, r1
 8005d02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d06:	4413      	add	r3, r2
 8005d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	61fa      	str	r2, [r7, #28]
 8005d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005d1a:	f7fa fab1 	bl	8000280 <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4613      	mov	r3, r2
 8005d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d26:	e053      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d28:	4b35      	ldr	r3, [pc, #212]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	099b      	lsrs	r3, r3, #6
 8005d2e:	2200      	movs	r2, #0
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	617a      	str	r2, [r7, #20]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d3a:	f04f 0b00 	mov.w	fp, #0
 8005d3e:	4652      	mov	r2, sl
 8005d40:	465b      	mov	r3, fp
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	f04f 0100 	mov.w	r1, #0
 8005d4a:	0159      	lsls	r1, r3, #5
 8005d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d50:	0150      	lsls	r0, r2, #5
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	ebb2 080a 	subs.w	r8, r2, sl
 8005d5a:	eb63 090b 	sbc.w	r9, r3, fp
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d72:	ebb2 0408 	subs.w	r4, r2, r8
 8005d76:	eb63 0509 	sbc.w	r5, r3, r9
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	00eb      	lsls	r3, r5, #3
 8005d84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d88:	00e2      	lsls	r2, r4, #3
 8005d8a:	4614      	mov	r4, r2
 8005d8c:	461d      	mov	r5, r3
 8005d8e:	eb14 030a 	adds.w	r3, r4, sl
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	eb45 030b 	adc.w	r3, r5, fp
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	f04f 0200 	mov.w	r2, #0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005da6:	4629      	mov	r1, r5
 8005da8:	028b      	lsls	r3, r1, #10
 8005daa:	4621      	mov	r1, r4
 8005dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005db0:	4621      	mov	r1, r4
 8005db2:	028a      	lsls	r2, r1, #10
 8005db4:	4610      	mov	r0, r2
 8005db6:	4619      	mov	r1, r3
 8005db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dba:	2200      	movs	r2, #0
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	60fa      	str	r2, [r7, #12]
 8005dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dc4:	f7fa fa5c 	bl	8000280 <__aeabi_uldivmod>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4613      	mov	r3, r2
 8005dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	3301      	adds	r3, #1
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005de0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005dea:	e002      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dec:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8005dee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3740      	adds	r7, #64	@ 0x40
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023800 	.word	0x40023800
 8005e04:	00f42400 	.word	0x00f42400
 8005e08:	017d7840 	.word	0x017d7840

08005e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e10:	4b03      	ldr	r3, [pc, #12]	@ (8005e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e12:	681b      	ldr	r3, [r3, #0]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000000 	.word	0x20000000

08005e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e28:	f7ff fff0 	bl	8005e0c <HAL_RCC_GetHCLKFreq>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	4b05      	ldr	r3, [pc, #20]	@ (8005e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	0a9b      	lsrs	r3, r3, #10
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	4903      	ldr	r1, [pc, #12]	@ (8005e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e3a:	5ccb      	ldrb	r3, [r1, r3]
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	40023800 	.word	0x40023800
 8005e48:	0800e134 	.word	0x0800e134

08005e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e50:	f7ff ffdc 	bl	8005e0c <HAL_RCC_GetHCLKFreq>
 8005e54:	4602      	mov	r2, r0
 8005e56:	4b05      	ldr	r3, [pc, #20]	@ (8005e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	0b5b      	lsrs	r3, r3, #13
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	4903      	ldr	r1, [pc, #12]	@ (8005e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e62:	5ccb      	ldrb	r3, [r1, r3]
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	0800e134 	.word	0x0800e134

08005e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e042      	b.n	8005f0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fb f9b6 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2224      	movs	r2, #36	@ 0x24
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f973 	bl	80061a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d175      	bne.n	8006020 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_UART_Transmit+0x2c>
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e06e      	b.n	8006022 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2221      	movs	r2, #33	@ 0x21
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f52:	f7fb fb2f 	bl	80015b4 <HAL_GetTick>
 8005f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	88fa      	ldrh	r2, [r7, #6]
 8005f62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x6c>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f88:	e02e      	b.n	8005fe8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2200      	movs	r2, #0
 8005f92:	2180      	movs	r1, #128	@ 0x80
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f848 	bl	800602a <UART_WaitOnFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e03a      	b.n	8006022 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e007      	b.n	8005fda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1cb      	bne.n	8005f8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2140      	movs	r1, #64	@ 0x40
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f814 	bl	800602a <UART_WaitOnFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e006      	b.n	8006022 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e000      	b.n	8006022 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	4613      	mov	r3, r2
 8006038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603a:	e03b      	b.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d037      	beq.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006044:	f7fb fab6 	bl	80015b4 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	429a      	cmp	r2, r3
 8006052:	d302      	bcc.n	800605a <UART_WaitOnFlagUntilTimeout+0x30>
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e03a      	b.n	80060d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d023      	beq.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b80      	cmp	r3, #128	@ 0x80
 8006070:	d020      	beq.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b40      	cmp	r3, #64	@ 0x40
 8006076:	d01d      	beq.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b08      	cmp	r3, #8
 8006084:	d116      	bne.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f81d 	bl	80060dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2208      	movs	r2, #8
 80060a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e00f      	b.n	80060d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	4013      	ands	r3, r2
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d0b4      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060dc:	b480      	push	{r7}
 80060de:	b095      	sub	sp, #84	@ 0x54
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006104:	643a      	str	r2, [r7, #64]	@ 0x40
 8006106:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800610a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3314      	adds	r3, #20
 800611e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	61fb      	str	r3, [r7, #28]
   return(result);
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3314      	adds	r3, #20
 8006136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006138:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800613a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800613e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e5      	bne.n	8006118 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006150:	2b01      	cmp	r3, #1
 8006152:	d119      	bne.n	8006188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	60bb      	str	r3, [r7, #8]
   return(result);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f023 0310 	bic.w	r3, r3, #16
 800616a:	647b      	str	r3, [r7, #68]	@ 0x44
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006174:	61ba      	str	r2, [r7, #24]
 8006176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	6979      	ldr	r1, [r7, #20]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	613b      	str	r3, [r7, #16]
   return(result);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e5      	bne.n	8006154 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006196:	bf00      	nop
 8006198:	3754      	adds	r7, #84	@ 0x54
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a8:	b0c0      	sub	sp, #256	@ 0x100
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	ea40 0301 	orr.w	r3, r0, r1
 80061cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	431a      	orrs	r2, r3
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061fc:	f021 010c 	bic.w	r1, r1, #12
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800620a:	430b      	orrs	r3, r1
 800620c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800620e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800621a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621e:	6999      	ldr	r1, [r3, #24]
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	ea40 0301 	orr.w	r3, r0, r1
 800622a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b8f      	ldr	r3, [pc, #572]	@ (8006470 <UART_SetConfig+0x2cc>)
 8006234:	429a      	cmp	r2, r3
 8006236:	d005      	beq.n	8006244 <UART_SetConfig+0xa0>
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b8d      	ldr	r3, [pc, #564]	@ (8006474 <UART_SetConfig+0x2d0>)
 8006240:	429a      	cmp	r2, r3
 8006242:	d104      	bne.n	800624e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006244:	f7ff fe02 	bl	8005e4c <HAL_RCC_GetPCLK2Freq>
 8006248:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800624c:	e003      	b.n	8006256 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800624e:	f7ff fde9 	bl	8005e24 <HAL_RCC_GetPCLK1Freq>
 8006252:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006260:	f040 810c 	bne.w	800647c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006268:	2200      	movs	r2, #0
 800626a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800626e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006272:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006276:	4622      	mov	r2, r4
 8006278:	462b      	mov	r3, r5
 800627a:	1891      	adds	r1, r2, r2
 800627c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800627e:	415b      	adcs	r3, r3
 8006280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006282:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006286:	4621      	mov	r1, r4
 8006288:	eb12 0801 	adds.w	r8, r2, r1
 800628c:	4629      	mov	r1, r5
 800628e:	eb43 0901 	adc.w	r9, r3, r1
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800629e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062a6:	4690      	mov	r8, r2
 80062a8:	4699      	mov	r9, r3
 80062aa:	4623      	mov	r3, r4
 80062ac:	eb18 0303 	adds.w	r3, r8, r3
 80062b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062b4:	462b      	mov	r3, r5
 80062b6:	eb49 0303 	adc.w	r3, r9, r3
 80062ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80062ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062d2:	460b      	mov	r3, r1
 80062d4:	18db      	adds	r3, r3, r3
 80062d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80062d8:	4613      	mov	r3, r2
 80062da:	eb42 0303 	adc.w	r3, r2, r3
 80062de:	657b      	str	r3, [r7, #84]	@ 0x54
 80062e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062e8:	f7f9 ffca 	bl	8000280 <__aeabi_uldivmod>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4b61      	ldr	r3, [pc, #388]	@ (8006478 <UART_SetConfig+0x2d4>)
 80062f2:	fba3 2302 	umull	r2, r3, r3, r2
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	011c      	lsls	r4, r3, #4
 80062fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006304:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006308:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800630c:	4642      	mov	r2, r8
 800630e:	464b      	mov	r3, r9
 8006310:	1891      	adds	r1, r2, r2
 8006312:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006314:	415b      	adcs	r3, r3
 8006316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006318:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800631c:	4641      	mov	r1, r8
 800631e:	eb12 0a01 	adds.w	sl, r2, r1
 8006322:	4649      	mov	r1, r9
 8006324:	eb43 0b01 	adc.w	fp, r3, r1
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006334:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800633c:	4692      	mov	sl, r2
 800633e:	469b      	mov	fp, r3
 8006340:	4643      	mov	r3, r8
 8006342:	eb1a 0303 	adds.w	r3, sl, r3
 8006346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800634a:	464b      	mov	r3, r9
 800634c:	eb4b 0303 	adc.w	r3, fp, r3
 8006350:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006360:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006364:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006368:	460b      	mov	r3, r1
 800636a:	18db      	adds	r3, r3, r3
 800636c:	643b      	str	r3, [r7, #64]	@ 0x40
 800636e:	4613      	mov	r3, r2
 8006370:	eb42 0303 	adc.w	r3, r2, r3
 8006374:	647b      	str	r3, [r7, #68]	@ 0x44
 8006376:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800637a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800637e:	f7f9 ff7f 	bl	8000280 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4611      	mov	r1, r2
 8006388:	4b3b      	ldr	r3, [pc, #236]	@ (8006478 <UART_SetConfig+0x2d4>)
 800638a:	fba3 2301 	umull	r2, r3, r3, r1
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	2264      	movs	r2, #100	@ 0x64
 8006392:	fb02 f303 	mul.w	r3, r2, r3
 8006396:	1acb      	subs	r3, r1, r3
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800639e:	4b36      	ldr	r3, [pc, #216]	@ (8006478 <UART_SetConfig+0x2d4>)
 80063a0:	fba3 2302 	umull	r2, r3, r3, r2
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80063ac:	441c      	add	r4, r3
 80063ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80063bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	1891      	adds	r1, r2, r2
 80063c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80063c8:	415b      	adcs	r3, r3
 80063ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80063d0:	4641      	mov	r1, r8
 80063d2:	1851      	adds	r1, r2, r1
 80063d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80063d6:	4649      	mov	r1, r9
 80063d8:	414b      	adcs	r3, r1
 80063da:	637b      	str	r3, [r7, #52]	@ 0x34
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063e8:	4659      	mov	r1, fp
 80063ea:	00cb      	lsls	r3, r1, #3
 80063ec:	4651      	mov	r1, sl
 80063ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063f2:	4651      	mov	r1, sl
 80063f4:	00ca      	lsls	r2, r1, #3
 80063f6:	4610      	mov	r0, r2
 80063f8:	4619      	mov	r1, r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	4642      	mov	r2, r8
 80063fe:	189b      	adds	r3, r3, r2
 8006400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006404:	464b      	mov	r3, r9
 8006406:	460a      	mov	r2, r1
 8006408:	eb42 0303 	adc.w	r3, r2, r3
 800640c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800641c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006420:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006424:	460b      	mov	r3, r1
 8006426:	18db      	adds	r3, r3, r3
 8006428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800642a:	4613      	mov	r3, r2
 800642c:	eb42 0303 	adc.w	r3, r2, r3
 8006430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006436:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800643a:	f7f9 ff21 	bl	8000280 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4b0d      	ldr	r3, [pc, #52]	@ (8006478 <UART_SetConfig+0x2d4>)
 8006444:	fba3 1302 	umull	r1, r3, r3, r2
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	2164      	movs	r1, #100	@ 0x64
 800644c:	fb01 f303 	mul.w	r3, r1, r3
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	3332      	adds	r3, #50	@ 0x32
 8006456:	4a08      	ldr	r2, [pc, #32]	@ (8006478 <UART_SetConfig+0x2d4>)
 8006458:	fba2 2303 	umull	r2, r3, r2, r3
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	f003 0207 	and.w	r2, r3, #7
 8006462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4422      	add	r2, r4
 800646a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800646c:	e106      	b.n	800667c <UART_SetConfig+0x4d8>
 800646e:	bf00      	nop
 8006470:	40011000 	.word	0x40011000
 8006474:	40011400 	.word	0x40011400
 8006478:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800647c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006480:	2200      	movs	r2, #0
 8006482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006486:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800648a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800648e:	4642      	mov	r2, r8
 8006490:	464b      	mov	r3, r9
 8006492:	1891      	adds	r1, r2, r2
 8006494:	6239      	str	r1, [r7, #32]
 8006496:	415b      	adcs	r3, r3
 8006498:	627b      	str	r3, [r7, #36]	@ 0x24
 800649a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800649e:	4641      	mov	r1, r8
 80064a0:	1854      	adds	r4, r2, r1
 80064a2:	4649      	mov	r1, r9
 80064a4:	eb43 0501 	adc.w	r5, r3, r1
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	00eb      	lsls	r3, r5, #3
 80064b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064b6:	00e2      	lsls	r2, r4, #3
 80064b8:	4614      	mov	r4, r2
 80064ba:	461d      	mov	r5, r3
 80064bc:	4643      	mov	r3, r8
 80064be:	18e3      	adds	r3, r4, r3
 80064c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064c4:	464b      	mov	r3, r9
 80064c6:	eb45 0303 	adc.w	r3, r5, r3
 80064ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064ea:	4629      	mov	r1, r5
 80064ec:	008b      	lsls	r3, r1, #2
 80064ee:	4621      	mov	r1, r4
 80064f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f4:	4621      	mov	r1, r4
 80064f6:	008a      	lsls	r2, r1, #2
 80064f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064fc:	f7f9 fec0 	bl	8000280 <__aeabi_uldivmod>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4b60      	ldr	r3, [pc, #384]	@ (8006688 <UART_SetConfig+0x4e4>)
 8006506:	fba3 2302 	umull	r2, r3, r3, r2
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	011c      	lsls	r4, r3, #4
 800650e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006512:	2200      	movs	r2, #0
 8006514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006518:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800651c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	1891      	adds	r1, r2, r2
 8006526:	61b9      	str	r1, [r7, #24]
 8006528:	415b      	adcs	r3, r3
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006530:	4641      	mov	r1, r8
 8006532:	1851      	adds	r1, r2, r1
 8006534:	6139      	str	r1, [r7, #16]
 8006536:	4649      	mov	r1, r9
 8006538:	414b      	adcs	r3, r1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006548:	4659      	mov	r1, fp
 800654a:	00cb      	lsls	r3, r1, #3
 800654c:	4651      	mov	r1, sl
 800654e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006552:	4651      	mov	r1, sl
 8006554:	00ca      	lsls	r2, r1, #3
 8006556:	4610      	mov	r0, r2
 8006558:	4619      	mov	r1, r3
 800655a:	4603      	mov	r3, r0
 800655c:	4642      	mov	r2, r8
 800655e:	189b      	adds	r3, r3, r2
 8006560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006564:	464b      	mov	r3, r9
 8006566:	460a      	mov	r2, r1
 8006568:	eb42 0303 	adc.w	r3, r2, r3
 800656c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	67bb      	str	r3, [r7, #120]	@ 0x78
 800657a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006588:	4649      	mov	r1, r9
 800658a:	008b      	lsls	r3, r1, #2
 800658c:	4641      	mov	r1, r8
 800658e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006592:	4641      	mov	r1, r8
 8006594:	008a      	lsls	r2, r1, #2
 8006596:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800659a:	f7f9 fe71 	bl	8000280 <__aeabi_uldivmod>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4611      	mov	r1, r2
 80065a4:	4b38      	ldr	r3, [pc, #224]	@ (8006688 <UART_SetConfig+0x4e4>)
 80065a6:	fba3 2301 	umull	r2, r3, r3, r1
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	2264      	movs	r2, #100	@ 0x64
 80065ae:	fb02 f303 	mul.w	r3, r2, r3
 80065b2:	1acb      	subs	r3, r1, r3
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	3332      	adds	r3, #50	@ 0x32
 80065b8:	4a33      	ldr	r2, [pc, #204]	@ (8006688 <UART_SetConfig+0x4e4>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065c4:	441c      	add	r4, r3
 80065c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ca:	2200      	movs	r2, #0
 80065cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80065ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80065d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80065d4:	4642      	mov	r2, r8
 80065d6:	464b      	mov	r3, r9
 80065d8:	1891      	adds	r1, r2, r2
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	415b      	adcs	r3, r3
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065e4:	4641      	mov	r1, r8
 80065e6:	1851      	adds	r1, r2, r1
 80065e8:	6039      	str	r1, [r7, #0]
 80065ea:	4649      	mov	r1, r9
 80065ec:	414b      	adcs	r3, r1
 80065ee:	607b      	str	r3, [r7, #4]
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065fc:	4659      	mov	r1, fp
 80065fe:	00cb      	lsls	r3, r1, #3
 8006600:	4651      	mov	r1, sl
 8006602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006606:	4651      	mov	r1, sl
 8006608:	00ca      	lsls	r2, r1, #3
 800660a:	4610      	mov	r0, r2
 800660c:	4619      	mov	r1, r3
 800660e:	4603      	mov	r3, r0
 8006610:	4642      	mov	r2, r8
 8006612:	189b      	adds	r3, r3, r2
 8006614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006616:	464b      	mov	r3, r9
 8006618:	460a      	mov	r2, r1
 800661a:	eb42 0303 	adc.w	r3, r2, r3
 800661e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	663b      	str	r3, [r7, #96]	@ 0x60
 800662a:	667a      	str	r2, [r7, #100]	@ 0x64
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006638:	4649      	mov	r1, r9
 800663a:	008b      	lsls	r3, r1, #2
 800663c:	4641      	mov	r1, r8
 800663e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006642:	4641      	mov	r1, r8
 8006644:	008a      	lsls	r2, r1, #2
 8006646:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800664a:	f7f9 fe19 	bl	8000280 <__aeabi_uldivmod>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4b0d      	ldr	r3, [pc, #52]	@ (8006688 <UART_SetConfig+0x4e4>)
 8006654:	fba3 1302 	umull	r1, r3, r3, r2
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	2164      	movs	r1, #100	@ 0x64
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	3332      	adds	r3, #50	@ 0x32
 8006666:	4a08      	ldr	r2, [pc, #32]	@ (8006688 <UART_SetConfig+0x4e4>)
 8006668:	fba2 2303 	umull	r2, r3, r2, r3
 800666c:	095b      	lsrs	r3, r3, #5
 800666e:	f003 020f 	and.w	r2, r3, #15
 8006672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4422      	add	r2, r4
 800667a:	609a      	str	r2, [r3, #8]
}
 800667c:	bf00      	nop
 800667e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006682:	46bd      	mov	sp, r7
 8006684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006688:	51eb851f 	.word	0x51eb851f

0800668c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800668c:	b084      	sub	sp, #16
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	f107 001c 	add.w	r0, r7, #28
 800669a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800669e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d123      	bne.n	80066ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80066ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d105      	bne.n	80066e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 fae8 	bl	8007cb8 <USB_CoreReset>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	e01b      	b.n	8006726 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fadc 	bl	8007cb8 <USB_CoreReset>
 8006700:	4603      	mov	r3, r0
 8006702:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006704:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006708:	2b00      	cmp	r3, #0
 800670a:	d106      	bne.n	800671a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006710:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	639a      	str	r2, [r3, #56]	@ 0x38
 8006718:	e005      	b.n	8006726 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006726:	7fbb      	ldrb	r3, [r7, #30]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10b      	bne.n	8006744 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f043 0206 	orr.w	r2, r3, #6
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006750:	b004      	add	sp, #16
 8006752:	4770      	bx	lr

08006754 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d165      	bne.n	8006834 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4a41      	ldr	r2, [pc, #260]	@ (8006870 <USB_SetTurnaroundTime+0x11c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d906      	bls.n	800677e <USB_SetTurnaroundTime+0x2a>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4a40      	ldr	r2, [pc, #256]	@ (8006874 <USB_SetTurnaroundTime+0x120>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d202      	bcs.n	800677e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006778:	230f      	movs	r3, #15
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e062      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4a3c      	ldr	r2, [pc, #240]	@ (8006874 <USB_SetTurnaroundTime+0x120>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d306      	bcc.n	8006794 <USB_SetTurnaroundTime+0x40>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4a3b      	ldr	r2, [pc, #236]	@ (8006878 <USB_SetTurnaroundTime+0x124>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d202      	bcs.n	8006794 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800678e:	230e      	movs	r3, #14
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e057      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	4a38      	ldr	r2, [pc, #224]	@ (8006878 <USB_SetTurnaroundTime+0x124>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d306      	bcc.n	80067aa <USB_SetTurnaroundTime+0x56>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4a37      	ldr	r2, [pc, #220]	@ (800687c <USB_SetTurnaroundTime+0x128>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d202      	bcs.n	80067aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80067a4:	230d      	movs	r3, #13
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e04c      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4a33      	ldr	r2, [pc, #204]	@ (800687c <USB_SetTurnaroundTime+0x128>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d306      	bcc.n	80067c0 <USB_SetTurnaroundTime+0x6c>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4a32      	ldr	r2, [pc, #200]	@ (8006880 <USB_SetTurnaroundTime+0x12c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d802      	bhi.n	80067c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80067ba:	230c      	movs	r3, #12
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	e041      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006880 <USB_SetTurnaroundTime+0x12c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d906      	bls.n	80067d6 <USB_SetTurnaroundTime+0x82>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4a2e      	ldr	r2, [pc, #184]	@ (8006884 <USB_SetTurnaroundTime+0x130>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d802      	bhi.n	80067d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80067d0:	230b      	movs	r3, #11
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	e036      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006884 <USB_SetTurnaroundTime+0x130>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d906      	bls.n	80067ec <USB_SetTurnaroundTime+0x98>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4a29      	ldr	r2, [pc, #164]	@ (8006888 <USB_SetTurnaroundTime+0x134>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d802      	bhi.n	80067ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80067e6:	230a      	movs	r3, #10
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	e02b      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4a26      	ldr	r2, [pc, #152]	@ (8006888 <USB_SetTurnaroundTime+0x134>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d906      	bls.n	8006802 <USB_SetTurnaroundTime+0xae>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4a25      	ldr	r2, [pc, #148]	@ (800688c <USB_SetTurnaroundTime+0x138>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d202      	bcs.n	8006802 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80067fc:	2309      	movs	r3, #9
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e020      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4a21      	ldr	r2, [pc, #132]	@ (800688c <USB_SetTurnaroundTime+0x138>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d306      	bcc.n	8006818 <USB_SetTurnaroundTime+0xc4>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4a20      	ldr	r2, [pc, #128]	@ (8006890 <USB_SetTurnaroundTime+0x13c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d802      	bhi.n	8006818 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006812:	2308      	movs	r3, #8
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	e015      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4a1d      	ldr	r2, [pc, #116]	@ (8006890 <USB_SetTurnaroundTime+0x13c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d906      	bls.n	800682e <USB_SetTurnaroundTime+0xda>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4a1c      	ldr	r2, [pc, #112]	@ (8006894 <USB_SetTurnaroundTime+0x140>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d202      	bcs.n	800682e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006828:	2307      	movs	r3, #7
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	e00a      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800682e:	2306      	movs	r3, #6
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	e007      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800683a:	2309      	movs	r3, #9
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	e001      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006840:	2309      	movs	r3, #9
 8006842:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	029b      	lsls	r3, r3, #10
 8006858:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800685c:	431a      	orrs	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	00d8acbf 	.word	0x00d8acbf
 8006874:	00e4e1c0 	.word	0x00e4e1c0
 8006878:	00f42400 	.word	0x00f42400
 800687c:	01067380 	.word	0x01067380
 8006880:	011a499f 	.word	0x011a499f
 8006884:	01312cff 	.word	0x01312cff
 8006888:	014ca43f 	.word	0x014ca43f
 800688c:	016e3600 	.word	0x016e3600
 8006890:	01a6ab1f 	.word	0x01a6ab1f
 8006894:	01e84800 	.word	0x01e84800

08006898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f043 0201 	orr.w	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f023 0201 	bic.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d115      	bne.n	800692a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800690a:	200a      	movs	r0, #10
 800690c:	f7fa fe5e 	bl	80015cc <HAL_Delay>
      ms += 10U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	330a      	adds	r3, #10
 8006914:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 f93f 	bl	8007b9a <USB_GetMode>
 800691c:	4603      	mov	r3, r0
 800691e:	2b01      	cmp	r3, #1
 8006920:	d01e      	beq.n	8006960 <USB_SetCurrentMode+0x84>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2bc7      	cmp	r3, #199	@ 0xc7
 8006926:	d9f0      	bls.n	800690a <USB_SetCurrentMode+0x2e>
 8006928:	e01a      	b.n	8006960 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d115      	bne.n	800695c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800693c:	200a      	movs	r0, #10
 800693e:	f7fa fe45 	bl	80015cc <HAL_Delay>
      ms += 10U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	330a      	adds	r3, #10
 8006946:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 f926 	bl	8007b9a <USB_GetMode>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <USB_SetCurrentMode+0x84>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2bc7      	cmp	r3, #199	@ 0xc7
 8006958:	d9f0      	bls.n	800693c <USB_SetCurrentMode+0x60>
 800695a:	e001      	b.n	8006960 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e005      	b.n	800696c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2bc8      	cmp	r3, #200	@ 0xc8
 8006964:	d101      	bne.n	800696a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006974:	b084      	sub	sp, #16
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e009      	b.n	80069a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	3340      	adds	r3, #64	@ 0x40
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	2200      	movs	r2, #0
 80069a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3301      	adds	r3, #1
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b0e      	cmp	r3, #14
 80069ac:	d9f2      	bls.n	8006994 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11c      	bne.n	80069f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80069ee:	e00b      	b.n	8006a08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a0e:	461a      	mov	r2, r3
 8006a10:	2300      	movs	r3, #0
 8006a12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d10d      	bne.n	8006a38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a24:	2100      	movs	r1, #0
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f968 	bl	8006cfc <USB_SetDevSpeed>
 8006a2c:	e008      	b.n	8006a40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a2e:	2101      	movs	r1, #1
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f963 	bl	8006cfc <USB_SetDevSpeed>
 8006a36:	e003      	b.n	8006a40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a38:	2103      	movs	r1, #3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f95e 	bl	8006cfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a40:	2110      	movs	r1, #16
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f8fa 	bl	8006c3c <USB_FlushTxFifo>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f924 	bl	8006ca0 <USB_FlushRxFifo>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a74:	461a      	mov	r2, r3
 8006a76:	2300      	movs	r3, #0
 8006a78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a80:	461a      	mov	r2, r3
 8006a82:	2300      	movs	r3, #0
 8006a84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a86:	2300      	movs	r3, #0
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	e043      	b.n	8006b14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aa2:	d118      	bne.n	8006ad6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	e013      	b.n	8006ae8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006acc:	461a      	mov	r2, r3
 8006ace:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e008      	b.n	8006ae8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af4:	461a      	mov	r2, r3
 8006af6:	2300      	movs	r3, #0
 8006af8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b06:	461a      	mov	r2, r3
 8006b08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3301      	adds	r3, #1
 8006b12:	613b      	str	r3, [r7, #16]
 8006b14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b18:	461a      	mov	r2, r3
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d3b5      	bcc.n	8006a8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	e043      	b.n	8006bae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b3c:	d118      	bne.n	8006b70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b50:	461a      	mov	r2, r3
 8006b52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	e013      	b.n	8006b82 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b66:	461a      	mov	r2, r3
 8006b68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e008      	b.n	8006b82 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	2300      	movs	r3, #0
 8006b80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8e:	461a      	mov	r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ba6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3301      	adds	r3, #1
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d3b5      	bcc.n	8006b26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bcc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006bda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d105      	bne.n	8006bf0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f043 0210 	orr.w	r2, r3, #16
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	4b10      	ldr	r3, [pc, #64]	@ (8006c38 <USB_DevInit+0x2c4>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006bfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f043 0208 	orr.w	r2, r3, #8
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d107      	bne.n	8006c28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c20:	f043 0304 	orr.w	r3, r3, #4
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c34:	b004      	add	sp, #16
 8006c36:	4770      	bx	lr
 8006c38:	803c3800 	.word	0x803c3800

08006c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c56:	d901      	bls.n	8006c5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e01b      	b.n	8006c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	daf2      	bge.n	8006c4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	019b      	lsls	r3, r3, #6
 8006c6c:	f043 0220 	orr.w	r2, r3, #32
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c80:	d901      	bls.n	8006c86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e006      	b.n	8006c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d0f0      	beq.n	8006c74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cb8:	d901      	bls.n	8006cbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e018      	b.n	8006cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	daf2      	bge.n	8006cac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2210      	movs	r2, #16
 8006cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cdc:	d901      	bls.n	8006ce2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e006      	b.n	8006cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	2b10      	cmp	r3, #16
 8006cec:	d0f0      	beq.n	8006cd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b087      	sub	sp, #28
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 0306 	and.w	r3, r3, #6
 8006d46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	75fb      	strb	r3, [r7, #23]
 8006d52:	e00a      	b.n	8006d6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d002      	beq.n	8006d60 <USB_GetDevSpeed+0x32>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b06      	cmp	r3, #6
 8006d5e:	d102      	bne.n	8006d66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006d60:	2302      	movs	r3, #2
 8006d62:	75fb      	strb	r3, [r7, #23]
 8006d64:	e001      	b.n	8006d6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006d66:	230f      	movs	r3, #15
 8006d68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d13a      	bne.n	8006e0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	2101      	movs	r1, #1
 8006da6:	fa01 f303 	lsl.w	r3, r1, r3
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	68f9      	ldr	r1, [r7, #12]
 8006dae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006db2:	4313      	orrs	r3, r2
 8006db4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d155      	bne.n	8006e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	791b      	ldrb	r3, [r3, #4]
 8006de6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006de8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	059b      	lsls	r3, r3, #22
 8006dee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006df0:	4313      	orrs	r3, r2
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	e036      	b.n	8006e78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e10:	69da      	ldr	r2, [r3, #28]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e20:	041b      	lsls	r3, r3, #16
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d11a      	bne.n	8006e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	791b      	ldrb	r3, [r3, #4]
 8006e5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	4313      	orrs	r3, r2
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	0151      	lsls	r1, r2, #5
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	440a      	add	r2, r1
 8006e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d161      	bne.n	8006f68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eba:	d11f      	bne.n	8006efc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006eda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ef6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006efa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	43db      	mvns	r3, r3
 8006f16:	68f9      	ldr	r1, [r7, #12]
 8006f18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	2101      	movs	r1, #1
 8006f32:	fa01 f303 	lsl.w	r3, r1, r3
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f40:	4013      	ands	r3, r2
 8006f42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	0159      	lsls	r1, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	440b      	add	r3, r1
 8006f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4b35      	ldr	r3, [pc, #212]	@ (8007038 <USB_DeactivateEndpoint+0x1b0>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]
 8006f66:	e060      	b.n	800702a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f7e:	d11f      	bne.n	8006fc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	68f9      	ldr	r1, [r7, #12]
 8006fdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f003 030f 	and.w	r3, r3, #15
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007004:	4013      	ands	r3, r2
 8007006:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	0159      	lsls	r1, r3, #5
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	440b      	add	r3, r1
 800701e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007022:	4619      	mov	r1, r3
 8007024:	4b05      	ldr	r3, [pc, #20]	@ (800703c <USB_DeactivateEndpoint+0x1b4>)
 8007026:	4013      	ands	r3, r2
 8007028:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	ec337800 	.word	0xec337800
 800703c:	eff37800 	.word	0xeff37800

08007040 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	@ 0x28
 8007044:	af02      	add	r7, sp, #8
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	4613      	mov	r3, r2
 800704c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b01      	cmp	r3, #1
 800705e:	f040 817f 	bne.w	8007360 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d132      	bne.n	80070d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007084:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007088:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800708c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c8:	0cdb      	lsrs	r3, r3, #19
 80070ca:	04db      	lsls	r3, r3, #19
 80070cc:	6113      	str	r3, [r2, #16]
 80070ce:	e097      	b.n	8007200 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ea:	0cdb      	lsrs	r3, r3, #19
 80070ec:	04db      	lsls	r3, r3, #19
 80070ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800710a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800710e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007112:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d11a      	bne.n	8007150 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d903      	bls.n	800712e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	0151      	lsls	r1, r2, #5
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	440a      	add	r2, r1
 8007144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007148:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800714c:	6113      	str	r3, [r2, #16]
 800714e:	e044      	b.n	80071da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4413      	add	r3, r2
 800715a:	1e5a      	subs	r2, r3, #1
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	fbb2 f3f3 	udiv	r3, r2, r3
 8007164:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	4413      	add	r3, r2
 800716e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007172:	691a      	ldr	r2, [r3, #16]
 8007174:	8afb      	ldrh	r3, [r7, #22]
 8007176:	04d9      	lsls	r1, r3, #19
 8007178:	4ba4      	ldr	r3, [pc, #656]	@ (800740c <USB_EPStartXfer+0x3cc>)
 800717a:	400b      	ands	r3, r1
 800717c:	69b9      	ldr	r1, [r7, #24]
 800717e:	0148      	lsls	r0, r1, #5
 8007180:	69f9      	ldr	r1, [r7, #28]
 8007182:	4401      	add	r1, r0
 8007184:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007188:	4313      	orrs	r3, r2
 800718a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	791b      	ldrb	r3, [r3, #4]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d122      	bne.n	80071da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80071b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	8afb      	ldrh	r3, [r7, #22]
 80071c4:	075b      	lsls	r3, r3, #29
 80071c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80071ca:	69b9      	ldr	r1, [r7, #24]
 80071cc:	0148      	lsls	r0, r1, #5
 80071ce:	69f9      	ldr	r1, [r7, #28]
 80071d0:	4401      	add	r1, r0
 80071d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80071d6:	4313      	orrs	r3, r2
 80071d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f0:	69b9      	ldr	r1, [r7, #24]
 80071f2:	0148      	lsls	r0, r1, #5
 80071f4:	69f9      	ldr	r1, [r7, #28]
 80071f6:	4401      	add	r1, r0
 80071f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80071fc:	4313      	orrs	r3, r2
 80071fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d14b      	bne.n	800729e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721a:	461a      	mov	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	791b      	ldrb	r3, [r3, #4]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d128      	bne.n	800727c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007236:	2b00      	cmp	r3, #0
 8007238:	d110      	bne.n	800725c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	0151      	lsls	r1, r2, #5
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	440a      	add	r2, r1
 8007250:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007254:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	e00f      	b.n	800727c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800727a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007296:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	e166      	b.n	800756c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80072bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	791b      	ldrb	r3, [r3, #4]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d015      	beq.n	80072f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 814e 	beq.w	800756c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	2101      	movs	r1, #1
 80072e2:	fa01 f303 	lsl.w	r3, r1, r3
 80072e6:	69f9      	ldr	r1, [r7, #28]
 80072e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072ec:	4313      	orrs	r3, r2
 80072ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80072f0:	e13c      	b.n	800756c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d110      	bne.n	8007324 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	0151      	lsls	r1, r2, #5
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	440a      	add	r2, r1
 8007318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800731c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e00f      	b.n	8007344 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	69fa      	ldr	r2, [r7, #28]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800733e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007342:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	68d9      	ldr	r1, [r3, #12]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	b298      	uxth	r0, r3
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	4603      	mov	r3, r0
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f9b9 	bl	80076d0 <USB_WritePacket>
 800735e:	e105      	b.n	800756c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	440a      	add	r2, r1
 8007376:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800737a:	0cdb      	lsrs	r3, r3, #19
 800737c:	04db      	lsls	r3, r3, #19
 800737e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	440a      	add	r2, r1
 8007396:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800739a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800739e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80073a2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d132      	bne.n	8007410 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d8:	69b9      	ldr	r1, [r7, #24]
 80073da:	0148      	lsls	r0, r1, #5
 80073dc:	69f9      	ldr	r1, [r7, #28]
 80073de:	4401      	add	r1, r0
 80073e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80073e4:	4313      	orrs	r3, r2
 80073e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007402:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007406:	6113      	str	r3, [r2, #16]
 8007408:	e062      	b.n	80074d0 <USB_EPStartXfer+0x490>
 800740a:	bf00      	nop
 800740c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d123      	bne.n	8007460 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800742e:	69b9      	ldr	r1, [r7, #24]
 8007430:	0148      	lsls	r0, r1, #5
 8007432:	69f9      	ldr	r1, [r7, #28]
 8007434:	4401      	add	r1, r0
 8007436:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800743a:	4313      	orrs	r3, r2
 800743c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007458:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800745c:	6113      	str	r3, [r2, #16]
 800745e:	e037      	b.n	80074d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	4413      	add	r3, r2
 800746a:	1e5a      	subs	r2, r3, #1
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	fbb2 f3f3 	udiv	r3, r2, r3
 8007474:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	8afa      	ldrh	r2, [r7, #22]
 800747c:	fb03 f202 	mul.w	r2, r3, r2
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	8afb      	ldrh	r3, [r7, #22]
 8007494:	04d9      	lsls	r1, r3, #19
 8007496:	4b38      	ldr	r3, [pc, #224]	@ (8007578 <USB_EPStartXfer+0x538>)
 8007498:	400b      	ands	r3, r1
 800749a:	69b9      	ldr	r1, [r7, #24]
 800749c:	0148      	lsls	r0, r1, #5
 800749e:	69f9      	ldr	r1, [r7, #28]
 80074a0:	4401      	add	r1, r0
 80074a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80074a6:	4313      	orrs	r3, r2
 80074a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c0:	69b9      	ldr	r1, [r7, #24]
 80074c2:	0148      	lsls	r0, r1, #5
 80074c4:	69f9      	ldr	r1, [r7, #28]
 80074c6:	4401      	add	r1, r0
 80074c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80074cc:	4313      	orrs	r3, r2
 80074ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d10d      	bne.n	80074f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	68d9      	ldr	r1, [r3, #12]
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ee:	460a      	mov	r2, r1
 80074f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	791b      	ldrb	r3, [r3, #4]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d128      	bne.n	800754c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d110      	bne.n	800752c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007524:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	e00f      	b.n	800754c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	440a      	add	r2, r1
 8007542:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800754a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	0151      	lsls	r1, r2, #5
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	440a      	add	r2, r1
 8007562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007566:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800756a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	1ff80000 	.word	0x1ff80000

0800757c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d14a      	bne.n	8007630 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075b2:	f040 8086 	bne.w	80076c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	7812      	ldrb	r2, [r2, #0]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	7812      	ldrb	r2, [r2, #0]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f242 7210 	movw	r2, #10000	@ 0x2710
 800760a:	4293      	cmp	r3, r2
 800760c:	d902      	bls.n	8007614 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
          break;
 8007612:	e056      	b.n	80076c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800762c:	d0e7      	beq.n	80075fe <USB_EPStopXfer+0x82>
 800762e:	e048      	b.n	80076c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007644:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007648:	d13b      	bne.n	80076c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	7812      	ldrb	r2, [r2, #0]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007668:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800766c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800768c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007690:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800769e:	4293      	cmp	r3, r2
 80076a0:	d902      	bls.n	80076a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
          break;
 80076a6:	e00c      	b.n	80076c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076c0:	d0e7      	beq.n	8007692 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b089      	sub	sp, #36	@ 0x24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4611      	mov	r1, r2
 80076dc:	461a      	mov	r2, r3
 80076de:	460b      	mov	r3, r1
 80076e0:	71fb      	strb	r3, [r7, #7]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d123      	bne.n	800773e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076f6:	88bb      	ldrh	r3, [r7, #4]
 80076f8:	3303      	adds	r3, #3
 80076fa:	089b      	lsrs	r3, r3, #2
 80076fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076fe:	2300      	movs	r3, #0
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	e018      	b.n	8007736 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	031a      	lsls	r2, r3, #12
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	4413      	add	r3, r2
 800770c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007710:	461a      	mov	r2, r3
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	3301      	adds	r3, #1
 8007722:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	3301      	adds	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	3301      	adds	r3, #1
 800772e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	3301      	adds	r3, #1
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	429a      	cmp	r2, r3
 800773c:	d3e2      	bcc.n	8007704 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3724      	adds	r7, #36	@ 0x24
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800774c:	b480      	push	{r7}
 800774e:	b08b      	sub	sp, #44	@ 0x2c
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007762:	88fb      	ldrh	r3, [r7, #6]
 8007764:	089b      	lsrs	r3, r3, #2
 8007766:	b29b      	uxth	r3, r3
 8007768:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007772:	2300      	movs	r3, #0
 8007774:	623b      	str	r3, [r7, #32]
 8007776:	e014      	b.n	80077a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	601a      	str	r2, [r3, #0]
    pDest++;
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	3301      	adds	r3, #1
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	3301      	adds	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	3301      	adds	r3, #1
 8007794:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	3301      	adds	r3, #1
 800779a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	3301      	adds	r3, #1
 80077a0:	623b      	str	r3, [r7, #32]
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d3e6      	bcc.n	8007778 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077aa:	8bfb      	ldrh	r3, [r7, #30]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01e      	beq.n	80077ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077ba:	461a      	mov	r2, r3
 80077bc:	f107 0310 	add.w	r3, r7, #16
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d4:	701a      	strb	r2, [r3, #0]
      i++;
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	3301      	adds	r3, #1
 80077da:	623b      	str	r3, [r7, #32]
      pDest++;
 80077dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077de:	3301      	adds	r3, #1
 80077e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80077e2:	8bfb      	ldrh	r3, [r7, #30]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077e8:	8bfb      	ldrh	r3, [r7, #30]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1ea      	bne.n	80077c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	372c      	adds	r7, #44	@ 0x2c
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d12c      	bne.n	8007872 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	db12      	blt.n	8007850 <USB_EPSetStall+0x54>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00f      	beq.n	8007850 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800784a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800784e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800786a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	e02b      	b.n	80078ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	db12      	blt.n	80078aa <USB_EPSetStall+0xae>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00f      	beq.n	80078aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80078a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80078c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d128      	bne.n	8007946 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	440a      	add	r2, r1
 800790a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800790e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007912:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d003      	beq.n	8007924 <USB_EPClearStall+0x4c>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	791b      	ldrb	r3, [r3, #4]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d138      	bne.n	8007996 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	440a      	add	r2, r1
 800793a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800793e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	e027      	b.n	8007996 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	0151      	lsls	r1, r2, #5
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	440a      	add	r2, r1
 800795c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007960:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007964:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	791b      	ldrb	r3, [r3, #4]
 800796a:	2b03      	cmp	r3, #3
 800796c:	d003      	beq.n	8007976 <USB_EPClearStall+0x9e>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	791b      	ldrb	r3, [r3, #4]
 8007972:	2b02      	cmp	r3, #2
 8007974:	d10f      	bne.n	8007996 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007994:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80079c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80079d8:	68f9      	ldr	r1, [r7, #12]
 80079da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079de:	4313      	orrs	r3, r2
 80079e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a1e:	f023 0302 	bic.w	r3, r3, #2
 8007a22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a4c:	f023 0303 	bic.w	r3, r3, #3
 8007a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a60:	f043 0302 	orr.w	r3, r3, #2
 8007a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4013      	ands	r3, r2
 8007abc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	0c1b      	lsrs	r3, r3, #16
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	4013      	ands	r3, r2
 8007af0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	b29b      	uxth	r3, r3
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b30:	68bb      	ldr	r3, [r7, #8]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b087      	sub	sp, #28
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b62:	78fb      	ldrb	r3, [r7, #3]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6e:	01db      	lsls	r3, r3, #7
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007bd4:	f023 0307 	bic.w	r3, r3, #7
 8007bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	460b      	mov	r3, r1
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	333c      	adds	r3, #60	@ 0x3c
 8007c12:	3304      	adds	r3, #4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4a26      	ldr	r2, [pc, #152]	@ (8007cb4 <USB_EP0_OutStart+0xb8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d90a      	bls.n	8007c36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c30:	d101      	bne.n	8007c36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e037      	b.n	8007ca6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c64:	f043 0318 	orr.w	r3, r3, #24
 8007c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c78:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007c7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d10f      	bne.n	8007ca4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c9e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007ca2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	4f54300a 	.word	0x4f54300a

08007cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cd0:	d901      	bls.n	8007cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e022      	b.n	8007d1c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	daf2      	bge.n	8007cc4 <USB_CoreReset+0xc>

  count = 10U;
 8007cde:	230a      	movs	r3, #10
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007ce2:	e002      	b.n	8007cea <USB_CoreReset+0x32>
  {
    count--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1f9      	bne.n	8007ce4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	f043 0201 	orr.w	r2, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d08:	d901      	bls.n	8007d0e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e006      	b.n	8007d1c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d0f0      	beq.n	8007cfc <USB_CoreReset+0x44>

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d3a:	2b84      	cmp	r3, #132	@ 0x84
 8007d3c:	d005      	beq.n	8007d4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	3303      	adds	r3, #3
 8007d48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007d5c:	f001 fcd4 	bl	8009708 <vTaskStartScheduler>
  
  return osOK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007d66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d68:	b089      	sub	sp, #36	@ 0x24
 8007d6a:	af04      	add	r7, sp, #16
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d020      	beq.n	8007dba <osThreadCreate+0x54>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01c      	beq.n	8007dba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685c      	ldr	r4, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691e      	ldr	r6, [r3, #16]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff ffc8 	bl	8007d28 <makeFreeRtosPriority>
 8007d98:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007da2:	9202      	str	r2, [sp, #8]
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	9100      	str	r1, [sp, #0]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	4632      	mov	r2, r6
 8007dac:	4629      	mov	r1, r5
 8007dae:	4620      	mov	r0, r4
 8007db0:	f001 fadc 	bl	800936c <xTaskCreateStatic>
 8007db4:	4603      	mov	r3, r0
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e01c      	b.n	8007df4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685c      	ldr	r4, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dc6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff ffaa 	bl	8007d28 <makeFreeRtosPriority>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	f107 030c 	add.w	r3, r7, #12
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	9200      	str	r2, [sp, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	4632      	mov	r2, r6
 8007de2:	4629      	mov	r1, r5
 8007de4:	4620      	mov	r0, r4
 8007de6:	f001 fb21 	bl	800942c <xTaskCreate>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d001      	beq.n	8007df4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e000      	b.n	8007df6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007df4:	68fb      	ldr	r3, [r7, #12]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dfe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <osDelay+0x16>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	e000      	b.n	8007e16 <osDelay+0x18>
 8007e14:	2301      	movs	r3, #1
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fc40 	bl	800969c <vTaskDelay>
  
  return osOK;
 8007e1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007e2c:	201c      	movs	r0, #28
 8007e2e:	f000 f8d9 	bl	8007fe4 <pvPortMalloc>
 8007e32:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fabb 	bl	80083c0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007e50:	687b      	ldr	r3, [r7, #4]
	}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <xEventGroupClearBits+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e8c:	d30b      	bcc.n	8007ea6 <xEventGroupClearBits+0x4c>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60bb      	str	r3, [r7, #8]
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	e7fd      	b.n	8007ea2 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8007ea6:	f000 fc6f 	bl	8008788 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	43db      	mvns	r3, r3
 8007eb8:	401a      	ands	r2, r3
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007ebe:	f000 fc95 	bl	80087ec <vPortExitCritical>

	return uxReturn;
 8007ec2:	693b      	ldr	r3, [r7, #16]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08e      	sub	sp, #56	@ 0x38
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10b      	bne.n	8007f00 <xEventGroupSetBits+0x34>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	613b      	str	r3, [r7, #16]
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	e7fd      	b.n	8007efc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f06:	d30b      	bcc.n	8007f20 <xEventGroupSetBits+0x54>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	60fb      	str	r3, [r7, #12]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f22:	3304      	adds	r3, #4
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	3308      	adds	r3, #8
 8007f2a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007f2c:	f001 fc4e 	bl	80097cc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f40:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007f42:	e03c      	b.n	8007fbe <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007f5a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f62:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d108      	bne.n	8007f80 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	4013      	ands	r3, r2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f7e:	e008      	b.n	8007f92 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	4013      	ands	r3, r2
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d101      	bne.n	8007f92 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d010      	beq.n	8007fba <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007fb6:	f001 fe55 	bl	8009c64 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8007fbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d1be      	bne.n	8007f44 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	401a      	ands	r2, r3
 8007fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007fd4:	f001 fc08 	bl	80097e8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fda:	681b      	ldr	r3, [r3, #0]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3738      	adds	r7, #56	@ 0x38
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08a      	sub	sp, #40	@ 0x28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ff0:	f001 fbec 	bl	80097cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8008168 <pvPortMalloc+0x184>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ffc:	f000 f924 	bl	8008248 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008000:	4b5a      	ldr	r3, [pc, #360]	@ (800816c <pvPortMalloc+0x188>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4013      	ands	r3, r2
 8008008:	2b00      	cmp	r3, #0
 800800a:	f040 8095 	bne.w	8008138 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01e      	beq.n	8008052 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008014:	2208      	movs	r2, #8
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	2b00      	cmp	r3, #0
 8008024:	d015      	beq.n	8008052 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f023 0307 	bic.w	r3, r3, #7
 800802c:	3308      	adds	r3, #8
 800802e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00b      	beq.n	8008052 <pvPortMalloc+0x6e>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	617b      	str	r3, [r7, #20]
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	e7fd      	b.n	800804e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d06f      	beq.n	8008138 <pvPortMalloc+0x154>
 8008058:	4b45      	ldr	r3, [pc, #276]	@ (8008170 <pvPortMalloc+0x18c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d86a      	bhi.n	8008138 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008062:	4b44      	ldr	r3, [pc, #272]	@ (8008174 <pvPortMalloc+0x190>)
 8008064:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008066:	4b43      	ldr	r3, [pc, #268]	@ (8008174 <pvPortMalloc+0x190>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800806c:	e004      	b.n	8008078 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	429a      	cmp	r2, r3
 8008080:	d903      	bls.n	800808a <pvPortMalloc+0xa6>
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1f1      	bne.n	800806e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800808a:	4b37      	ldr	r3, [pc, #220]	@ (8008168 <pvPortMalloc+0x184>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008090:	429a      	cmp	r2, r3
 8008092:	d051      	beq.n	8008138 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2208      	movs	r2, #8
 800809a:	4413      	add	r3, r2
 800809c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	1ad2      	subs	r2, r2, r3
 80080ae:	2308      	movs	r3, #8
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d920      	bls.n	80080f8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4413      	add	r3, r2
 80080bc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00b      	beq.n	80080e0 <pvPortMalloc+0xfc>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	613b      	str	r3, [r7, #16]
}
 80080da:	bf00      	nop
 80080dc:	bf00      	nop
 80080de:	e7fd      	b.n	80080dc <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080f2:	69b8      	ldr	r0, [r7, #24]
 80080f4:	f000 f90a 	bl	800830c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008170 <pvPortMalloc+0x18c>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	4a1b      	ldr	r2, [pc, #108]	@ (8008170 <pvPortMalloc+0x18c>)
 8008104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008106:	4b1a      	ldr	r3, [pc, #104]	@ (8008170 <pvPortMalloc+0x18c>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	4b1b      	ldr	r3, [pc, #108]	@ (8008178 <pvPortMalloc+0x194>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d203      	bcs.n	800811a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008112:	4b17      	ldr	r3, [pc, #92]	@ (8008170 <pvPortMalloc+0x18c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a18      	ldr	r2, [pc, #96]	@ (8008178 <pvPortMalloc+0x194>)
 8008118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	4b13      	ldr	r3, [pc, #76]	@ (800816c <pvPortMalloc+0x188>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	431a      	orrs	r2, r3
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800812e:	4b13      	ldr	r3, [pc, #76]	@ (800817c <pvPortMalloc+0x198>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	4a11      	ldr	r2, [pc, #68]	@ (800817c <pvPortMalloc+0x198>)
 8008136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008138:	f001 fb56 	bl	80097e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <pvPortMalloc+0x17a>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	60fb      	str	r3, [r7, #12]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <pvPortMalloc+0x176>
	return pvReturn;
 800815e:	69fb      	ldr	r3, [r7, #28]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3728      	adds	r7, #40	@ 0x28
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200042c4 	.word	0x200042c4
 800816c:	200042d8 	.word	0x200042d8
 8008170:	200042c8 	.word	0x200042c8
 8008174:	200042bc 	.word	0x200042bc
 8008178:	200042cc 	.word	0x200042cc
 800817c:	200042d0 	.word	0x200042d0

08008180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d04f      	beq.n	8008232 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008192:	2308      	movs	r3, #8
 8008194:	425b      	negs	r3, r3
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4413      	add	r3, r2
 800819a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	4b25      	ldr	r3, [pc, #148]	@ (800823c <vPortFree+0xbc>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4013      	ands	r3, r2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10b      	bne.n	80081c6 <vPortFree+0x46>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	60fb      	str	r3, [r7, #12]
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	e7fd      	b.n	80081c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00b      	beq.n	80081e6 <vPortFree+0x66>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	60bb      	str	r3, [r7, #8]
}
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
 80081e4:	e7fd      	b.n	80081e2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	4b14      	ldr	r3, [pc, #80]	@ (800823c <vPortFree+0xbc>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d01e      	beq.n	8008232 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d11a      	bne.n	8008232 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	4b0e      	ldr	r3, [pc, #56]	@ (800823c <vPortFree+0xbc>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	43db      	mvns	r3, r3
 8008206:	401a      	ands	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800820c:	f001 fade 	bl	80097cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	4b0a      	ldr	r3, [pc, #40]	@ (8008240 <vPortFree+0xc0>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4413      	add	r3, r2
 800821a:	4a09      	ldr	r2, [pc, #36]	@ (8008240 <vPortFree+0xc0>)
 800821c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800821e:	6938      	ldr	r0, [r7, #16]
 8008220:	f000 f874 	bl	800830c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008224:	4b07      	ldr	r3, [pc, #28]	@ (8008244 <vPortFree+0xc4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3301      	adds	r3, #1
 800822a:	4a06      	ldr	r2, [pc, #24]	@ (8008244 <vPortFree+0xc4>)
 800822c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800822e:	f001 fadb 	bl	80097e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008232:	bf00      	nop
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200042d8 	.word	0x200042d8
 8008240:	200042c8 	.word	0x200042c8
 8008244:	200042d4 	.word	0x200042d4

08008248 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800824e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008252:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008254:	4b27      	ldr	r3, [pc, #156]	@ (80082f4 <prvHeapInit+0xac>)
 8008256:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00c      	beq.n	800827c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3307      	adds	r3, #7
 8008266:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0307 	bic.w	r3, r3, #7
 800826e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	4a1f      	ldr	r2, [pc, #124]	@ (80082f4 <prvHeapInit+0xac>)
 8008278:	4413      	add	r3, r2
 800827a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008280:	4a1d      	ldr	r2, [pc, #116]	@ (80082f8 <prvHeapInit+0xb0>)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008286:	4b1c      	ldr	r3, [pc, #112]	@ (80082f8 <prvHeapInit+0xb0>)
 8008288:	2200      	movs	r2, #0
 800828a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	4413      	add	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008294:	2208      	movs	r2, #8
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1a9b      	subs	r3, r3, r2
 800829a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0307 	bic.w	r3, r3, #7
 80082a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4a15      	ldr	r2, [pc, #84]	@ (80082fc <prvHeapInit+0xb4>)
 80082a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082aa:	4b14      	ldr	r3, [pc, #80]	@ (80082fc <prvHeapInit+0xb4>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2200      	movs	r2, #0
 80082b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082b2:	4b12      	ldr	r3, [pc, #72]	@ (80082fc <prvHeapInit+0xb4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	1ad2      	subs	r2, r2, r3
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082c8:	4b0c      	ldr	r3, [pc, #48]	@ (80082fc <prvHeapInit+0xb4>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	4a0a      	ldr	r2, [pc, #40]	@ (8008300 <prvHeapInit+0xb8>)
 80082d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	4a09      	ldr	r2, [pc, #36]	@ (8008304 <prvHeapInit+0xbc>)
 80082de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082e0:	4b09      	ldr	r3, [pc, #36]	@ (8008308 <prvHeapInit+0xc0>)
 80082e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082e6:	601a      	str	r2, [r3, #0]
}
 80082e8:	bf00      	nop
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	200006bc 	.word	0x200006bc
 80082f8:	200042bc 	.word	0x200042bc
 80082fc:	200042c4 	.word	0x200042c4
 8008300:	200042cc 	.word	0x200042cc
 8008304:	200042c8 	.word	0x200042c8
 8008308:	200042d8 	.word	0x200042d8

0800830c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008314:	4b28      	ldr	r3, [pc, #160]	@ (80083b8 <prvInsertBlockIntoFreeList+0xac>)
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	e002      	b.n	8008320 <prvInsertBlockIntoFreeList+0x14>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	429a      	cmp	r2, r3
 8008328:	d8f7      	bhi.n	800831a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	4413      	add	r3, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	429a      	cmp	r2, r3
 800833a:	d108      	bne.n	800834e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	441a      	add	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	441a      	add	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d118      	bne.n	8008394 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b15      	ldr	r3, [pc, #84]	@ (80083bc <prvInsertBlockIntoFreeList+0xb0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d00d      	beq.n	800838a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	441a      	add	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	e008      	b.n	800839c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800838a:	4b0c      	ldr	r3, [pc, #48]	@ (80083bc <prvInsertBlockIntoFreeList+0xb0>)
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	e003      	b.n	800839c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d002      	beq.n	80083aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083aa:	bf00      	nop
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	200042bc 	.word	0x200042bc
 80083bc:	200042c4 	.word	0x200042c4

080083c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f103 0208 	add.w	r2, r3, #8
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f103 0208 	add.w	r2, r3, #8
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f103 0208 	add.w	r2, r3, #8
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
}
 8008456:	bf00      	nop
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d103      	bne.n	8008482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	e00c      	b.n	800849c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	3308      	adds	r3, #8
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e002      	b.n	8008490 <vListInsert+0x2e>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	429a      	cmp	r2, r3
 800849a:	d2f6      	bcs.n	800848a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	601a      	str	r2, [r3, #0]
}
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6892      	ldr	r2, [r2, #8]
 80084ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	6852      	ldr	r2, [r2, #4]
 80084f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d103      	bne.n	8008508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	1e5a      	subs	r2, r3, #1
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3b04      	subs	r3, #4
 8008538:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3b04      	subs	r3, #4
 8008546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f023 0201 	bic.w	r2, r3, #1
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3b04      	subs	r3, #4
 8008556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008558:	4a0c      	ldr	r2, [pc, #48]	@ (800858c <pxPortInitialiseStack+0x64>)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3b14      	subs	r3, #20
 8008562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3b04      	subs	r3, #4
 800856e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f06f 0202 	mvn.w	r2, #2
 8008576:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3b20      	subs	r3, #32
 800857c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800857e:	68fb      	ldr	r3, [r7, #12]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	08008591 	.word	0x08008591

08008590 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800859a:	4b13      	ldr	r3, [pc, #76]	@ (80085e8 <prvTaskExitError+0x58>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	d00b      	beq.n	80085bc <prvTaskExitError+0x2c>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	60fb      	str	r3, [r7, #12]
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	e7fd      	b.n	80085b8 <prvTaskExitError+0x28>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60bb      	str	r3, [r7, #8]
}
 80085ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085d0:	bf00      	nop
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0fc      	beq.n	80085d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	2000000c 	.word	0x2000000c
 80085ec:	00000000 	.word	0x00000000

080085f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085f0:	4b07      	ldr	r3, [pc, #28]	@ (8008610 <pxCurrentTCBConst2>)
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	6808      	ldr	r0, [r1, #0]
 80085f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fa:	f380 8809 	msr	PSP, r0
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f04f 0000 	mov.w	r0, #0
 8008606:	f380 8811 	msr	BASEPRI, r0
 800860a:	4770      	bx	lr
 800860c:	f3af 8000 	nop.w

08008610 <pxCurrentTCBConst2>:
 8008610:	200042e4 	.word	0x200042e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop

08008618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008618:	4808      	ldr	r0, [pc, #32]	@ (800863c <prvPortStartFirstTask+0x24>)
 800861a:	6800      	ldr	r0, [r0, #0]
 800861c:	6800      	ldr	r0, [r0, #0]
 800861e:	f380 8808 	msr	MSP, r0
 8008622:	f04f 0000 	mov.w	r0, #0
 8008626:	f380 8814 	msr	CONTROL, r0
 800862a:	b662      	cpsie	i
 800862c:	b661      	cpsie	f
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	df00      	svc	0
 8008638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800863a:	bf00      	nop
 800863c:	e000ed08 	.word	0xe000ed08

08008640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008646:	4b47      	ldr	r3, [pc, #284]	@ (8008764 <xPortStartScheduler+0x124>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a47      	ldr	r2, [pc, #284]	@ (8008768 <xPortStartScheduler+0x128>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d10b      	bne.n	8008668 <xPortStartScheduler+0x28>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	60fb      	str	r3, [r7, #12]
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	e7fd      	b.n	8008664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008668:	4b3e      	ldr	r3, [pc, #248]	@ (8008764 <xPortStartScheduler+0x124>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a3f      	ldr	r2, [pc, #252]	@ (800876c <xPortStartScheduler+0x12c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d10b      	bne.n	800868a <xPortStartScheduler+0x4a>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	613b      	str	r3, [r7, #16]
}
 8008684:	bf00      	nop
 8008686:	bf00      	nop
 8008688:	e7fd      	b.n	8008686 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800868a:	4b39      	ldr	r3, [pc, #228]	@ (8008770 <xPortStartScheduler+0x130>)
 800868c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	22ff      	movs	r2, #255	@ 0xff
 800869a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	4b31      	ldr	r3, [pc, #196]	@ (8008774 <xPortStartScheduler+0x134>)
 80086b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086b2:	4b31      	ldr	r3, [pc, #196]	@ (8008778 <xPortStartScheduler+0x138>)
 80086b4:	2207      	movs	r2, #7
 80086b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086b8:	e009      	b.n	80086ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80086ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008778 <xPortStartScheduler+0x138>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3b01      	subs	r3, #1
 80086c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008778 <xPortStartScheduler+0x138>)
 80086c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d6:	2b80      	cmp	r3, #128	@ 0x80
 80086d8:	d0ef      	beq.n	80086ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086da:	4b27      	ldr	r3, [pc, #156]	@ (8008778 <xPortStartScheduler+0x138>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f1c3 0307 	rsb	r3, r3, #7
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d00b      	beq.n	80086fe <xPortStartScheduler+0xbe>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	60bb      	str	r3, [r7, #8]
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	e7fd      	b.n	80086fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008778 <xPortStartScheduler+0x138>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	4a1c      	ldr	r2, [pc, #112]	@ (8008778 <xPortStartScheduler+0x138>)
 8008706:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008708:	4b1b      	ldr	r3, [pc, #108]	@ (8008778 <xPortStartScheduler+0x138>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008710:	4a19      	ldr	r2, [pc, #100]	@ (8008778 <xPortStartScheduler+0x138>)
 8008712:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	b2da      	uxtb	r2, r3
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800871c:	4b17      	ldr	r3, [pc, #92]	@ (800877c <xPortStartScheduler+0x13c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a16      	ldr	r2, [pc, #88]	@ (800877c <xPortStartScheduler+0x13c>)
 8008722:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008726:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008728:	4b14      	ldr	r3, [pc, #80]	@ (800877c <xPortStartScheduler+0x13c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a13      	ldr	r2, [pc, #76]	@ (800877c <xPortStartScheduler+0x13c>)
 800872e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008732:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008734:	f000 f8da 	bl	80088ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008738:	4b11      	ldr	r3, [pc, #68]	@ (8008780 <xPortStartScheduler+0x140>)
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800873e:	f000 f8f9 	bl	8008934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008742:	4b10      	ldr	r3, [pc, #64]	@ (8008784 <xPortStartScheduler+0x144>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a0f      	ldr	r2, [pc, #60]	@ (8008784 <xPortStartScheduler+0x144>)
 8008748:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800874c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800874e:	f7ff ff63 	bl	8008618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008752:	f001 f9a1 	bl	8009a98 <vTaskSwitchContext>
	prvTaskExitError();
 8008756:	f7ff ff1b 	bl	8008590 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	e000ed00 	.word	0xe000ed00
 8008768:	410fc271 	.word	0x410fc271
 800876c:	410fc270 	.word	0x410fc270
 8008770:	e000e400 	.word	0xe000e400
 8008774:	200042dc 	.word	0x200042dc
 8008778:	200042e0 	.word	0x200042e0
 800877c:	e000ed20 	.word	0xe000ed20
 8008780:	2000000c 	.word	0x2000000c
 8008784:	e000ef34 	.word	0xe000ef34

08008788 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	607b      	str	r3, [r7, #4]
}
 80087a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087a2:	4b10      	ldr	r3, [pc, #64]	@ (80087e4 <vPortEnterCritical+0x5c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3301      	adds	r3, #1
 80087a8:	4a0e      	ldr	r2, [pc, #56]	@ (80087e4 <vPortEnterCritical+0x5c>)
 80087aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087ac:	4b0d      	ldr	r3, [pc, #52]	@ (80087e4 <vPortEnterCritical+0x5c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d110      	bne.n	80087d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087b4:	4b0c      	ldr	r3, [pc, #48]	@ (80087e8 <vPortEnterCritical+0x60>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	603b      	str	r3, [r7, #0]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <vPortEnterCritical+0x4a>
	}
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	2000000c 	.word	0x2000000c
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087f2:	4b12      	ldr	r3, [pc, #72]	@ (800883c <vPortExitCritical+0x50>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10b      	bne.n	8008812 <vPortExitCritical+0x26>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	607b      	str	r3, [r7, #4]
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	e7fd      	b.n	800880e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008812:	4b0a      	ldr	r3, [pc, #40]	@ (800883c <vPortExitCritical+0x50>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3b01      	subs	r3, #1
 8008818:	4a08      	ldr	r2, [pc, #32]	@ (800883c <vPortExitCritical+0x50>)
 800881a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800881c:	4b07      	ldr	r3, [pc, #28]	@ (800883c <vPortExitCritical+0x50>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d105      	bne.n	8008830 <vPortExitCritical+0x44>
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800882e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	2000000c 	.word	0x2000000c

08008840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008840:	f3ef 8009 	mrs	r0, PSP
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	4b15      	ldr	r3, [pc, #84]	@ (80088a0 <pxCurrentTCBConst>)
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	f01e 0f10 	tst.w	lr, #16
 8008850:	bf08      	it	eq
 8008852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885a:	6010      	str	r0, [r2, #0]
 800885c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008864:	f380 8811 	msr	BASEPRI, r0
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f001 f912 	bl	8009a98 <vTaskSwitchContext>
 8008874:	f04f 0000 	mov.w	r0, #0
 8008878:	f380 8811 	msr	BASEPRI, r0
 800887c:	bc09      	pop	{r0, r3}
 800887e:	6819      	ldr	r1, [r3, #0]
 8008880:	6808      	ldr	r0, [r1, #0]
 8008882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008886:	f01e 0f10 	tst.w	lr, #16
 800888a:	bf08      	it	eq
 800888c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008890:	f380 8809 	msr	PSP, r0
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	f3af 8000 	nop.w

080088a0 <pxCurrentTCBConst>:
 80088a0:	200042e4 	.word	0x200042e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop

080088a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	607b      	str	r3, [r7, #4]
}
 80088c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088c2:	f001 f82f 	bl	8009924 <xTaskIncrementTick>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088cc:	4b06      	ldr	r3, [pc, #24]	@ (80088e8 <xPortSysTickHandler+0x40>)
 80088ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	2300      	movs	r3, #0
 80088d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	f383 8811 	msr	BASEPRI, r3
}
 80088de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	e000ed04 	.word	0xe000ed04

080088ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008920 <vPortSetupTimerInterrupt+0x34>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <vPortSetupTimerInterrupt+0x38>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008928 <vPortSetupTimerInterrupt+0x3c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a0a      	ldr	r2, [pc, #40]	@ (800892c <vPortSetupTimerInterrupt+0x40>)
 8008902:	fba2 2303 	umull	r2, r3, r2, r3
 8008906:	099b      	lsrs	r3, r3, #6
 8008908:	4a09      	ldr	r2, [pc, #36]	@ (8008930 <vPortSetupTimerInterrupt+0x44>)
 800890a:	3b01      	subs	r3, #1
 800890c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800890e:	4b04      	ldr	r3, [pc, #16]	@ (8008920 <vPortSetupTimerInterrupt+0x34>)
 8008910:	2207      	movs	r2, #7
 8008912:	601a      	str	r2, [r3, #0]
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	e000e010 	.word	0xe000e010
 8008924:	e000e018 	.word	0xe000e018
 8008928:	20000000 	.word	0x20000000
 800892c:	10624dd3 	.word	0x10624dd3
 8008930:	e000e014 	.word	0xe000e014

08008934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008934:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008944 <vPortEnableVFP+0x10>
 8008938:	6801      	ldr	r1, [r0, #0]
 800893a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800893e:	6001      	str	r1, [r0, #0]
 8008940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008942:	bf00      	nop
 8008944:	e000ed88 	.word	0xe000ed88

08008948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10b      	bne.n	8008974 <xQueueGenericReset+0x2c>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	60bb      	str	r3, [r7, #8]
}
 800896e:	bf00      	nop
 8008970:	bf00      	nop
 8008972:	e7fd      	b.n	8008970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008974:	f7ff ff08 	bl	8008788 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008980:	68f9      	ldr	r1, [r7, #12]
 8008982:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008984:	fb01 f303 	mul.w	r3, r1, r3
 8008988:	441a      	add	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a4:	3b01      	subs	r3, #1
 80089a6:	68f9      	ldr	r1, [r7, #12]
 80089a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80089aa:	fb01 f303 	mul.w	r3, r1, r3
 80089ae:	441a      	add	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	22ff      	movs	r2, #255	@ 0xff
 80089b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	22ff      	movs	r2, #255	@ 0xff
 80089c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d114      	bne.n	80089f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01a      	beq.n	8008a08 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3310      	adds	r3, #16
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 f8e0 	bl	8009b9c <xTaskRemoveFromEventList>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d012      	beq.n	8008a08 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a18 <xQueueGenericReset+0xd0>)
 80089e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	e009      	b.n	8008a08 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3310      	adds	r3, #16
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fce1 	bl	80083c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3324      	adds	r3, #36	@ 0x24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fcdc 	bl	80083c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a08:	f7ff fef0 	bl	80087ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a0c:	2301      	movs	r3, #1
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	e000ed04 	.word	0xe000ed04

08008a1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	@ 0x28
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4613      	mov	r3, r2
 8008a28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10b      	bne.n	8008a48 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	613b      	str	r3, [r7, #16]
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	e7fd      	b.n	8008a44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	fb02 f303 	mul.w	r3, r2, r3
 8008a50:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	3348      	adds	r3, #72	@ 0x48
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fac4 	bl	8007fe4 <pvPortMalloc>
 8008a5c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d011      	beq.n	8008a88 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	3348      	adds	r3, #72	@ 0x48
 8008a6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a76:	79fa      	ldrb	r2, [r7, #7]
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f805 	bl	8008a92 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a88:	69bb      	ldr	r3, [r7, #24]
	}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3720      	adds	r7, #32
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d103      	bne.n	8008aae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	e002      	b.n	8008ab4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	69b8      	ldr	r0, [r7, #24]
 8008ac4:	f7ff ff40 	bl	8008948 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ac8:	bf00      	nop
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00e      	beq.n	8008afc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008af0:	2300      	movs	r3, #0
 8008af2:	2200      	movs	r2, #0
 8008af4:	2100      	movs	r1, #0
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f81c 	bl	8008b34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	617b      	str	r3, [r7, #20]
 8008b12:	2300      	movs	r3, #0
 8008b14:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6939      	ldr	r1, [r7, #16]
 8008b1c:	6978      	ldr	r0, [r7, #20]
 8008b1e:	f7ff ff7d 	bl	8008a1c <xQueueGenericCreate>
 8008b22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff ffd3 	bl	8008ad0 <prvInitialiseMutex>

		return xNewQueue;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
	}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08e      	sub	sp, #56	@ 0x38
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b42:	2300      	movs	r3, #0
 8008b44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10b      	bne.n	8008b68 <xQueueGenericSend+0x34>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	e7fd      	b.n	8008b64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d103      	bne.n	8008b76 <xQueueGenericSend+0x42>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <xQueueGenericSend+0x46>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <xQueueGenericSend+0x48>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10b      	bne.n	8008b98 <xQueueGenericSend+0x64>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b92:	bf00      	nop
 8008b94:	bf00      	nop
 8008b96:	e7fd      	b.n	8008b94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d103      	bne.n	8008ba6 <xQueueGenericSend+0x72>
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d101      	bne.n	8008baa <xQueueGenericSend+0x76>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e000      	b.n	8008bac <xQueueGenericSend+0x78>
 8008baa:	2300      	movs	r3, #0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10b      	bne.n	8008bc8 <xQueueGenericSend+0x94>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	623b      	str	r3, [r7, #32]
}
 8008bc2:	bf00      	nop
 8008bc4:	bf00      	nop
 8008bc6:	e7fd      	b.n	8008bc4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bc8:	f001 fa0c 	bl	8009fe4 <xTaskGetSchedulerState>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d102      	bne.n	8008bd8 <xQueueGenericSend+0xa4>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <xQueueGenericSend+0xa8>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e000      	b.n	8008bde <xQueueGenericSend+0xaa>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10b      	bne.n	8008bfa <xQueueGenericSend+0xc6>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	61fb      	str	r3, [r7, #28]
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	e7fd      	b.n	8008bf6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bfa:	f7ff fdc5 	bl	8008788 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d302      	bcc.n	8008c10 <xQueueGenericSend+0xdc>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d129      	bne.n	8008c64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c16:	f000 fa99 	bl	800914c <prvCopyDataToQueue>
 8008c1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d010      	beq.n	8008c46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c26:	3324      	adds	r3, #36	@ 0x24
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 ffb7 	bl	8009b9c <xTaskRemoveFromEventList>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d013      	beq.n	8008c5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c34:	4b3f      	ldr	r3, [pc, #252]	@ (8008d34 <xQueueGenericSend+0x200>)
 8008c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	e00a      	b.n	8008c5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d007      	beq.n	8008c5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c4c:	4b39      	ldr	r3, [pc, #228]	@ (8008d34 <xQueueGenericSend+0x200>)
 8008c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c5c:	f7ff fdc6 	bl	80087ec <vPortExitCritical>
				return pdPASS;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e063      	b.n	8008d2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c6a:	f7ff fdbf 	bl	80087ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e05c      	b.n	8008d2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d106      	bne.n	8008c86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 f855 	bl	8009d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c82:	2301      	movs	r3, #1
 8008c84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c86:	f7ff fdb1 	bl	80087ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c8a:	f000 fd9f 	bl	80097cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c8e:	f7ff fd7b 	bl	8008788 <vPortEnterCritical>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c98:	b25b      	sxtb	r3, r3
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d103      	bne.n	8008ca8 <xQueueGenericSend+0x174>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cae:	b25b      	sxtb	r3, r3
 8008cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb4:	d103      	bne.n	8008cbe <xQueueGenericSend+0x18a>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cbe:	f7ff fd95 	bl	80087ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cc2:	1d3a      	adds	r2, r7, #4
 8008cc4:	f107 0314 	add.w	r3, r7, #20
 8008cc8:	4611      	mov	r1, r2
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f001 f844 	bl	8009d58 <xTaskCheckForTimeOut>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d124      	bne.n	8008d20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cd8:	f000 fb30 	bl	800933c <prvIsQueueFull>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d018      	beq.n	8008d14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	3310      	adds	r3, #16
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 ff30 	bl	8009b50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cf2:	f000 fabb 	bl	800926c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cf6:	f000 fd77 	bl	80097e8 <xTaskResumeAll>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f47f af7c 	bne.w	8008bfa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008d02:	4b0c      	ldr	r3, [pc, #48]	@ (8008d34 <xQueueGenericSend+0x200>)
 8008d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	e772      	b.n	8008bfa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d16:	f000 faa9 	bl	800926c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d1a:	f000 fd65 	bl	80097e8 <xTaskResumeAll>
 8008d1e:	e76c      	b.n	8008bfa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d22:	f000 faa3 	bl	800926c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d26:	f000 fd5f 	bl	80097e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3738      	adds	r7, #56	@ 0x38
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	e000ed04 	.word	0xe000ed04

08008d38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08c      	sub	sp, #48	@ 0x30
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d44:	2300      	movs	r3, #0
 8008d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10b      	bne.n	8008d6a <xQueueReceive+0x32>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	623b      	str	r3, [r7, #32]
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
 8008d68:	e7fd      	b.n	8008d66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d103      	bne.n	8008d78 <xQueueReceive+0x40>
 8008d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <xQueueReceive+0x44>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e000      	b.n	8008d7e <xQueueReceive+0x46>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10b      	bne.n	8008d9a <xQueueReceive+0x62>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	61fb      	str	r3, [r7, #28]
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	e7fd      	b.n	8008d96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d9a:	f001 f923 	bl	8009fe4 <xTaskGetSchedulerState>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <xQueueReceive+0x72>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <xQueueReceive+0x76>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <xQueueReceive+0x78>
 8008dae:	2300      	movs	r3, #0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10b      	bne.n	8008dcc <xQueueReceive+0x94>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	61bb      	str	r3, [r7, #24]
}
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	e7fd      	b.n	8008dc8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dcc:	f7ff fcdc 	bl	8008788 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01f      	beq.n	8008e1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ddc:	68b9      	ldr	r1, [r7, #8]
 8008dde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008de0:	f000 fa1e 	bl	8009220 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	1e5a      	subs	r2, r3, #1
 8008de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00f      	beq.n	8008e14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df6:	3310      	adds	r3, #16
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fecf 	bl	8009b9c <xTaskRemoveFromEventList>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d007      	beq.n	8008e14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e04:	4b3c      	ldr	r3, [pc, #240]	@ (8008ef8 <xQueueReceive+0x1c0>)
 8008e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e14:	f7ff fcea 	bl	80087ec <vPortExitCritical>
				return pdPASS;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e069      	b.n	8008ef0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d103      	bne.n	8008e2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e22:	f7ff fce3 	bl	80087ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e26:	2300      	movs	r3, #0
 8008e28:	e062      	b.n	8008ef0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d106      	bne.n	8008e3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e30:	f107 0310 	add.w	r3, r7, #16
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 ff79 	bl	8009d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e3e:	f7ff fcd5 	bl	80087ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e42:	f000 fcc3 	bl	80097cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e46:	f7ff fc9f 	bl	8008788 <vPortEnterCritical>
 8008e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e50:	b25b      	sxtb	r3, r3
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e56:	d103      	bne.n	8008e60 <xQueueReceive+0x128>
 8008e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e66:	b25b      	sxtb	r3, r3
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d103      	bne.n	8008e76 <xQueueReceive+0x13e>
 8008e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e76:	f7ff fcb9 	bl	80087ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e7a:	1d3a      	adds	r2, r7, #4
 8008e7c:	f107 0310 	add.w	r3, r7, #16
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 ff68 	bl	8009d58 <xTaskCheckForTimeOut>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d123      	bne.n	8008ed6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e90:	f000 fa3e 	bl	8009310 <prvIsQueueEmpty>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d017      	beq.n	8008eca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9c:	3324      	adds	r3, #36	@ 0x24
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 fe54 	bl	8009b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ea8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eaa:	f000 f9df 	bl	800926c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008eae:	f000 fc9b 	bl	80097e8 <xTaskResumeAll>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d189      	bne.n	8008dcc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef8 <xQueueReceive+0x1c0>)
 8008eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	e780      	b.n	8008dcc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ecc:	f000 f9ce 	bl	800926c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ed0:	f000 fc8a 	bl	80097e8 <xTaskResumeAll>
 8008ed4:	e77a      	b.n	8008dcc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ed8:	f000 f9c8 	bl	800926c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008edc:	f000 fc84 	bl	80097e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ee2:	f000 fa15 	bl	8009310 <prvIsQueueEmpty>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f43f af6f 	beq.w	8008dcc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008eee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3730      	adds	r7, #48	@ 0x30
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	e000ed04 	.word	0xe000ed04

08008efc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08e      	sub	sp, #56	@ 0x38
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10b      	bne.n	8008f30 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	623b      	str	r3, [r7, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	bf00      	nop
 8008f2e:	e7fd      	b.n	8008f2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	61fb      	str	r3, [r7, #28]
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	e7fd      	b.n	8008f4c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f50:	f001 f848 	bl	8009fe4 <xTaskGetSchedulerState>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d102      	bne.n	8008f60 <xQueueSemaphoreTake+0x64>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <xQueueSemaphoreTake+0x68>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e000      	b.n	8008f66 <xQueueSemaphoreTake+0x6a>
 8008f64:	2300      	movs	r3, #0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10b      	bne.n	8008f82 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	61bb      	str	r3, [r7, #24]
}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	e7fd      	b.n	8008f7e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f82:	f7ff fc01 	bl	8008788 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f8a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d024      	beq.n	8008fdc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f94:	1e5a      	subs	r2, r3, #1
 8008f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f98:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d104      	bne.n	8008fac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008fa2:	f001 f9cb 	bl	800a33c <pvTaskIncrementMutexHeldCount>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008faa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00f      	beq.n	8008fd4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb6:	3310      	adds	r3, #16
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 fdef 	bl	8009b9c <xTaskRemoveFromEventList>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d007      	beq.n	8008fd4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fc4:	4b54      	ldr	r3, [pc, #336]	@ (8009118 <xQueueSemaphoreTake+0x21c>)
 8008fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fd4:	f7ff fc0a 	bl	80087ec <vPortExitCritical>
				return pdPASS;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e098      	b.n	800910e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d112      	bne.n	8009008 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00b      	beq.n	8009000 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	617b      	str	r3, [r7, #20]
}
 8008ffa:	bf00      	nop
 8008ffc:	bf00      	nop
 8008ffe:	e7fd      	b.n	8008ffc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009000:	f7ff fbf4 	bl	80087ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009004:	2300      	movs	r3, #0
 8009006:	e082      	b.n	800910e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800900e:	f107 030c 	add.w	r3, r7, #12
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fe8a 	bl	8009d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009018:	2301      	movs	r3, #1
 800901a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800901c:	f7ff fbe6 	bl	80087ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009020:	f000 fbd4 	bl	80097cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009024:	f7ff fbb0 	bl	8008788 <vPortEnterCritical>
 8009028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800902e:	b25b      	sxtb	r3, r3
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d103      	bne.n	800903e <xQueueSemaphoreTake+0x142>
 8009036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800903e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009044:	b25b      	sxtb	r3, r3
 8009046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904a:	d103      	bne.n	8009054 <xQueueSemaphoreTake+0x158>
 800904c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009054:	f7ff fbca 	bl	80087ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009058:	463a      	mov	r2, r7
 800905a:	f107 030c 	add.w	r3, r7, #12
 800905e:	4611      	mov	r1, r2
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fe79 	bl	8009d58 <xTaskCheckForTimeOut>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d132      	bne.n	80090d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800906c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800906e:	f000 f94f 	bl	8009310 <prvIsQueueEmpty>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d026      	beq.n	80090c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d109      	bne.n	8009094 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009080:	f7ff fb82 	bl	8008788 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4618      	mov	r0, r3
 800908a:	f000 ffc9 	bl	800a020 <xTaskPriorityInherit>
 800908e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009090:	f7ff fbac 	bl	80087ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009096:	3324      	adds	r3, #36	@ 0x24
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fd57 	bl	8009b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090a4:	f000 f8e2 	bl	800926c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090a8:	f000 fb9e 	bl	80097e8 <xTaskResumeAll>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f47f af67 	bne.w	8008f82 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80090b4:	4b18      	ldr	r3, [pc, #96]	@ (8009118 <xQueueSemaphoreTake+0x21c>)
 80090b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	e75d      	b.n	8008f82 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80090c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090c8:	f000 f8d0 	bl	800926c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090cc:	f000 fb8c 	bl	80097e8 <xTaskResumeAll>
 80090d0:	e757      	b.n	8008f82 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80090d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090d4:	f000 f8ca 	bl	800926c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090d8:	f000 fb86 	bl	80097e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090de:	f000 f917 	bl	8009310 <prvIsQueueEmpty>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f43f af4c 	beq.w	8008f82 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00d      	beq.n	800910c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80090f0:	f7ff fb4a 	bl	8008788 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80090f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090f6:	f000 f811 	bl	800911c <prvGetDisinheritPriorityAfterTimeout>
 80090fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80090fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009102:	4618      	mov	r0, r3
 8009104:	f001 f88a 	bl	800a21c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009108:	f7ff fb70 	bl	80087ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800910c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800910e:	4618      	mov	r0, r3
 8009110:	3738      	adds	r7, #56	@ 0x38
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	d006      	beq.n	800913a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1c3 0307 	rsb	r3, r3, #7
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	e001      	b.n	800913e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800913e:	68fb      	ldr	r3, [r7, #12]
	}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009158:	2300      	movs	r3, #0
 800915a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009160:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10d      	bne.n	8009186 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d14d      	bne.n	800920e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 ffc8 	bl	800a10c <xTaskPriorityDisinherit>
 800917c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	609a      	str	r2, [r3, #8]
 8009184:	e043      	b.n	800920e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d119      	bne.n	80091c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6858      	ldr	r0, [r3, #4]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009194:	461a      	mov	r2, r3
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	f004 f8d9 	bl	800d34e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a4:	441a      	add	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d32b      	bcc.n	800920e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	605a      	str	r2, [r3, #4]
 80091be:	e026      	b.n	800920e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	68d8      	ldr	r0, [r3, #12]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c8:	461a      	mov	r2, r3
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	f004 f8bf 	bl	800d34e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d8:	425b      	negs	r3, r3
 80091da:	441a      	add	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d207      	bcs.n	80091fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f4:	425b      	negs	r3, r3
 80091f6:	441a      	add	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d105      	bne.n	800920e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	3b01      	subs	r3, #1
 800920c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009216:	697b      	ldr	r3, [r7, #20]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	d018      	beq.n	8009264 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923a:	441a      	add	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	429a      	cmp	r2, r3
 800924a:	d303      	bcc.n	8009254 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68d9      	ldr	r1, [r3, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925c:	461a      	mov	r2, r3
 800925e:	6838      	ldr	r0, [r7, #0]
 8009260:	f004 f875 	bl	800d34e <memcpy>
	}
}
 8009264:	bf00      	nop
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009274:	f7ff fa88 	bl	8008788 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800927e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009280:	e011      	b.n	80092a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009286:	2b00      	cmp	r3, #0
 8009288:	d012      	beq.n	80092b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	3324      	adds	r3, #36	@ 0x24
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fc84 	bl	8009b9c <xTaskRemoveFromEventList>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800929a:	f000 fdc1 	bl	8009e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dce9      	bgt.n	8009282 <prvUnlockQueue+0x16>
 80092ae:	e000      	b.n	80092b2 <prvUnlockQueue+0x46>
					break;
 80092b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	22ff      	movs	r2, #255	@ 0xff
 80092b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80092ba:	f7ff fa97 	bl	80087ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092be:	f7ff fa63 	bl	8008788 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092ca:	e011      	b.n	80092f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d012      	beq.n	80092fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3310      	adds	r3, #16
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 fc5f 	bl	8009b9c <xTaskRemoveFromEventList>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092e4:	f000 fd9c 	bl	8009e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dce9      	bgt.n	80092cc <prvUnlockQueue+0x60>
 80092f8:	e000      	b.n	80092fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	22ff      	movs	r2, #255	@ 0xff
 8009300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009304:	f7ff fa72 	bl	80087ec <vPortExitCritical>
}
 8009308:	bf00      	nop
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009318:	f7ff fa36 	bl	8008788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009320:	2b00      	cmp	r3, #0
 8009322:	d102      	bne.n	800932a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e001      	b.n	800932e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800932a:	2300      	movs	r3, #0
 800932c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800932e:	f7ff fa5d 	bl	80087ec <vPortExitCritical>

	return xReturn;
 8009332:	68fb      	ldr	r3, [r7, #12]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009344:	f7ff fa20 	bl	8008788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009350:	429a      	cmp	r2, r3
 8009352:	d102      	bne.n	800935a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009354:	2301      	movs	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	e001      	b.n	800935e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800935a:	2300      	movs	r3, #0
 800935c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800935e:	f7ff fa45 	bl	80087ec <vPortExitCritical>

	return xReturn;
 8009362:	68fb      	ldr	r3, [r7, #12]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08e      	sub	sp, #56	@ 0x38
 8009370:	af04      	add	r7, sp, #16
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800937a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10b      	bne.n	8009398 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	623b      	str	r3, [r7, #32]
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	e7fd      	b.n	8009394 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10b      	bne.n	80093b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	61fb      	str	r3, [r7, #28]
}
 80093b0:	bf00      	nop
 80093b2:	bf00      	nop
 80093b4:	e7fd      	b.n	80093b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80093b6:	2354      	movs	r3, #84	@ 0x54
 80093b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2b54      	cmp	r3, #84	@ 0x54
 80093be:	d00b      	beq.n	80093d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	61bb      	str	r3, [r7, #24]
}
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
 80093d6:	e7fd      	b.n	80093d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80093d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01e      	beq.n	800941e <xTaskCreateStatic+0xb2>
 80093e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d01b      	beq.n	800941e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093f8:	2300      	movs	r3, #0
 80093fa:	9303      	str	r3, [sp, #12]
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	9302      	str	r3, [sp, #8]
 8009400:	f107 0314 	add.w	r3, r7, #20
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 f850 	bl	80094b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009416:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009418:	f000 f8d6 	bl	80095c8 <prvAddNewTaskToReadyList>
 800941c:	e001      	b.n	8009422 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800941e:	2300      	movs	r3, #0
 8009420:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009422:	697b      	ldr	r3, [r7, #20]
	}
 8009424:	4618      	mov	r0, r3
 8009426:	3728      	adds	r7, #40	@ 0x28
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08c      	sub	sp, #48	@ 0x30
 8009430:	af04      	add	r7, sp, #16
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	4613      	mov	r3, r2
 800943a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe fdcf 	bl	8007fe4 <pvPortMalloc>
 8009446:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800944e:	2054      	movs	r0, #84	@ 0x54
 8009450:	f7fe fdc8 	bl	8007fe4 <pvPortMalloc>
 8009454:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	631a      	str	r2, [r3, #48]	@ 0x30
 8009462:	e005      	b.n	8009470 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009464:	6978      	ldr	r0, [r7, #20]
 8009466:	f7fe fe8b 	bl	8008180 <vPortFree>
 800946a:	e001      	b.n	8009470 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800946c:	2300      	movs	r3, #0
 800946e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d017      	beq.n	80094a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800947e:	88fa      	ldrh	r2, [r7, #6]
 8009480:	2300      	movs	r3, #0
 8009482:	9303      	str	r3, [sp, #12]
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	9302      	str	r3, [sp, #8]
 8009488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f80e 	bl	80094b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800949a:	69f8      	ldr	r0, [r7, #28]
 800949c:	f000 f894 	bl	80095c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094a0:	2301      	movs	r3, #1
 80094a2:	61bb      	str	r3, [r7, #24]
 80094a4:	e002      	b.n	80094ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094a6:	f04f 33ff 	mov.w	r3, #4294967295
 80094aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094ac:	69bb      	ldr	r3, [r7, #24]
	}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b088      	sub	sp, #32
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094ce:	3b01      	subs	r3, #1
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	f023 0307 	bic.w	r3, r3, #7
 80094dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	f003 0307 	and.w	r3, r3, #7
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	617b      	str	r3, [r7, #20]
}
 80094fa:	bf00      	nop
 80094fc:	bf00      	nop
 80094fe:	e7fd      	b.n	80094fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d01f      	beq.n	8009546 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009506:	2300      	movs	r3, #0
 8009508:	61fb      	str	r3, [r7, #28]
 800950a:	e012      	b.n	8009532 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	4413      	add	r3, r2
 8009512:	7819      	ldrb	r1, [r3, #0]
 8009514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	4413      	add	r3, r2
 800951a:	3334      	adds	r3, #52	@ 0x34
 800951c:	460a      	mov	r2, r1
 800951e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	4413      	add	r3, r2
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d006      	beq.n	800953a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	3301      	adds	r3, #1
 8009530:	61fb      	str	r3, [r7, #28]
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	2b0f      	cmp	r3, #15
 8009536:	d9e9      	bls.n	800950c <prvInitialiseNewTask+0x56>
 8009538:	e000      	b.n	800953c <prvInitialiseNewTask+0x86>
			{
				break;
 800953a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009544:	e003      	b.n	800954e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009548:	2200      	movs	r2, #0
 800954a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800954e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009550:	2b06      	cmp	r3, #6
 8009552:	d901      	bls.n	8009558 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009554:	2306      	movs	r3, #6
 8009556:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800955c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009562:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	2200      	movs	r2, #0
 8009568:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	3304      	adds	r3, #4
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe ff46 	bl	8008400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	3318      	adds	r3, #24
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe ff41 	bl	8008400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009582:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009586:	f1c3 0207 	rsb	r2, r3, #7
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800958e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009592:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	2200      	movs	r2, #0
 8009598:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	68f9      	ldr	r1, [r7, #12]
 80095a6:	69b8      	ldr	r0, [r7, #24]
 80095a8:	f7fe ffbe 	bl	8008528 <pxPortInitialiseStack>
 80095ac:	4602      	mov	r2, r0
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095be:	bf00      	nop
 80095c0:	3720      	adds	r7, #32
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095d0:	f7ff f8da 	bl	8008788 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095d4:	4b2a      	ldr	r3, [pc, #168]	@ (8009680 <prvAddNewTaskToReadyList+0xb8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3301      	adds	r3, #1
 80095da:	4a29      	ldr	r2, [pc, #164]	@ (8009680 <prvAddNewTaskToReadyList+0xb8>)
 80095dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095de:	4b29      	ldr	r3, [pc, #164]	@ (8009684 <prvAddNewTaskToReadyList+0xbc>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d109      	bne.n	80095fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095e6:	4a27      	ldr	r2, [pc, #156]	@ (8009684 <prvAddNewTaskToReadyList+0xbc>)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095ec:	4b24      	ldr	r3, [pc, #144]	@ (8009680 <prvAddNewTaskToReadyList+0xb8>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d110      	bne.n	8009616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095f4:	f000 fc38 	bl	8009e68 <prvInitialiseTaskLists>
 80095f8:	e00d      	b.n	8009616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095fa:	4b23      	ldr	r3, [pc, #140]	@ (8009688 <prvAddNewTaskToReadyList+0xc0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009602:	4b20      	ldr	r3, [pc, #128]	@ (8009684 <prvAddNewTaskToReadyList+0xbc>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960c:	429a      	cmp	r2, r3
 800960e:	d802      	bhi.n	8009616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009610:	4a1c      	ldr	r2, [pc, #112]	@ (8009684 <prvAddNewTaskToReadyList+0xbc>)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009616:	4b1d      	ldr	r3, [pc, #116]	@ (800968c <prvAddNewTaskToReadyList+0xc4>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3301      	adds	r3, #1
 800961c:	4a1b      	ldr	r2, [pc, #108]	@ (800968c <prvAddNewTaskToReadyList+0xc4>)
 800961e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009624:	2201      	movs	r2, #1
 8009626:	409a      	lsls	r2, r3
 8009628:	4b19      	ldr	r3, [pc, #100]	@ (8009690 <prvAddNewTaskToReadyList+0xc8>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4313      	orrs	r3, r2
 800962e:	4a18      	ldr	r2, [pc, #96]	@ (8009690 <prvAddNewTaskToReadyList+0xc8>)
 8009630:	6013      	str	r3, [r2, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4a15      	ldr	r2, [pc, #84]	@ (8009694 <prvAddNewTaskToReadyList+0xcc>)
 8009640:	441a      	add	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3304      	adds	r3, #4
 8009646:	4619      	mov	r1, r3
 8009648:	4610      	mov	r0, r2
 800964a:	f7fe fee6 	bl	800841a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800964e:	f7ff f8cd 	bl	80087ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009652:	4b0d      	ldr	r3, [pc, #52]	@ (8009688 <prvAddNewTaskToReadyList+0xc0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00e      	beq.n	8009678 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800965a:	4b0a      	ldr	r3, [pc, #40]	@ (8009684 <prvAddNewTaskToReadyList+0xbc>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009664:	429a      	cmp	r2, r3
 8009666:	d207      	bcs.n	8009678 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009668:	4b0b      	ldr	r3, [pc, #44]	@ (8009698 <prvAddNewTaskToReadyList+0xd0>)
 800966a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	200043e4 	.word	0x200043e4
 8009684:	200042e4 	.word	0x200042e4
 8009688:	200043f0 	.word	0x200043f0
 800968c:	20004400 	.word	0x20004400
 8009690:	200043ec 	.word	0x200043ec
 8009694:	200042e8 	.word	0x200042e8
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096a4:	2300      	movs	r3, #0
 80096a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d018      	beq.n	80096e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096ae:	4b14      	ldr	r3, [pc, #80]	@ (8009700 <vTaskDelay+0x64>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00b      	beq.n	80096ce <vTaskDelay+0x32>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60bb      	str	r3, [r7, #8]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80096ce:	f000 f87d 	bl	80097cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096d2:	2100      	movs	r1, #0
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fe45 	bl	800a364 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096da:	f000 f885 	bl	80097e8 <xTaskResumeAll>
 80096de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d107      	bne.n	80096f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80096e6:	4b07      	ldr	r3, [pc, #28]	@ (8009704 <vTaskDelay+0x68>)
 80096e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096f6:	bf00      	nop
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	2000440c 	.word	0x2000440c
 8009704:	e000ed04 	.word	0xe000ed04

08009708 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08a      	sub	sp, #40	@ 0x28
 800970c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009716:	463a      	mov	r2, r7
 8009718:	1d39      	adds	r1, r7, #4
 800971a:	f107 0308 	add.w	r3, r7, #8
 800971e:	4618      	mov	r0, r3
 8009720:	f7f7 f93e 	bl	80009a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	9202      	str	r2, [sp, #8]
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	2300      	movs	r3, #0
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	460a      	mov	r2, r1
 8009736:	491f      	ldr	r1, [pc, #124]	@ (80097b4 <vTaskStartScheduler+0xac>)
 8009738:	481f      	ldr	r0, [pc, #124]	@ (80097b8 <vTaskStartScheduler+0xb0>)
 800973a:	f7ff fe17 	bl	800936c <xTaskCreateStatic>
 800973e:	4603      	mov	r3, r0
 8009740:	4a1e      	ldr	r2, [pc, #120]	@ (80097bc <vTaskStartScheduler+0xb4>)
 8009742:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009744:	4b1d      	ldr	r3, [pc, #116]	@ (80097bc <vTaskStartScheduler+0xb4>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800974c:	2301      	movs	r3, #1
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	e001      	b.n	8009756 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009752:	2300      	movs	r3, #0
 8009754:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d116      	bne.n	800978a <vTaskStartScheduler+0x82>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	613b      	str	r3, [r7, #16]
}
 800976e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009770:	4b13      	ldr	r3, [pc, #76]	@ (80097c0 <vTaskStartScheduler+0xb8>)
 8009772:	f04f 32ff 	mov.w	r2, #4294967295
 8009776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009778:	4b12      	ldr	r3, [pc, #72]	@ (80097c4 <vTaskStartScheduler+0xbc>)
 800977a:	2201      	movs	r2, #1
 800977c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800977e:	4b12      	ldr	r3, [pc, #72]	@ (80097c8 <vTaskStartScheduler+0xc0>)
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009784:	f7fe ff5c 	bl	8008640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009788:	e00f      	b.n	80097aa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d10b      	bne.n	80097aa <vTaskStartScheduler+0xa2>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	60fb      	str	r3, [r7, #12]
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <vTaskStartScheduler+0x9e>
}
 80097aa:	bf00      	nop
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	0800e020 	.word	0x0800e020
 80097b8:	08009e39 	.word	0x08009e39
 80097bc:	20004408 	.word	0x20004408
 80097c0:	20004404 	.word	0x20004404
 80097c4:	200043f0 	.word	0x200043f0
 80097c8:	200043e8 	.word	0x200043e8

080097cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097cc:	b480      	push	{r7}
 80097ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80097d0:	4b04      	ldr	r3, [pc, #16]	@ (80097e4 <vTaskSuspendAll+0x18>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3301      	adds	r3, #1
 80097d6:	4a03      	ldr	r2, [pc, #12]	@ (80097e4 <vTaskSuspendAll+0x18>)
 80097d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80097da:	bf00      	nop
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	2000440c 	.word	0x2000440c

080097e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097f6:	4b42      	ldr	r3, [pc, #264]	@ (8009900 <xTaskResumeAll+0x118>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <xTaskResumeAll+0x2e>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	603b      	str	r3, [r7, #0]
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	e7fd      	b.n	8009812 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009816:	f7fe ffb7 	bl	8008788 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800981a:	4b39      	ldr	r3, [pc, #228]	@ (8009900 <xTaskResumeAll+0x118>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3b01      	subs	r3, #1
 8009820:	4a37      	ldr	r2, [pc, #220]	@ (8009900 <xTaskResumeAll+0x118>)
 8009822:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009824:	4b36      	ldr	r3, [pc, #216]	@ (8009900 <xTaskResumeAll+0x118>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d161      	bne.n	80098f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800982c:	4b35      	ldr	r3, [pc, #212]	@ (8009904 <xTaskResumeAll+0x11c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d05d      	beq.n	80098f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009834:	e02e      	b.n	8009894 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009836:	4b34      	ldr	r3, [pc, #208]	@ (8009908 <xTaskResumeAll+0x120>)
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3318      	adds	r3, #24
 8009842:	4618      	mov	r0, r3
 8009844:	f7fe fe46 	bl	80084d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3304      	adds	r3, #4
 800984c:	4618      	mov	r0, r3
 800984e:	f7fe fe41 	bl	80084d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009856:	2201      	movs	r2, #1
 8009858:	409a      	lsls	r2, r3
 800985a:	4b2c      	ldr	r3, [pc, #176]	@ (800990c <xTaskResumeAll+0x124>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4313      	orrs	r3, r2
 8009860:	4a2a      	ldr	r2, [pc, #168]	@ (800990c <xTaskResumeAll+0x124>)
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009868:	4613      	mov	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4a27      	ldr	r2, [pc, #156]	@ (8009910 <xTaskResumeAll+0x128>)
 8009872:	441a      	add	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3304      	adds	r3, #4
 8009878:	4619      	mov	r1, r3
 800987a:	4610      	mov	r0, r2
 800987c:	f7fe fdcd 	bl	800841a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009884:	4b23      	ldr	r3, [pc, #140]	@ (8009914 <xTaskResumeAll+0x12c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988a:	429a      	cmp	r2, r3
 800988c:	d302      	bcc.n	8009894 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800988e:	4b22      	ldr	r3, [pc, #136]	@ (8009918 <xTaskResumeAll+0x130>)
 8009890:	2201      	movs	r2, #1
 8009892:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009894:	4b1c      	ldr	r3, [pc, #112]	@ (8009908 <xTaskResumeAll+0x120>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1cc      	bne.n	8009836 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098a2:	f000 fb7f 	bl	8009fa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80098a6:	4b1d      	ldr	r3, [pc, #116]	@ (800991c <xTaskResumeAll+0x134>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d010      	beq.n	80098d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098b2:	f000 f837 	bl	8009924 <xTaskIncrementTick>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80098bc:	4b16      	ldr	r3, [pc, #88]	@ (8009918 <xTaskResumeAll+0x130>)
 80098be:	2201      	movs	r2, #1
 80098c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1f1      	bne.n	80098b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80098ce:	4b13      	ldr	r3, [pc, #76]	@ (800991c <xTaskResumeAll+0x134>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098d4:	4b10      	ldr	r3, [pc, #64]	@ (8009918 <xTaskResumeAll+0x130>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d009      	beq.n	80098f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098dc:	2301      	movs	r3, #1
 80098de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009920 <xTaskResumeAll+0x138>)
 80098e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098f0:	f7fe ff7c 	bl	80087ec <vPortExitCritical>

	return xAlreadyYielded;
 80098f4:	68bb      	ldr	r3, [r7, #8]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	2000440c 	.word	0x2000440c
 8009904:	200043e4 	.word	0x200043e4
 8009908:	200043a4 	.word	0x200043a4
 800990c:	200043ec 	.word	0x200043ec
 8009910:	200042e8 	.word	0x200042e8
 8009914:	200042e4 	.word	0x200042e4
 8009918:	200043f8 	.word	0x200043f8
 800991c:	200043f4 	.word	0x200043f4
 8009920:	e000ed04 	.word	0xe000ed04

08009924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800992a:	2300      	movs	r3, #0
 800992c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800992e:	4b4f      	ldr	r3, [pc, #316]	@ (8009a6c <xTaskIncrementTick+0x148>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	f040 808f 	bne.w	8009a56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009938:	4b4d      	ldr	r3, [pc, #308]	@ (8009a70 <xTaskIncrementTick+0x14c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3301      	adds	r3, #1
 800993e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009940:	4a4b      	ldr	r2, [pc, #300]	@ (8009a70 <xTaskIncrementTick+0x14c>)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d121      	bne.n	8009990 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800994c:	4b49      	ldr	r3, [pc, #292]	@ (8009a74 <xTaskIncrementTick+0x150>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00b      	beq.n	800996e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	603b      	str	r3, [r7, #0]
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	e7fd      	b.n	800996a <xTaskIncrementTick+0x46>
 800996e:	4b41      	ldr	r3, [pc, #260]	@ (8009a74 <xTaskIncrementTick+0x150>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	4b40      	ldr	r3, [pc, #256]	@ (8009a78 <xTaskIncrementTick+0x154>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a3e      	ldr	r2, [pc, #248]	@ (8009a74 <xTaskIncrementTick+0x150>)
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	4a3e      	ldr	r2, [pc, #248]	@ (8009a78 <xTaskIncrementTick+0x154>)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	4b3e      	ldr	r3, [pc, #248]	@ (8009a7c <xTaskIncrementTick+0x158>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3301      	adds	r3, #1
 8009988:	4a3c      	ldr	r2, [pc, #240]	@ (8009a7c <xTaskIncrementTick+0x158>)
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	f000 fb0a 	bl	8009fa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009990:	4b3b      	ldr	r3, [pc, #236]	@ (8009a80 <xTaskIncrementTick+0x15c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	429a      	cmp	r2, r3
 8009998:	d348      	bcc.n	8009a2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800999a:	4b36      	ldr	r3, [pc, #216]	@ (8009a74 <xTaskIncrementTick+0x150>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d104      	bne.n	80099ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099a4:	4b36      	ldr	r3, [pc, #216]	@ (8009a80 <xTaskIncrementTick+0x15c>)
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295
 80099aa:	601a      	str	r2, [r3, #0]
					break;
 80099ac:	e03e      	b.n	8009a2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ae:	4b31      	ldr	r3, [pc, #196]	@ (8009a74 <xTaskIncrementTick+0x150>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d203      	bcs.n	80099ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099c6:	4a2e      	ldr	r2, [pc, #184]	@ (8009a80 <xTaskIncrementTick+0x15c>)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099cc:	e02e      	b.n	8009a2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	3304      	adds	r3, #4
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fd7e 	bl	80084d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	3318      	adds	r3, #24
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe fd75 	bl	80084d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ee:	2201      	movs	r2, #1
 80099f0:	409a      	lsls	r2, r3
 80099f2:	4b24      	ldr	r3, [pc, #144]	@ (8009a84 <xTaskIncrementTick+0x160>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	4a22      	ldr	r2, [pc, #136]	@ (8009a84 <xTaskIncrementTick+0x160>)
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4a1f      	ldr	r2, [pc, #124]	@ (8009a88 <xTaskIncrementTick+0x164>)
 8009a0a:	441a      	add	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	3304      	adds	r3, #4
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f7fe fd01 	bl	800841a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8009a8c <xTaskIncrementTick+0x168>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d3b9      	bcc.n	800999a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009a26:	2301      	movs	r3, #1
 8009a28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a2a:	e7b6      	b.n	800999a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a2c:	4b17      	ldr	r3, [pc, #92]	@ (8009a8c <xTaskIncrementTick+0x168>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a32:	4915      	ldr	r1, [pc, #84]	@ (8009a88 <xTaskIncrementTick+0x164>)
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d901      	bls.n	8009a48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a48:	4b11      	ldr	r3, [pc, #68]	@ (8009a90 <xTaskIncrementTick+0x16c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d007      	beq.n	8009a60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a50:	2301      	movs	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e004      	b.n	8009a60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a56:	4b0f      	ldr	r3, [pc, #60]	@ (8009a94 <xTaskIncrementTick+0x170>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8009a94 <xTaskIncrementTick+0x170>)
 8009a5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a60:	697b      	ldr	r3, [r7, #20]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	2000440c 	.word	0x2000440c
 8009a70:	200043e8 	.word	0x200043e8
 8009a74:	2000439c 	.word	0x2000439c
 8009a78:	200043a0 	.word	0x200043a0
 8009a7c:	200043fc 	.word	0x200043fc
 8009a80:	20004404 	.word	0x20004404
 8009a84:	200043ec 	.word	0x200043ec
 8009a88:	200042e8 	.word	0x200042e8
 8009a8c:	200042e4 	.word	0x200042e4
 8009a90:	200043f8 	.word	0x200043f8
 8009a94:	200043f4 	.word	0x200043f4

08009a98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a9e:	4b27      	ldr	r3, [pc, #156]	@ (8009b3c <vTaskSwitchContext+0xa4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009aa6:	4b26      	ldr	r3, [pc, #152]	@ (8009b40 <vTaskSwitchContext+0xa8>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009aac:	e040      	b.n	8009b30 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009aae:	4b24      	ldr	r3, [pc, #144]	@ (8009b40 <vTaskSwitchContext+0xa8>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab4:	4b23      	ldr	r3, [pc, #140]	@ (8009b44 <vTaskSwitchContext+0xac>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	fab3 f383 	clz	r3, r3
 8009ac0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009ac2:	7afb      	ldrb	r3, [r7, #11]
 8009ac4:	f1c3 031f 	rsb	r3, r3, #31
 8009ac8:	617b      	str	r3, [r7, #20]
 8009aca:	491f      	ldr	r1, [pc, #124]	@ (8009b48 <vTaskSwitchContext+0xb0>)
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	440b      	add	r3, r1
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10b      	bne.n	8009af6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	607b      	str	r3, [r7, #4]
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	e7fd      	b.n	8009af2 <vTaskSwitchContext+0x5a>
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4a11      	ldr	r2, [pc, #68]	@ (8009b48 <vTaskSwitchContext+0xb0>)
 8009b02:	4413      	add	r3, r2
 8009b04:	613b      	str	r3, [r7, #16]
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	605a      	str	r2, [r3, #4]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	3308      	adds	r3, #8
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d104      	bne.n	8009b26 <vTaskSwitchContext+0x8e>
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	605a      	str	r2, [r3, #4]
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	4a07      	ldr	r2, [pc, #28]	@ (8009b4c <vTaskSwitchContext+0xb4>)
 8009b2e:	6013      	str	r3, [r2, #0]
}
 8009b30:	bf00      	nop
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	2000440c 	.word	0x2000440c
 8009b40:	200043f8 	.word	0x200043f8
 8009b44:	200043ec 	.word	0x200043ec
 8009b48:	200042e8 	.word	0x200042e8
 8009b4c:	200042e4 	.word	0x200042e4

08009b50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10b      	bne.n	8009b78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	60fb      	str	r3, [r7, #12]
}
 8009b72:	bf00      	nop
 8009b74:	bf00      	nop
 8009b76:	e7fd      	b.n	8009b74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b78:	4b07      	ldr	r3, [pc, #28]	@ (8009b98 <vTaskPlaceOnEventList+0x48>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3318      	adds	r3, #24
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7fe fc6e 	bl	8008462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b86:	2101      	movs	r1, #1
 8009b88:	6838      	ldr	r0, [r7, #0]
 8009b8a:	f000 fbeb 	bl	800a364 <prvAddCurrentTaskToDelayedList>
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	200042e4 	.word	0x200042e4

08009b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10b      	bne.n	8009bca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	60fb      	str	r3, [r7, #12]
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	e7fd      	b.n	8009bc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	3318      	adds	r3, #24
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fe fc80 	bl	80084d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c4c <xTaskRemoveFromEventList+0xb0>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11c      	bne.n	8009c16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe fc77 	bl	80084d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bea:	2201      	movs	r2, #1
 8009bec:	409a      	lsls	r2, r3
 8009bee:	4b18      	ldr	r3, [pc, #96]	@ (8009c50 <xTaskRemoveFromEventList+0xb4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	4a16      	ldr	r2, [pc, #88]	@ (8009c50 <xTaskRemoveFromEventList+0xb4>)
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4a13      	ldr	r2, [pc, #76]	@ (8009c54 <xTaskRemoveFromEventList+0xb8>)
 8009c06:	441a      	add	r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4610      	mov	r0, r2
 8009c10:	f7fe fc03 	bl	800841a <vListInsertEnd>
 8009c14:	e005      	b.n	8009c22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	3318      	adds	r3, #24
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	480e      	ldr	r0, [pc, #56]	@ (8009c58 <xTaskRemoveFromEventList+0xbc>)
 8009c1e:	f7fe fbfc 	bl	800841a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c26:	4b0d      	ldr	r3, [pc, #52]	@ (8009c5c <xTaskRemoveFromEventList+0xc0>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d905      	bls.n	8009c3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c30:	2301      	movs	r3, #1
 8009c32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c34:	4b0a      	ldr	r3, [pc, #40]	@ (8009c60 <xTaskRemoveFromEventList+0xc4>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	e001      	b.n	8009c40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c40:	697b      	ldr	r3, [r7, #20]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	2000440c 	.word	0x2000440c
 8009c50:	200043ec 	.word	0x200043ec
 8009c54:	200042e8 	.word	0x200042e8
 8009c58:	200043a4 	.word	0x200043a4
 8009c5c:	200042e4 	.word	0x200042e4
 8009c60:	200043f8 	.word	0x200043f8

08009c64 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8009d18 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	613b      	str	r3, [r7, #16]
}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	e7fd      	b.n	8009c8a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10b      	bne.n	8009cbc <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	60fb      	str	r3, [r7, #12]
}
 8009cb6:	bf00      	nop
 8009cb8:	bf00      	nop
 8009cba:	e7fd      	b.n	8009cb8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7fe fc09 	bl	80084d4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fc04 	bl	80084d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	409a      	lsls	r2, r3
 8009cd4:	4b11      	ldr	r3, [pc, #68]	@ (8009d1c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	4a10      	ldr	r2, [pc, #64]	@ (8009d1c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4a0d      	ldr	r2, [pc, #52]	@ (8009d20 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009cec:	441a      	add	r2, r3
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	f7fe fb90 	bl	800841a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cfe:	4b09      	ldr	r3, [pc, #36]	@ (8009d24 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d902      	bls.n	8009d0e <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009d08:	4b07      	ldr	r3, [pc, #28]	@ (8009d28 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	601a      	str	r2, [r3, #0]
	}
}
 8009d0e:	bf00      	nop
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	2000440c 	.word	0x2000440c
 8009d1c:	200043ec 	.word	0x200043ec
 8009d20:	200042e8 	.word	0x200042e8
 8009d24:	200042e4 	.word	0x200042e4
 8009d28:	200043f8 	.word	0x200043f8

08009d2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d34:	4b06      	ldr	r3, [pc, #24]	@ (8009d50 <vTaskInternalSetTimeOutState+0x24>)
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d3c:	4b05      	ldr	r3, [pc, #20]	@ (8009d54 <vTaskInternalSetTimeOutState+0x28>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	605a      	str	r2, [r3, #4]
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	200043fc 	.word	0x200043fc
 8009d54:	200043e8 	.word	0x200043e8

08009d58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10b      	bne.n	8009d80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	613b      	str	r3, [r7, #16]
}
 8009d7a:	bf00      	nop
 8009d7c:	bf00      	nop
 8009d7e:	e7fd      	b.n	8009d7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10b      	bne.n	8009d9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60fb      	str	r3, [r7, #12]
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009d9e:	f7fe fcf3 	bl	8008788 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009da2:	4b1d      	ldr	r3, [pc, #116]	@ (8009e18 <xTaskCheckForTimeOut+0xc0>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dba:	d102      	bne.n	8009dc2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	61fb      	str	r3, [r7, #28]
 8009dc0:	e023      	b.n	8009e0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	4b15      	ldr	r3, [pc, #84]	@ (8009e1c <xTaskCheckForTimeOut+0xc4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d007      	beq.n	8009dde <xTaskCheckForTimeOut+0x86>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	69ba      	ldr	r2, [r7, #24]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d302      	bcc.n	8009dde <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	61fb      	str	r3, [r7, #28]
 8009ddc:	e015      	b.n	8009e0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d20b      	bcs.n	8009e00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff ff99 	bl	8009d2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61fb      	str	r3, [r7, #28]
 8009dfe:	e004      	b.n	8009e0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e06:	2301      	movs	r3, #1
 8009e08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e0a:	f7fe fcef 	bl	80087ec <vPortExitCritical>

	return xReturn;
 8009e0e:	69fb      	ldr	r3, [r7, #28]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3720      	adds	r7, #32
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	200043e8 	.word	0x200043e8
 8009e1c:	200043fc 	.word	0x200043fc

08009e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e20:	b480      	push	{r7}
 8009e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e24:	4b03      	ldr	r3, [pc, #12]	@ (8009e34 <vTaskMissedYield+0x14>)
 8009e26:	2201      	movs	r2, #1
 8009e28:	601a      	str	r2, [r3, #0]
}
 8009e2a:	bf00      	nop
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	200043f8 	.word	0x200043f8

08009e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e40:	f000 f852 	bl	8009ee8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e44:	4b06      	ldr	r3, [pc, #24]	@ (8009e60 <prvIdleTask+0x28>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d9f9      	bls.n	8009e40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e4c:	4b05      	ldr	r3, [pc, #20]	@ (8009e64 <prvIdleTask+0x2c>)
 8009e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e5c:	e7f0      	b.n	8009e40 <prvIdleTask+0x8>
 8009e5e:	bf00      	nop
 8009e60:	200042e8 	.word	0x200042e8
 8009e64:	e000ed04 	.word	0xe000ed04

08009e68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e6e:	2300      	movs	r3, #0
 8009e70:	607b      	str	r3, [r7, #4]
 8009e72:	e00c      	b.n	8009e8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	4613      	mov	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4a12      	ldr	r2, [pc, #72]	@ (8009ec8 <prvInitialiseTaskLists+0x60>)
 8009e80:	4413      	add	r3, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fa9c 	bl	80083c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	607b      	str	r3, [r7, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b06      	cmp	r3, #6
 8009e92:	d9ef      	bls.n	8009e74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e94:	480d      	ldr	r0, [pc, #52]	@ (8009ecc <prvInitialiseTaskLists+0x64>)
 8009e96:	f7fe fa93 	bl	80083c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e9a:	480d      	ldr	r0, [pc, #52]	@ (8009ed0 <prvInitialiseTaskLists+0x68>)
 8009e9c:	f7fe fa90 	bl	80083c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ea0:	480c      	ldr	r0, [pc, #48]	@ (8009ed4 <prvInitialiseTaskLists+0x6c>)
 8009ea2:	f7fe fa8d 	bl	80083c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ea6:	480c      	ldr	r0, [pc, #48]	@ (8009ed8 <prvInitialiseTaskLists+0x70>)
 8009ea8:	f7fe fa8a 	bl	80083c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009eac:	480b      	ldr	r0, [pc, #44]	@ (8009edc <prvInitialiseTaskLists+0x74>)
 8009eae:	f7fe fa87 	bl	80083c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee0 <prvInitialiseTaskLists+0x78>)
 8009eb4:	4a05      	ldr	r2, [pc, #20]	@ (8009ecc <prvInitialiseTaskLists+0x64>)
 8009eb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee4 <prvInitialiseTaskLists+0x7c>)
 8009eba:	4a05      	ldr	r2, [pc, #20]	@ (8009ed0 <prvInitialiseTaskLists+0x68>)
 8009ebc:	601a      	str	r2, [r3, #0]
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200042e8 	.word	0x200042e8
 8009ecc:	20004374 	.word	0x20004374
 8009ed0:	20004388 	.word	0x20004388
 8009ed4:	200043a4 	.word	0x200043a4
 8009ed8:	200043b8 	.word	0x200043b8
 8009edc:	200043d0 	.word	0x200043d0
 8009ee0:	2000439c 	.word	0x2000439c
 8009ee4:	200043a0 	.word	0x200043a0

08009ee8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eee:	e019      	b.n	8009f24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ef0:	f7fe fc4a 	bl	8008788 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef4:	4b10      	ldr	r3, [pc, #64]	@ (8009f38 <prvCheckTasksWaitingTermination+0x50>)
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3304      	adds	r3, #4
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe fae7 	bl	80084d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f06:	4b0d      	ldr	r3, [pc, #52]	@ (8009f3c <prvCheckTasksWaitingTermination+0x54>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8009f3c <prvCheckTasksWaitingTermination+0x54>)
 8009f0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f10:	4b0b      	ldr	r3, [pc, #44]	@ (8009f40 <prvCheckTasksWaitingTermination+0x58>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	4a0a      	ldr	r2, [pc, #40]	@ (8009f40 <prvCheckTasksWaitingTermination+0x58>)
 8009f18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f1a:	f7fe fc67 	bl	80087ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f810 	bl	8009f44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f24:	4b06      	ldr	r3, [pc, #24]	@ (8009f40 <prvCheckTasksWaitingTermination+0x58>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1e1      	bne.n	8009ef0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f2c:	bf00      	nop
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	200043b8 	.word	0x200043b8
 8009f3c:	200043e4 	.word	0x200043e4
 8009f40:	200043cc 	.word	0x200043cc

08009f44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d108      	bne.n	8009f68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe f910 	bl	8008180 <vPortFree>
				vPortFree( pxTCB );
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7fe f90d 	bl	8008180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f66:	e019      	b.n	8009f9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d103      	bne.n	8009f7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7fe f904 	bl	8008180 <vPortFree>
	}
 8009f78:	e010      	b.n	8009f9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d00b      	beq.n	8009f9c <prvDeleteTCB+0x58>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	60fb      	str	r3, [r7, #12]
}
 8009f96:	bf00      	nop
 8009f98:	bf00      	nop
 8009f9a:	e7fd      	b.n	8009f98 <prvDeleteTCB+0x54>
	}
 8009f9c:	bf00      	nop
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009faa:	4b0c      	ldr	r3, [pc, #48]	@ (8009fdc <prvResetNextTaskUnblockTime+0x38>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d104      	bne.n	8009fbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fbc:	e008      	b.n	8009fd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fbe:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <prvResetNextTaskUnblockTime+0x38>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	4a04      	ldr	r2, [pc, #16]	@ (8009fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8009fce:	6013      	str	r3, [r2, #0]
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	2000439c 	.word	0x2000439c
 8009fe0:	20004404 	.word	0x20004404

08009fe4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fea:	4b0b      	ldr	r3, [pc, #44]	@ (800a018 <xTaskGetSchedulerState+0x34>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d102      	bne.n	8009ff8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	607b      	str	r3, [r7, #4]
 8009ff6:	e008      	b.n	800a00a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ff8:	4b08      	ldr	r3, [pc, #32]	@ (800a01c <xTaskGetSchedulerState+0x38>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d102      	bne.n	800a006 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a000:	2302      	movs	r3, #2
 800a002:	607b      	str	r3, [r7, #4]
 800a004:	e001      	b.n	800a00a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a006:	2300      	movs	r3, #0
 800a008:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a00a:	687b      	ldr	r3, [r7, #4]
	}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	200043f0 	.word	0x200043f0
 800a01c:	2000440c 	.word	0x2000440c

0800a020 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a02c:	2300      	movs	r3, #0
 800a02e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d05e      	beq.n	800a0f4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a03a:	4b31      	ldr	r3, [pc, #196]	@ (800a100 <xTaskPriorityInherit+0xe0>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a040:	429a      	cmp	r2, r3
 800a042:	d24e      	bcs.n	800a0e2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	db06      	blt.n	800a05a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a04c:	4b2c      	ldr	r3, [pc, #176]	@ (800a100 <xTaskPriorityInherit+0xe0>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a052:	f1c3 0207 	rsb	r2, r3, #7
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	6959      	ldr	r1, [r3, #20]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4a26      	ldr	r2, [pc, #152]	@ (800a104 <xTaskPriorityInherit+0xe4>)
 800a06c:	4413      	add	r3, r2
 800a06e:	4299      	cmp	r1, r3
 800a070:	d12f      	bne.n	800a0d2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	3304      	adds	r3, #4
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fa2c 	bl	80084d4 <uxListRemove>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10a      	bne.n	800a098 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a086:	2201      	movs	r2, #1
 800a088:	fa02 f303 	lsl.w	r3, r2, r3
 800a08c:	43da      	mvns	r2, r3
 800a08e:	4b1e      	ldr	r3, [pc, #120]	@ (800a108 <xTaskPriorityInherit+0xe8>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4013      	ands	r3, r2
 800a094:	4a1c      	ldr	r2, [pc, #112]	@ (800a108 <xTaskPriorityInherit+0xe8>)
 800a096:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a098:	4b19      	ldr	r3, [pc, #100]	@ (800a100 <xTaskPriorityInherit+0xe0>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	409a      	lsls	r2, r3
 800a0aa:	4b17      	ldr	r3, [pc, #92]	@ (800a108 <xTaskPriorityInherit+0xe8>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	4a15      	ldr	r2, [pc, #84]	@ (800a108 <xTaskPriorityInherit+0xe8>)
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4a10      	ldr	r2, [pc, #64]	@ (800a104 <xTaskPriorityInherit+0xe4>)
 800a0c2:	441a      	add	r2, r3
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	f7fe f9a5 	bl	800841a <vListInsertEnd>
 800a0d0:	e004      	b.n	800a0dc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a100 <xTaskPriorityInherit+0xe0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	e008      	b.n	800a0f4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0e6:	4b06      	ldr	r3, [pc, #24]	@ (800a100 <xTaskPriorityInherit+0xe0>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d201      	bcs.n	800a0f4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
	}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	200042e4 	.word	0x200042e4
 800a104:	200042e8 	.word	0x200042e8
 800a108:	200043ec 	.word	0x200043ec

0800a10c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a118:	2300      	movs	r3, #0
 800a11a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d070      	beq.n	800a204 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a122:	4b3b      	ldr	r3, [pc, #236]	@ (800a210 <xTaskPriorityDisinherit+0x104>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d00b      	beq.n	800a144 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	60fb      	str	r3, [r7, #12]
}
 800a13e:	bf00      	nop
 800a140:	bf00      	nop
 800a142:	e7fd      	b.n	800a140 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10b      	bne.n	800a164 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	60bb      	str	r3, [r7, #8]
}
 800a15e:	bf00      	nop
 800a160:	bf00      	nop
 800a162:	e7fd      	b.n	800a160 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a168:	1e5a      	subs	r2, r3, #1
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a176:	429a      	cmp	r2, r3
 800a178:	d044      	beq.n	800a204 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d140      	bne.n	800a204 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	3304      	adds	r3, #4
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe f9a4 	bl	80084d4 <uxListRemove>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d115      	bne.n	800a1be <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a196:	491f      	ldr	r1, [pc, #124]	@ (800a214 <xTaskPriorityDisinherit+0x108>)
 800a198:	4613      	mov	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	440b      	add	r3, r1
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <xTaskPriorityDisinherit+0xb2>
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b2:	43da      	mvns	r2, r3
 800a1b4:	4b18      	ldr	r3, [pc, #96]	@ (800a218 <xTaskPriorityDisinherit+0x10c>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	4a17      	ldr	r2, [pc, #92]	@ (800a218 <xTaskPriorityDisinherit+0x10c>)
 800a1bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ca:	f1c3 0207 	rsb	r2, r3, #7
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	409a      	lsls	r2, r3
 800a1da:	4b0f      	ldr	r3, [pc, #60]	@ (800a218 <xTaskPriorityDisinherit+0x10c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	4a0d      	ldr	r2, [pc, #52]	@ (800a218 <xTaskPriorityDisinherit+0x10c>)
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4a08      	ldr	r2, [pc, #32]	@ (800a214 <xTaskPriorityDisinherit+0x108>)
 800a1f2:	441a      	add	r2, r3
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f7fe f90d 	bl	800841a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a200:	2301      	movs	r3, #1
 800a202:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a204:	697b      	ldr	r3, [r7, #20]
	}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	200042e4 	.word	0x200042e4
 800a214:	200042e8 	.word	0x200042e8
 800a218:	200043ec 	.word	0x200043ec

0800a21c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a22a:	2301      	movs	r3, #1
 800a22c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d079      	beq.n	800a328 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10b      	bne.n	800a254 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	60fb      	str	r3, [r7, #12]
}
 800a24e:	bf00      	nop
 800a250:	bf00      	nop
 800a252:	e7fd      	b.n	800a250 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a258:	683a      	ldr	r2, [r7, #0]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d902      	bls.n	800a264 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	61fb      	str	r3, [r7, #28]
 800a262:	e002      	b.n	800a26a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a268:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	429a      	cmp	r2, r3
 800a272:	d059      	beq.n	800a328 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a278:	697a      	ldr	r2, [r7, #20]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d154      	bne.n	800a328 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a27e:	4b2c      	ldr	r3, [pc, #176]	@ (800a330 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	69ba      	ldr	r2, [r7, #24]
 800a284:	429a      	cmp	r2, r3
 800a286:	d10b      	bne.n	800a2a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	60bb      	str	r3, [r7, #8]
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	e7fd      	b.n	800a29c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	69fa      	ldr	r2, [r7, #28]
 800a2aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	db04      	blt.n	800a2be <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	f1c3 0207 	rsb	r2, r3, #7
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	6959      	ldr	r1, [r3, #20]
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4a19      	ldr	r2, [pc, #100]	@ (800a334 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a2ce:	4413      	add	r3, r2
 800a2d0:	4299      	cmp	r1, r3
 800a2d2:	d129      	bne.n	800a328 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fe f8fb 	bl	80084d4 <uxListRemove>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10a      	bne.n	800a2fa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ee:	43da      	mvns	r2, r3
 800a2f0:	4b11      	ldr	r3, [pc, #68]	@ (800a338 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	4a10      	ldr	r2, [pc, #64]	@ (800a338 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a2f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2fe:	2201      	movs	r2, #1
 800a300:	409a      	lsls	r2, r3
 800a302:	4b0d      	ldr	r3, [pc, #52]	@ (800a338 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4313      	orrs	r3, r2
 800a308:	4a0b      	ldr	r2, [pc, #44]	@ (800a338 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a310:	4613      	mov	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4a06      	ldr	r2, [pc, #24]	@ (800a334 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a31a:	441a      	add	r2, r3
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	3304      	adds	r3, #4
 800a320:	4619      	mov	r1, r3
 800a322:	4610      	mov	r0, r2
 800a324:	f7fe f879 	bl	800841a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a328:	bf00      	nop
 800a32a:	3720      	adds	r7, #32
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	200042e4 	.word	0x200042e4
 800a334:	200042e8 	.word	0x200042e8
 800a338:	200043ec 	.word	0x200043ec

0800a33c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a33c:	b480      	push	{r7}
 800a33e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a340:	4b07      	ldr	r3, [pc, #28]	@ (800a360 <pvTaskIncrementMutexHeldCount+0x24>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a348:	4b05      	ldr	r3, [pc, #20]	@ (800a360 <pvTaskIncrementMutexHeldCount+0x24>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a34e:	3201      	adds	r2, #1
 800a350:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a352:	4b03      	ldr	r3, [pc, #12]	@ (800a360 <pvTaskIncrementMutexHeldCount+0x24>)
 800a354:	681b      	ldr	r3, [r3, #0]
	}
 800a356:	4618      	mov	r0, r3
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	200042e4 	.word	0x200042e4

0800a364 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a36e:	4b29      	ldr	r3, [pc, #164]	@ (800a414 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a374:	4b28      	ldr	r3, [pc, #160]	@ (800a418 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3304      	adds	r3, #4
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fe f8aa 	bl	80084d4 <uxListRemove>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10b      	bne.n	800a39e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a386:	4b24      	ldr	r3, [pc, #144]	@ (800a418 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38c:	2201      	movs	r2, #1
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	43da      	mvns	r2, r3
 800a394:	4b21      	ldr	r3, [pc, #132]	@ (800a41c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4013      	ands	r3, r2
 800a39a:	4a20      	ldr	r2, [pc, #128]	@ (800a41c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a39c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a4:	d10a      	bne.n	800a3bc <prvAddCurrentTaskToDelayedList+0x58>
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d007      	beq.n	800a3bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a418 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	481a      	ldr	r0, [pc, #104]	@ (800a420 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3b6:	f7fe f830 	bl	800841a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3ba:	e026      	b.n	800a40a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3c4:	4b14      	ldr	r3, [pc, #80]	@ (800a418 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d209      	bcs.n	800a3e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3d4:	4b13      	ldr	r3, [pc, #76]	@ (800a424 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a418 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	f7fe f83e 	bl	8008462 <vListInsert>
}
 800a3e6:	e010      	b.n	800a40a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a428 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a418 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	f7fe f834 	bl	8008462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a42c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	429a      	cmp	r2, r3
 800a402:	d202      	bcs.n	800a40a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a404:	4a09      	ldr	r2, [pc, #36]	@ (800a42c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	6013      	str	r3, [r2, #0]
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	200043e8 	.word	0x200043e8
 800a418:	200042e4 	.word	0x200042e4
 800a41c:	200043ec 	.word	0x200043ec
 800a420:	200043d0 	.word	0x200043d0
 800a424:	200043a0 	.word	0x200043a0
 800a428:	2000439c 	.word	0x2000439c
 800a42c:	20004404 	.word	0x20004404

0800a430 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a43c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a440:	f002 fcbc 	bl	800cdbc <USBD_static_malloc>
 800a444:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d109      	bne.n	800a460 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	32b0      	adds	r2, #176	@ 0xb0
 800a456:	2100      	movs	r1, #0
 800a458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a45c:	2302      	movs	r3, #2
 800a45e:	e0d4      	b.n	800a60a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a460:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a464:	2100      	movs	r1, #0
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f002 fef6 	bl	800d258 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	32b0      	adds	r2, #176	@ 0xb0
 800a476:	68f9      	ldr	r1, [r7, #12]
 800a478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	32b0      	adds	r2, #176	@ 0xb0
 800a486:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	7c1b      	ldrb	r3, [r3, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d138      	bne.n	800a50a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a498:	4b5e      	ldr	r3, [pc, #376]	@ (800a614 <USBD_CDC_Init+0x1e4>)
 800a49a:	7819      	ldrb	r1, [r3, #0]
 800a49c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f002 fb67 	bl	800cb76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a4a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a614 <USBD_CDC_Init+0x1e4>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	f003 020f 	and.w	r2, r3, #15
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	440b      	add	r3, r1
 800a4bc:	3323      	adds	r3, #35	@ 0x23
 800a4be:	2201      	movs	r2, #1
 800a4c0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a4c2:	4b55      	ldr	r3, [pc, #340]	@ (800a618 <USBD_CDC_Init+0x1e8>)
 800a4c4:	7819      	ldrb	r1, [r3, #0]
 800a4c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f002 fb52 	bl	800cb76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a4d2:	4b51      	ldr	r3, [pc, #324]	@ (800a618 <USBD_CDC_Init+0x1e8>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	f003 020f 	and.w	r2, r3, #15
 800a4da:	6879      	ldr	r1, [r7, #4]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	440b      	add	r3, r1
 800a4e6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a4ee:	4b4b      	ldr	r3, [pc, #300]	@ (800a61c <USBD_CDC_Init+0x1ec>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 020f 	and.w	r2, r3, #15
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	440b      	add	r3, r1
 800a502:	331c      	adds	r3, #28
 800a504:	2210      	movs	r2, #16
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	e035      	b.n	800a576 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a50a:	4b42      	ldr	r3, [pc, #264]	@ (800a614 <USBD_CDC_Init+0x1e4>)
 800a50c:	7819      	ldrb	r1, [r3, #0]
 800a50e:	2340      	movs	r3, #64	@ 0x40
 800a510:	2202      	movs	r2, #2
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f002 fb2f 	bl	800cb76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a518:	4b3e      	ldr	r3, [pc, #248]	@ (800a614 <USBD_CDC_Init+0x1e4>)
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	f003 020f 	and.w	r2, r3, #15
 800a520:	6879      	ldr	r1, [r7, #4]
 800a522:	4613      	mov	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	440b      	add	r3, r1
 800a52c:	3323      	adds	r3, #35	@ 0x23
 800a52e:	2201      	movs	r2, #1
 800a530:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a532:	4b39      	ldr	r3, [pc, #228]	@ (800a618 <USBD_CDC_Init+0x1e8>)
 800a534:	7819      	ldrb	r1, [r3, #0]
 800a536:	2340      	movs	r3, #64	@ 0x40
 800a538:	2202      	movs	r2, #2
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f002 fb1b 	bl	800cb76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a540:	4b35      	ldr	r3, [pc, #212]	@ (800a618 <USBD_CDC_Init+0x1e8>)
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	f003 020f 	and.w	r2, r3, #15
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	4613      	mov	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	440b      	add	r3, r1
 800a554:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a558:	2201      	movs	r2, #1
 800a55a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a55c:	4b2f      	ldr	r3, [pc, #188]	@ (800a61c <USBD_CDC_Init+0x1ec>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	f003 020f 	and.w	r2, r3, #15
 800a564:	6879      	ldr	r1, [r7, #4]
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	440b      	add	r3, r1
 800a570:	331c      	adds	r3, #28
 800a572:	2210      	movs	r2, #16
 800a574:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a576:	4b29      	ldr	r3, [pc, #164]	@ (800a61c <USBD_CDC_Init+0x1ec>)
 800a578:	7819      	ldrb	r1, [r3, #0]
 800a57a:	2308      	movs	r3, #8
 800a57c:	2203      	movs	r2, #3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f002 faf9 	bl	800cb76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a584:	4b25      	ldr	r3, [pc, #148]	@ (800a61c <USBD_CDC_Init+0x1ec>)
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	f003 020f 	and.w	r2, r3, #15
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	4613      	mov	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	440b      	add	r3, r1
 800a598:	3323      	adds	r3, #35	@ 0x23
 800a59a:	2201      	movs	r2, #1
 800a59c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	33b0      	adds	r3, #176	@ 0xb0
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e018      	b.n	800a60a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	7c1b      	ldrb	r3, [r3, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10a      	bne.n	800a5f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5e0:	4b0d      	ldr	r3, [pc, #52]	@ (800a618 <USBD_CDC_Init+0x1e8>)
 800a5e2:	7819      	ldrb	r1, [r3, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a5ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f002 fbb0 	bl	800cd54 <USBD_LL_PrepareReceive>
 800a5f4:	e008      	b.n	800a608 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5f6:	4b08      	ldr	r3, [pc, #32]	@ (800a618 <USBD_CDC_Init+0x1e8>)
 800a5f8:	7819      	ldrb	r1, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a600:	2340      	movs	r3, #64	@ 0x40
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f002 fba6 	bl	800cd54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20000097 	.word	0x20000097
 800a618:	20000098 	.word	0x20000098
 800a61c:	20000099 	.word	0x20000099

0800a620 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a62c:	4b3a      	ldr	r3, [pc, #232]	@ (800a718 <USBD_CDC_DeInit+0xf8>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f002 fac5 	bl	800cbc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a638:	4b37      	ldr	r3, [pc, #220]	@ (800a718 <USBD_CDC_DeInit+0xf8>)
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	f003 020f 	and.w	r2, r3, #15
 800a640:	6879      	ldr	r1, [r7, #4]
 800a642:	4613      	mov	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4413      	add	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	440b      	add	r3, r1
 800a64c:	3323      	adds	r3, #35	@ 0x23
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a652:	4b32      	ldr	r3, [pc, #200]	@ (800a71c <USBD_CDC_DeInit+0xfc>)
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f002 fab2 	bl	800cbc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a65e:	4b2f      	ldr	r3, [pc, #188]	@ (800a71c <USBD_CDC_DeInit+0xfc>)
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	f003 020f 	and.w	r2, r3, #15
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	440b      	add	r3, r1
 800a672:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a676:	2200      	movs	r2, #0
 800a678:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a67a:	4b29      	ldr	r3, [pc, #164]	@ (800a720 <USBD_CDC_DeInit+0x100>)
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f002 fa9e 	bl	800cbc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a686:	4b26      	ldr	r3, [pc, #152]	@ (800a720 <USBD_CDC_DeInit+0x100>)
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	f003 020f 	and.w	r2, r3, #15
 800a68e:	6879      	ldr	r1, [r7, #4]
 800a690:	4613      	mov	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	440b      	add	r3, r1
 800a69a:	3323      	adds	r3, #35	@ 0x23
 800a69c:	2200      	movs	r2, #0
 800a69e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a6a0:	4b1f      	ldr	r3, [pc, #124]	@ (800a720 <USBD_CDC_DeInit+0x100>)
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	f003 020f 	and.w	r2, r3, #15
 800a6a8:	6879      	ldr	r1, [r7, #4]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	440b      	add	r3, r1
 800a6b4:	331c      	adds	r3, #28
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	32b0      	adds	r2, #176	@ 0xb0
 800a6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d01f      	beq.n	800a70c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	33b0      	adds	r3, #176	@ 0xb0
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	32b0      	adds	r2, #176	@ 0xb0
 800a6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f002 fb72 	bl	800cdd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	32b0      	adds	r2, #176	@ 0xb0
 800a6fe:	2100      	movs	r1, #0
 800a700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	20000097 	.word	0x20000097
 800a71c:	20000098 	.word	0x20000098
 800a720:	20000099 	.word	0x20000099

0800a724 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	32b0      	adds	r2, #176	@ 0xb0
 800a738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a742:	2300      	movs	r3, #0
 800a744:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a750:	2303      	movs	r3, #3
 800a752:	e0bf      	b.n	800a8d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d050      	beq.n	800a802 <USBD_CDC_Setup+0xde>
 800a760:	2b20      	cmp	r3, #32
 800a762:	f040 80af 	bne.w	800a8c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	88db      	ldrh	r3, [r3, #6]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d03a      	beq.n	800a7e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	b25b      	sxtb	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	da1b      	bge.n	800a7b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	33b0      	adds	r3, #176	@ 0xb0
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a78e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	88d2      	ldrh	r2, [r2, #6]
 800a794:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	88db      	ldrh	r3, [r3, #6]
 800a79a:	2b07      	cmp	r3, #7
 800a79c:	bf28      	it	cs
 800a79e:	2307      	movcs	r3, #7
 800a7a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	89fa      	ldrh	r2, [r7, #14]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f001 fda9 	bl	800c300 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a7ae:	e090      	b.n	800a8d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	785a      	ldrb	r2, [r3, #1]
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	88db      	ldrh	r3, [r3, #6]
 800a7be:	2b3f      	cmp	r3, #63	@ 0x3f
 800a7c0:	d803      	bhi.n	800a7ca <USBD_CDC_Setup+0xa6>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	88db      	ldrh	r3, [r3, #6]
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	e000      	b.n	800a7cc <USBD_CDC_Setup+0xa8>
 800a7ca:	2240      	movs	r2, #64	@ 0x40
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a7d2:	6939      	ldr	r1, [r7, #16]
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a7da:	461a      	mov	r2, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 fdbe 	bl	800c35e <USBD_CtlPrepareRx>
      break;
 800a7e2:	e076      	b.n	800a8d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	33b0      	adds	r3, #176	@ 0xb0
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	7850      	ldrb	r0, [r2, #1]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	4798      	blx	r3
      break;
 800a800:	e067      	b.n	800a8d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b0b      	cmp	r3, #11
 800a808:	d851      	bhi.n	800a8ae <USBD_CDC_Setup+0x18a>
 800a80a:	a201      	add	r2, pc, #4	@ (adr r2, 800a810 <USBD_CDC_Setup+0xec>)
 800a80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a810:	0800a841 	.word	0x0800a841
 800a814:	0800a8bd 	.word	0x0800a8bd
 800a818:	0800a8af 	.word	0x0800a8af
 800a81c:	0800a8af 	.word	0x0800a8af
 800a820:	0800a8af 	.word	0x0800a8af
 800a824:	0800a8af 	.word	0x0800a8af
 800a828:	0800a8af 	.word	0x0800a8af
 800a82c:	0800a8af 	.word	0x0800a8af
 800a830:	0800a8af 	.word	0x0800a8af
 800a834:	0800a8af 	.word	0x0800a8af
 800a838:	0800a86b 	.word	0x0800a86b
 800a83c:	0800a895 	.word	0x0800a895
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d107      	bne.n	800a85c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a84c:	f107 030a 	add.w	r3, r7, #10
 800a850:	2202      	movs	r2, #2
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f001 fd53 	bl	800c300 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a85a:	e032      	b.n	800a8c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a85c:	6839      	ldr	r1, [r7, #0]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f001 fcd1 	bl	800c206 <USBD_CtlError>
            ret = USBD_FAIL;
 800a864:	2303      	movs	r3, #3
 800a866:	75fb      	strb	r3, [r7, #23]
          break;
 800a868:	e02b      	b.n	800a8c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b03      	cmp	r3, #3
 800a874:	d107      	bne.n	800a886 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a876:	f107 030d 	add.w	r3, r7, #13
 800a87a:	2201      	movs	r2, #1
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 fd3e 	bl	800c300 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a884:	e01d      	b.n	800a8c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f001 fcbc 	bl	800c206 <USBD_CtlError>
            ret = USBD_FAIL;
 800a88e:	2303      	movs	r3, #3
 800a890:	75fb      	strb	r3, [r7, #23]
          break;
 800a892:	e016      	b.n	800a8c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d00f      	beq.n	800a8c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 fcaf 	bl	800c206 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a8ac:	e008      	b.n	800a8c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 fca8 	bl	800c206 <USBD_CtlError>
          ret = USBD_FAIL;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	75fb      	strb	r3, [r7, #23]
          break;
 800a8ba:	e002      	b.n	800a8c2 <USBD_CDC_Setup+0x19e>
          break;
 800a8bc:	bf00      	nop
 800a8be:	e008      	b.n	800a8d2 <USBD_CDC_Setup+0x1ae>
          break;
 800a8c0:	bf00      	nop
      }
      break;
 800a8c2:	e006      	b.n	800a8d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 fc9d 	bl	800c206 <USBD_CtlError>
      ret = USBD_FAIL;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a8d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	32b0      	adds	r2, #176	@ 0xb0
 800a8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a902:	2303      	movs	r3, #3
 800a904:	e065      	b.n	800a9d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	32b0      	adds	r2, #176	@ 0xb0
 800a910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a914:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a916:	78fb      	ldrb	r3, [r7, #3]
 800a918:	f003 020f 	and.w	r2, r3, #15
 800a91c:	6879      	ldr	r1, [r7, #4]
 800a91e:	4613      	mov	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	440b      	add	r3, r1
 800a928:	3314      	adds	r3, #20
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d02f      	beq.n	800a990 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a930:	78fb      	ldrb	r3, [r7, #3]
 800a932:	f003 020f 	and.w	r2, r3, #15
 800a936:	6879      	ldr	r1, [r7, #4]
 800a938:	4613      	mov	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	440b      	add	r3, r1
 800a942:	3314      	adds	r3, #20
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	f003 010f 	and.w	r1, r3, #15
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	460b      	mov	r3, r1
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	440b      	add	r3, r1
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4403      	add	r3, r0
 800a958:	331c      	adds	r3, #28
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a960:	fb01 f303 	mul.w	r3, r1, r3
 800a964:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a966:	2b00      	cmp	r3, #0
 800a968:	d112      	bne.n	800a990 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a96a:	78fb      	ldrb	r3, [r7, #3]
 800a96c:	f003 020f 	and.w	r2, r3, #15
 800a970:	6879      	ldr	r1, [r7, #4]
 800a972:	4613      	mov	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	440b      	add	r3, r1
 800a97c:	3314      	adds	r3, #20
 800a97e:	2200      	movs	r2, #0
 800a980:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a982:	78f9      	ldrb	r1, [r7, #3]
 800a984:	2300      	movs	r3, #0
 800a986:	2200      	movs	r2, #0
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f002 f9c2 	bl	800cd12 <USBD_LL_Transmit>
 800a98e:	e01f      	b.n	800a9d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2200      	movs	r2, #0
 800a994:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	33b0      	adds	r3, #176	@ 0xb0
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d010      	beq.n	800a9d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	33b0      	adds	r3, #176	@ 0xb0
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a9cc:	78fa      	ldrb	r2, [r7, #3]
 800a9ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b084      	sub	sp, #16
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	32b0      	adds	r2, #176	@ 0xb0
 800a9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	32b0      	adds	r2, #176	@ 0xb0
 800aa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	e01a      	b.n	800aa42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa0c:	78fb      	ldrb	r3, [r7, #3]
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f002 f9c0 	bl	800cd96 <USBD_LL_GetRxDataSize>
 800aa16:	4602      	mov	r2, r0
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	33b0      	adds	r3, #176	@ 0xb0
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	32b0      	adds	r2, #176	@ 0xb0
 800aa5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e024      	b.n	800aab6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	33b0      	adds	r3, #176	@ 0xb0
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d019      	beq.n	800aab4 <USBD_CDC_EP0_RxReady+0x6a>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800aa86:	2bff      	cmp	r3, #255	@ 0xff
 800aa88:	d014      	beq.n	800aab4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	33b0      	adds	r3, #176	@ 0xb0
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800aaa2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aaaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	22ff      	movs	r2, #255	@ 0xff
 800aab0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aac8:	2182      	movs	r1, #130	@ 0x82
 800aaca:	4818      	ldr	r0, [pc, #96]	@ (800ab2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aacc:	f000 fd62 	bl	800b594 <USBD_GetEpDesc>
 800aad0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aad2:	2101      	movs	r1, #1
 800aad4:	4815      	ldr	r0, [pc, #84]	@ (800ab2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aad6:	f000 fd5d 	bl	800b594 <USBD_GetEpDesc>
 800aada:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aadc:	2181      	movs	r1, #129	@ 0x81
 800aade:	4813      	ldr	r0, [pc, #76]	@ (800ab2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aae0:	f000 fd58 	bl	800b594 <USBD_GetEpDesc>
 800aae4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	2210      	movs	r2, #16
 800aaf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d006      	beq.n	800ab06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab00:	711a      	strb	r2, [r3, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d006      	beq.n	800ab1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab14:	711a      	strb	r2, [r3, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2243      	movs	r2, #67	@ 0x43
 800ab1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab20:	4b02      	ldr	r3, [pc, #8]	@ (800ab2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20000054 	.word	0x20000054

0800ab30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab38:	2182      	movs	r1, #130	@ 0x82
 800ab3a:	4818      	ldr	r0, [pc, #96]	@ (800ab9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab3c:	f000 fd2a 	bl	800b594 <USBD_GetEpDesc>
 800ab40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab42:	2101      	movs	r1, #1
 800ab44:	4815      	ldr	r0, [pc, #84]	@ (800ab9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab46:	f000 fd25 	bl	800b594 <USBD_GetEpDesc>
 800ab4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab4c:	2181      	movs	r1, #129	@ 0x81
 800ab4e:	4813      	ldr	r0, [pc, #76]	@ (800ab9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab50:	f000 fd20 	bl	800b594 <USBD_GetEpDesc>
 800ab54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2210      	movs	r2, #16
 800ab60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d006      	beq.n	800ab76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	711a      	strb	r2, [r3, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f042 0202 	orr.w	r2, r2, #2
 800ab74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d006      	beq.n	800ab8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	711a      	strb	r2, [r3, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f042 0202 	orr.w	r2, r2, #2
 800ab88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2243      	movs	r2, #67	@ 0x43
 800ab8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab90:	4b02      	ldr	r3, [pc, #8]	@ (800ab9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20000054 	.word	0x20000054

0800aba0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aba8:	2182      	movs	r1, #130	@ 0x82
 800abaa:	4818      	ldr	r0, [pc, #96]	@ (800ac0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abac:	f000 fcf2 	bl	800b594 <USBD_GetEpDesc>
 800abb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abb2:	2101      	movs	r1, #1
 800abb4:	4815      	ldr	r0, [pc, #84]	@ (800ac0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abb6:	f000 fced 	bl	800b594 <USBD_GetEpDesc>
 800abba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abbc:	2181      	movs	r1, #129	@ 0x81
 800abbe:	4813      	ldr	r0, [pc, #76]	@ (800ac0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abc0:	f000 fce8 	bl	800b594 <USBD_GetEpDesc>
 800abc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	2210      	movs	r2, #16
 800abd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d006      	beq.n	800abe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	2200      	movs	r2, #0
 800abdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abe0:	711a      	strb	r2, [r3, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d006      	beq.n	800abfa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abf4:	711a      	strb	r2, [r3, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2243      	movs	r2, #67	@ 0x43
 800abfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac00:	4b02      	ldr	r3, [pc, #8]	@ (800ac0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3718      	adds	r7, #24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	20000054 	.word	0x20000054

0800ac10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	220a      	movs	r2, #10
 800ac1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac1e:	4b03      	ldr	r3, [pc, #12]	@ (800ac2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	20000010 	.word	0x20000010

0800ac30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e009      	b.n	800ac58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	33b0      	adds	r3, #176	@ 0xb0
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	32b0      	adds	r2, #176	@ 0xb0
 800ac7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e008      	b.n	800ac9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	371c      	adds	r7, #28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	32b0      	adds	r2, #176	@ 0xb0
 800acbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800acc8:	2303      	movs	r3, #3
 800acca:	e004      	b.n	800acd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
	...

0800ace4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	32b0      	adds	r2, #176	@ 0xb0
 800acf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800acfc:	2301      	movs	r3, #1
 800acfe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ad06:	2303      	movs	r3, #3
 800ad08:	e025      	b.n	800ad56 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d11f      	bne.n	800ad54 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ad1c:	4b10      	ldr	r3, [pc, #64]	@ (800ad60 <USBD_CDC_TransmitPacket+0x7c>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	f003 020f 	and.w	r2, r3, #15
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4403      	add	r3, r0
 800ad36:	3314      	adds	r3, #20
 800ad38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ad3a:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <USBD_CDC_TransmitPacket+0x7c>)
 800ad3c:	7819      	ldrb	r1, [r3, #0]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f001 ffe1 	bl	800cd12 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	20000097 	.word	0x20000097

0800ad64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	32b0      	adds	r2, #176	@ 0xb0
 800ad76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	32b0      	adds	r2, #176	@ 0xb0
 800ad86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e018      	b.n	800adc4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	7c1b      	ldrb	r3, [r3, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10a      	bne.n	800adb0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad9a:	4b0c      	ldr	r3, [pc, #48]	@ (800adcc <USBD_CDC_ReceivePacket+0x68>)
 800ad9c:	7819      	ldrb	r1, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ada4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f001 ffd3 	bl	800cd54 <USBD_LL_PrepareReceive>
 800adae:	e008      	b.n	800adc2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800adb0:	4b06      	ldr	r3, [pc, #24]	@ (800adcc <USBD_CDC_ReceivePacket+0x68>)
 800adb2:	7819      	ldrb	r1, [r3, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800adba:	2340      	movs	r3, #64	@ 0x40
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 ffc9 	bl	800cd54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	20000098 	.word	0x20000098

0800add0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	4613      	mov	r3, r2
 800addc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e01f      	b.n	800ae28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	79fa      	ldrb	r2, [r7, #7]
 800ae1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f001 fe43 	bl	800caa8 <USBD_LL_Init>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e025      	b.n	800ae94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	32ae      	adds	r2, #174	@ 0xae
 800ae5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00f      	beq.n	800ae84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	32ae      	adds	r2, #174	@ 0xae
 800ae6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae74:	f107 020e 	add.w	r2, r7, #14
 800ae78:	4610      	mov	r0, r2
 800ae7a:	4798      	blx	r3
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 fe4b 	bl	800cb40 <USBD_LL_Start>
 800aeaa:	4603      	mov	r3, r0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aebc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d009      	beq.n	800aef8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	78fa      	ldrb	r2, [r7, #3]
 800aeee:	4611      	mov	r1, r2
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	4798      	blx	r3
 800aef4:	4603      	mov	r3, r0
 800aef6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b084      	sub	sp, #16
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	460b      	mov	r3, r1
 800af0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	78fa      	ldrb	r2, [r7, #3]
 800af1c:	4611      	mov	r1, r2
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	4798      	blx	r3
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800af28:	2303      	movs	r3, #3
 800af2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	4618      	mov	r0, r3
 800af4a:	f001 f922 	bl	800c192 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800af5c:	461a      	mov	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af6a:	f003 031f 	and.w	r3, r3, #31
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d01a      	beq.n	800afa8 <USBD_LL_SetupStage+0x72>
 800af72:	2b02      	cmp	r3, #2
 800af74:	d822      	bhi.n	800afbc <USBD_LL_SetupStage+0x86>
 800af76:	2b00      	cmp	r3, #0
 800af78:	d002      	beq.n	800af80 <USBD_LL_SetupStage+0x4a>
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d00a      	beq.n	800af94 <USBD_LL_SetupStage+0x5e>
 800af7e:	e01d      	b.n	800afbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af86:	4619      	mov	r1, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fb77 	bl	800b67c <USBD_StdDevReq>
 800af8e:	4603      	mov	r3, r0
 800af90:	73fb      	strb	r3, [r7, #15]
      break;
 800af92:	e020      	b.n	800afd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fbdf 	bl	800b760 <USBD_StdItfReq>
 800afa2:	4603      	mov	r3, r0
 800afa4:	73fb      	strb	r3, [r7, #15]
      break;
 800afa6:	e016      	b.n	800afd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fc41 	bl	800b838 <USBD_StdEPReq>
 800afb6:	4603      	mov	r3, r0
 800afb8:	73fb      	strb	r3, [r7, #15]
      break;
 800afba:	e00c      	b.n	800afd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800afc2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	4619      	mov	r1, r3
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f001 fe18 	bl	800cc00 <USBD_LL_StallEP>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]
      break;
 800afd4:	bf00      	nop
  }

  return ret;
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	460b      	mov	r3, r1
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800aff2:	7afb      	ldrb	r3, [r7, #11]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d177      	bne.n	800b0e8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800affe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b006:	2b03      	cmp	r3, #3
 800b008:	f040 80a1 	bne.w	800b14e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	8992      	ldrh	r2, [r2, #12]
 800b014:	4293      	cmp	r3, r2
 800b016:	d91c      	bls.n	800b052 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	8992      	ldrh	r2, [r2, #12]
 800b020:	1a9a      	subs	r2, r3, r2
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	8992      	ldrh	r2, [r2, #12]
 800b02e:	441a      	add	r2, r3
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	6919      	ldr	r1, [r3, #16]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	899b      	ldrh	r3, [r3, #12]
 800b03c:	461a      	mov	r2, r3
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	4293      	cmp	r3, r2
 800b044:	bf38      	it	cc
 800b046:	4613      	movcc	r3, r2
 800b048:	461a      	mov	r2, r3
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f001 f9a8 	bl	800c3a0 <USBD_CtlContinueRx>
 800b050:	e07d      	b.n	800b14e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b058:	f003 031f 	and.w	r3, r3, #31
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d014      	beq.n	800b08a <USBD_LL_DataOutStage+0xaa>
 800b060:	2b02      	cmp	r3, #2
 800b062:	d81d      	bhi.n	800b0a0 <USBD_LL_DataOutStage+0xc0>
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <USBD_LL_DataOutStage+0x8e>
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d003      	beq.n	800b074 <USBD_LL_DataOutStage+0x94>
 800b06c:	e018      	b.n	800b0a0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	75bb      	strb	r3, [r7, #22]
            break;
 800b072:	e018      	b.n	800b0a6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	4619      	mov	r1, r3
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f000 fa6e 	bl	800b560 <USBD_CoreFindIF>
 800b084:	4603      	mov	r3, r0
 800b086:	75bb      	strb	r3, [r7, #22]
            break;
 800b088:	e00d      	b.n	800b0a6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b090:	b2db      	uxtb	r3, r3
 800b092:	4619      	mov	r1, r3
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f000 fa70 	bl	800b57a <USBD_CoreFindEP>
 800b09a:	4603      	mov	r3, r0
 800b09c:	75bb      	strb	r3, [r7, #22]
            break;
 800b09e:	e002      	b.n	800b0a6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	75bb      	strb	r3, [r7, #22]
            break;
 800b0a4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b0a6:	7dbb      	ldrb	r3, [r7, #22]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d119      	bne.n	800b0e0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b03      	cmp	r3, #3
 800b0b6:	d113      	bne.n	800b0e0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b0b8:	7dba      	ldrb	r2, [r7, #22]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	32ae      	adds	r2, #174	@ 0xae
 800b0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00b      	beq.n	800b0e0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800b0c8:	7dba      	ldrb	r2, [r7, #22]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b0d0:	7dba      	ldrb	r2, [r7, #22]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	32ae      	adds	r2, #174	@ 0xae
 800b0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f001 f96e 	bl	800c3c2 <USBD_CtlSendStatus>
 800b0e6:	e032      	b.n	800b14e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b0e8:	7afb      	ldrb	r3, [r7, #11]
 800b0ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 fa41 	bl	800b57a <USBD_CoreFindEP>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0fc:	7dbb      	ldrb	r3, [r7, #22]
 800b0fe:	2bff      	cmp	r3, #255	@ 0xff
 800b100:	d025      	beq.n	800b14e <USBD_LL_DataOutStage+0x16e>
 800b102:	7dbb      	ldrb	r3, [r7, #22]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d122      	bne.n	800b14e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b03      	cmp	r3, #3
 800b112:	d117      	bne.n	800b144 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b114:	7dba      	ldrb	r2, [r7, #22]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	32ae      	adds	r2, #174	@ 0xae
 800b11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00f      	beq.n	800b144 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800b124:	7dba      	ldrb	r2, [r7, #22]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b12c:	7dba      	ldrb	r2, [r7, #22]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	32ae      	adds	r2, #174	@ 0xae
 800b132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	7afa      	ldrb	r2, [r7, #11]
 800b13a:	4611      	mov	r1, r2
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	4798      	blx	r3
 800b140:	4603      	mov	r3, r0
 800b142:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800b14a:	7dfb      	ldrb	r3, [r7, #23]
 800b14c:	e000      	b.n	800b150 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3718      	adds	r7, #24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	460b      	mov	r3, r1
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b166:	7afb      	ldrb	r3, [r7, #11]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d178      	bne.n	800b25e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3314      	adds	r3, #20
 800b170:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d163      	bne.n	800b244 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	8992      	ldrh	r2, [r2, #12]
 800b184:	4293      	cmp	r3, r2
 800b186:	d91c      	bls.n	800b1c2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	8992      	ldrh	r2, [r2, #12]
 800b190:	1a9a      	subs	r2, r3, r2
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	8992      	ldrh	r2, [r2, #12]
 800b19e:	441a      	add	r2, r3
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	6919      	ldr	r1, [r3, #16]
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f001 f8c4 	bl	800c33c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f001 fdca 	bl	800cd54 <USBD_LL_PrepareReceive>
 800b1c0:	e040      	b.n	800b244 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	899b      	ldrh	r3, [r3, #12]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d11c      	bne.n	800b20a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d316      	bcc.n	800b20a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d20f      	bcs.n	800b20a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f001 f8a4 	bl	800c33c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2200      	movs	r2, #0
 800b200:	2100      	movs	r1, #0
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f001 fda6 	bl	800cd54 <USBD_LL_PrepareReceive>
 800b208:	e01c      	b.n	800b244 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b03      	cmp	r3, #3
 800b214:	d10f      	bne.n	800b236 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d009      	beq.n	800b236 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b236:	2180      	movs	r1, #128	@ 0x80
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f001 fce1 	bl	800cc00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f001 f8d2 	bl	800c3e8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d03a      	beq.n	800b2c4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7ff fe30 	bl	800aeb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b25c:	e032      	b.n	800b2c4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b25e:	7afb      	ldrb	r3, [r7, #11]
 800b260:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b264:	b2db      	uxtb	r3, r3
 800b266:	4619      	mov	r1, r3
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f000 f986 	bl	800b57a <USBD_CoreFindEP>
 800b26e:	4603      	mov	r3, r0
 800b270:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	2bff      	cmp	r3, #255	@ 0xff
 800b276:	d025      	beq.n	800b2c4 <USBD_LL_DataInStage+0x16c>
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d122      	bne.n	800b2c4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b03      	cmp	r3, #3
 800b288:	d11c      	bne.n	800b2c4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b28a:	7dfa      	ldrb	r2, [r7, #23]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	32ae      	adds	r2, #174	@ 0xae
 800b290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b294:	695b      	ldr	r3, [r3, #20]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d014      	beq.n	800b2c4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800b29a:	7dfa      	ldrb	r2, [r7, #23]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b2a2:	7dfa      	ldrb	r2, [r7, #23]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	32ae      	adds	r2, #174	@ 0xae
 800b2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	7afa      	ldrb	r2, [r7, #11]
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	4798      	blx	r3
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b2ba:	7dbb      	ldrb	r3, [r7, #22]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800b2c0:	7dbb      	ldrb	r3, [r7, #22]
 800b2c2:	e000      	b.n	800b2c6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b306:	2b00      	cmp	r3, #0
 800b308:	d014      	beq.n	800b334 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00e      	beq.n	800b334 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	6852      	ldr	r2, [r2, #4]
 800b322:	b2d2      	uxtb	r2, r2
 800b324:	4611      	mov	r1, r2
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b330:	2303      	movs	r3, #3
 800b332:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b334:	2340      	movs	r3, #64	@ 0x40
 800b336:	2200      	movs	r2, #0
 800b338:	2100      	movs	r1, #0
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f001 fc1b 	bl	800cb76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2240      	movs	r2, #64	@ 0x40
 800b34c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b350:	2340      	movs	r3, #64	@ 0x40
 800b352:	2200      	movs	r2, #0
 800b354:	2180      	movs	r1, #128	@ 0x80
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f001 fc0d 	bl	800cb76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2240      	movs	r2, #64	@ 0x40
 800b368:	841a      	strh	r2, [r3, #32]

  return ret;
 800b36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	460b      	mov	r3, r1
 800b37e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	78fa      	ldrb	r2, [r7, #3]
 800b384:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	d006      	beq.n	800b3b6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2204      	movs	r2, #4
 800b3ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d106      	bne.n	800b3ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b03      	cmp	r3, #3
 800b40e:	d110      	bne.n	800b432 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00b      	beq.n	800b432 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d005      	beq.n	800b432 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b42c:	69db      	ldr	r3, [r3, #28]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	32ae      	adds	r2, #174	@ 0xae
 800b452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e01c      	b.n	800b498 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b03      	cmp	r3, #3
 800b468:	d115      	bne.n	800b496 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	32ae      	adds	r2, #174	@ 0xae
 800b474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00b      	beq.n	800b496 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	32ae      	adds	r2, #174	@ 0xae
 800b488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	78fa      	ldrb	r2, [r7, #3]
 800b490:	4611      	mov	r1, r2
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	32ae      	adds	r2, #174	@ 0xae
 800b4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e01c      	b.n	800b4fc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d115      	bne.n	800b4fa <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	32ae      	adds	r2, #174	@ 0xae
 800b4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00b      	beq.n	800b4fa <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	32ae      	adds	r2, #174	@ 0xae
 800b4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f2:	78fa      	ldrb	r2, [r7, #3]
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b084      	sub	sp, #16
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00e      	beq.n	800b556 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	6852      	ldr	r2, [r2, #4]
 800b544:	b2d2      	uxtb	r2, r2
 800b546:	4611      	mov	r1, r2
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	4798      	blx	r3
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b552:	2303      	movs	r3, #3
 800b554:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b556:	7bfb      	ldrb	r3, [r7, #15]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b56c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b56e:	4618      	mov	r0, r3
 800b570:	370c      	adds	r7, #12
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b57a:	b480      	push	{r7}
 800b57c:	b083      	sub	sp, #12
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	460b      	mov	r3, r1
 800b584:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b586:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	885b      	ldrh	r3, [r3, #2]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	7812      	ldrb	r2, [r2, #0]
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d91f      	bls.n	800b5fa <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b5c0:	e013      	b.n	800b5ea <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b5c2:	f107 030a 	add.w	r3, r7, #10
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6978      	ldr	r0, [r7, #20]
 800b5ca:	f000 f81b 	bl	800b604 <USBD_GetNextDesc>
 800b5ce:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	785b      	ldrb	r3, [r3, #1]
 800b5d4:	2b05      	cmp	r3, #5
 800b5d6:	d108      	bne.n	800b5ea <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	789b      	ldrb	r3, [r3, #2]
 800b5e0:	78fa      	ldrb	r2, [r7, #3]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d008      	beq.n	800b5f8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	885b      	ldrh	r3, [r3, #2]
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	897b      	ldrh	r3, [r7, #10]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d8e5      	bhi.n	800b5c2 <USBD_GetEpDesc+0x2e>
 800b5f6:	e000      	b.n	800b5fa <USBD_GetEpDesc+0x66>
          break;
 800b5f8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b5fa:	693b      	ldr	r3, [r7, #16]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	7812      	ldrb	r2, [r2, #0]
 800b61a:	4413      	add	r3, r2
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4413      	add	r3, r2
 800b62c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b62e:	68fb      	ldr	r3, [r7, #12]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	3301      	adds	r3, #1
 800b652:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b65a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b65e:	021b      	lsls	r3, r3, #8
 800b660:	b21a      	sxth	r2, r3
 800b662:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b666:	4313      	orrs	r3, r2
 800b668:	b21b      	sxth	r3, r3
 800b66a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b66c:	89fb      	ldrh	r3, [r7, #14]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
	...

0800b67c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b692:	2b40      	cmp	r3, #64	@ 0x40
 800b694:	d005      	beq.n	800b6a2 <USBD_StdDevReq+0x26>
 800b696:	2b40      	cmp	r3, #64	@ 0x40
 800b698:	d857      	bhi.n	800b74a <USBD_StdDevReq+0xce>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00f      	beq.n	800b6be <USBD_StdDevReq+0x42>
 800b69e:	2b20      	cmp	r3, #32
 800b6a0:	d153      	bne.n	800b74a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	32ae      	adds	r2, #174	@ 0xae
 800b6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	4798      	blx	r3
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b6bc:	e04a      	b.n	800b754 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	785b      	ldrb	r3, [r3, #1]
 800b6c2:	2b09      	cmp	r3, #9
 800b6c4:	d83b      	bhi.n	800b73e <USBD_StdDevReq+0xc2>
 800b6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6cc <USBD_StdDevReq+0x50>)
 800b6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6cc:	0800b721 	.word	0x0800b721
 800b6d0:	0800b735 	.word	0x0800b735
 800b6d4:	0800b73f 	.word	0x0800b73f
 800b6d8:	0800b72b 	.word	0x0800b72b
 800b6dc:	0800b73f 	.word	0x0800b73f
 800b6e0:	0800b6ff 	.word	0x0800b6ff
 800b6e4:	0800b6f5 	.word	0x0800b6f5
 800b6e8:	0800b73f 	.word	0x0800b73f
 800b6ec:	0800b717 	.word	0x0800b717
 800b6f0:	0800b709 	.word	0x0800b709
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fa3e 	bl	800bb78 <USBD_GetDescriptor>
          break;
 800b6fc:	e024      	b.n	800b748 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fba3 	bl	800be4c <USBD_SetAddress>
          break;
 800b706:	e01f      	b.n	800b748 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fbe2 	bl	800bed4 <USBD_SetConfig>
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]
          break;
 800b714:	e018      	b.n	800b748 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fc85 	bl	800c028 <USBD_GetConfig>
          break;
 800b71e:	e013      	b.n	800b748 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b720:	6839      	ldr	r1, [r7, #0]
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 fcb6 	bl	800c094 <USBD_GetStatus>
          break;
 800b728:	e00e      	b.n	800b748 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fce5 	bl	800c0fc <USBD_SetFeature>
          break;
 800b732:	e009      	b.n	800b748 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fd09 	bl	800c14e <USBD_ClrFeature>
          break;
 800b73c:	e004      	b.n	800b748 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fd60 	bl	800c206 <USBD_CtlError>
          break;
 800b746:	bf00      	nop
      }
      break;
 800b748:	e004      	b.n	800b754 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fd5a 	bl	800c206 <USBD_CtlError>
      break;
 800b752:	bf00      	nop
  }

  return ret;
 800b754:	7bfb      	ldrb	r3, [r7, #15]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop

0800b760 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b776:	2b40      	cmp	r3, #64	@ 0x40
 800b778:	d005      	beq.n	800b786 <USBD_StdItfReq+0x26>
 800b77a:	2b40      	cmp	r3, #64	@ 0x40
 800b77c:	d852      	bhi.n	800b824 <USBD_StdItfReq+0xc4>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <USBD_StdItfReq+0x26>
 800b782:	2b20      	cmp	r3, #32
 800b784:	d14e      	bne.n	800b824 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	3b01      	subs	r3, #1
 800b790:	2b02      	cmp	r3, #2
 800b792:	d840      	bhi.n	800b816 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	889b      	ldrh	r3, [r3, #4]
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d836      	bhi.n	800b80c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	889b      	ldrh	r3, [r3, #4]
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7ff feda 	bl	800b560 <USBD_CoreFindIF>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	2bff      	cmp	r3, #255	@ 0xff
 800b7b4:	d01d      	beq.n	800b7f2 <USBD_StdItfReq+0x92>
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d11a      	bne.n	800b7f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b7bc:	7bba      	ldrb	r2, [r7, #14]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	32ae      	adds	r2, #174	@ 0xae
 800b7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00f      	beq.n	800b7ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b7cc:	7bba      	ldrb	r2, [r7, #14]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b7d4:	7bba      	ldrb	r2, [r7, #14]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	32ae      	adds	r2, #174	@ 0xae
 800b7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	4798      	blx	r3
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7ea:	e004      	b.n	800b7f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7f0:	e001      	b.n	800b7f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	88db      	ldrh	r3, [r3, #6]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d110      	bne.n	800b820 <USBD_StdItfReq+0xc0>
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10d      	bne.n	800b820 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fddc 	bl	800c3c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b80a:	e009      	b.n	800b820 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fcf9 	bl	800c206 <USBD_CtlError>
          break;
 800b814:	e004      	b.n	800b820 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fcf4 	bl	800c206 <USBD_CtlError>
          break;
 800b81e:	e000      	b.n	800b822 <USBD_StdItfReq+0xc2>
          break;
 800b820:	bf00      	nop
      }
      break;
 800b822:	e004      	b.n	800b82e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fced 	bl	800c206 <USBD_CtlError>
      break;
 800b82c:	bf00      	nop
  }

  return ret;
 800b82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	889b      	ldrh	r3, [r3, #4]
 800b84a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b854:	2b40      	cmp	r3, #64	@ 0x40
 800b856:	d007      	beq.n	800b868 <USBD_StdEPReq+0x30>
 800b858:	2b40      	cmp	r3, #64	@ 0x40
 800b85a:	f200 8181 	bhi.w	800bb60 <USBD_StdEPReq+0x328>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d02a      	beq.n	800b8b8 <USBD_StdEPReq+0x80>
 800b862:	2b20      	cmp	r3, #32
 800b864:	f040 817c 	bne.w	800bb60 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b868:	7bbb      	ldrb	r3, [r7, #14]
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff fe84 	bl	800b57a <USBD_CoreFindEP>
 800b872:	4603      	mov	r3, r0
 800b874:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b876:	7b7b      	ldrb	r3, [r7, #13]
 800b878:	2bff      	cmp	r3, #255	@ 0xff
 800b87a:	f000 8176 	beq.w	800bb6a <USBD_StdEPReq+0x332>
 800b87e:	7b7b      	ldrb	r3, [r7, #13]
 800b880:	2b00      	cmp	r3, #0
 800b882:	f040 8172 	bne.w	800bb6a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800b886:	7b7a      	ldrb	r2, [r7, #13]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b88e:	7b7a      	ldrb	r2, [r7, #13]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	32ae      	adds	r2, #174	@ 0xae
 800b894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 8165 	beq.w	800bb6a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b8a0:	7b7a      	ldrb	r2, [r7, #13]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	32ae      	adds	r2, #174	@ 0xae
 800b8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	4798      	blx	r3
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b8b6:	e158      	b.n	800bb6a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	785b      	ldrb	r3, [r3, #1]
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d008      	beq.n	800b8d2 <USBD_StdEPReq+0x9a>
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	f300 8147 	bgt.w	800bb54 <USBD_StdEPReq+0x31c>
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 809b 	beq.w	800ba02 <USBD_StdEPReq+0x1ca>
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d03c      	beq.n	800b94a <USBD_StdEPReq+0x112>
 800b8d0:	e140      	b.n	800bb54 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d002      	beq.n	800b8e4 <USBD_StdEPReq+0xac>
 800b8de:	2b03      	cmp	r3, #3
 800b8e0:	d016      	beq.n	800b910 <USBD_StdEPReq+0xd8>
 800b8e2:	e02c      	b.n	800b93e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00d      	beq.n	800b906 <USBD_StdEPReq+0xce>
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	2b80      	cmp	r3, #128	@ 0x80
 800b8ee:	d00a      	beq.n	800b906 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f001 f983 	bl	800cc00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8fa:	2180      	movs	r1, #128	@ 0x80
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 f97f 	bl	800cc00 <USBD_LL_StallEP>
 800b902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b904:	e020      	b.n	800b948 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fc7c 	bl	800c206 <USBD_CtlError>
              break;
 800b90e:	e01b      	b.n	800b948 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	885b      	ldrh	r3, [r3, #2]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10e      	bne.n	800b936 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00b      	beq.n	800b936 <USBD_StdEPReq+0xfe>
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	2b80      	cmp	r3, #128	@ 0x80
 800b922:	d008      	beq.n	800b936 <USBD_StdEPReq+0xfe>
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	88db      	ldrh	r3, [r3, #6]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d104      	bne.n	800b936 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b92c:	7bbb      	ldrb	r3, [r7, #14]
 800b92e:	4619      	mov	r1, r3
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f001 f965 	bl	800cc00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 fd43 	bl	800c3c2 <USBD_CtlSendStatus>

              break;
 800b93c:	e004      	b.n	800b948 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fc60 	bl	800c206 <USBD_CtlError>
              break;
 800b946:	bf00      	nop
          }
          break;
 800b948:	e109      	b.n	800bb5e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b950:	b2db      	uxtb	r3, r3
 800b952:	2b02      	cmp	r3, #2
 800b954:	d002      	beq.n	800b95c <USBD_StdEPReq+0x124>
 800b956:	2b03      	cmp	r3, #3
 800b958:	d016      	beq.n	800b988 <USBD_StdEPReq+0x150>
 800b95a:	e04b      	b.n	800b9f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00d      	beq.n	800b97e <USBD_StdEPReq+0x146>
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	2b80      	cmp	r3, #128	@ 0x80
 800b966:	d00a      	beq.n	800b97e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 f947 	bl	800cc00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b972:	2180      	movs	r1, #128	@ 0x80
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f001 f943 	bl	800cc00 <USBD_LL_StallEP>
 800b97a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b97c:	e040      	b.n	800ba00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fc40 	bl	800c206 <USBD_CtlError>
              break;
 800b986:	e03b      	b.n	800ba00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	885b      	ldrh	r3, [r3, #2]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d136      	bne.n	800b9fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b990:	7bbb      	ldrb	r3, [r7, #14]
 800b992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b996:	2b00      	cmp	r3, #0
 800b998:	d004      	beq.n	800b9a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f001 f94d 	bl	800cc3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 fd0c 	bl	800c3c2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9aa:	7bbb      	ldrb	r3, [r7, #14]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff fde3 	bl	800b57a <USBD_CoreFindEP>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9b8:	7b7b      	ldrb	r3, [r7, #13]
 800b9ba:	2bff      	cmp	r3, #255	@ 0xff
 800b9bc:	d01f      	beq.n	800b9fe <USBD_StdEPReq+0x1c6>
 800b9be:	7b7b      	ldrb	r3, [r7, #13]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d11c      	bne.n	800b9fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b9c4:	7b7a      	ldrb	r2, [r7, #13]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b9cc:	7b7a      	ldrb	r2, [r7, #13]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	32ae      	adds	r2, #174	@ 0xae
 800b9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d010      	beq.n	800b9fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b9dc:	7b7a      	ldrb	r2, [r7, #13]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	32ae      	adds	r2, #174	@ 0xae
 800b9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	4798      	blx	r3
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b9f2:	e004      	b.n	800b9fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fc05 	bl	800c206 <USBD_CtlError>
              break;
 800b9fc:	e000      	b.n	800ba00 <USBD_StdEPReq+0x1c8>
              break;
 800b9fe:	bf00      	nop
          }
          break;
 800ba00:	e0ad      	b.n	800bb5e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d002      	beq.n	800ba14 <USBD_StdEPReq+0x1dc>
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d033      	beq.n	800ba7a <USBD_StdEPReq+0x242>
 800ba12:	e099      	b.n	800bb48 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba14:	7bbb      	ldrb	r3, [r7, #14]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d007      	beq.n	800ba2a <USBD_StdEPReq+0x1f2>
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
 800ba1c:	2b80      	cmp	r3, #128	@ 0x80
 800ba1e:	d004      	beq.n	800ba2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fbef 	bl	800c206 <USBD_CtlError>
                break;
 800ba28:	e093      	b.n	800bb52 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	da0b      	bge.n	800ba4a <USBD_StdEPReq+0x212>
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
 800ba34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	3310      	adds	r3, #16
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	4413      	add	r3, r2
 800ba46:	3304      	adds	r3, #4
 800ba48:	e00b      	b.n	800ba62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	4413      	add	r3, r2
 800ba60:	3304      	adds	r3, #4
 800ba62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	2200      	movs	r2, #0
 800ba68:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	330e      	adds	r3, #14
 800ba6e:	2202      	movs	r2, #2
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fc44 	bl	800c300 <USBD_CtlSendData>
              break;
 800ba78:	e06b      	b.n	800bb52 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	da11      	bge.n	800baa6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	f003 020f 	and.w	r2, r3, #15
 800ba88:	6879      	ldr	r1, [r7, #4]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	440b      	add	r3, r1
 800ba94:	3323      	adds	r3, #35	@ 0x23
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d117      	bne.n	800bacc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 fbb1 	bl	800c206 <USBD_CtlError>
                  break;
 800baa4:	e055      	b.n	800bb52 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	f003 020f 	and.w	r2, r3, #15
 800baac:	6879      	ldr	r1, [r7, #4]
 800baae:	4613      	mov	r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	4413      	add	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	440b      	add	r3, r1
 800bab8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d104      	bne.n	800bacc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fb9e 	bl	800c206 <USBD_CtlError>
                  break;
 800baca:	e042      	b.n	800bb52 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bacc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	da0b      	bge.n	800baec <USBD_StdEPReq+0x2b4>
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	3310      	adds	r3, #16
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	4413      	add	r3, r2
 800bae8:	3304      	adds	r3, #4
 800baea:	e00b      	b.n	800bb04 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baec:	7bbb      	ldrb	r3, [r7, #14]
 800baee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baf2:	4613      	mov	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	3304      	adds	r3, #4
 800bb04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb06:	7bbb      	ldrb	r3, [r7, #14]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <USBD_StdEPReq+0x2da>
 800bb0c:	7bbb      	ldrb	r3, [r7, #14]
 800bb0e:	2b80      	cmp	r3, #128	@ 0x80
 800bb10:	d103      	bne.n	800bb1a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2200      	movs	r2, #0
 800bb16:	739a      	strb	r2, [r3, #14]
 800bb18:	e00e      	b.n	800bb38 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb1a:	7bbb      	ldrb	r3, [r7, #14]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f001 f8ac 	bl	800cc7c <USBD_LL_IsStallEP>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	739a      	strb	r2, [r3, #14]
 800bb30:	e002      	b.n	800bb38 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2200      	movs	r2, #0
 800bb36:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	330e      	adds	r3, #14
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 fbdd 	bl	800c300 <USBD_CtlSendData>
              break;
 800bb46:	e004      	b.n	800bb52 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fb5b 	bl	800c206 <USBD_CtlError>
              break;
 800bb50:	bf00      	nop
          }
          break;
 800bb52:	e004      	b.n	800bb5e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 fb55 	bl	800c206 <USBD_CtlError>
          break;
 800bb5c:	bf00      	nop
      }
      break;
 800bb5e:	e005      	b.n	800bb6c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fb4f 	bl	800c206 <USBD_CtlError>
      break;
 800bb68:	e000      	b.n	800bb6c <USBD_StdEPReq+0x334>
      break;
 800bb6a:	bf00      	nop
  }

  return ret;
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
	...

0800bb78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb82:	2300      	movs	r3, #0
 800bb84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb86:	2300      	movs	r3, #0
 800bb88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	885b      	ldrh	r3, [r3, #2]
 800bb92:	0a1b      	lsrs	r3, r3, #8
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	3b01      	subs	r3, #1
 800bb98:	2b06      	cmp	r3, #6
 800bb9a:	f200 8128 	bhi.w	800bdee <USBD_GetDescriptor+0x276>
 800bb9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bba4 <USBD_GetDescriptor+0x2c>)
 800bba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba4:	0800bbc1 	.word	0x0800bbc1
 800bba8:	0800bbd9 	.word	0x0800bbd9
 800bbac:	0800bc19 	.word	0x0800bc19
 800bbb0:	0800bdef 	.word	0x0800bdef
 800bbb4:	0800bdef 	.word	0x0800bdef
 800bbb8:	0800bd8f 	.word	0x0800bd8f
 800bbbc:	0800bdbb 	.word	0x0800bdbb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	7c12      	ldrb	r2, [r2, #16]
 800bbcc:	f107 0108 	add.w	r1, r7, #8
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	4798      	blx	r3
 800bbd4:	60f8      	str	r0, [r7, #12]
      break;
 800bbd6:	e112      	b.n	800bdfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	7c1b      	ldrb	r3, [r3, #16]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10d      	bne.n	800bbfc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe8:	f107 0208 	add.w	r2, r7, #8
 800bbec:	4610      	mov	r0, r2
 800bbee:	4798      	blx	r3
 800bbf0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bbfa:	e100      	b.n	800bdfe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc04:	f107 0208 	add.w	r2, r7, #8
 800bc08:	4610      	mov	r0, r2
 800bc0a:	4798      	blx	r3
 800bc0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3301      	adds	r3, #1
 800bc12:	2202      	movs	r2, #2
 800bc14:	701a      	strb	r2, [r3, #0]
      break;
 800bc16:	e0f2      	b.n	800bdfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	885b      	ldrh	r3, [r3, #2]
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b05      	cmp	r3, #5
 800bc20:	f200 80ac 	bhi.w	800bd7c <USBD_GetDescriptor+0x204>
 800bc24:	a201      	add	r2, pc, #4	@ (adr r2, 800bc2c <USBD_GetDescriptor+0xb4>)
 800bc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2a:	bf00      	nop
 800bc2c:	0800bc45 	.word	0x0800bc45
 800bc30:	0800bc79 	.word	0x0800bc79
 800bc34:	0800bcad 	.word	0x0800bcad
 800bc38:	0800bce1 	.word	0x0800bce1
 800bc3c:	0800bd15 	.word	0x0800bd15
 800bc40:	0800bd49 	.word	0x0800bd49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00b      	beq.n	800bc68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	7c12      	ldrb	r2, [r2, #16]
 800bc5c:	f107 0108 	add.w	r1, r7, #8
 800bc60:	4610      	mov	r0, r2
 800bc62:	4798      	blx	r3
 800bc64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc66:	e091      	b.n	800bd8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc68:	6839      	ldr	r1, [r7, #0]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 facb 	bl	800c206 <USBD_CtlError>
            err++;
 800bc70:	7afb      	ldrb	r3, [r7, #11]
 800bc72:	3301      	adds	r3, #1
 800bc74:	72fb      	strb	r3, [r7, #11]
          break;
 800bc76:	e089      	b.n	800bd8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00b      	beq.n	800bc9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	7c12      	ldrb	r2, [r2, #16]
 800bc90:	f107 0108 	add.w	r1, r7, #8
 800bc94:	4610      	mov	r0, r2
 800bc96:	4798      	blx	r3
 800bc98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc9a:	e077      	b.n	800bd8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fab1 	bl	800c206 <USBD_CtlError>
            err++;
 800bca4:	7afb      	ldrb	r3, [r7, #11]
 800bca6:	3301      	adds	r3, #1
 800bca8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcaa:	e06f      	b.n	800bd8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00b      	beq.n	800bcd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	7c12      	ldrb	r2, [r2, #16]
 800bcc4:	f107 0108 	add.w	r1, r7, #8
 800bcc8:	4610      	mov	r0, r2
 800bcca:	4798      	blx	r3
 800bccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcce:	e05d      	b.n	800bd8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fa97 	bl	800c206 <USBD_CtlError>
            err++;
 800bcd8:	7afb      	ldrb	r3, [r7, #11]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcde:	e055      	b.n	800bd8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00b      	beq.n	800bd04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	7c12      	ldrb	r2, [r2, #16]
 800bcf8:	f107 0108 	add.w	r1, r7, #8
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	4798      	blx	r3
 800bd00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd02:	e043      	b.n	800bd8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fa7d 	bl	800c206 <USBD_CtlError>
            err++;
 800bd0c:	7afb      	ldrb	r3, [r7, #11]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	72fb      	strb	r3, [r7, #11]
          break;
 800bd12:	e03b      	b.n	800bd8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00b      	beq.n	800bd38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd26:	695b      	ldr	r3, [r3, #20]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	7c12      	ldrb	r2, [r2, #16]
 800bd2c:	f107 0108 	add.w	r1, r7, #8
 800bd30:	4610      	mov	r0, r2
 800bd32:	4798      	blx	r3
 800bd34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd36:	e029      	b.n	800bd8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd38:	6839      	ldr	r1, [r7, #0]
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fa63 	bl	800c206 <USBD_CtlError>
            err++;
 800bd40:	7afb      	ldrb	r3, [r7, #11]
 800bd42:	3301      	adds	r3, #1
 800bd44:	72fb      	strb	r3, [r7, #11]
          break;
 800bd46:	e021      	b.n	800bd8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd4e:	699b      	ldr	r3, [r3, #24]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00b      	beq.n	800bd6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	7c12      	ldrb	r2, [r2, #16]
 800bd60:	f107 0108 	add.w	r1, r7, #8
 800bd64:	4610      	mov	r0, r2
 800bd66:	4798      	blx	r3
 800bd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd6a:	e00f      	b.n	800bd8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fa49 	bl	800c206 <USBD_CtlError>
            err++;
 800bd74:	7afb      	ldrb	r3, [r7, #11]
 800bd76:	3301      	adds	r3, #1
 800bd78:	72fb      	strb	r3, [r7, #11]
          break;
 800bd7a:	e007      	b.n	800bd8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fa41 	bl	800c206 <USBD_CtlError>
          err++;
 800bd84:	7afb      	ldrb	r3, [r7, #11]
 800bd86:	3301      	adds	r3, #1
 800bd88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd8a:	bf00      	nop
      }
      break;
 800bd8c:	e037      	b.n	800bdfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	7c1b      	ldrb	r3, [r3, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d109      	bne.n	800bdaa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd9e:	f107 0208 	add.w	r2, r7, #8
 800bda2:	4610      	mov	r0, r2
 800bda4:	4798      	blx	r3
 800bda6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bda8:	e029      	b.n	800bdfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fa2a 	bl	800c206 <USBD_CtlError>
        err++;
 800bdb2:	7afb      	ldrb	r3, [r7, #11]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	72fb      	strb	r3, [r7, #11]
      break;
 800bdb8:	e021      	b.n	800bdfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	7c1b      	ldrb	r3, [r3, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10d      	bne.n	800bdde <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdca:	f107 0208 	add.w	r2, r7, #8
 800bdce:	4610      	mov	r0, r2
 800bdd0:	4798      	blx	r3
 800bdd2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	2207      	movs	r2, #7
 800bdda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bddc:	e00f      	b.n	800bdfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fa10 	bl	800c206 <USBD_CtlError>
        err++;
 800bde6:	7afb      	ldrb	r3, [r7, #11]
 800bde8:	3301      	adds	r3, #1
 800bdea:	72fb      	strb	r3, [r7, #11]
      break;
 800bdec:	e007      	b.n	800bdfe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fa08 	bl	800c206 <USBD_CtlError>
      err++;
 800bdf6:	7afb      	ldrb	r3, [r7, #11]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	72fb      	strb	r3, [r7, #11]
      break;
 800bdfc:	bf00      	nop
  }

  if (err != 0U)
 800bdfe:	7afb      	ldrb	r3, [r7, #11]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d11e      	bne.n	800be42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	88db      	ldrh	r3, [r3, #6]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d016      	beq.n	800be3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800be0c:	893b      	ldrh	r3, [r7, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00e      	beq.n	800be30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	88da      	ldrh	r2, [r3, #6]
 800be16:	893b      	ldrh	r3, [r7, #8]
 800be18:	4293      	cmp	r3, r2
 800be1a:	bf28      	it	cs
 800be1c:	4613      	movcs	r3, r2
 800be1e:	b29b      	uxth	r3, r3
 800be20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be22:	893b      	ldrh	r3, [r7, #8]
 800be24:	461a      	mov	r2, r3
 800be26:	68f9      	ldr	r1, [r7, #12]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fa69 	bl	800c300 <USBD_CtlSendData>
 800be2e:	e009      	b.n	800be44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 f9e7 	bl	800c206 <USBD_CtlError>
 800be38:	e004      	b.n	800be44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fac1 	bl	800c3c2 <USBD_CtlSendStatus>
 800be40:	e000      	b.n	800be44 <USBD_GetDescriptor+0x2cc>
    return;
 800be42:	bf00      	nop
  }
}
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop

0800be4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	889b      	ldrh	r3, [r3, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d131      	bne.n	800bec2 <USBD_SetAddress+0x76>
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	88db      	ldrh	r3, [r3, #6]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d12d      	bne.n	800bec2 <USBD_SetAddress+0x76>
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	885b      	ldrh	r3, [r3, #2]
 800be6a:	2b7f      	cmp	r3, #127	@ 0x7f
 800be6c:	d829      	bhi.n	800bec2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	885b      	ldrh	r3, [r3, #2]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b03      	cmp	r3, #3
 800be84:	d104      	bne.n	800be90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 f9bc 	bl	800c206 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be8e:	e01d      	b.n	800becc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	7bfa      	ldrb	r2, [r7, #15]
 800be94:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 ff19 	bl	800ccd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fa8d 	bl	800c3c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d004      	beq.n	800beb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2202      	movs	r2, #2
 800beb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beb6:	e009      	b.n	800becc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec0:	e004      	b.n	800becc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f99e 	bl	800c206 <USBD_CtlError>
  }
}
 800beca:	bf00      	nop
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bede:	2300      	movs	r3, #0
 800bee0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	885b      	ldrh	r3, [r3, #2]
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	4b4e      	ldr	r3, [pc, #312]	@ (800c024 <USBD_SetConfig+0x150>)
 800beea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800beec:	4b4d      	ldr	r3, [pc, #308]	@ (800c024 <USBD_SetConfig+0x150>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d905      	bls.n	800bf00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f985 	bl	800c206 <USBD_CtlError>
    return USBD_FAIL;
 800befc:	2303      	movs	r3, #3
 800befe:	e08c      	b.n	800c01a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d002      	beq.n	800bf12 <USBD_SetConfig+0x3e>
 800bf0c:	2b03      	cmp	r3, #3
 800bf0e:	d029      	beq.n	800bf64 <USBD_SetConfig+0x90>
 800bf10:	e075      	b.n	800bffe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bf12:	4b44      	ldr	r3, [pc, #272]	@ (800c024 <USBD_SetConfig+0x150>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d020      	beq.n	800bf5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bf1a:	4b42      	ldr	r3, [pc, #264]	@ (800c024 <USBD_SetConfig+0x150>)
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf24:	4b3f      	ldr	r3, [pc, #252]	@ (800c024 <USBD_SetConfig+0x150>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	4619      	mov	r1, r3
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7fe ffcd 	bl	800aeca <USBD_SetClassConfig>
 800bf30:	4603      	mov	r3, r0
 800bf32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d008      	beq.n	800bf4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f962 	bl	800c206 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2202      	movs	r2, #2
 800bf46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf4a:	e065      	b.n	800c018 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fa38 	bl	800c3c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2203      	movs	r2, #3
 800bf56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bf5a:	e05d      	b.n	800c018 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fa30 	bl	800c3c2 <USBD_CtlSendStatus>
      break;
 800bf62:	e059      	b.n	800c018 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bf64:	4b2f      	ldr	r3, [pc, #188]	@ (800c024 <USBD_SetConfig+0x150>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d112      	bne.n	800bf92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2202      	movs	r2, #2
 800bf70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bf74:	4b2b      	ldr	r3, [pc, #172]	@ (800c024 <USBD_SetConfig+0x150>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf7e:	4b29      	ldr	r3, [pc, #164]	@ (800c024 <USBD_SetConfig+0x150>)
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7fe ffbc 	bl	800af02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fa19 	bl	800c3c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf90:	e042      	b.n	800c018 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf92:	4b24      	ldr	r3, [pc, #144]	@ (800c024 <USBD_SetConfig+0x150>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	461a      	mov	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d02a      	beq.n	800bff6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7fe ffaa 	bl	800af02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bfae:	4b1d      	ldr	r3, [pc, #116]	@ (800c024 <USBD_SetConfig+0x150>)
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bfb8:	4b1a      	ldr	r3, [pc, #104]	@ (800c024 <USBD_SetConfig+0x150>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7fe ff83 	bl	800aeca <USBD_SetClassConfig>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00f      	beq.n	800bfee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f918 	bl	800c206 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7fe ff8f 	bl	800af02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2202      	movs	r2, #2
 800bfe8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bfec:	e014      	b.n	800c018 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f9e7 	bl	800c3c2 <USBD_CtlSendStatus>
      break;
 800bff4:	e010      	b.n	800c018 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f9e3 	bl	800c3c2 <USBD_CtlSendStatus>
      break;
 800bffc:	e00c      	b.n	800c018 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f900 	bl	800c206 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c006:	4b07      	ldr	r3, [pc, #28]	@ (800c024 <USBD_SetConfig+0x150>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7fe ff78 	bl	800af02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c012:	2303      	movs	r3, #3
 800c014:	73fb      	strb	r3, [r7, #15]
      break;
 800c016:	bf00      	nop
  }

  return ret;
 800c018:	7bfb      	ldrb	r3, [r7, #15]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	20004410 	.word	0x20004410

0800c028 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	88db      	ldrh	r3, [r3, #6]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d004      	beq.n	800c044 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f8e2 	bl	800c206 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c042:	e023      	b.n	800c08c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	dc02      	bgt.n	800c056 <USBD_GetConfig+0x2e>
 800c050:	2b00      	cmp	r3, #0
 800c052:	dc03      	bgt.n	800c05c <USBD_GetConfig+0x34>
 800c054:	e015      	b.n	800c082 <USBD_GetConfig+0x5a>
 800c056:	2b03      	cmp	r3, #3
 800c058:	d00b      	beq.n	800c072 <USBD_GetConfig+0x4a>
 800c05a:	e012      	b.n	800c082 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3308      	adds	r3, #8
 800c066:	2201      	movs	r2, #1
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f948 	bl	800c300 <USBD_CtlSendData>
        break;
 800c070:	e00c      	b.n	800c08c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	3304      	adds	r3, #4
 800c076:	2201      	movs	r2, #1
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 f940 	bl	800c300 <USBD_CtlSendData>
        break;
 800c080:	e004      	b.n	800c08c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f8be 	bl	800c206 <USBD_CtlError>
        break;
 800c08a:	bf00      	nop
}
 800c08c:	bf00      	nop
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d81e      	bhi.n	800c0ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	88db      	ldrh	r3, [r3, #6]
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d004      	beq.n	800c0be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f8a5 	bl	800c206 <USBD_CtlError>
        break;
 800c0bc:	e01a      	b.n	800c0f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d005      	beq.n	800c0da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	f043 0202 	orr.w	r2, r3, #2
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	330c      	adds	r3, #12
 800c0de:	2202      	movs	r2, #2
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f90c 	bl	800c300 <USBD_CtlSendData>
      break;
 800c0e8:	e004      	b.n	800c0f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f88a 	bl	800c206 <USBD_CtlError>
      break;
 800c0f2:	bf00      	nop
  }
}
 800c0f4:	bf00      	nop
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	885b      	ldrh	r3, [r3, #2]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d107      	bne.n	800c11e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 f953 	bl	800c3c2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c11c:	e013      	b.n	800c146 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	885b      	ldrh	r3, [r3, #2]
 800c122:	2b02      	cmp	r3, #2
 800c124:	d10b      	bne.n	800c13e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	889b      	ldrh	r3, [r3, #4]
 800c12a:	0a1b      	lsrs	r3, r3, #8
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f943 	bl	800c3c2 <USBD_CtlSendStatus>
}
 800c13c:	e003      	b.n	800c146 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f860 	bl	800c206 <USBD_CtlError>
}
 800c146:	bf00      	nop
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b082      	sub	sp, #8
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	3b01      	subs	r3, #1
 800c162:	2b02      	cmp	r3, #2
 800c164:	d80b      	bhi.n	800c17e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	885b      	ldrh	r3, [r3, #2]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d10c      	bne.n	800c188 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f923 	bl	800c3c2 <USBD_CtlSendStatus>
      }
      break;
 800c17c:	e004      	b.n	800c188 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f840 	bl	800c206 <USBD_CtlError>
      break;
 800c186:	e000      	b.n	800c18a <USBD_ClrFeature+0x3c>
      break;
 800c188:	bf00      	nop
  }
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	781a      	ldrb	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	781a      	ldrb	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f7ff fa3d 	bl	800b63c <SWAPBYTE>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f7ff fa30 	bl	800b63c <SWAPBYTE>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	461a      	mov	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f7ff fa23 	bl	800b63c <SWAPBYTE>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	80da      	strh	r2, [r3, #6]
}
 800c1fe:	bf00      	nop
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b082      	sub	sp, #8
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c210:	2180      	movs	r1, #128	@ 0x80
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fcf4 	bl	800cc00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c218:	2100      	movs	r1, #0
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fcf0 	bl	800cc00 <USBD_LL_StallEP>
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c234:	2300      	movs	r3, #0
 800c236:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d042      	beq.n	800c2c4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c242:	6938      	ldr	r0, [r7, #16]
 800c244:	f000 f842 	bl	800c2cc <USBD_GetLen>
 800c248:	4603      	mov	r3, r0
 800c24a:	3301      	adds	r3, #1
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c252:	d808      	bhi.n	800c266 <USBD_GetString+0x3e>
 800c254:	6938      	ldr	r0, [r7, #16]
 800c256:	f000 f839 	bl	800c2cc <USBD_GetLen>
 800c25a:	4603      	mov	r3, r0
 800c25c:	3301      	adds	r3, #1
 800c25e:	b29b      	uxth	r3, r3
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	b29a      	uxth	r2, r3
 800c264:	e001      	b.n	800c26a <USBD_GetString+0x42>
 800c266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c26e:	7dfb      	ldrb	r3, [r7, #23]
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	4413      	add	r3, r2
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	7812      	ldrb	r2, [r2, #0]
 800c278:	701a      	strb	r2, [r3, #0]
  idx++;
 800c27a:	7dfb      	ldrb	r3, [r7, #23]
 800c27c:	3301      	adds	r3, #1
 800c27e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	4413      	add	r3, r2
 800c286:	2203      	movs	r2, #3
 800c288:	701a      	strb	r2, [r3, #0]
  idx++;
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
 800c28c:	3301      	adds	r3, #1
 800c28e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c290:	e013      	b.n	800c2ba <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c292:	7dfb      	ldrb	r3, [r7, #23]
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	4413      	add	r3, r2
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	7812      	ldrb	r2, [r2, #0]
 800c29c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	613b      	str	r3, [r7, #16]
    idx++;
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1e7      	bne.n	800c292 <USBD_GetString+0x6a>
 800c2c2:	e000      	b.n	800c2c6 <USBD_GetString+0x9e>
    return;
 800c2c4:	bf00      	nop
  }
}
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c2dc:	e005      	b.n	800c2ea <USBD_GetLen+0x1e>
  {
    len++;
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1f5      	bne.n	800c2de <USBD_GetLen+0x12>
  }

  return len;
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2202      	movs	r2, #2
 800c310:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	2100      	movs	r1, #0
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f000 fcf0 	bl	800cd12 <USBD_LL_Transmit>

  return USBD_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	2100      	movs	r1, #0
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 fcdf 	bl	800cd12 <USBD_LL_Transmit>

  return USBD_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b084      	sub	sp, #16
 800c362:	af00      	add	r7, sp, #0
 800c364:	60f8      	str	r0, [r7, #12]
 800c366:	60b9      	str	r1, [r7, #8]
 800c368:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2203      	movs	r2, #3
 800c36e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	2100      	movs	r1, #0
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f000 fcdf 	bl	800cd54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f000 fcce 	bl	800cd54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b082      	sub	sp, #8
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2204      	movs	r2, #4
 800c3ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fc9a 	bl	800cd12 <USBD_LL_Transmit>

  return USBD_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2205      	movs	r2, #5
 800c3f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fca8 	bl	800cd54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c414:	2200      	movs	r2, #0
 800c416:	4912      	ldr	r1, [pc, #72]	@ (800c460 <MX_USB_DEVICE_Init+0x50>)
 800c418:	4812      	ldr	r0, [pc, #72]	@ (800c464 <MX_USB_DEVICE_Init+0x54>)
 800c41a:	f7fe fcd9 	bl	800add0 <USBD_Init>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c424:	f7f4 fd7a 	bl	8000f1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c428:	490f      	ldr	r1, [pc, #60]	@ (800c468 <MX_USB_DEVICE_Init+0x58>)
 800c42a:	480e      	ldr	r0, [pc, #56]	@ (800c464 <MX_USB_DEVICE_Init+0x54>)
 800c42c:	f7fe fd00 	bl	800ae30 <USBD_RegisterClass>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d001      	beq.n	800c43a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c436:	f7f4 fd71 	bl	8000f1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c43a:	490c      	ldr	r1, [pc, #48]	@ (800c46c <MX_USB_DEVICE_Init+0x5c>)
 800c43c:	4809      	ldr	r0, [pc, #36]	@ (800c464 <MX_USB_DEVICE_Init+0x54>)
 800c43e:	f7fe fbf7 	bl	800ac30 <USBD_CDC_RegisterInterface>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d001      	beq.n	800c44c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c448:	f7f4 fd68 	bl	8000f1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c44c:	4805      	ldr	r0, [pc, #20]	@ (800c464 <MX_USB_DEVICE_Init+0x54>)
 800c44e:	f7fe fd25 	bl	800ae9c <USBD_Start>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d001      	beq.n	800c45c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c458:	f7f4 fd60 	bl	8000f1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c45c:	bf00      	nop
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	200000b0 	.word	0x200000b0
 800c464:	20004414 	.word	0x20004414
 800c468:	2000001c 	.word	0x2000001c
 800c46c:	2000009c 	.word	0x2000009c

0800c470 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c474:	2200      	movs	r2, #0
 800c476:	4905      	ldr	r1, [pc, #20]	@ (800c48c <CDC_Init_FS+0x1c>)
 800c478:	4805      	ldr	r0, [pc, #20]	@ (800c490 <CDC_Init_FS+0x20>)
 800c47a:	f7fe fbf3 	bl	800ac64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c47e:	4905      	ldr	r1, [pc, #20]	@ (800c494 <CDC_Init_FS+0x24>)
 800c480:	4803      	ldr	r0, [pc, #12]	@ (800c490 <CDC_Init_FS+0x20>)
 800c482:	f7fe fc11 	bl	800aca8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c486:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c488:	4618      	mov	r0, r3
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	20004ef0 	.word	0x20004ef0
 800c490:	20004414 	.word	0x20004414
 800c494:	200046f0 	.word	0x200046f0

0800c498 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c498:	b480      	push	{r7}
 800c49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c49c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	6039      	str	r1, [r7, #0]
 800c4b2:	71fb      	strb	r3, [r7, #7]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c4b8:	79fb      	ldrb	r3, [r7, #7]
 800c4ba:	2b23      	cmp	r3, #35	@ 0x23
 800c4bc:	d84a      	bhi.n	800c554 <CDC_Control_FS+0xac>
 800c4be:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c4 <CDC_Control_FS+0x1c>)
 800c4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c4:	0800c555 	.word	0x0800c555
 800c4c8:	0800c555 	.word	0x0800c555
 800c4cc:	0800c555 	.word	0x0800c555
 800c4d0:	0800c555 	.word	0x0800c555
 800c4d4:	0800c555 	.word	0x0800c555
 800c4d8:	0800c555 	.word	0x0800c555
 800c4dc:	0800c555 	.word	0x0800c555
 800c4e0:	0800c555 	.word	0x0800c555
 800c4e4:	0800c555 	.word	0x0800c555
 800c4e8:	0800c555 	.word	0x0800c555
 800c4ec:	0800c555 	.word	0x0800c555
 800c4f0:	0800c555 	.word	0x0800c555
 800c4f4:	0800c555 	.word	0x0800c555
 800c4f8:	0800c555 	.word	0x0800c555
 800c4fc:	0800c555 	.word	0x0800c555
 800c500:	0800c555 	.word	0x0800c555
 800c504:	0800c555 	.word	0x0800c555
 800c508:	0800c555 	.word	0x0800c555
 800c50c:	0800c555 	.word	0x0800c555
 800c510:	0800c555 	.word	0x0800c555
 800c514:	0800c555 	.word	0x0800c555
 800c518:	0800c555 	.word	0x0800c555
 800c51c:	0800c555 	.word	0x0800c555
 800c520:	0800c555 	.word	0x0800c555
 800c524:	0800c555 	.word	0x0800c555
 800c528:	0800c555 	.word	0x0800c555
 800c52c:	0800c555 	.word	0x0800c555
 800c530:	0800c555 	.word	0x0800c555
 800c534:	0800c555 	.word	0x0800c555
 800c538:	0800c555 	.word	0x0800c555
 800c53c:	0800c555 	.word	0x0800c555
 800c540:	0800c555 	.word	0x0800c555
 800c544:	0800c555 	.word	0x0800c555
 800c548:	0800c555 	.word	0x0800c555
 800c54c:	0800c555 	.word	0x0800c555
 800c550:	0800c555 	.word	0x0800c555
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c554:	bf00      	nop
  }

  return (USBD_OK);
 800c556:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c558:	4618      	mov	r0, r3
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c56e:	6879      	ldr	r1, [r7, #4]
 800c570:	4805      	ldr	r0, [pc, #20]	@ (800c588 <CDC_Receive_FS+0x24>)
 800c572:	f7fe fb99 	bl	800aca8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c576:	4804      	ldr	r0, [pc, #16]	@ (800c588 <CDC_Receive_FS+0x24>)
 800c578:	f7fe fbf4 	bl	800ad64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c57c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	20004414 	.word	0x20004414

0800c58c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	460b      	mov	r3, r1
 800c596:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c598:	2300      	movs	r3, #0
 800c59a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c59c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d4 <CDC_Transmit_FS+0x48>)
 800c59e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c5a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e00b      	b.n	800c5ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c5b2:	887b      	ldrh	r3, [r7, #2]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	6879      	ldr	r1, [r7, #4]
 800c5b8:	4806      	ldr	r0, [pc, #24]	@ (800c5d4 <CDC_Transmit_FS+0x48>)
 800c5ba:	f7fe fb53 	bl	800ac64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c5be:	4805      	ldr	r0, [pc, #20]	@ (800c5d4 <CDC_Transmit_FS+0x48>)
 800c5c0:	f7fe fb90 	bl	800ace4 <USBD_CDC_TransmitPacket>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	20004414 	.word	0x20004414

0800c5d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b087      	sub	sp, #28
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c5ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	371c      	adds	r7, #28
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
	...

0800c5fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	4603      	mov	r3, r0
 800c604:	6039      	str	r1, [r7, #0]
 800c606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2212      	movs	r2, #18
 800c60c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c60e:	4b03      	ldr	r3, [pc, #12]	@ (800c61c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c610:	4618      	mov	r0, r3
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	200000cc 	.word	0x200000cc

0800c620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	6039      	str	r1, [r7, #0]
 800c62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2204      	movs	r2, #4
 800c630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c632:	4b03      	ldr	r3, [pc, #12]	@ (800c640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c634:	4618      	mov	r0, r3
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	200000e0 	.word	0x200000e0

0800c644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	6039      	str	r1, [r7, #0]
 800c64e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c650:	79fb      	ldrb	r3, [r7, #7]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d105      	bne.n	800c662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	4907      	ldr	r1, [pc, #28]	@ (800c678 <USBD_FS_ProductStrDescriptor+0x34>)
 800c65a:	4808      	ldr	r0, [pc, #32]	@ (800c67c <USBD_FS_ProductStrDescriptor+0x38>)
 800c65c:	f7ff fde4 	bl	800c228 <USBD_GetString>
 800c660:	e004      	b.n	800c66c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	4904      	ldr	r1, [pc, #16]	@ (800c678 <USBD_FS_ProductStrDescriptor+0x34>)
 800c666:	4805      	ldr	r0, [pc, #20]	@ (800c67c <USBD_FS_ProductStrDescriptor+0x38>)
 800c668:	f7ff fdde 	bl	800c228 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c66c:	4b02      	ldr	r3, [pc, #8]	@ (800c678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	200056f0 	.word	0x200056f0
 800c67c:	0800e028 	.word	0x0800e028

0800c680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	6039      	str	r1, [r7, #0]
 800c68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	4904      	ldr	r1, [pc, #16]	@ (800c6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c690:	4804      	ldr	r0, [pc, #16]	@ (800c6a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c692:	f7ff fdc9 	bl	800c228 <USBD_GetString>
  return USBD_StrDesc;
 800c696:	4b02      	ldr	r3, [pc, #8]	@ (800c6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	200056f0 	.word	0x200056f0
 800c6a4:	0800e040 	.word	0x0800e040

0800c6a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	6039      	str	r1, [r7, #0]
 800c6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	221a      	movs	r2, #26
 800c6b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6ba:	f000 f843 	bl	800c744 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c6be:	4b02      	ldr	r3, [pc, #8]	@ (800c6c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	200000e4 	.word	0x200000e4

0800c6cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	6039      	str	r1, [r7, #0]
 800c6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d105      	bne.n	800c6ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	4907      	ldr	r1, [pc, #28]	@ (800c700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6e2:	4808      	ldr	r0, [pc, #32]	@ (800c704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6e4:	f7ff fda0 	bl	800c228 <USBD_GetString>
 800c6e8:	e004      	b.n	800c6f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4904      	ldr	r1, [pc, #16]	@ (800c700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6ee:	4805      	ldr	r0, [pc, #20]	@ (800c704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6f0:	f7ff fd9a 	bl	800c228 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6f4:	4b02      	ldr	r3, [pc, #8]	@ (800c700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	200056f0 	.word	0x200056f0
 800c704:	0800e054 	.word	0x0800e054

0800c708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4603      	mov	r3, r0
 800c710:	6039      	str	r1, [r7, #0]
 800c712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d105      	bne.n	800c726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	4907      	ldr	r1, [pc, #28]	@ (800c73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c71e:	4808      	ldr	r0, [pc, #32]	@ (800c740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c720:	f7ff fd82 	bl	800c228 <USBD_GetString>
 800c724:	e004      	b.n	800c730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	4904      	ldr	r1, [pc, #16]	@ (800c73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c72a:	4805      	ldr	r0, [pc, #20]	@ (800c740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c72c:	f7ff fd7c 	bl	800c228 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c730:	4b02      	ldr	r3, [pc, #8]	@ (800c73c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	200056f0 	.word	0x200056f0
 800c740:	0800e060 	.word	0x0800e060

0800c744 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c74a:	4b0f      	ldr	r3, [pc, #60]	@ (800c788 <Get_SerialNum+0x44>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c750:	4b0e      	ldr	r3, [pc, #56]	@ (800c78c <Get_SerialNum+0x48>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c756:	4b0e      	ldr	r3, [pc, #56]	@ (800c790 <Get_SerialNum+0x4c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4413      	add	r3, r2
 800c762:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d009      	beq.n	800c77e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c76a:	2208      	movs	r2, #8
 800c76c:	4909      	ldr	r1, [pc, #36]	@ (800c794 <Get_SerialNum+0x50>)
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 f814 	bl	800c79c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c774:	2204      	movs	r2, #4
 800c776:	4908      	ldr	r1, [pc, #32]	@ (800c798 <Get_SerialNum+0x54>)
 800c778:	68b8      	ldr	r0, [r7, #8]
 800c77a:	f000 f80f 	bl	800c79c <IntToUnicode>
  }
}
 800c77e:	bf00      	nop
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	1fff7a10 	.word	0x1fff7a10
 800c78c:	1fff7a14 	.word	0x1fff7a14
 800c790:	1fff7a18 	.word	0x1fff7a18
 800c794:	200000e6 	.word	0x200000e6
 800c798:	200000f6 	.word	0x200000f6

0800c79c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b087      	sub	sp, #28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	75fb      	strb	r3, [r7, #23]
 800c7b2:	e027      	b.n	800c804 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	0f1b      	lsrs	r3, r3, #28
 800c7b8:	2b09      	cmp	r3, #9
 800c7ba:	d80b      	bhi.n	800c7d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	0f1b      	lsrs	r3, r3, #28
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	440b      	add	r3, r1
 800c7cc:	3230      	adds	r2, #48	@ 0x30
 800c7ce:	b2d2      	uxtb	r2, r2
 800c7d0:	701a      	strb	r2, [r3, #0]
 800c7d2:	e00a      	b.n	800c7ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	0f1b      	lsrs	r3, r3, #28
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	4619      	mov	r1, r3
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	440b      	add	r3, r1
 800c7e4:	3237      	adds	r2, #55	@ 0x37
 800c7e6:	b2d2      	uxtb	r2, r2
 800c7e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	011b      	lsls	r3, r3, #4
 800c7ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
 800c800:	3301      	adds	r3, #1
 800c802:	75fb      	strb	r3, [r7, #23]
 800c804:	7dfa      	ldrb	r2, [r7, #23]
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d3d3      	bcc.n	800c7b4 <IntToUnicode+0x18>
  }
}
 800c80c:	bf00      	nop
 800c80e:	bf00      	nop
 800c810:	371c      	adds	r7, #28
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
	...

0800c81c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b08a      	sub	sp, #40	@ 0x28
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c824:	f107 0314 	add.w	r3, r7, #20
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	605a      	str	r2, [r3, #4]
 800c82e:	609a      	str	r2, [r3, #8]
 800c830:	60da      	str	r2, [r3, #12]
 800c832:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c83c:	d13a      	bne.n	800c8b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c83e:	2300      	movs	r3, #0
 800c840:	613b      	str	r3, [r7, #16]
 800c842:	4b1e      	ldr	r3, [pc, #120]	@ (800c8bc <HAL_PCD_MspInit+0xa0>)
 800c844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c846:	4a1d      	ldr	r2, [pc, #116]	@ (800c8bc <HAL_PCD_MspInit+0xa0>)
 800c848:	f043 0301 	orr.w	r3, r3, #1
 800c84c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c84e:	4b1b      	ldr	r3, [pc, #108]	@ (800c8bc <HAL_PCD_MspInit+0xa0>)
 800c850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c852:	f003 0301 	and.w	r3, r3, #1
 800c856:	613b      	str	r3, [r7, #16]
 800c858:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c85a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c85e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c860:	2302      	movs	r3, #2
 800c862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c864:	2300      	movs	r3, #0
 800c866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c868:	2303      	movs	r3, #3
 800c86a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c86c:	230a      	movs	r3, #10
 800c86e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c870:	f107 0314 	add.w	r3, r7, #20
 800c874:	4619      	mov	r1, r3
 800c876:	4812      	ldr	r0, [pc, #72]	@ (800c8c0 <HAL_PCD_MspInit+0xa4>)
 800c878:	f7f6 ff62 	bl	8003740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c87c:	4b0f      	ldr	r3, [pc, #60]	@ (800c8bc <HAL_PCD_MspInit+0xa0>)
 800c87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c880:	4a0e      	ldr	r2, [pc, #56]	@ (800c8bc <HAL_PCD_MspInit+0xa0>)
 800c882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c886:	6353      	str	r3, [r2, #52]	@ 0x34
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]
 800c88c:	4b0b      	ldr	r3, [pc, #44]	@ (800c8bc <HAL_PCD_MspInit+0xa0>)
 800c88e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c890:	4a0a      	ldr	r2, [pc, #40]	@ (800c8bc <HAL_PCD_MspInit+0xa0>)
 800c892:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c896:	6453      	str	r3, [r2, #68]	@ 0x44
 800c898:	4b08      	ldr	r3, [pc, #32]	@ (800c8bc <HAL_PCD_MspInit+0xa0>)
 800c89a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c89c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	2105      	movs	r1, #5
 800c8a8:	2043      	movs	r0, #67	@ 0x43
 800c8aa:	f7f4 ff8e 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c8ae:	2043      	movs	r0, #67	@ 0x43
 800c8b0:	f7f4 ffa7 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c8b4:	bf00      	nop
 800c8b6:	3728      	adds	r7, #40	@ 0x28
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	40023800 	.word	0x40023800
 800c8c0:	40020000 	.word	0x40020000

0800c8c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4610      	mov	r0, r2
 800c8dc:	f7fe fb2b 	bl	800af36 <USBD_LL_SetupStage>
}
 800c8e0:	bf00      	nop
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c8fa:	78fa      	ldrb	r2, [r7, #3]
 800c8fc:	6879      	ldr	r1, [r7, #4]
 800c8fe:	4613      	mov	r3, r2
 800c900:	00db      	lsls	r3, r3, #3
 800c902:	4413      	add	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	440b      	add	r3, r1
 800c908:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	78fb      	ldrb	r3, [r7, #3]
 800c910:	4619      	mov	r1, r3
 800c912:	f7fe fb65 	bl	800afe0 <USBD_LL_DataOutStage>
}
 800c916:	bf00      	nop
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b082      	sub	sp, #8
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	460b      	mov	r3, r1
 800c928:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c930:	78fa      	ldrb	r2, [r7, #3]
 800c932:	6879      	ldr	r1, [r7, #4]
 800c934:	4613      	mov	r3, r2
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	4413      	add	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	440b      	add	r3, r1
 800c93e:	3320      	adds	r3, #32
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	78fb      	ldrb	r3, [r7, #3]
 800c944:	4619      	mov	r1, r3
 800c946:	f7fe fc07 	bl	800b158 <USBD_LL_DataInStage>
}
 800c94a:	bf00      	nop
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c960:	4618      	mov	r0, r3
 800c962:	f7fe fd4b 	bl	800b3fc <USBD_LL_SOF>
}
 800c966:	bf00      	nop
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b084      	sub	sp, #16
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c976:	2301      	movs	r3, #1
 800c978:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	79db      	ldrb	r3, [r3, #7]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d102      	bne.n	800c988 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]
 800c986:	e008      	b.n	800c99a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	79db      	ldrb	r3, [r3, #7]
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d102      	bne.n	800c996 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c990:	2301      	movs	r3, #1
 800c992:	73fb      	strb	r3, [r7, #15]
 800c994:	e001      	b.n	800c99a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c996:	f7f4 fac1 	bl	8000f1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9a0:	7bfa      	ldrb	r2, [r7, #15]
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fe fce5 	bl	800b374 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fe fc8c 	bl	800b2ce <USBD_LL_Reset>
}
 800c9b6:	bf00      	nop
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe fce0 	bl	800b394 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	6812      	ldr	r2, [r2, #0]
 800c9e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c9e6:	f043 0301 	orr.w	r3, r3, #1
 800c9ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	7adb      	ldrb	r3, [r3, #11]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d005      	beq.n	800ca00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ca08 <HAL_PCD_SuspendCallback+0x48>)
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	4a03      	ldr	r2, [pc, #12]	@ (800ca08 <HAL_PCD_SuspendCallback+0x48>)
 800c9fa:	f043 0306 	orr.w	r3, r3, #6
 800c9fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca00:	bf00      	nop
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	e000ed00 	.word	0xe000ed00

0800ca0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe fcd6 	bl	800b3cc <USBD_LL_Resume>
}
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	460b      	mov	r3, r1
 800ca32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca3a:	78fa      	ldrb	r2, [r7, #3]
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe fd2e 	bl	800b4a0 <USBD_LL_IsoOUTIncomplete>
}
 800ca44:	bf00      	nop
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	460b      	mov	r3, r1
 800ca56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca5e:	78fa      	ldrb	r2, [r7, #3]
 800ca60:	4611      	mov	r1, r2
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fe fcea 	bl	800b43c <USBD_LL_IsoINIncomplete>
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fe fd40 	bl	800b504 <USBD_LL_DevConnected>
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fe fd3d 	bl	800b51a <USBD_LL_DevDisconnected>
}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d13c      	bne.n	800cb32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cab8:	4a20      	ldr	r2, [pc, #128]	@ (800cb3c <USBD_LL_Init+0x94>)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a1e      	ldr	r2, [pc, #120]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cac4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cac8:	4b1c      	ldr	r3, [pc, #112]	@ (800cb3c <USBD_LL_Init+0x94>)
 800caca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cace:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cad0:	4b1a      	ldr	r3, [pc, #104]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cad2:	2204      	movs	r2, #4
 800cad4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cad6:	4b19      	ldr	r3, [pc, #100]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cad8:	2202      	movs	r2, #2
 800cada:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cadc:	4b17      	ldr	r3, [pc, #92]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cade:	2200      	movs	r2, #0
 800cae0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cae2:	4b16      	ldr	r3, [pc, #88]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cae4:	2202      	movs	r2, #2
 800cae6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cae8:	4b14      	ldr	r3, [pc, #80]	@ (800cb3c <USBD_LL_Init+0x94>)
 800caea:	2200      	movs	r2, #0
 800caec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800caee:	4b13      	ldr	r3, [pc, #76]	@ (800cb3c <USBD_LL_Init+0x94>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800caf4:	4b11      	ldr	r3, [pc, #68]	@ (800cb3c <USBD_LL_Init+0x94>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cafa:	4b10      	ldr	r3, [pc, #64]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb00:	4b0e      	ldr	r3, [pc, #56]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb06:	480d      	ldr	r0, [pc, #52]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cb08:	f7f7 faa2 	bl	8004050 <HAL_PCD_Init>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cb12:	f7f4 fa03 	bl	8000f1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb16:	2180      	movs	r1, #128	@ 0x80
 800cb18:	4808      	ldr	r0, [pc, #32]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cb1a:	f7f8 fcce 	bl	80054ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb1e:	2240      	movs	r2, #64	@ 0x40
 800cb20:	2100      	movs	r1, #0
 800cb22:	4806      	ldr	r0, [pc, #24]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cb24:	f7f8 fc82 	bl	800542c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb28:	2280      	movs	r2, #128	@ 0x80
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	4803      	ldr	r0, [pc, #12]	@ (800cb3c <USBD_LL_Init+0x94>)
 800cb2e:	f7f8 fc7d 	bl	800542c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	200058f0 	.word	0x200058f0

0800cb40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7f7 fb89 	bl	800426e <HAL_PCD_Start>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb60:	7bfb      	ldrb	r3, [r7, #15]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 f942 	bl	800cdec <USBD_Get_USB_Status>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	4608      	mov	r0, r1
 800cb80:	4611      	mov	r1, r2
 800cb82:	461a      	mov	r2, r3
 800cb84:	4603      	mov	r3, r0
 800cb86:	70fb      	strb	r3, [r7, #3]
 800cb88:	460b      	mov	r3, r1
 800cb8a:	70bb      	strb	r3, [r7, #2]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cb9e:	78bb      	ldrb	r3, [r7, #2]
 800cba0:	883a      	ldrh	r2, [r7, #0]
 800cba2:	78f9      	ldrb	r1, [r7, #3]
 800cba4:	f7f8 f85d 	bl	8004c62 <HAL_PCD_EP_Open>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 f91c 	bl	800cdec <USBD_Get_USB_Status>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbdc:	78fa      	ldrb	r2, [r7, #3]
 800cbde:	4611      	mov	r1, r2
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7f8 f8a8 	bl	8004d36 <HAL_PCD_EP_Close>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 f8fd 	bl	800cdec <USBD_Get_USB_Status>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	460b      	mov	r3, r1
 800cc0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc10:	2300      	movs	r3, #0
 800cc12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc1a:	78fa      	ldrb	r2, [r7, #3]
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7f8 f960 	bl	8004ee4 <HAL_PCD_EP_SetStall>
 800cc24:	4603      	mov	r3, r0
 800cc26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f000 f8de 	bl	800cdec <USBD_Get_USB_Status>
 800cc30:	4603      	mov	r3, r0
 800cc32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc34:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b084      	sub	sp, #16
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	460b      	mov	r3, r1
 800cc48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc58:	78fa      	ldrb	r2, [r7, #3]
 800cc5a:	4611      	mov	r1, r2
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7f8 f9a4 	bl	8004faa <HAL_PCD_EP_ClrStall>
 800cc62:	4603      	mov	r3, r0
 800cc64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc66:	7bfb      	ldrb	r3, [r7, #15]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 f8bf 	bl	800cdec <USBD_Get_USB_Status>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc72:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	460b      	mov	r3, r1
 800cc86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	da0b      	bge.n	800ccb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc98:	78fb      	ldrb	r3, [r7, #3]
 800cc9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc9e:	68f9      	ldr	r1, [r7, #12]
 800cca0:	4613      	mov	r3, r2
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	4413      	add	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	440b      	add	r3, r1
 800ccaa:	3316      	adds	r3, #22
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	e00b      	b.n	800ccc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccb6:	68f9      	ldr	r1, [r7, #12]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	00db      	lsls	r3, r3, #3
 800ccbc:	4413      	add	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	440b      	add	r3, r1
 800ccc2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ccc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3714      	adds	r7, #20
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccee:	78fa      	ldrb	r2, [r7, #3]
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7f7 ff91 	bl	8004c1a <HAL_PCD_SetAddress>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 f874 	bl	800cdec <USBD_Get_USB_Status>
 800cd04:	4603      	mov	r3, r0
 800cd06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd08:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b086      	sub	sp, #24
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	60f8      	str	r0, [r7, #12]
 800cd1a:	607a      	str	r2, [r7, #4]
 800cd1c:	603b      	str	r3, [r7, #0]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd26:	2300      	movs	r3, #0
 800cd28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd30:	7af9      	ldrb	r1, [r7, #11]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	f7f8 f89b 	bl	8004e70 <HAL_PCD_EP_Transmit>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 f853 	bl	800cdec <USBD_Get_USB_Status>
 800cd46:	4603      	mov	r3, r0
 800cd48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3718      	adds	r7, #24
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	607a      	str	r2, [r7, #4]
 800cd5e:	603b      	str	r3, [r7, #0]
 800cd60:	460b      	mov	r3, r1
 800cd62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd72:	7af9      	ldrb	r1, [r7, #11]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	f7f8 f827 	bl	8004dca <HAL_PCD_EP_Receive>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 f832 	bl	800cdec <USBD_Get_USB_Status>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cda8:	78fa      	ldrb	r2, [r7, #3]
 800cdaa:	4611      	mov	r1, r2
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7f8 f847 	bl	8004e40 <HAL_PCD_EP_GetRxCount>
 800cdb2:	4603      	mov	r3, r0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cdc4:	4b03      	ldr	r3, [pc, #12]	@ (800cdd4 <USBD_static_malloc+0x18>)
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	20005dd4 	.word	0x20005dd4

0800cdd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]

}
 800cde0:	bf00      	nop
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cdfa:	79fb      	ldrb	r3, [r7, #7]
 800cdfc:	2b03      	cmp	r3, #3
 800cdfe:	d817      	bhi.n	800ce30 <USBD_Get_USB_Status+0x44>
 800ce00:	a201      	add	r2, pc, #4	@ (adr r2, 800ce08 <USBD_Get_USB_Status+0x1c>)
 800ce02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce06:	bf00      	nop
 800ce08:	0800ce19 	.word	0x0800ce19
 800ce0c:	0800ce1f 	.word	0x0800ce1f
 800ce10:	0800ce25 	.word	0x0800ce25
 800ce14:	0800ce2b 	.word	0x0800ce2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce1c:	e00b      	b.n	800ce36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	73fb      	strb	r3, [r7, #15]
    break;
 800ce22:	e008      	b.n	800ce36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce24:	2301      	movs	r3, #1
 800ce26:	73fb      	strb	r3, [r7, #15]
    break;
 800ce28:	e005      	b.n	800ce36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce2e:	e002      	b.n	800ce36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce30:	2303      	movs	r3, #3
 800ce32:	73fb      	strb	r3, [r7, #15]
    break;
 800ce34:	bf00      	nop
  }
  return usb_status;
 800ce36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3714      	adds	r7, #20
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <std>:
 800ce44:	2300      	movs	r3, #0
 800ce46:	b510      	push	{r4, lr}
 800ce48:	4604      	mov	r4, r0
 800ce4a:	e9c0 3300 	strd	r3, r3, [r0]
 800ce4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce52:	6083      	str	r3, [r0, #8]
 800ce54:	8181      	strh	r1, [r0, #12]
 800ce56:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce58:	81c2      	strh	r2, [r0, #14]
 800ce5a:	6183      	str	r3, [r0, #24]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	2208      	movs	r2, #8
 800ce60:	305c      	adds	r0, #92	@ 0x5c
 800ce62:	f000 f9f9 	bl	800d258 <memset>
 800ce66:	4b0d      	ldr	r3, [pc, #52]	@ (800ce9c <std+0x58>)
 800ce68:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cea0 <std+0x5c>)
 800ce6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cea4 <std+0x60>)
 800ce70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce72:	4b0d      	ldr	r3, [pc, #52]	@ (800cea8 <std+0x64>)
 800ce74:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce76:	4b0d      	ldr	r3, [pc, #52]	@ (800ceac <std+0x68>)
 800ce78:	6224      	str	r4, [r4, #32]
 800ce7a:	429c      	cmp	r4, r3
 800ce7c:	d006      	beq.n	800ce8c <std+0x48>
 800ce7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce82:	4294      	cmp	r4, r2
 800ce84:	d002      	beq.n	800ce8c <std+0x48>
 800ce86:	33d0      	adds	r3, #208	@ 0xd0
 800ce88:	429c      	cmp	r4, r3
 800ce8a:	d105      	bne.n	800ce98 <std+0x54>
 800ce8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce94:	f000 ba58 	b.w	800d348 <__retarget_lock_init_recursive>
 800ce98:	bd10      	pop	{r4, pc}
 800ce9a:	bf00      	nop
 800ce9c:	0800d0a9 	.word	0x0800d0a9
 800cea0:	0800d0cb 	.word	0x0800d0cb
 800cea4:	0800d103 	.word	0x0800d103
 800cea8:	0800d127 	.word	0x0800d127
 800ceac:	20005ff4 	.word	0x20005ff4

0800ceb0 <stdio_exit_handler>:
 800ceb0:	4a02      	ldr	r2, [pc, #8]	@ (800cebc <stdio_exit_handler+0xc>)
 800ceb2:	4903      	ldr	r1, [pc, #12]	@ (800cec0 <stdio_exit_handler+0x10>)
 800ceb4:	4803      	ldr	r0, [pc, #12]	@ (800cec4 <stdio_exit_handler+0x14>)
 800ceb6:	f000 b869 	b.w	800cf8c <_fwalk_sglue>
 800ceba:	bf00      	nop
 800cebc:	20000100 	.word	0x20000100
 800cec0:	0800dc01 	.word	0x0800dc01
 800cec4:	20000110 	.word	0x20000110

0800cec8 <cleanup_stdio>:
 800cec8:	6841      	ldr	r1, [r0, #4]
 800ceca:	4b0c      	ldr	r3, [pc, #48]	@ (800cefc <cleanup_stdio+0x34>)
 800cecc:	4299      	cmp	r1, r3
 800cece:	b510      	push	{r4, lr}
 800ced0:	4604      	mov	r4, r0
 800ced2:	d001      	beq.n	800ced8 <cleanup_stdio+0x10>
 800ced4:	f000 fe94 	bl	800dc00 <_fflush_r>
 800ced8:	68a1      	ldr	r1, [r4, #8]
 800ceda:	4b09      	ldr	r3, [pc, #36]	@ (800cf00 <cleanup_stdio+0x38>)
 800cedc:	4299      	cmp	r1, r3
 800cede:	d002      	beq.n	800cee6 <cleanup_stdio+0x1e>
 800cee0:	4620      	mov	r0, r4
 800cee2:	f000 fe8d 	bl	800dc00 <_fflush_r>
 800cee6:	68e1      	ldr	r1, [r4, #12]
 800cee8:	4b06      	ldr	r3, [pc, #24]	@ (800cf04 <cleanup_stdio+0x3c>)
 800ceea:	4299      	cmp	r1, r3
 800ceec:	d004      	beq.n	800cef8 <cleanup_stdio+0x30>
 800ceee:	4620      	mov	r0, r4
 800cef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef4:	f000 be84 	b.w	800dc00 <_fflush_r>
 800cef8:	bd10      	pop	{r4, pc}
 800cefa:	bf00      	nop
 800cefc:	20005ff4 	.word	0x20005ff4
 800cf00:	2000605c 	.word	0x2000605c
 800cf04:	200060c4 	.word	0x200060c4

0800cf08 <global_stdio_init.part.0>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	4b0b      	ldr	r3, [pc, #44]	@ (800cf38 <global_stdio_init.part.0+0x30>)
 800cf0c:	4c0b      	ldr	r4, [pc, #44]	@ (800cf3c <global_stdio_init.part.0+0x34>)
 800cf0e:	4a0c      	ldr	r2, [pc, #48]	@ (800cf40 <global_stdio_init.part.0+0x38>)
 800cf10:	601a      	str	r2, [r3, #0]
 800cf12:	4620      	mov	r0, r4
 800cf14:	2200      	movs	r2, #0
 800cf16:	2104      	movs	r1, #4
 800cf18:	f7ff ff94 	bl	800ce44 <std>
 800cf1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf20:	2201      	movs	r2, #1
 800cf22:	2109      	movs	r1, #9
 800cf24:	f7ff ff8e 	bl	800ce44 <std>
 800cf28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf32:	2112      	movs	r1, #18
 800cf34:	f7ff bf86 	b.w	800ce44 <std>
 800cf38:	2000612c 	.word	0x2000612c
 800cf3c:	20005ff4 	.word	0x20005ff4
 800cf40:	0800ceb1 	.word	0x0800ceb1

0800cf44 <__sfp_lock_acquire>:
 800cf44:	4801      	ldr	r0, [pc, #4]	@ (800cf4c <__sfp_lock_acquire+0x8>)
 800cf46:	f000 ba00 	b.w	800d34a <__retarget_lock_acquire_recursive>
 800cf4a:	bf00      	nop
 800cf4c:	20006135 	.word	0x20006135

0800cf50 <__sfp_lock_release>:
 800cf50:	4801      	ldr	r0, [pc, #4]	@ (800cf58 <__sfp_lock_release+0x8>)
 800cf52:	f000 b9fb 	b.w	800d34c <__retarget_lock_release_recursive>
 800cf56:	bf00      	nop
 800cf58:	20006135 	.word	0x20006135

0800cf5c <__sinit>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	4604      	mov	r4, r0
 800cf60:	f7ff fff0 	bl	800cf44 <__sfp_lock_acquire>
 800cf64:	6a23      	ldr	r3, [r4, #32]
 800cf66:	b11b      	cbz	r3, 800cf70 <__sinit+0x14>
 800cf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf6c:	f7ff bff0 	b.w	800cf50 <__sfp_lock_release>
 800cf70:	4b04      	ldr	r3, [pc, #16]	@ (800cf84 <__sinit+0x28>)
 800cf72:	6223      	str	r3, [r4, #32]
 800cf74:	4b04      	ldr	r3, [pc, #16]	@ (800cf88 <__sinit+0x2c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1f5      	bne.n	800cf68 <__sinit+0xc>
 800cf7c:	f7ff ffc4 	bl	800cf08 <global_stdio_init.part.0>
 800cf80:	e7f2      	b.n	800cf68 <__sinit+0xc>
 800cf82:	bf00      	nop
 800cf84:	0800cec9 	.word	0x0800cec9
 800cf88:	2000612c 	.word	0x2000612c

0800cf8c <_fwalk_sglue>:
 800cf8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf90:	4607      	mov	r7, r0
 800cf92:	4688      	mov	r8, r1
 800cf94:	4614      	mov	r4, r2
 800cf96:	2600      	movs	r6, #0
 800cf98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf9c:	f1b9 0901 	subs.w	r9, r9, #1
 800cfa0:	d505      	bpl.n	800cfae <_fwalk_sglue+0x22>
 800cfa2:	6824      	ldr	r4, [r4, #0]
 800cfa4:	2c00      	cmp	r4, #0
 800cfa6:	d1f7      	bne.n	800cf98 <_fwalk_sglue+0xc>
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfae:	89ab      	ldrh	r3, [r5, #12]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d907      	bls.n	800cfc4 <_fwalk_sglue+0x38>
 800cfb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	d003      	beq.n	800cfc4 <_fwalk_sglue+0x38>
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	47c0      	blx	r8
 800cfc2:	4306      	orrs	r6, r0
 800cfc4:	3568      	adds	r5, #104	@ 0x68
 800cfc6:	e7e9      	b.n	800cf9c <_fwalk_sglue+0x10>

0800cfc8 <iprintf>:
 800cfc8:	b40f      	push	{r0, r1, r2, r3}
 800cfca:	b507      	push	{r0, r1, r2, lr}
 800cfcc:	4906      	ldr	r1, [pc, #24]	@ (800cfe8 <iprintf+0x20>)
 800cfce:	ab04      	add	r3, sp, #16
 800cfd0:	6808      	ldr	r0, [r1, #0]
 800cfd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd6:	6881      	ldr	r1, [r0, #8]
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	f000 fae9 	bl	800d5b0 <_vfiprintf_r>
 800cfde:	b003      	add	sp, #12
 800cfe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfe4:	b004      	add	sp, #16
 800cfe6:	4770      	bx	lr
 800cfe8:	2000010c 	.word	0x2000010c

0800cfec <_puts_r>:
 800cfec:	6a03      	ldr	r3, [r0, #32]
 800cfee:	b570      	push	{r4, r5, r6, lr}
 800cff0:	6884      	ldr	r4, [r0, #8]
 800cff2:	4605      	mov	r5, r0
 800cff4:	460e      	mov	r6, r1
 800cff6:	b90b      	cbnz	r3, 800cffc <_puts_r+0x10>
 800cff8:	f7ff ffb0 	bl	800cf5c <__sinit>
 800cffc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cffe:	07db      	lsls	r3, r3, #31
 800d000:	d405      	bmi.n	800d00e <_puts_r+0x22>
 800d002:	89a3      	ldrh	r3, [r4, #12]
 800d004:	0598      	lsls	r0, r3, #22
 800d006:	d402      	bmi.n	800d00e <_puts_r+0x22>
 800d008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d00a:	f000 f99e 	bl	800d34a <__retarget_lock_acquire_recursive>
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	0719      	lsls	r1, r3, #28
 800d012:	d502      	bpl.n	800d01a <_puts_r+0x2e>
 800d014:	6923      	ldr	r3, [r4, #16]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d135      	bne.n	800d086 <_puts_r+0x9a>
 800d01a:	4621      	mov	r1, r4
 800d01c:	4628      	mov	r0, r5
 800d01e:	f000 f8c5 	bl	800d1ac <__swsetup_r>
 800d022:	b380      	cbz	r0, 800d086 <_puts_r+0x9a>
 800d024:	f04f 35ff 	mov.w	r5, #4294967295
 800d028:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d02a:	07da      	lsls	r2, r3, #31
 800d02c:	d405      	bmi.n	800d03a <_puts_r+0x4e>
 800d02e:	89a3      	ldrh	r3, [r4, #12]
 800d030:	059b      	lsls	r3, r3, #22
 800d032:	d402      	bmi.n	800d03a <_puts_r+0x4e>
 800d034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d036:	f000 f989 	bl	800d34c <__retarget_lock_release_recursive>
 800d03a:	4628      	mov	r0, r5
 800d03c:	bd70      	pop	{r4, r5, r6, pc}
 800d03e:	2b00      	cmp	r3, #0
 800d040:	da04      	bge.n	800d04c <_puts_r+0x60>
 800d042:	69a2      	ldr	r2, [r4, #24]
 800d044:	429a      	cmp	r2, r3
 800d046:	dc17      	bgt.n	800d078 <_puts_r+0x8c>
 800d048:	290a      	cmp	r1, #10
 800d04a:	d015      	beq.n	800d078 <_puts_r+0x8c>
 800d04c:	6823      	ldr	r3, [r4, #0]
 800d04e:	1c5a      	adds	r2, r3, #1
 800d050:	6022      	str	r2, [r4, #0]
 800d052:	7019      	strb	r1, [r3, #0]
 800d054:	68a3      	ldr	r3, [r4, #8]
 800d056:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d05a:	3b01      	subs	r3, #1
 800d05c:	60a3      	str	r3, [r4, #8]
 800d05e:	2900      	cmp	r1, #0
 800d060:	d1ed      	bne.n	800d03e <_puts_r+0x52>
 800d062:	2b00      	cmp	r3, #0
 800d064:	da11      	bge.n	800d08a <_puts_r+0x9e>
 800d066:	4622      	mov	r2, r4
 800d068:	210a      	movs	r1, #10
 800d06a:	4628      	mov	r0, r5
 800d06c:	f000 f85f 	bl	800d12e <__swbuf_r>
 800d070:	3001      	adds	r0, #1
 800d072:	d0d7      	beq.n	800d024 <_puts_r+0x38>
 800d074:	250a      	movs	r5, #10
 800d076:	e7d7      	b.n	800d028 <_puts_r+0x3c>
 800d078:	4622      	mov	r2, r4
 800d07a:	4628      	mov	r0, r5
 800d07c:	f000 f857 	bl	800d12e <__swbuf_r>
 800d080:	3001      	adds	r0, #1
 800d082:	d1e7      	bne.n	800d054 <_puts_r+0x68>
 800d084:	e7ce      	b.n	800d024 <_puts_r+0x38>
 800d086:	3e01      	subs	r6, #1
 800d088:	e7e4      	b.n	800d054 <_puts_r+0x68>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	1c5a      	adds	r2, r3, #1
 800d08e:	6022      	str	r2, [r4, #0]
 800d090:	220a      	movs	r2, #10
 800d092:	701a      	strb	r2, [r3, #0]
 800d094:	e7ee      	b.n	800d074 <_puts_r+0x88>
	...

0800d098 <puts>:
 800d098:	4b02      	ldr	r3, [pc, #8]	@ (800d0a4 <puts+0xc>)
 800d09a:	4601      	mov	r1, r0
 800d09c:	6818      	ldr	r0, [r3, #0]
 800d09e:	f7ff bfa5 	b.w	800cfec <_puts_r>
 800d0a2:	bf00      	nop
 800d0a4:	2000010c 	.word	0x2000010c

0800d0a8 <__sread>:
 800d0a8:	b510      	push	{r4, lr}
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b0:	f000 f8fc 	bl	800d2ac <_read_r>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	bfab      	itete	ge
 800d0b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d0bc:	181b      	addge	r3, r3, r0
 800d0be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0c2:	bfac      	ite	ge
 800d0c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0c6:	81a3      	strhlt	r3, [r4, #12]
 800d0c8:	bd10      	pop	{r4, pc}

0800d0ca <__swrite>:
 800d0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ce:	461f      	mov	r7, r3
 800d0d0:	898b      	ldrh	r3, [r1, #12]
 800d0d2:	05db      	lsls	r3, r3, #23
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	4616      	mov	r6, r2
 800d0da:	d505      	bpl.n	800d0e8 <__swrite+0x1e>
 800d0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f000 f8d0 	bl	800d288 <_lseek_r>
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0f2:	81a3      	strh	r3, [r4, #12]
 800d0f4:	4632      	mov	r2, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fe:	f000 b8e7 	b.w	800d2d0 <_write_r>

0800d102 <__sseek>:
 800d102:	b510      	push	{r4, lr}
 800d104:	460c      	mov	r4, r1
 800d106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d10a:	f000 f8bd 	bl	800d288 <_lseek_r>
 800d10e:	1c43      	adds	r3, r0, #1
 800d110:	89a3      	ldrh	r3, [r4, #12]
 800d112:	bf15      	itete	ne
 800d114:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d116:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d11a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d11e:	81a3      	strheq	r3, [r4, #12]
 800d120:	bf18      	it	ne
 800d122:	81a3      	strhne	r3, [r4, #12]
 800d124:	bd10      	pop	{r4, pc}

0800d126 <__sclose>:
 800d126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12a:	f000 b89d 	b.w	800d268 <_close_r>

0800d12e <__swbuf_r>:
 800d12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d130:	460e      	mov	r6, r1
 800d132:	4614      	mov	r4, r2
 800d134:	4605      	mov	r5, r0
 800d136:	b118      	cbz	r0, 800d140 <__swbuf_r+0x12>
 800d138:	6a03      	ldr	r3, [r0, #32]
 800d13a:	b90b      	cbnz	r3, 800d140 <__swbuf_r+0x12>
 800d13c:	f7ff ff0e 	bl	800cf5c <__sinit>
 800d140:	69a3      	ldr	r3, [r4, #24]
 800d142:	60a3      	str	r3, [r4, #8]
 800d144:	89a3      	ldrh	r3, [r4, #12]
 800d146:	071a      	lsls	r2, r3, #28
 800d148:	d501      	bpl.n	800d14e <__swbuf_r+0x20>
 800d14a:	6923      	ldr	r3, [r4, #16]
 800d14c:	b943      	cbnz	r3, 800d160 <__swbuf_r+0x32>
 800d14e:	4621      	mov	r1, r4
 800d150:	4628      	mov	r0, r5
 800d152:	f000 f82b 	bl	800d1ac <__swsetup_r>
 800d156:	b118      	cbz	r0, 800d160 <__swbuf_r+0x32>
 800d158:	f04f 37ff 	mov.w	r7, #4294967295
 800d15c:	4638      	mov	r0, r7
 800d15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	6922      	ldr	r2, [r4, #16]
 800d164:	1a98      	subs	r0, r3, r2
 800d166:	6963      	ldr	r3, [r4, #20]
 800d168:	b2f6      	uxtb	r6, r6
 800d16a:	4283      	cmp	r3, r0
 800d16c:	4637      	mov	r7, r6
 800d16e:	dc05      	bgt.n	800d17c <__swbuf_r+0x4e>
 800d170:	4621      	mov	r1, r4
 800d172:	4628      	mov	r0, r5
 800d174:	f000 fd44 	bl	800dc00 <_fflush_r>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d1ed      	bne.n	800d158 <__swbuf_r+0x2a>
 800d17c:	68a3      	ldr	r3, [r4, #8]
 800d17e:	3b01      	subs	r3, #1
 800d180:	60a3      	str	r3, [r4, #8]
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	1c5a      	adds	r2, r3, #1
 800d186:	6022      	str	r2, [r4, #0]
 800d188:	701e      	strb	r6, [r3, #0]
 800d18a:	6962      	ldr	r2, [r4, #20]
 800d18c:	1c43      	adds	r3, r0, #1
 800d18e:	429a      	cmp	r2, r3
 800d190:	d004      	beq.n	800d19c <__swbuf_r+0x6e>
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	07db      	lsls	r3, r3, #31
 800d196:	d5e1      	bpl.n	800d15c <__swbuf_r+0x2e>
 800d198:	2e0a      	cmp	r6, #10
 800d19a:	d1df      	bne.n	800d15c <__swbuf_r+0x2e>
 800d19c:	4621      	mov	r1, r4
 800d19e:	4628      	mov	r0, r5
 800d1a0:	f000 fd2e 	bl	800dc00 <_fflush_r>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d0d9      	beq.n	800d15c <__swbuf_r+0x2e>
 800d1a8:	e7d6      	b.n	800d158 <__swbuf_r+0x2a>
	...

0800d1ac <__swsetup_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4b29      	ldr	r3, [pc, #164]	@ (800d254 <__swsetup_r+0xa8>)
 800d1b0:	4605      	mov	r5, r0
 800d1b2:	6818      	ldr	r0, [r3, #0]
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	b118      	cbz	r0, 800d1c0 <__swsetup_r+0x14>
 800d1b8:	6a03      	ldr	r3, [r0, #32]
 800d1ba:	b90b      	cbnz	r3, 800d1c0 <__swsetup_r+0x14>
 800d1bc:	f7ff fece 	bl	800cf5c <__sinit>
 800d1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c4:	0719      	lsls	r1, r3, #28
 800d1c6:	d422      	bmi.n	800d20e <__swsetup_r+0x62>
 800d1c8:	06da      	lsls	r2, r3, #27
 800d1ca:	d407      	bmi.n	800d1dc <__swsetup_r+0x30>
 800d1cc:	2209      	movs	r2, #9
 800d1ce:	602a      	str	r2, [r5, #0]
 800d1d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1d4:	81a3      	strh	r3, [r4, #12]
 800d1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1da:	e033      	b.n	800d244 <__swsetup_r+0x98>
 800d1dc:	0758      	lsls	r0, r3, #29
 800d1de:	d512      	bpl.n	800d206 <__swsetup_r+0x5a>
 800d1e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1e2:	b141      	cbz	r1, 800d1f6 <__swsetup_r+0x4a>
 800d1e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1e8:	4299      	cmp	r1, r3
 800d1ea:	d002      	beq.n	800d1f2 <__swsetup_r+0x46>
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f000 f8bd 	bl	800d36c <_free_r>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1f6:	89a3      	ldrh	r3, [r4, #12]
 800d1f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1fc:	81a3      	strh	r3, [r4, #12]
 800d1fe:	2300      	movs	r3, #0
 800d200:	6063      	str	r3, [r4, #4]
 800d202:	6923      	ldr	r3, [r4, #16]
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	f043 0308 	orr.w	r3, r3, #8
 800d20c:	81a3      	strh	r3, [r4, #12]
 800d20e:	6923      	ldr	r3, [r4, #16]
 800d210:	b94b      	cbnz	r3, 800d226 <__swsetup_r+0x7a>
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d21c:	d003      	beq.n	800d226 <__swsetup_r+0x7a>
 800d21e:	4621      	mov	r1, r4
 800d220:	4628      	mov	r0, r5
 800d222:	f000 fd3b 	bl	800dc9c <__smakebuf_r>
 800d226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d22a:	f013 0201 	ands.w	r2, r3, #1
 800d22e:	d00a      	beq.n	800d246 <__swsetup_r+0x9a>
 800d230:	2200      	movs	r2, #0
 800d232:	60a2      	str	r2, [r4, #8]
 800d234:	6962      	ldr	r2, [r4, #20]
 800d236:	4252      	negs	r2, r2
 800d238:	61a2      	str	r2, [r4, #24]
 800d23a:	6922      	ldr	r2, [r4, #16]
 800d23c:	b942      	cbnz	r2, 800d250 <__swsetup_r+0xa4>
 800d23e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d242:	d1c5      	bne.n	800d1d0 <__swsetup_r+0x24>
 800d244:	bd38      	pop	{r3, r4, r5, pc}
 800d246:	0799      	lsls	r1, r3, #30
 800d248:	bf58      	it	pl
 800d24a:	6962      	ldrpl	r2, [r4, #20]
 800d24c:	60a2      	str	r2, [r4, #8]
 800d24e:	e7f4      	b.n	800d23a <__swsetup_r+0x8e>
 800d250:	2000      	movs	r0, #0
 800d252:	e7f7      	b.n	800d244 <__swsetup_r+0x98>
 800d254:	2000010c 	.word	0x2000010c

0800d258 <memset>:
 800d258:	4402      	add	r2, r0
 800d25a:	4603      	mov	r3, r0
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d100      	bne.n	800d262 <memset+0xa>
 800d260:	4770      	bx	lr
 800d262:	f803 1b01 	strb.w	r1, [r3], #1
 800d266:	e7f9      	b.n	800d25c <memset+0x4>

0800d268 <_close_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d06      	ldr	r5, [pc, #24]	@ (800d284 <_close_r+0x1c>)
 800d26c:	2300      	movs	r3, #0
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	f7f4 f891 	bl	800139a <_close>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_close_r+0x1a>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_close_r+0x1a>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20006130 	.word	0x20006130

0800d288 <_lseek_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d07      	ldr	r5, [pc, #28]	@ (800d2a8 <_lseek_r+0x20>)
 800d28c:	4604      	mov	r4, r0
 800d28e:	4608      	mov	r0, r1
 800d290:	4611      	mov	r1, r2
 800d292:	2200      	movs	r2, #0
 800d294:	602a      	str	r2, [r5, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	f7f4 f8a6 	bl	80013e8 <_lseek>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_lseek_r+0x1e>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_lseek_r+0x1e>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	20006130 	.word	0x20006130

0800d2ac <_read_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4d07      	ldr	r5, [pc, #28]	@ (800d2cc <_read_r+0x20>)
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	4608      	mov	r0, r1
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	602a      	str	r2, [r5, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	f7f4 f834 	bl	8001328 <_read>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	d102      	bne.n	800d2ca <_read_r+0x1e>
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	b103      	cbz	r3, 800d2ca <_read_r+0x1e>
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	bd38      	pop	{r3, r4, r5, pc}
 800d2cc:	20006130 	.word	0x20006130

0800d2d0 <_write_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	4d07      	ldr	r5, [pc, #28]	@ (800d2f0 <_write_r+0x20>)
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	4608      	mov	r0, r1
 800d2d8:	4611      	mov	r1, r2
 800d2da:	2200      	movs	r2, #0
 800d2dc:	602a      	str	r2, [r5, #0]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	f7f4 f83f 	bl	8001362 <_write>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d102      	bne.n	800d2ee <_write_r+0x1e>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <_write_r+0x1e>
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	20006130 	.word	0x20006130

0800d2f4 <__errno>:
 800d2f4:	4b01      	ldr	r3, [pc, #4]	@ (800d2fc <__errno+0x8>)
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	2000010c 	.word	0x2000010c

0800d300 <__libc_init_array>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	4d0d      	ldr	r5, [pc, #52]	@ (800d338 <__libc_init_array+0x38>)
 800d304:	4c0d      	ldr	r4, [pc, #52]	@ (800d33c <__libc_init_array+0x3c>)
 800d306:	1b64      	subs	r4, r4, r5
 800d308:	10a4      	asrs	r4, r4, #2
 800d30a:	2600      	movs	r6, #0
 800d30c:	42a6      	cmp	r6, r4
 800d30e:	d109      	bne.n	800d324 <__libc_init_array+0x24>
 800d310:	4d0b      	ldr	r5, [pc, #44]	@ (800d340 <__libc_init_array+0x40>)
 800d312:	4c0c      	ldr	r4, [pc, #48]	@ (800d344 <__libc_init_array+0x44>)
 800d314:	f000 fd30 	bl	800dd78 <_init>
 800d318:	1b64      	subs	r4, r4, r5
 800d31a:	10a4      	asrs	r4, r4, #2
 800d31c:	2600      	movs	r6, #0
 800d31e:	42a6      	cmp	r6, r4
 800d320:	d105      	bne.n	800d32e <__libc_init_array+0x2e>
 800d322:	bd70      	pop	{r4, r5, r6, pc}
 800d324:	f855 3b04 	ldr.w	r3, [r5], #4
 800d328:	4798      	blx	r3
 800d32a:	3601      	adds	r6, #1
 800d32c:	e7ee      	b.n	800d30c <__libc_init_array+0xc>
 800d32e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d332:	4798      	blx	r3
 800d334:	3601      	adds	r6, #1
 800d336:	e7f2      	b.n	800d31e <__libc_init_array+0x1e>
 800d338:	0800e180 	.word	0x0800e180
 800d33c:	0800e180 	.word	0x0800e180
 800d340:	0800e180 	.word	0x0800e180
 800d344:	0800e184 	.word	0x0800e184

0800d348 <__retarget_lock_init_recursive>:
 800d348:	4770      	bx	lr

0800d34a <__retarget_lock_acquire_recursive>:
 800d34a:	4770      	bx	lr

0800d34c <__retarget_lock_release_recursive>:
 800d34c:	4770      	bx	lr

0800d34e <memcpy>:
 800d34e:	440a      	add	r2, r1
 800d350:	4291      	cmp	r1, r2
 800d352:	f100 33ff 	add.w	r3, r0, #4294967295
 800d356:	d100      	bne.n	800d35a <memcpy+0xc>
 800d358:	4770      	bx	lr
 800d35a:	b510      	push	{r4, lr}
 800d35c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d360:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d364:	4291      	cmp	r1, r2
 800d366:	d1f9      	bne.n	800d35c <memcpy+0xe>
 800d368:	bd10      	pop	{r4, pc}
	...

0800d36c <_free_r>:
 800d36c:	b538      	push	{r3, r4, r5, lr}
 800d36e:	4605      	mov	r5, r0
 800d370:	2900      	cmp	r1, #0
 800d372:	d041      	beq.n	800d3f8 <_free_r+0x8c>
 800d374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d378:	1f0c      	subs	r4, r1, #4
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	bfb8      	it	lt
 800d37e:	18e4      	addlt	r4, r4, r3
 800d380:	f000 f8e0 	bl	800d544 <__malloc_lock>
 800d384:	4a1d      	ldr	r2, [pc, #116]	@ (800d3fc <_free_r+0x90>)
 800d386:	6813      	ldr	r3, [r2, #0]
 800d388:	b933      	cbnz	r3, 800d398 <_free_r+0x2c>
 800d38a:	6063      	str	r3, [r4, #4]
 800d38c:	6014      	str	r4, [r2, #0]
 800d38e:	4628      	mov	r0, r5
 800d390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d394:	f000 b8dc 	b.w	800d550 <__malloc_unlock>
 800d398:	42a3      	cmp	r3, r4
 800d39a:	d908      	bls.n	800d3ae <_free_r+0x42>
 800d39c:	6820      	ldr	r0, [r4, #0]
 800d39e:	1821      	adds	r1, r4, r0
 800d3a0:	428b      	cmp	r3, r1
 800d3a2:	bf01      	itttt	eq
 800d3a4:	6819      	ldreq	r1, [r3, #0]
 800d3a6:	685b      	ldreq	r3, [r3, #4]
 800d3a8:	1809      	addeq	r1, r1, r0
 800d3aa:	6021      	streq	r1, [r4, #0]
 800d3ac:	e7ed      	b.n	800d38a <_free_r+0x1e>
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	b10b      	cbz	r3, 800d3b8 <_free_r+0x4c>
 800d3b4:	42a3      	cmp	r3, r4
 800d3b6:	d9fa      	bls.n	800d3ae <_free_r+0x42>
 800d3b8:	6811      	ldr	r1, [r2, #0]
 800d3ba:	1850      	adds	r0, r2, r1
 800d3bc:	42a0      	cmp	r0, r4
 800d3be:	d10b      	bne.n	800d3d8 <_free_r+0x6c>
 800d3c0:	6820      	ldr	r0, [r4, #0]
 800d3c2:	4401      	add	r1, r0
 800d3c4:	1850      	adds	r0, r2, r1
 800d3c6:	4283      	cmp	r3, r0
 800d3c8:	6011      	str	r1, [r2, #0]
 800d3ca:	d1e0      	bne.n	800d38e <_free_r+0x22>
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	6053      	str	r3, [r2, #4]
 800d3d2:	4408      	add	r0, r1
 800d3d4:	6010      	str	r0, [r2, #0]
 800d3d6:	e7da      	b.n	800d38e <_free_r+0x22>
 800d3d8:	d902      	bls.n	800d3e0 <_free_r+0x74>
 800d3da:	230c      	movs	r3, #12
 800d3dc:	602b      	str	r3, [r5, #0]
 800d3de:	e7d6      	b.n	800d38e <_free_r+0x22>
 800d3e0:	6820      	ldr	r0, [r4, #0]
 800d3e2:	1821      	adds	r1, r4, r0
 800d3e4:	428b      	cmp	r3, r1
 800d3e6:	bf04      	itt	eq
 800d3e8:	6819      	ldreq	r1, [r3, #0]
 800d3ea:	685b      	ldreq	r3, [r3, #4]
 800d3ec:	6063      	str	r3, [r4, #4]
 800d3ee:	bf04      	itt	eq
 800d3f0:	1809      	addeq	r1, r1, r0
 800d3f2:	6021      	streq	r1, [r4, #0]
 800d3f4:	6054      	str	r4, [r2, #4]
 800d3f6:	e7ca      	b.n	800d38e <_free_r+0x22>
 800d3f8:	bd38      	pop	{r3, r4, r5, pc}
 800d3fa:	bf00      	nop
 800d3fc:	2000613c 	.word	0x2000613c

0800d400 <sbrk_aligned>:
 800d400:	b570      	push	{r4, r5, r6, lr}
 800d402:	4e0f      	ldr	r6, [pc, #60]	@ (800d440 <sbrk_aligned+0x40>)
 800d404:	460c      	mov	r4, r1
 800d406:	6831      	ldr	r1, [r6, #0]
 800d408:	4605      	mov	r5, r0
 800d40a:	b911      	cbnz	r1, 800d412 <sbrk_aligned+0x12>
 800d40c:	f000 fca4 	bl	800dd58 <_sbrk_r>
 800d410:	6030      	str	r0, [r6, #0]
 800d412:	4621      	mov	r1, r4
 800d414:	4628      	mov	r0, r5
 800d416:	f000 fc9f 	bl	800dd58 <_sbrk_r>
 800d41a:	1c43      	adds	r3, r0, #1
 800d41c:	d103      	bne.n	800d426 <sbrk_aligned+0x26>
 800d41e:	f04f 34ff 	mov.w	r4, #4294967295
 800d422:	4620      	mov	r0, r4
 800d424:	bd70      	pop	{r4, r5, r6, pc}
 800d426:	1cc4      	adds	r4, r0, #3
 800d428:	f024 0403 	bic.w	r4, r4, #3
 800d42c:	42a0      	cmp	r0, r4
 800d42e:	d0f8      	beq.n	800d422 <sbrk_aligned+0x22>
 800d430:	1a21      	subs	r1, r4, r0
 800d432:	4628      	mov	r0, r5
 800d434:	f000 fc90 	bl	800dd58 <_sbrk_r>
 800d438:	3001      	adds	r0, #1
 800d43a:	d1f2      	bne.n	800d422 <sbrk_aligned+0x22>
 800d43c:	e7ef      	b.n	800d41e <sbrk_aligned+0x1e>
 800d43e:	bf00      	nop
 800d440:	20006138 	.word	0x20006138

0800d444 <_malloc_r>:
 800d444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d448:	1ccd      	adds	r5, r1, #3
 800d44a:	f025 0503 	bic.w	r5, r5, #3
 800d44e:	3508      	adds	r5, #8
 800d450:	2d0c      	cmp	r5, #12
 800d452:	bf38      	it	cc
 800d454:	250c      	movcc	r5, #12
 800d456:	2d00      	cmp	r5, #0
 800d458:	4606      	mov	r6, r0
 800d45a:	db01      	blt.n	800d460 <_malloc_r+0x1c>
 800d45c:	42a9      	cmp	r1, r5
 800d45e:	d904      	bls.n	800d46a <_malloc_r+0x26>
 800d460:	230c      	movs	r3, #12
 800d462:	6033      	str	r3, [r6, #0]
 800d464:	2000      	movs	r0, #0
 800d466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d540 <_malloc_r+0xfc>
 800d46e:	f000 f869 	bl	800d544 <__malloc_lock>
 800d472:	f8d8 3000 	ldr.w	r3, [r8]
 800d476:	461c      	mov	r4, r3
 800d478:	bb44      	cbnz	r4, 800d4cc <_malloc_r+0x88>
 800d47a:	4629      	mov	r1, r5
 800d47c:	4630      	mov	r0, r6
 800d47e:	f7ff ffbf 	bl	800d400 <sbrk_aligned>
 800d482:	1c43      	adds	r3, r0, #1
 800d484:	4604      	mov	r4, r0
 800d486:	d158      	bne.n	800d53a <_malloc_r+0xf6>
 800d488:	f8d8 4000 	ldr.w	r4, [r8]
 800d48c:	4627      	mov	r7, r4
 800d48e:	2f00      	cmp	r7, #0
 800d490:	d143      	bne.n	800d51a <_malloc_r+0xd6>
 800d492:	2c00      	cmp	r4, #0
 800d494:	d04b      	beq.n	800d52e <_malloc_r+0xea>
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	4639      	mov	r1, r7
 800d49a:	4630      	mov	r0, r6
 800d49c:	eb04 0903 	add.w	r9, r4, r3
 800d4a0:	f000 fc5a 	bl	800dd58 <_sbrk_r>
 800d4a4:	4581      	cmp	r9, r0
 800d4a6:	d142      	bne.n	800d52e <_malloc_r+0xea>
 800d4a8:	6821      	ldr	r1, [r4, #0]
 800d4aa:	1a6d      	subs	r5, r5, r1
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	f7ff ffa6 	bl	800d400 <sbrk_aligned>
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	d03a      	beq.n	800d52e <_malloc_r+0xea>
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	442b      	add	r3, r5
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	f8d8 3000 	ldr.w	r3, [r8]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	bb62      	cbnz	r2, 800d520 <_malloc_r+0xdc>
 800d4c6:	f8c8 7000 	str.w	r7, [r8]
 800d4ca:	e00f      	b.n	800d4ec <_malloc_r+0xa8>
 800d4cc:	6822      	ldr	r2, [r4, #0]
 800d4ce:	1b52      	subs	r2, r2, r5
 800d4d0:	d420      	bmi.n	800d514 <_malloc_r+0xd0>
 800d4d2:	2a0b      	cmp	r2, #11
 800d4d4:	d917      	bls.n	800d506 <_malloc_r+0xc2>
 800d4d6:	1961      	adds	r1, r4, r5
 800d4d8:	42a3      	cmp	r3, r4
 800d4da:	6025      	str	r5, [r4, #0]
 800d4dc:	bf18      	it	ne
 800d4de:	6059      	strne	r1, [r3, #4]
 800d4e0:	6863      	ldr	r3, [r4, #4]
 800d4e2:	bf08      	it	eq
 800d4e4:	f8c8 1000 	streq.w	r1, [r8]
 800d4e8:	5162      	str	r2, [r4, r5]
 800d4ea:	604b      	str	r3, [r1, #4]
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	f000 f82f 	bl	800d550 <__malloc_unlock>
 800d4f2:	f104 000b 	add.w	r0, r4, #11
 800d4f6:	1d23      	adds	r3, r4, #4
 800d4f8:	f020 0007 	bic.w	r0, r0, #7
 800d4fc:	1ac2      	subs	r2, r0, r3
 800d4fe:	bf1c      	itt	ne
 800d500:	1a1b      	subne	r3, r3, r0
 800d502:	50a3      	strne	r3, [r4, r2]
 800d504:	e7af      	b.n	800d466 <_malloc_r+0x22>
 800d506:	6862      	ldr	r2, [r4, #4]
 800d508:	42a3      	cmp	r3, r4
 800d50a:	bf0c      	ite	eq
 800d50c:	f8c8 2000 	streq.w	r2, [r8]
 800d510:	605a      	strne	r2, [r3, #4]
 800d512:	e7eb      	b.n	800d4ec <_malloc_r+0xa8>
 800d514:	4623      	mov	r3, r4
 800d516:	6864      	ldr	r4, [r4, #4]
 800d518:	e7ae      	b.n	800d478 <_malloc_r+0x34>
 800d51a:	463c      	mov	r4, r7
 800d51c:	687f      	ldr	r7, [r7, #4]
 800d51e:	e7b6      	b.n	800d48e <_malloc_r+0x4a>
 800d520:	461a      	mov	r2, r3
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	42a3      	cmp	r3, r4
 800d526:	d1fb      	bne.n	800d520 <_malloc_r+0xdc>
 800d528:	2300      	movs	r3, #0
 800d52a:	6053      	str	r3, [r2, #4]
 800d52c:	e7de      	b.n	800d4ec <_malloc_r+0xa8>
 800d52e:	230c      	movs	r3, #12
 800d530:	6033      	str	r3, [r6, #0]
 800d532:	4630      	mov	r0, r6
 800d534:	f000 f80c 	bl	800d550 <__malloc_unlock>
 800d538:	e794      	b.n	800d464 <_malloc_r+0x20>
 800d53a:	6005      	str	r5, [r0, #0]
 800d53c:	e7d6      	b.n	800d4ec <_malloc_r+0xa8>
 800d53e:	bf00      	nop
 800d540:	2000613c 	.word	0x2000613c

0800d544 <__malloc_lock>:
 800d544:	4801      	ldr	r0, [pc, #4]	@ (800d54c <__malloc_lock+0x8>)
 800d546:	f7ff bf00 	b.w	800d34a <__retarget_lock_acquire_recursive>
 800d54a:	bf00      	nop
 800d54c:	20006134 	.word	0x20006134

0800d550 <__malloc_unlock>:
 800d550:	4801      	ldr	r0, [pc, #4]	@ (800d558 <__malloc_unlock+0x8>)
 800d552:	f7ff befb 	b.w	800d34c <__retarget_lock_release_recursive>
 800d556:	bf00      	nop
 800d558:	20006134 	.word	0x20006134

0800d55c <__sfputc_r>:
 800d55c:	6893      	ldr	r3, [r2, #8]
 800d55e:	3b01      	subs	r3, #1
 800d560:	2b00      	cmp	r3, #0
 800d562:	b410      	push	{r4}
 800d564:	6093      	str	r3, [r2, #8]
 800d566:	da08      	bge.n	800d57a <__sfputc_r+0x1e>
 800d568:	6994      	ldr	r4, [r2, #24]
 800d56a:	42a3      	cmp	r3, r4
 800d56c:	db01      	blt.n	800d572 <__sfputc_r+0x16>
 800d56e:	290a      	cmp	r1, #10
 800d570:	d103      	bne.n	800d57a <__sfputc_r+0x1e>
 800d572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d576:	f7ff bdda 	b.w	800d12e <__swbuf_r>
 800d57a:	6813      	ldr	r3, [r2, #0]
 800d57c:	1c58      	adds	r0, r3, #1
 800d57e:	6010      	str	r0, [r2, #0]
 800d580:	7019      	strb	r1, [r3, #0]
 800d582:	4608      	mov	r0, r1
 800d584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <__sfputs_r>:
 800d58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d58c:	4606      	mov	r6, r0
 800d58e:	460f      	mov	r7, r1
 800d590:	4614      	mov	r4, r2
 800d592:	18d5      	adds	r5, r2, r3
 800d594:	42ac      	cmp	r4, r5
 800d596:	d101      	bne.n	800d59c <__sfputs_r+0x12>
 800d598:	2000      	movs	r0, #0
 800d59a:	e007      	b.n	800d5ac <__sfputs_r+0x22>
 800d59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a0:	463a      	mov	r2, r7
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	f7ff ffda 	bl	800d55c <__sfputc_r>
 800d5a8:	1c43      	adds	r3, r0, #1
 800d5aa:	d1f3      	bne.n	800d594 <__sfputs_r+0xa>
 800d5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d5b0 <_vfiprintf_r>:
 800d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b4:	460d      	mov	r5, r1
 800d5b6:	b09d      	sub	sp, #116	@ 0x74
 800d5b8:	4614      	mov	r4, r2
 800d5ba:	4698      	mov	r8, r3
 800d5bc:	4606      	mov	r6, r0
 800d5be:	b118      	cbz	r0, 800d5c8 <_vfiprintf_r+0x18>
 800d5c0:	6a03      	ldr	r3, [r0, #32]
 800d5c2:	b90b      	cbnz	r3, 800d5c8 <_vfiprintf_r+0x18>
 800d5c4:	f7ff fcca 	bl	800cf5c <__sinit>
 800d5c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5ca:	07d9      	lsls	r1, r3, #31
 800d5cc:	d405      	bmi.n	800d5da <_vfiprintf_r+0x2a>
 800d5ce:	89ab      	ldrh	r3, [r5, #12]
 800d5d0:	059a      	lsls	r2, r3, #22
 800d5d2:	d402      	bmi.n	800d5da <_vfiprintf_r+0x2a>
 800d5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5d6:	f7ff feb8 	bl	800d34a <__retarget_lock_acquire_recursive>
 800d5da:	89ab      	ldrh	r3, [r5, #12]
 800d5dc:	071b      	lsls	r3, r3, #28
 800d5de:	d501      	bpl.n	800d5e4 <_vfiprintf_r+0x34>
 800d5e0:	692b      	ldr	r3, [r5, #16]
 800d5e2:	b99b      	cbnz	r3, 800d60c <_vfiprintf_r+0x5c>
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f7ff fde0 	bl	800d1ac <__swsetup_r>
 800d5ec:	b170      	cbz	r0, 800d60c <_vfiprintf_r+0x5c>
 800d5ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5f0:	07dc      	lsls	r4, r3, #31
 800d5f2:	d504      	bpl.n	800d5fe <_vfiprintf_r+0x4e>
 800d5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f8:	b01d      	add	sp, #116	@ 0x74
 800d5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fe:	89ab      	ldrh	r3, [r5, #12]
 800d600:	0598      	lsls	r0, r3, #22
 800d602:	d4f7      	bmi.n	800d5f4 <_vfiprintf_r+0x44>
 800d604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d606:	f7ff fea1 	bl	800d34c <__retarget_lock_release_recursive>
 800d60a:	e7f3      	b.n	800d5f4 <_vfiprintf_r+0x44>
 800d60c:	2300      	movs	r3, #0
 800d60e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d610:	2320      	movs	r3, #32
 800d612:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d616:	f8cd 800c 	str.w	r8, [sp, #12]
 800d61a:	2330      	movs	r3, #48	@ 0x30
 800d61c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d7cc <_vfiprintf_r+0x21c>
 800d620:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d624:	f04f 0901 	mov.w	r9, #1
 800d628:	4623      	mov	r3, r4
 800d62a:	469a      	mov	sl, r3
 800d62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d630:	b10a      	cbz	r2, 800d636 <_vfiprintf_r+0x86>
 800d632:	2a25      	cmp	r2, #37	@ 0x25
 800d634:	d1f9      	bne.n	800d62a <_vfiprintf_r+0x7a>
 800d636:	ebba 0b04 	subs.w	fp, sl, r4
 800d63a:	d00b      	beq.n	800d654 <_vfiprintf_r+0xa4>
 800d63c:	465b      	mov	r3, fp
 800d63e:	4622      	mov	r2, r4
 800d640:	4629      	mov	r1, r5
 800d642:	4630      	mov	r0, r6
 800d644:	f7ff ffa1 	bl	800d58a <__sfputs_r>
 800d648:	3001      	adds	r0, #1
 800d64a:	f000 80a7 	beq.w	800d79c <_vfiprintf_r+0x1ec>
 800d64e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d650:	445a      	add	r2, fp
 800d652:	9209      	str	r2, [sp, #36]	@ 0x24
 800d654:	f89a 3000 	ldrb.w	r3, [sl]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 809f 	beq.w	800d79c <_vfiprintf_r+0x1ec>
 800d65e:	2300      	movs	r3, #0
 800d660:	f04f 32ff 	mov.w	r2, #4294967295
 800d664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d668:	f10a 0a01 	add.w	sl, sl, #1
 800d66c:	9304      	str	r3, [sp, #16]
 800d66e:	9307      	str	r3, [sp, #28]
 800d670:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d674:	931a      	str	r3, [sp, #104]	@ 0x68
 800d676:	4654      	mov	r4, sl
 800d678:	2205      	movs	r2, #5
 800d67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67e:	4853      	ldr	r0, [pc, #332]	@ (800d7cc <_vfiprintf_r+0x21c>)
 800d680:	f7f2 fdae 	bl	80001e0 <memchr>
 800d684:	9a04      	ldr	r2, [sp, #16]
 800d686:	b9d8      	cbnz	r0, 800d6c0 <_vfiprintf_r+0x110>
 800d688:	06d1      	lsls	r1, r2, #27
 800d68a:	bf44      	itt	mi
 800d68c:	2320      	movmi	r3, #32
 800d68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d692:	0713      	lsls	r3, r2, #28
 800d694:	bf44      	itt	mi
 800d696:	232b      	movmi	r3, #43	@ 0x2b
 800d698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d69c:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6a2:	d015      	beq.n	800d6d0 <_vfiprintf_r+0x120>
 800d6a4:	9a07      	ldr	r2, [sp, #28]
 800d6a6:	4654      	mov	r4, sl
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	f04f 0c0a 	mov.w	ip, #10
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6b4:	3b30      	subs	r3, #48	@ 0x30
 800d6b6:	2b09      	cmp	r3, #9
 800d6b8:	d94b      	bls.n	800d752 <_vfiprintf_r+0x1a2>
 800d6ba:	b1b0      	cbz	r0, 800d6ea <_vfiprintf_r+0x13a>
 800d6bc:	9207      	str	r2, [sp, #28]
 800d6be:	e014      	b.n	800d6ea <_vfiprintf_r+0x13a>
 800d6c0:	eba0 0308 	sub.w	r3, r0, r8
 800d6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	9304      	str	r3, [sp, #16]
 800d6cc:	46a2      	mov	sl, r4
 800d6ce:	e7d2      	b.n	800d676 <_vfiprintf_r+0xc6>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	1d19      	adds	r1, r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	9103      	str	r1, [sp, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	bfbb      	ittet	lt
 800d6dc:	425b      	neglt	r3, r3
 800d6de:	f042 0202 	orrlt.w	r2, r2, #2
 800d6e2:	9307      	strge	r3, [sp, #28]
 800d6e4:	9307      	strlt	r3, [sp, #28]
 800d6e6:	bfb8      	it	lt
 800d6e8:	9204      	strlt	r2, [sp, #16]
 800d6ea:	7823      	ldrb	r3, [r4, #0]
 800d6ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6ee:	d10a      	bne.n	800d706 <_vfiprintf_r+0x156>
 800d6f0:	7863      	ldrb	r3, [r4, #1]
 800d6f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6f4:	d132      	bne.n	800d75c <_vfiprintf_r+0x1ac>
 800d6f6:	9b03      	ldr	r3, [sp, #12]
 800d6f8:	1d1a      	adds	r2, r3, #4
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	9203      	str	r2, [sp, #12]
 800d6fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d702:	3402      	adds	r4, #2
 800d704:	9305      	str	r3, [sp, #20]
 800d706:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d7dc <_vfiprintf_r+0x22c>
 800d70a:	7821      	ldrb	r1, [r4, #0]
 800d70c:	2203      	movs	r2, #3
 800d70e:	4650      	mov	r0, sl
 800d710:	f7f2 fd66 	bl	80001e0 <memchr>
 800d714:	b138      	cbz	r0, 800d726 <_vfiprintf_r+0x176>
 800d716:	9b04      	ldr	r3, [sp, #16]
 800d718:	eba0 000a 	sub.w	r0, r0, sl
 800d71c:	2240      	movs	r2, #64	@ 0x40
 800d71e:	4082      	lsls	r2, r0
 800d720:	4313      	orrs	r3, r2
 800d722:	3401      	adds	r4, #1
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d72a:	4829      	ldr	r0, [pc, #164]	@ (800d7d0 <_vfiprintf_r+0x220>)
 800d72c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d730:	2206      	movs	r2, #6
 800d732:	f7f2 fd55 	bl	80001e0 <memchr>
 800d736:	2800      	cmp	r0, #0
 800d738:	d03f      	beq.n	800d7ba <_vfiprintf_r+0x20a>
 800d73a:	4b26      	ldr	r3, [pc, #152]	@ (800d7d4 <_vfiprintf_r+0x224>)
 800d73c:	bb1b      	cbnz	r3, 800d786 <_vfiprintf_r+0x1d6>
 800d73e:	9b03      	ldr	r3, [sp, #12]
 800d740:	3307      	adds	r3, #7
 800d742:	f023 0307 	bic.w	r3, r3, #7
 800d746:	3308      	adds	r3, #8
 800d748:	9303      	str	r3, [sp, #12]
 800d74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d74c:	443b      	add	r3, r7
 800d74e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d750:	e76a      	b.n	800d628 <_vfiprintf_r+0x78>
 800d752:	fb0c 3202 	mla	r2, ip, r2, r3
 800d756:	460c      	mov	r4, r1
 800d758:	2001      	movs	r0, #1
 800d75a:	e7a8      	b.n	800d6ae <_vfiprintf_r+0xfe>
 800d75c:	2300      	movs	r3, #0
 800d75e:	3401      	adds	r4, #1
 800d760:	9305      	str	r3, [sp, #20]
 800d762:	4619      	mov	r1, r3
 800d764:	f04f 0c0a 	mov.w	ip, #10
 800d768:	4620      	mov	r0, r4
 800d76a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d76e:	3a30      	subs	r2, #48	@ 0x30
 800d770:	2a09      	cmp	r2, #9
 800d772:	d903      	bls.n	800d77c <_vfiprintf_r+0x1cc>
 800d774:	2b00      	cmp	r3, #0
 800d776:	d0c6      	beq.n	800d706 <_vfiprintf_r+0x156>
 800d778:	9105      	str	r1, [sp, #20]
 800d77a:	e7c4      	b.n	800d706 <_vfiprintf_r+0x156>
 800d77c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d780:	4604      	mov	r4, r0
 800d782:	2301      	movs	r3, #1
 800d784:	e7f0      	b.n	800d768 <_vfiprintf_r+0x1b8>
 800d786:	ab03      	add	r3, sp, #12
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	462a      	mov	r2, r5
 800d78c:	4b12      	ldr	r3, [pc, #72]	@ (800d7d8 <_vfiprintf_r+0x228>)
 800d78e:	a904      	add	r1, sp, #16
 800d790:	4630      	mov	r0, r6
 800d792:	f3af 8000 	nop.w
 800d796:	4607      	mov	r7, r0
 800d798:	1c78      	adds	r0, r7, #1
 800d79a:	d1d6      	bne.n	800d74a <_vfiprintf_r+0x19a>
 800d79c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d79e:	07d9      	lsls	r1, r3, #31
 800d7a0:	d405      	bmi.n	800d7ae <_vfiprintf_r+0x1fe>
 800d7a2:	89ab      	ldrh	r3, [r5, #12]
 800d7a4:	059a      	lsls	r2, r3, #22
 800d7a6:	d402      	bmi.n	800d7ae <_vfiprintf_r+0x1fe>
 800d7a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7aa:	f7ff fdcf 	bl	800d34c <__retarget_lock_release_recursive>
 800d7ae:	89ab      	ldrh	r3, [r5, #12]
 800d7b0:	065b      	lsls	r3, r3, #25
 800d7b2:	f53f af1f 	bmi.w	800d5f4 <_vfiprintf_r+0x44>
 800d7b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7b8:	e71e      	b.n	800d5f8 <_vfiprintf_r+0x48>
 800d7ba:	ab03      	add	r3, sp, #12
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	462a      	mov	r2, r5
 800d7c0:	4b05      	ldr	r3, [pc, #20]	@ (800d7d8 <_vfiprintf_r+0x228>)
 800d7c2:	a904      	add	r1, sp, #16
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f000 f879 	bl	800d8bc <_printf_i>
 800d7ca:	e7e4      	b.n	800d796 <_vfiprintf_r+0x1e6>
 800d7cc:	0800e144 	.word	0x0800e144
 800d7d0:	0800e14e 	.word	0x0800e14e
 800d7d4:	00000000 	.word	0x00000000
 800d7d8:	0800d58b 	.word	0x0800d58b
 800d7dc:	0800e14a 	.word	0x0800e14a

0800d7e0 <_printf_common>:
 800d7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e4:	4616      	mov	r6, r2
 800d7e6:	4698      	mov	r8, r3
 800d7e8:	688a      	ldr	r2, [r1, #8]
 800d7ea:	690b      	ldr	r3, [r1, #16]
 800d7ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	bfb8      	it	lt
 800d7f4:	4613      	movlt	r3, r2
 800d7f6:	6033      	str	r3, [r6, #0]
 800d7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	460c      	mov	r4, r1
 800d800:	b10a      	cbz	r2, 800d806 <_printf_common+0x26>
 800d802:	3301      	adds	r3, #1
 800d804:	6033      	str	r3, [r6, #0]
 800d806:	6823      	ldr	r3, [r4, #0]
 800d808:	0699      	lsls	r1, r3, #26
 800d80a:	bf42      	ittt	mi
 800d80c:	6833      	ldrmi	r3, [r6, #0]
 800d80e:	3302      	addmi	r3, #2
 800d810:	6033      	strmi	r3, [r6, #0]
 800d812:	6825      	ldr	r5, [r4, #0]
 800d814:	f015 0506 	ands.w	r5, r5, #6
 800d818:	d106      	bne.n	800d828 <_printf_common+0x48>
 800d81a:	f104 0a19 	add.w	sl, r4, #25
 800d81e:	68e3      	ldr	r3, [r4, #12]
 800d820:	6832      	ldr	r2, [r6, #0]
 800d822:	1a9b      	subs	r3, r3, r2
 800d824:	42ab      	cmp	r3, r5
 800d826:	dc26      	bgt.n	800d876 <_printf_common+0x96>
 800d828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d82c:	6822      	ldr	r2, [r4, #0]
 800d82e:	3b00      	subs	r3, #0
 800d830:	bf18      	it	ne
 800d832:	2301      	movne	r3, #1
 800d834:	0692      	lsls	r2, r2, #26
 800d836:	d42b      	bmi.n	800d890 <_printf_common+0xb0>
 800d838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d83c:	4641      	mov	r1, r8
 800d83e:	4638      	mov	r0, r7
 800d840:	47c8      	blx	r9
 800d842:	3001      	adds	r0, #1
 800d844:	d01e      	beq.n	800d884 <_printf_common+0xa4>
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	6922      	ldr	r2, [r4, #16]
 800d84a:	f003 0306 	and.w	r3, r3, #6
 800d84e:	2b04      	cmp	r3, #4
 800d850:	bf02      	ittt	eq
 800d852:	68e5      	ldreq	r5, [r4, #12]
 800d854:	6833      	ldreq	r3, [r6, #0]
 800d856:	1aed      	subeq	r5, r5, r3
 800d858:	68a3      	ldr	r3, [r4, #8]
 800d85a:	bf0c      	ite	eq
 800d85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d860:	2500      	movne	r5, #0
 800d862:	4293      	cmp	r3, r2
 800d864:	bfc4      	itt	gt
 800d866:	1a9b      	subgt	r3, r3, r2
 800d868:	18ed      	addgt	r5, r5, r3
 800d86a:	2600      	movs	r6, #0
 800d86c:	341a      	adds	r4, #26
 800d86e:	42b5      	cmp	r5, r6
 800d870:	d11a      	bne.n	800d8a8 <_printf_common+0xc8>
 800d872:	2000      	movs	r0, #0
 800d874:	e008      	b.n	800d888 <_printf_common+0xa8>
 800d876:	2301      	movs	r3, #1
 800d878:	4652      	mov	r2, sl
 800d87a:	4641      	mov	r1, r8
 800d87c:	4638      	mov	r0, r7
 800d87e:	47c8      	blx	r9
 800d880:	3001      	adds	r0, #1
 800d882:	d103      	bne.n	800d88c <_printf_common+0xac>
 800d884:	f04f 30ff 	mov.w	r0, #4294967295
 800d888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d88c:	3501      	adds	r5, #1
 800d88e:	e7c6      	b.n	800d81e <_printf_common+0x3e>
 800d890:	18e1      	adds	r1, r4, r3
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	2030      	movs	r0, #48	@ 0x30
 800d896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d89a:	4422      	add	r2, r4
 800d89c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d8a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d8a4:	3302      	adds	r3, #2
 800d8a6:	e7c7      	b.n	800d838 <_printf_common+0x58>
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	4622      	mov	r2, r4
 800d8ac:	4641      	mov	r1, r8
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	47c8      	blx	r9
 800d8b2:	3001      	adds	r0, #1
 800d8b4:	d0e6      	beq.n	800d884 <_printf_common+0xa4>
 800d8b6:	3601      	adds	r6, #1
 800d8b8:	e7d9      	b.n	800d86e <_printf_common+0x8e>
	...

0800d8bc <_printf_i>:
 800d8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c0:	7e0f      	ldrb	r7, [r1, #24]
 800d8c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d8c4:	2f78      	cmp	r7, #120	@ 0x78
 800d8c6:	4691      	mov	r9, r2
 800d8c8:	4680      	mov	r8, r0
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	469a      	mov	sl, r3
 800d8ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d8d2:	d807      	bhi.n	800d8e4 <_printf_i+0x28>
 800d8d4:	2f62      	cmp	r7, #98	@ 0x62
 800d8d6:	d80a      	bhi.n	800d8ee <_printf_i+0x32>
 800d8d8:	2f00      	cmp	r7, #0
 800d8da:	f000 80d1 	beq.w	800da80 <_printf_i+0x1c4>
 800d8de:	2f58      	cmp	r7, #88	@ 0x58
 800d8e0:	f000 80b8 	beq.w	800da54 <_printf_i+0x198>
 800d8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d8ec:	e03a      	b.n	800d964 <_printf_i+0xa8>
 800d8ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d8f2:	2b15      	cmp	r3, #21
 800d8f4:	d8f6      	bhi.n	800d8e4 <_printf_i+0x28>
 800d8f6:	a101      	add	r1, pc, #4	@ (adr r1, 800d8fc <_printf_i+0x40>)
 800d8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8fc:	0800d955 	.word	0x0800d955
 800d900:	0800d969 	.word	0x0800d969
 800d904:	0800d8e5 	.word	0x0800d8e5
 800d908:	0800d8e5 	.word	0x0800d8e5
 800d90c:	0800d8e5 	.word	0x0800d8e5
 800d910:	0800d8e5 	.word	0x0800d8e5
 800d914:	0800d969 	.word	0x0800d969
 800d918:	0800d8e5 	.word	0x0800d8e5
 800d91c:	0800d8e5 	.word	0x0800d8e5
 800d920:	0800d8e5 	.word	0x0800d8e5
 800d924:	0800d8e5 	.word	0x0800d8e5
 800d928:	0800da67 	.word	0x0800da67
 800d92c:	0800d993 	.word	0x0800d993
 800d930:	0800da21 	.word	0x0800da21
 800d934:	0800d8e5 	.word	0x0800d8e5
 800d938:	0800d8e5 	.word	0x0800d8e5
 800d93c:	0800da89 	.word	0x0800da89
 800d940:	0800d8e5 	.word	0x0800d8e5
 800d944:	0800d993 	.word	0x0800d993
 800d948:	0800d8e5 	.word	0x0800d8e5
 800d94c:	0800d8e5 	.word	0x0800d8e5
 800d950:	0800da29 	.word	0x0800da29
 800d954:	6833      	ldr	r3, [r6, #0]
 800d956:	1d1a      	adds	r2, r3, #4
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6032      	str	r2, [r6, #0]
 800d95c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d964:	2301      	movs	r3, #1
 800d966:	e09c      	b.n	800daa2 <_printf_i+0x1e6>
 800d968:	6833      	ldr	r3, [r6, #0]
 800d96a:	6820      	ldr	r0, [r4, #0]
 800d96c:	1d19      	adds	r1, r3, #4
 800d96e:	6031      	str	r1, [r6, #0]
 800d970:	0606      	lsls	r6, r0, #24
 800d972:	d501      	bpl.n	800d978 <_printf_i+0xbc>
 800d974:	681d      	ldr	r5, [r3, #0]
 800d976:	e003      	b.n	800d980 <_printf_i+0xc4>
 800d978:	0645      	lsls	r5, r0, #25
 800d97a:	d5fb      	bpl.n	800d974 <_printf_i+0xb8>
 800d97c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d980:	2d00      	cmp	r5, #0
 800d982:	da03      	bge.n	800d98c <_printf_i+0xd0>
 800d984:	232d      	movs	r3, #45	@ 0x2d
 800d986:	426d      	negs	r5, r5
 800d988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d98c:	4858      	ldr	r0, [pc, #352]	@ (800daf0 <_printf_i+0x234>)
 800d98e:	230a      	movs	r3, #10
 800d990:	e011      	b.n	800d9b6 <_printf_i+0xfa>
 800d992:	6821      	ldr	r1, [r4, #0]
 800d994:	6833      	ldr	r3, [r6, #0]
 800d996:	0608      	lsls	r0, r1, #24
 800d998:	f853 5b04 	ldr.w	r5, [r3], #4
 800d99c:	d402      	bmi.n	800d9a4 <_printf_i+0xe8>
 800d99e:	0649      	lsls	r1, r1, #25
 800d9a0:	bf48      	it	mi
 800d9a2:	b2ad      	uxthmi	r5, r5
 800d9a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d9a6:	4852      	ldr	r0, [pc, #328]	@ (800daf0 <_printf_i+0x234>)
 800d9a8:	6033      	str	r3, [r6, #0]
 800d9aa:	bf14      	ite	ne
 800d9ac:	230a      	movne	r3, #10
 800d9ae:	2308      	moveq	r3, #8
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9b6:	6866      	ldr	r6, [r4, #4]
 800d9b8:	60a6      	str	r6, [r4, #8]
 800d9ba:	2e00      	cmp	r6, #0
 800d9bc:	db05      	blt.n	800d9ca <_printf_i+0x10e>
 800d9be:	6821      	ldr	r1, [r4, #0]
 800d9c0:	432e      	orrs	r6, r5
 800d9c2:	f021 0104 	bic.w	r1, r1, #4
 800d9c6:	6021      	str	r1, [r4, #0]
 800d9c8:	d04b      	beq.n	800da62 <_printf_i+0x1a6>
 800d9ca:	4616      	mov	r6, r2
 800d9cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9d0:	fb03 5711 	mls	r7, r3, r1, r5
 800d9d4:	5dc7      	ldrb	r7, [r0, r7]
 800d9d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d9da:	462f      	mov	r7, r5
 800d9dc:	42bb      	cmp	r3, r7
 800d9de:	460d      	mov	r5, r1
 800d9e0:	d9f4      	bls.n	800d9cc <_printf_i+0x110>
 800d9e2:	2b08      	cmp	r3, #8
 800d9e4:	d10b      	bne.n	800d9fe <_printf_i+0x142>
 800d9e6:	6823      	ldr	r3, [r4, #0]
 800d9e8:	07df      	lsls	r7, r3, #31
 800d9ea:	d508      	bpl.n	800d9fe <_printf_i+0x142>
 800d9ec:	6923      	ldr	r3, [r4, #16]
 800d9ee:	6861      	ldr	r1, [r4, #4]
 800d9f0:	4299      	cmp	r1, r3
 800d9f2:	bfde      	ittt	le
 800d9f4:	2330      	movle	r3, #48	@ 0x30
 800d9f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d9fe:	1b92      	subs	r2, r2, r6
 800da00:	6122      	str	r2, [r4, #16]
 800da02:	f8cd a000 	str.w	sl, [sp]
 800da06:	464b      	mov	r3, r9
 800da08:	aa03      	add	r2, sp, #12
 800da0a:	4621      	mov	r1, r4
 800da0c:	4640      	mov	r0, r8
 800da0e:	f7ff fee7 	bl	800d7e0 <_printf_common>
 800da12:	3001      	adds	r0, #1
 800da14:	d14a      	bne.n	800daac <_printf_i+0x1f0>
 800da16:	f04f 30ff 	mov.w	r0, #4294967295
 800da1a:	b004      	add	sp, #16
 800da1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da20:	6823      	ldr	r3, [r4, #0]
 800da22:	f043 0320 	orr.w	r3, r3, #32
 800da26:	6023      	str	r3, [r4, #0]
 800da28:	4832      	ldr	r0, [pc, #200]	@ (800daf4 <_printf_i+0x238>)
 800da2a:	2778      	movs	r7, #120	@ 0x78
 800da2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da30:	6823      	ldr	r3, [r4, #0]
 800da32:	6831      	ldr	r1, [r6, #0]
 800da34:	061f      	lsls	r7, r3, #24
 800da36:	f851 5b04 	ldr.w	r5, [r1], #4
 800da3a:	d402      	bmi.n	800da42 <_printf_i+0x186>
 800da3c:	065f      	lsls	r7, r3, #25
 800da3e:	bf48      	it	mi
 800da40:	b2ad      	uxthmi	r5, r5
 800da42:	6031      	str	r1, [r6, #0]
 800da44:	07d9      	lsls	r1, r3, #31
 800da46:	bf44      	itt	mi
 800da48:	f043 0320 	orrmi.w	r3, r3, #32
 800da4c:	6023      	strmi	r3, [r4, #0]
 800da4e:	b11d      	cbz	r5, 800da58 <_printf_i+0x19c>
 800da50:	2310      	movs	r3, #16
 800da52:	e7ad      	b.n	800d9b0 <_printf_i+0xf4>
 800da54:	4826      	ldr	r0, [pc, #152]	@ (800daf0 <_printf_i+0x234>)
 800da56:	e7e9      	b.n	800da2c <_printf_i+0x170>
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	f023 0320 	bic.w	r3, r3, #32
 800da5e:	6023      	str	r3, [r4, #0]
 800da60:	e7f6      	b.n	800da50 <_printf_i+0x194>
 800da62:	4616      	mov	r6, r2
 800da64:	e7bd      	b.n	800d9e2 <_printf_i+0x126>
 800da66:	6833      	ldr	r3, [r6, #0]
 800da68:	6825      	ldr	r5, [r4, #0]
 800da6a:	6961      	ldr	r1, [r4, #20]
 800da6c:	1d18      	adds	r0, r3, #4
 800da6e:	6030      	str	r0, [r6, #0]
 800da70:	062e      	lsls	r6, r5, #24
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	d501      	bpl.n	800da7a <_printf_i+0x1be>
 800da76:	6019      	str	r1, [r3, #0]
 800da78:	e002      	b.n	800da80 <_printf_i+0x1c4>
 800da7a:	0668      	lsls	r0, r5, #25
 800da7c:	d5fb      	bpl.n	800da76 <_printf_i+0x1ba>
 800da7e:	8019      	strh	r1, [r3, #0]
 800da80:	2300      	movs	r3, #0
 800da82:	6123      	str	r3, [r4, #16]
 800da84:	4616      	mov	r6, r2
 800da86:	e7bc      	b.n	800da02 <_printf_i+0x146>
 800da88:	6833      	ldr	r3, [r6, #0]
 800da8a:	1d1a      	adds	r2, r3, #4
 800da8c:	6032      	str	r2, [r6, #0]
 800da8e:	681e      	ldr	r6, [r3, #0]
 800da90:	6862      	ldr	r2, [r4, #4]
 800da92:	2100      	movs	r1, #0
 800da94:	4630      	mov	r0, r6
 800da96:	f7f2 fba3 	bl	80001e0 <memchr>
 800da9a:	b108      	cbz	r0, 800daa0 <_printf_i+0x1e4>
 800da9c:	1b80      	subs	r0, r0, r6
 800da9e:	6060      	str	r0, [r4, #4]
 800daa0:	6863      	ldr	r3, [r4, #4]
 800daa2:	6123      	str	r3, [r4, #16]
 800daa4:	2300      	movs	r3, #0
 800daa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daaa:	e7aa      	b.n	800da02 <_printf_i+0x146>
 800daac:	6923      	ldr	r3, [r4, #16]
 800daae:	4632      	mov	r2, r6
 800dab0:	4649      	mov	r1, r9
 800dab2:	4640      	mov	r0, r8
 800dab4:	47d0      	blx	sl
 800dab6:	3001      	adds	r0, #1
 800dab8:	d0ad      	beq.n	800da16 <_printf_i+0x15a>
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	079b      	lsls	r3, r3, #30
 800dabe:	d413      	bmi.n	800dae8 <_printf_i+0x22c>
 800dac0:	68e0      	ldr	r0, [r4, #12]
 800dac2:	9b03      	ldr	r3, [sp, #12]
 800dac4:	4298      	cmp	r0, r3
 800dac6:	bfb8      	it	lt
 800dac8:	4618      	movlt	r0, r3
 800daca:	e7a6      	b.n	800da1a <_printf_i+0x15e>
 800dacc:	2301      	movs	r3, #1
 800dace:	4632      	mov	r2, r6
 800dad0:	4649      	mov	r1, r9
 800dad2:	4640      	mov	r0, r8
 800dad4:	47d0      	blx	sl
 800dad6:	3001      	adds	r0, #1
 800dad8:	d09d      	beq.n	800da16 <_printf_i+0x15a>
 800dada:	3501      	adds	r5, #1
 800dadc:	68e3      	ldr	r3, [r4, #12]
 800dade:	9903      	ldr	r1, [sp, #12]
 800dae0:	1a5b      	subs	r3, r3, r1
 800dae2:	42ab      	cmp	r3, r5
 800dae4:	dcf2      	bgt.n	800dacc <_printf_i+0x210>
 800dae6:	e7eb      	b.n	800dac0 <_printf_i+0x204>
 800dae8:	2500      	movs	r5, #0
 800daea:	f104 0619 	add.w	r6, r4, #25
 800daee:	e7f5      	b.n	800dadc <_printf_i+0x220>
 800daf0:	0800e155 	.word	0x0800e155
 800daf4:	0800e166 	.word	0x0800e166

0800daf8 <__sflush_r>:
 800daf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db00:	0716      	lsls	r6, r2, #28
 800db02:	4605      	mov	r5, r0
 800db04:	460c      	mov	r4, r1
 800db06:	d454      	bmi.n	800dbb2 <__sflush_r+0xba>
 800db08:	684b      	ldr	r3, [r1, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	dc02      	bgt.n	800db14 <__sflush_r+0x1c>
 800db0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800db10:	2b00      	cmp	r3, #0
 800db12:	dd48      	ble.n	800dba6 <__sflush_r+0xae>
 800db14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db16:	2e00      	cmp	r6, #0
 800db18:	d045      	beq.n	800dba6 <__sflush_r+0xae>
 800db1a:	2300      	movs	r3, #0
 800db1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db20:	682f      	ldr	r7, [r5, #0]
 800db22:	6a21      	ldr	r1, [r4, #32]
 800db24:	602b      	str	r3, [r5, #0]
 800db26:	d030      	beq.n	800db8a <__sflush_r+0x92>
 800db28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	0759      	lsls	r1, r3, #29
 800db2e:	d505      	bpl.n	800db3c <__sflush_r+0x44>
 800db30:	6863      	ldr	r3, [r4, #4]
 800db32:	1ad2      	subs	r2, r2, r3
 800db34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db36:	b10b      	cbz	r3, 800db3c <__sflush_r+0x44>
 800db38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db3a:	1ad2      	subs	r2, r2, r3
 800db3c:	2300      	movs	r3, #0
 800db3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db40:	6a21      	ldr	r1, [r4, #32]
 800db42:	4628      	mov	r0, r5
 800db44:	47b0      	blx	r6
 800db46:	1c43      	adds	r3, r0, #1
 800db48:	89a3      	ldrh	r3, [r4, #12]
 800db4a:	d106      	bne.n	800db5a <__sflush_r+0x62>
 800db4c:	6829      	ldr	r1, [r5, #0]
 800db4e:	291d      	cmp	r1, #29
 800db50:	d82b      	bhi.n	800dbaa <__sflush_r+0xb2>
 800db52:	4a2a      	ldr	r2, [pc, #168]	@ (800dbfc <__sflush_r+0x104>)
 800db54:	40ca      	lsrs	r2, r1
 800db56:	07d6      	lsls	r6, r2, #31
 800db58:	d527      	bpl.n	800dbaa <__sflush_r+0xb2>
 800db5a:	2200      	movs	r2, #0
 800db5c:	6062      	str	r2, [r4, #4]
 800db5e:	04d9      	lsls	r1, r3, #19
 800db60:	6922      	ldr	r2, [r4, #16]
 800db62:	6022      	str	r2, [r4, #0]
 800db64:	d504      	bpl.n	800db70 <__sflush_r+0x78>
 800db66:	1c42      	adds	r2, r0, #1
 800db68:	d101      	bne.n	800db6e <__sflush_r+0x76>
 800db6a:	682b      	ldr	r3, [r5, #0]
 800db6c:	b903      	cbnz	r3, 800db70 <__sflush_r+0x78>
 800db6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800db70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db72:	602f      	str	r7, [r5, #0]
 800db74:	b1b9      	cbz	r1, 800dba6 <__sflush_r+0xae>
 800db76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db7a:	4299      	cmp	r1, r3
 800db7c:	d002      	beq.n	800db84 <__sflush_r+0x8c>
 800db7e:	4628      	mov	r0, r5
 800db80:	f7ff fbf4 	bl	800d36c <_free_r>
 800db84:	2300      	movs	r3, #0
 800db86:	6363      	str	r3, [r4, #52]	@ 0x34
 800db88:	e00d      	b.n	800dba6 <__sflush_r+0xae>
 800db8a:	2301      	movs	r3, #1
 800db8c:	4628      	mov	r0, r5
 800db8e:	47b0      	blx	r6
 800db90:	4602      	mov	r2, r0
 800db92:	1c50      	adds	r0, r2, #1
 800db94:	d1c9      	bne.n	800db2a <__sflush_r+0x32>
 800db96:	682b      	ldr	r3, [r5, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d0c6      	beq.n	800db2a <__sflush_r+0x32>
 800db9c:	2b1d      	cmp	r3, #29
 800db9e:	d001      	beq.n	800dba4 <__sflush_r+0xac>
 800dba0:	2b16      	cmp	r3, #22
 800dba2:	d11e      	bne.n	800dbe2 <__sflush_r+0xea>
 800dba4:	602f      	str	r7, [r5, #0]
 800dba6:	2000      	movs	r0, #0
 800dba8:	e022      	b.n	800dbf0 <__sflush_r+0xf8>
 800dbaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbae:	b21b      	sxth	r3, r3
 800dbb0:	e01b      	b.n	800dbea <__sflush_r+0xf2>
 800dbb2:	690f      	ldr	r7, [r1, #16]
 800dbb4:	2f00      	cmp	r7, #0
 800dbb6:	d0f6      	beq.n	800dba6 <__sflush_r+0xae>
 800dbb8:	0793      	lsls	r3, r2, #30
 800dbba:	680e      	ldr	r6, [r1, #0]
 800dbbc:	bf08      	it	eq
 800dbbe:	694b      	ldreq	r3, [r1, #20]
 800dbc0:	600f      	str	r7, [r1, #0]
 800dbc2:	bf18      	it	ne
 800dbc4:	2300      	movne	r3, #0
 800dbc6:	eba6 0807 	sub.w	r8, r6, r7
 800dbca:	608b      	str	r3, [r1, #8]
 800dbcc:	f1b8 0f00 	cmp.w	r8, #0
 800dbd0:	dde9      	ble.n	800dba6 <__sflush_r+0xae>
 800dbd2:	6a21      	ldr	r1, [r4, #32]
 800dbd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dbd6:	4643      	mov	r3, r8
 800dbd8:	463a      	mov	r2, r7
 800dbda:	4628      	mov	r0, r5
 800dbdc:	47b0      	blx	r6
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	dc08      	bgt.n	800dbf4 <__sflush_r+0xfc>
 800dbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbea:	81a3      	strh	r3, [r4, #12]
 800dbec:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf4:	4407      	add	r7, r0
 800dbf6:	eba8 0800 	sub.w	r8, r8, r0
 800dbfa:	e7e7      	b.n	800dbcc <__sflush_r+0xd4>
 800dbfc:	20400001 	.word	0x20400001

0800dc00 <_fflush_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	690b      	ldr	r3, [r1, #16]
 800dc04:	4605      	mov	r5, r0
 800dc06:	460c      	mov	r4, r1
 800dc08:	b913      	cbnz	r3, 800dc10 <_fflush_r+0x10>
 800dc0a:	2500      	movs	r5, #0
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	bd38      	pop	{r3, r4, r5, pc}
 800dc10:	b118      	cbz	r0, 800dc1a <_fflush_r+0x1a>
 800dc12:	6a03      	ldr	r3, [r0, #32]
 800dc14:	b90b      	cbnz	r3, 800dc1a <_fflush_r+0x1a>
 800dc16:	f7ff f9a1 	bl	800cf5c <__sinit>
 800dc1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d0f3      	beq.n	800dc0a <_fflush_r+0xa>
 800dc22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc24:	07d0      	lsls	r0, r2, #31
 800dc26:	d404      	bmi.n	800dc32 <_fflush_r+0x32>
 800dc28:	0599      	lsls	r1, r3, #22
 800dc2a:	d402      	bmi.n	800dc32 <_fflush_r+0x32>
 800dc2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc2e:	f7ff fb8c 	bl	800d34a <__retarget_lock_acquire_recursive>
 800dc32:	4628      	mov	r0, r5
 800dc34:	4621      	mov	r1, r4
 800dc36:	f7ff ff5f 	bl	800daf8 <__sflush_r>
 800dc3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc3c:	07da      	lsls	r2, r3, #31
 800dc3e:	4605      	mov	r5, r0
 800dc40:	d4e4      	bmi.n	800dc0c <_fflush_r+0xc>
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	059b      	lsls	r3, r3, #22
 800dc46:	d4e1      	bmi.n	800dc0c <_fflush_r+0xc>
 800dc48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc4a:	f7ff fb7f 	bl	800d34c <__retarget_lock_release_recursive>
 800dc4e:	e7dd      	b.n	800dc0c <_fflush_r+0xc>

0800dc50 <__swhatbuf_r>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	460c      	mov	r4, r1
 800dc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc58:	2900      	cmp	r1, #0
 800dc5a:	b096      	sub	sp, #88	@ 0x58
 800dc5c:	4615      	mov	r5, r2
 800dc5e:	461e      	mov	r6, r3
 800dc60:	da0d      	bge.n	800dc7e <__swhatbuf_r+0x2e>
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc68:	f04f 0100 	mov.w	r1, #0
 800dc6c:	bf14      	ite	ne
 800dc6e:	2340      	movne	r3, #64	@ 0x40
 800dc70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc74:	2000      	movs	r0, #0
 800dc76:	6031      	str	r1, [r6, #0]
 800dc78:	602b      	str	r3, [r5, #0]
 800dc7a:	b016      	add	sp, #88	@ 0x58
 800dc7c:	bd70      	pop	{r4, r5, r6, pc}
 800dc7e:	466a      	mov	r2, sp
 800dc80:	f000 f848 	bl	800dd14 <_fstat_r>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	dbec      	blt.n	800dc62 <__swhatbuf_r+0x12>
 800dc88:	9901      	ldr	r1, [sp, #4]
 800dc8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc92:	4259      	negs	r1, r3
 800dc94:	4159      	adcs	r1, r3
 800dc96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc9a:	e7eb      	b.n	800dc74 <__swhatbuf_r+0x24>

0800dc9c <__smakebuf_r>:
 800dc9c:	898b      	ldrh	r3, [r1, #12]
 800dc9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dca0:	079d      	lsls	r5, r3, #30
 800dca2:	4606      	mov	r6, r0
 800dca4:	460c      	mov	r4, r1
 800dca6:	d507      	bpl.n	800dcb8 <__smakebuf_r+0x1c>
 800dca8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dcac:	6023      	str	r3, [r4, #0]
 800dcae:	6123      	str	r3, [r4, #16]
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	6163      	str	r3, [r4, #20]
 800dcb4:	b003      	add	sp, #12
 800dcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcb8:	ab01      	add	r3, sp, #4
 800dcba:	466a      	mov	r2, sp
 800dcbc:	f7ff ffc8 	bl	800dc50 <__swhatbuf_r>
 800dcc0:	9f00      	ldr	r7, [sp, #0]
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	4639      	mov	r1, r7
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	f7ff fbbc 	bl	800d444 <_malloc_r>
 800dccc:	b948      	cbnz	r0, 800dce2 <__smakebuf_r+0x46>
 800dcce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcd2:	059a      	lsls	r2, r3, #22
 800dcd4:	d4ee      	bmi.n	800dcb4 <__smakebuf_r+0x18>
 800dcd6:	f023 0303 	bic.w	r3, r3, #3
 800dcda:	f043 0302 	orr.w	r3, r3, #2
 800dcde:	81a3      	strh	r3, [r4, #12]
 800dce0:	e7e2      	b.n	800dca8 <__smakebuf_r+0xc>
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	6020      	str	r0, [r4, #0]
 800dce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcea:	81a3      	strh	r3, [r4, #12]
 800dcec:	9b01      	ldr	r3, [sp, #4]
 800dcee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dcf2:	b15b      	cbz	r3, 800dd0c <__smakebuf_r+0x70>
 800dcf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	f000 f81d 	bl	800dd38 <_isatty_r>
 800dcfe:	b128      	cbz	r0, 800dd0c <__smakebuf_r+0x70>
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	f023 0303 	bic.w	r3, r3, #3
 800dd06:	f043 0301 	orr.w	r3, r3, #1
 800dd0a:	81a3      	strh	r3, [r4, #12]
 800dd0c:	89a3      	ldrh	r3, [r4, #12]
 800dd0e:	431d      	orrs	r5, r3
 800dd10:	81a5      	strh	r5, [r4, #12]
 800dd12:	e7cf      	b.n	800dcb4 <__smakebuf_r+0x18>

0800dd14 <_fstat_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4d07      	ldr	r5, [pc, #28]	@ (800dd34 <_fstat_r+0x20>)
 800dd18:	2300      	movs	r3, #0
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	4608      	mov	r0, r1
 800dd1e:	4611      	mov	r1, r2
 800dd20:	602b      	str	r3, [r5, #0]
 800dd22:	f7f3 fb46 	bl	80013b2 <_fstat>
 800dd26:	1c43      	adds	r3, r0, #1
 800dd28:	d102      	bne.n	800dd30 <_fstat_r+0x1c>
 800dd2a:	682b      	ldr	r3, [r5, #0]
 800dd2c:	b103      	cbz	r3, 800dd30 <_fstat_r+0x1c>
 800dd2e:	6023      	str	r3, [r4, #0]
 800dd30:	bd38      	pop	{r3, r4, r5, pc}
 800dd32:	bf00      	nop
 800dd34:	20006130 	.word	0x20006130

0800dd38 <_isatty_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d06      	ldr	r5, [pc, #24]	@ (800dd54 <_isatty_r+0x1c>)
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4608      	mov	r0, r1
 800dd42:	602b      	str	r3, [r5, #0]
 800dd44:	f7f3 fb45 	bl	80013d2 <_isatty>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d102      	bne.n	800dd52 <_isatty_r+0x1a>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	b103      	cbz	r3, 800dd52 <_isatty_r+0x1a>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	20006130 	.word	0x20006130

0800dd58 <_sbrk_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4d06      	ldr	r5, [pc, #24]	@ (800dd74 <_sbrk_r+0x1c>)
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	602b      	str	r3, [r5, #0]
 800dd64:	f7f3 fb4e 	bl	8001404 <_sbrk>
 800dd68:	1c43      	adds	r3, r0, #1
 800dd6a:	d102      	bne.n	800dd72 <_sbrk_r+0x1a>
 800dd6c:	682b      	ldr	r3, [r5, #0]
 800dd6e:	b103      	cbz	r3, 800dd72 <_sbrk_r+0x1a>
 800dd70:	6023      	str	r3, [r4, #0]
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	20006130 	.word	0x20006130

0800dd78 <_init>:
 800dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7a:	bf00      	nop
 800dd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7e:	bc08      	pop	{r3}
 800dd80:	469e      	mov	lr, r3
 800dd82:	4770      	bx	lr

0800dd84 <_fini>:
 800dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd86:	bf00      	nop
 800dd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd8a:	bc08      	pop	{r3}
 800dd8c:	469e      	mov	lr, r3
 800dd8e:	4770      	bx	lr
